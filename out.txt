
running 3 tests
Starting DirEntry("samples/simple-uf.smtv1.smt2")
starting 8 iterations
Starting DirEntry("samples/extract-concat-5.smtv1.smt2")
Commands([Generic(["(", "set-option :incremental false", ")"]), Generic(["(", "set-info :status sat", ")"]), Logic(Other("QF_AUF")), Generic(["(", "declare-sort Index 0", ")"]), Generic(["(", "declare-sort Element 0", ")"]), Generic(["(", "declare-fun v2 ", "(", ")", " Index", ")"]), Generic(["(", "declare-fun v0 ", "(", ")", " ", "(", "Array Index Element", ")", ")"]), Generic(["(", "declare-fun v3 ", "(", ")", " Element", ")"]), Generic(["(", "declare-fun v1 ", "(", ")", " Index", ")"]), CheckSatAssuming(Compound([Let([(Var("_let_0"), Compound([Symbol(Token("select")), Symbol(Token("v0")), Symbol(Token("v2"))]))], Let([(Var("_let_1"), Compound([Symbol(Token("store")), Symbol(Token("v0")), Symbol(Token("v1")), Symbol(Token("v3"))]))], Let([(Var("_let_2"), Compound([Symbol(Token("store")), Symbol(Token("_let_1")), Symbol(Token("v2")), Symbol(Token("_let_0"))]))], Let([(Var("_let_3"), Compound([Symbol(Token("store")), Compound([Symbol(Token("store")), Symbol(Token("_let_1")), Symbol(Token("v2")), Symbol(Token("v3"))]), Symbol(Token("v1")), Symbol(Token("_let_0"))]))], Let([(Var("_let_4"), Compound([Symbol(Token("select")), Compound([Symbol(Token("store")), Symbol(Token("_let_1")), Symbol(Token("v2")), Symbol(Token("v3"))]), Symbol(Token("v1"))]))], BExp(Xor, [Symbol(Token("true")), BExp(Or, [BExp(Equals, [Symbol(Token("v3")), Symbol(Token("_let_0"))]), BExp(Distinct, [Compound([Symbol(Token("ite")), BExp(Equals, [Compound([Symbol(Token("store")), Symbol(Token("_let_1")), Symbol(Token("v2")), Symbol(Token("v3"))]), Symbol(Token("_let_2"))]), Compound([Symbol(Token("store")), Symbol(Token("_let_1")), Symbol(Token("v2")), Symbol(Token("v3"))]), Symbol(Token("_let_3"))]), Compound([Symbol(Token("store")), Compound([Symbol(Token("store")), Symbol(Token("_let_1")), Symbol(Token("v2")), Symbol(Token("v3"))]), Symbol(Token("v1")), Compound([Symbol(Token("ite")), BExp(Equals, [Symbol(Token("v0")), Symbol(Token("_let_2"))]), Compound([Symbol(Token("ite")), BExp(Distinct, [Compound([Symbol(Token("store")), Symbol(Token("_let_1")), Symbol(Token("v2")), Symbol(Token("v3"))]), Symbol(Token("_let_3"))]), Symbol(Token("v3")), Compound([Symbol(Token("ite")), BExp(Distinct, [Symbol(Token("v3")), Symbol(Token("_let_4"))]), Symbol(Token("v3")), Symbol(Token("_let_4"))])]), Compound([Symbol(Token("ite")), BExp(Equals, [Symbol(Token("_let_1")), Symbol(Token("_let_2"))]), Symbol(Token("_let_0")), Symbol(Token("_let_0"))])])])])])]))))))]))])
test tests::quick_visual ... ok
Starting DirEntry("samples/smt2output.smt2")
Starting DirEntry("samples/bv_to_int2.smt2")
Starting DirEntry("samples/mult-pow2-negative.smt2")
Starting DirEntry("samples/issue4007-rint-uf.smt2")
Starting DirEntry("samples/card3-ground.smt2")
Starting DirEntry("samples/bv2nat-ground.smt2")
Starting DirEntry("samples/str-code-unsat-3.smt2")
Starting DirEntry("samples/horn-ground-pre-post.smt2")
Starting DirEntry("samples/strip-endpoint-itos.smt2")
Starting DirEntry("samples/translator-example-input.smt2")
Starting DirEntry("samples/ackermann8.smt2")
Starting DirEntry("samples/loop006.smt2")
Starting DirEntry("samples/bug272.minimized.smtv1.smt2")
test tests::parse_unparse ... FAILED
test tests::smoke_test ... ok

failures:

failures:
    tests::parse_unparse

test result: FAILED. 2 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out

