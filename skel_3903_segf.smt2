(set-option :smt.arith.solver 4)
(declare-const GEN1 Int)
(declare-const GEN2 Int)
(declare-const GEN3 Int)
(declare-const GEN4 Int)
(declare-const GEN5 Int)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(set-option :smt.phase_selection 5)
(set-option :rewriter.eq2ineq true)
(declare-fun a () Int)
(declare-fun b () Int)
(declare-fun c () Int)
(declare-fun d () Int)
(assert (= GEN1 c GEN2))
(assert (or (= d GEN3) (= d GEN4)))
(assert (= (div b a) (+ d c) GEN5))
(assert (= BAV6 (= GEN1 c GEN2)))
(assert (= BAV7 (or (= d GEN3) (= d GEN4))))
(assert (= BAV8 (= d GEN3)))
(assert (= BAV9 (= d GEN4)))
(assert (= BAV10 (= (div b a) (+ d c) GEN5)))
(check-sat)