(set-option :smt.string_solver z3str3)
(declare-const GEN1 Int)
(declare-const GEN2 Int)
(declare-const GEN3 String)
(declare-const GEN4 Int)
(declare-const GEN5 String)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(set-option :smt.str.fixed_length_models false)
(set-option :smt.phase_selection 5)
(declare-fun f () String)
(declare-fun a () Int)
(declare-fun b () Int)
(declare-fun g () String)
(declare-fun c () String)
(declare-fun d () String)
(declare-fun shifted_T4_3 () String)
(declare-fun shifted_T5_3 () String)
(declare-fun e () Bool)
(assert (ite e (and (= b a (str.len shifted_T4_3) GEN1 (str.len (str.substr f GEN2 (str.len g)))) (= c d shifted_T5_3 GEN3)) (and (= b GEN4) (not (str.in.re c (str.to.re GEN5))))))
(assert (= BAV6 (and (= b a (str.len shifted_T4_3) GEN1 (str.len (str.substr f GEN2 (str.len g)))) (= c d shifted_T5_3 GEN3))))
(assert (= BAV7 (= b a (str.len shifted_T4_3) GEN1 (str.len (str.substr f GEN2 (str.len g))))))
(assert (= BAV8 (= c d shifted_T5_3 GEN3)))
(assert (= BAV9 (and (= b GEN4) (not (str.in.re c (str.to.re GEN5))))))
(assert (= BAV10 (= b GEN4)))
(check-sat)