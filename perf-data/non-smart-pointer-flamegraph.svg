<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1094" onload="init(evt)" viewBox="0 0 1200 1094" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1094" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1077.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1077.00"> </text><svg id="frames" x="10" width="1180"><g><title>cswap::parser::bin (26 samples, 0.17%)</title><rect x="0.1117%" y="853" width="0.1709%" height="15" fill="rgb(227,0,7)"/><text x="0.3617%" y="863.50"></text></g><g><title>nom::branch::alt::_{{closure}} (26 samples, 0.17%)</title><rect x="0.1117%" y="837" width="0.1709%" height="15" fill="rgb(217,0,24)"/><text x="0.3617%" y="847.50"></text></g><g><title>&lt; (26 samples, 0.17%)</title><rect x="0.1117%" y="821" width="0.1709%" height="15" fill="rgb(221,193,54)"/><text x="0.3617%" y="831.50"></text></g><g><title>nom::multi::many1::_{{closure}} (17 samples, 0.11%)</title><rect x="0.1709%" y="805" width="0.1117%" height="15" fill="rgb(248,212,6)"/><text x="0.4209%" y="815.50"></text></g><g><title>nom::branch::alt::_{{closure}} (16 samples, 0.11%)</title><rect x="0.1775%" y="789" width="0.1052%" height="15" fill="rgb(208,68,35)"/><text x="0.4275%" y="799.50"></text></g><g><title>&lt; (16 samples, 0.11%)</title><rect x="0.1775%" y="773" width="0.1052%" height="15" fill="rgb(232,128,0)"/><text x="0.4275%" y="783.50"></text></g><g><title>cswap::parser::decimal (28 samples, 0.18%)</title><rect x="0.2826%" y="853" width="0.1840%" height="15" fill="rgb(207,160,47)"/><text x="0.5326%" y="863.50"></text></g><g><title>nom::number::complete::recognize_float (28 samples, 0.18%)</title><rect x="0.2826%" y="837" width="0.1840%" height="15" fill="rgb(228,23,34)"/><text x="0.5326%" y="847.50"></text></g><g><title>nom::combinator::recognize::_{{closure}} (28 samples, 0.18%)</title><rect x="0.2826%" y="821" width="0.1840%" height="15" fill="rgb(218,30,26)"/><text x="0.5326%" y="831.50"></text></g><g><title>nom::sequence::tuple::_{{closure}} (28 samples, 0.18%)</title><rect x="0.2826%" y="805" width="0.1840%" height="15" fill="rgb(220,122,19)"/><text x="0.5326%" y="815.50"></text></g><g><title>&lt; (28 samples, 0.18%)</title><rect x="0.2826%" y="789" width="0.1840%" height="15" fill="rgb(250,228,42)"/><text x="0.5326%" y="799.50"></text></g><g><title>cswap::parser::constant (77 samples, 0.51%)</title><rect x="0.1117%" y="933" width="0.5061%" height="15" fill="rgb(240,193,28)"/><text x="0.3617%" y="943.50"></text></g><g><title>nom::branch::alt::_{{closure}} (77 samples, 0.51%)</title><rect x="0.1117%" y="917" width="0.5061%" height="15" fill="rgb(216,20,37)"/><text x="0.3617%" y="927.50"></text></g><g><title>&lt; (77 samples, 0.51%)</title><rect x="0.1117%" y="901" width="0.5061%" height="15" fill="rgb(206,188,39)"/><text x="0.3617%" y="911.50"></text></g><g><title>nom::combinator::map::_{{closure}} (77 samples, 0.51%)</title><rect x="0.1117%" y="885" width="0.5061%" height="15" fill="rgb(217,207,13)"/><text x="0.3617%" y="895.50"></text></g><g><title>core::ops::function::Fn::call (77 samples, 0.51%)</title><rect x="0.1117%" y="869" width="0.5061%" height="15" fill="rgb(231,73,38)"/><text x="0.3617%" y="879.50"></text></g><g><title>core::ops::function::Fn::call (81 samples, 0.53%)</title><rect x="0.1117%" y="949" width="0.5324%" height="15" fill="rgb(225,20,46)"/><text x="0.3617%" y="959.50"></text></g><g><title>core::ops::function::Fn::call (44 samples, 0.29%)</title><rect x="0.8413%" y="821" width="0.2892%" height="15" fill="rgb(210,31,41)"/><text x="1.0913%" y="831.50"></text></g><g><title>nom::character::complete::multispace0 (25 samples, 0.16%)</title><rect x="0.9662%" y="805" width="0.1643%" height="15" fill="rgb(221,200,47)"/><text x="1.2162%" y="815.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputTakeAtPosition&gt;::split_at_position_complete (25 samples, 0.16%)</title><rect x="0.9662%" y="789" width="0.1643%" height="15" fill="rgb(226,26,5)"/><text x="1.2162%" y="799.50"></text></g><g><title>nom::combinator::map::_{{closure}} (71 samples, 0.47%)</title><rect x="0.6704%" y="853" width="0.4666%" height="15" fill="rgb(249,33,26)"/><text x="0.9204%" y="863.50"></text></g><g><title>nom::sequence::delimited::_{{closure}} (53 samples, 0.35%)</title><rect x="0.7887%" y="837" width="0.3483%" height="15" fill="rgb(235,183,28)"/><text x="1.0387%" y="847.50"></text></g><g><title>nom::sequence::delimited::_{{closure}} (171 samples, 1.12%)</title><rect x="0.1117%" y="965" width="1.1239%" height="15" fill="rgb(221,5,38)"/><text x="0.3617%" y="975.50"></text></g><g><title>nom::sequence::delimited::_{{closure}} (90 samples, 0.59%)</title><rect x="0.6441%" y="949" width="0.5915%" height="15" fill="rgb(247,18,42)"/><text x="0.8941%" y="959.50"></text></g><g><title>nom::multi::many1::_{{closure}} (90 samples, 0.59%)</title><rect x="0.6441%" y="933" width="0.5915%" height="15" fill="rgb(241,131,45)"/><text x="0.8941%" y="943.50"></text></g><g><title>core::ops::function::Fn::call (90 samples, 0.59%)</title><rect x="0.6441%" y="917" width="0.5915%" height="15" fill="rgb(249,31,29)"/><text x="0.8941%" y="927.50"></text></g><g><title>cswap::parser::sexp (90 samples, 0.59%)</title><rect x="0.6441%" y="901" width="0.5915%" height="15" fill="rgb(225,111,53)"/><text x="0.8941%" y="911.50"></text></g><g><title>nom::branch::alt::_{{closure}} (90 samples, 0.59%)</title><rect x="0.6441%" y="885" width="0.5915%" height="15" fill="rgb(238,160,17)"/><text x="0.8941%" y="895.50"></text></g><g><title>&lt; (90 samples, 0.59%)</title><rect x="0.6441%" y="869" width="0.5915%" height="15" fill="rgb(214,148,48)"/><text x="0.8941%" y="879.50"></text></g><g><title>core::str::&lt;impl str&gt;::find (16 samples, 0.11%)</title><rect x="1.3539%" y="773" width="0.1052%" height="15" fill="rgb(232,36,49)"/><text x="1.6039%" y="783.50"></text></g><g><title>core::ops::function::Fn::call (25 samples, 0.16%)</title><rect x="1.3276%" y="821" width="0.1643%" height="15" fill="rgb(209,103,24)"/><text x="1.5776%" y="831.50"></text></g><g><title>nom::character::complete::multispace0 (21 samples, 0.14%)</title><rect x="1.3539%" y="805" width="0.1380%" height="15" fill="rgb(229,88,8)"/><text x="1.6039%" y="815.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputTakeAtPosition&gt;::split_at_position_complete (21 samples, 0.14%)</title><rect x="1.3539%" y="789" width="0.1380%" height="15" fill="rgb(213,181,19)"/><text x="1.6039%" y="799.50"></text></g><g><title>nom::combinator::map::_{{closure}} (29 samples, 0.19%)</title><rect x="1.3276%" y="853" width="0.1906%" height="15" fill="rgb(254,191,54)"/><text x="1.5776%" y="863.50"></text></g><g><title>nom::sequence::delimited::_{{closure}} (29 samples, 0.19%)</title><rect x="1.3276%" y="837" width="0.1906%" height="15" fill="rgb(241,83,37)"/><text x="1.5776%" y="847.50"></text></g><g><title>nom::combinator::map::_{{closure}} (232 samples, 1.52%)</title><rect x="0.0329%" y="981" width="1.5248%" height="15" fill="rgb(233,36,39)"/><text x="0.2829%" y="991.50"></text></g><g><title>nom::sequence::tuple::_{{closure}} (49 samples, 0.32%)</title><rect x="1.2356%" y="965" width="0.3221%" height="15" fill="rgb(226,3,54)"/><text x="1.4856%" y="975.50"></text></g><g><title>&lt; (49 samples, 0.32%)</title><rect x="1.2356%" y="949" width="0.3221%" height="15" fill="rgb(245,192,40)"/><text x="1.4856%" y="959.50"></text></g><g><title>nom::multi::many1::_{{closure}} (35 samples, 0.23%)</title><rect x="1.3276%" y="933" width="0.2300%" height="15" fill="rgb(238,167,29)"/><text x="1.5776%" y="943.50"></text></g><g><title>core::ops::function::Fn::call (35 samples, 0.23%)</title><rect x="1.3276%" y="917" width="0.2300%" height="15" fill="rgb(232,182,51)"/><text x="1.5776%" y="927.50"></text></g><g><title>cswap::parser::sexp (35 samples, 0.23%)</title><rect x="1.3276%" y="901" width="0.2300%" height="15" fill="rgb(231,60,39)"/><text x="1.5776%" y="911.50"></text></g><g><title>nom::branch::alt::_{{closure}} (35 samples, 0.23%)</title><rect x="1.3276%" y="885" width="0.2300%" height="15" fill="rgb(208,69,12)"/><text x="1.5776%" y="895.50"></text></g><g><title>&lt; (35 samples, 0.23%)</title><rect x="1.3276%" y="869" width="0.2300%" height="15" fill="rgb(235,93,37)"/><text x="1.5776%" y="879.50"></text></g><g><title>cswap::parser::bool_core_ops (17 samples, 0.11%)</title><rect x="1.6168%" y="821" width="0.1117%" height="15" fill="rgb(213,116,39)"/><text x="1.8668%" y="831.50"></text></g><g><title>nom::sequence::delimited::_{{closure}} (17 samples, 0.11%)</title><rect x="1.6168%" y="805" width="0.1117%" height="15" fill="rgb(222,207,29)"/><text x="1.8668%" y="815.50"></text></g><g><title>core::ops::function::Fn::call (35 samples, 0.23%)</title><rect x="1.6168%" y="837" width="0.2300%" height="15" fill="rgb(206,96,30)"/><text x="1.8668%" y="847.50"></text></g><g><title>cswap::parser::bool_int_ops (18 samples, 0.12%)</title><rect x="1.7286%" y="821" width="0.1183%" height="15" fill="rgb(218,138,4)"/><text x="1.9786%" y="831.50"></text></g><g><title>nom::sequence::delimited::_{{closure}} (18 samples, 0.12%)</title><rect x="1.7286%" y="805" width="0.1183%" height="15" fill="rgb(250,191,14)"/><text x="1.9786%" y="815.50"></text></g><g><title>core::ops::function::Fn::call (39 samples, 0.26%)</title><rect x="1.6168%" y="965" width="0.2563%" height="15" fill="rgb(239,60,40)"/><text x="1.8668%" y="975.50"></text></g><g><title>cswap::parser::bool_sexp (39 samples, 0.26%)</title><rect x="1.6168%" y="949" width="0.2563%" height="15" fill="rgb(206,27,48)"/><text x="1.8668%" y="959.50"></text></g><g><title>nom::sequence::delimited::_{{closure}} (39 samples, 0.26%)</title><rect x="1.6168%" y="933" width="0.2563%" height="15" fill="rgb(225,35,8)"/><text x="1.8668%" y="943.50"></text></g><g><title>nom::branch::alt::_{{closure}} (39 samples, 0.26%)</title><rect x="1.6168%" y="917" width="0.2563%" height="15" fill="rgb(250,213,24)"/><text x="1.8668%" y="927.50"></text></g><g><title>&lt; (39 samples, 0.26%)</title><rect x="1.6168%" y="901" width="0.2563%" height="15" fill="rgb(247,123,22)"/><text x="1.8668%" y="911.50"></text></g><g><title>nom::combinator::map::_{{closure}} (39 samples, 0.26%)</title><rect x="1.6168%" y="885" width="0.2563%" height="15" fill="rgb(231,138,38)"/><text x="1.8668%" y="895.50"></text></g><g><title>nom::sequence::tuple::_{{closure}} (39 samples, 0.26%)</title><rect x="1.6168%" y="869" width="0.2563%" height="15" fill="rgb(231,145,46)"/><text x="1.8668%" y="879.50"></text></g><g><title>&lt; (39 samples, 0.26%)</title><rect x="1.6168%" y="853" width="0.2563%" height="15" fill="rgb(251,118,11)"/><text x="1.8668%" y="863.50"></text></g><g><title>&lt; (282 samples, 1.85%)</title><rect x="0.0329%" y="997" width="1.8534%" height="15" fill="rgb(217,147,25)"/><text x="0.2829%" y="1007.50">&lt;</text></g><g><title>nom::sequence::delimited::_{{closure}} (41 samples, 0.27%)</title><rect x="1.6168%" y="981" width="0.2695%" height="15" fill="rgb(247,81,37)"/><text x="1.8668%" y="991.50"></text></g><g><title>cswap::perf_exec (51 samples, 0.34%)</title><rect x="2.2675%" y="997" width="0.3352%" height="15" fill="rgb(209,12,38)"/><text x="2.5175%" y="1007.50"></text></g><g><title>cswap::rl (35 samples, 0.23%)</title><rect x="2.3727%" y="981" width="0.2300%" height="15" fill="rgb(227,1,9)"/><text x="2.6227%" y="991.50"></text></g><g><title>cswap::rl_c (35 samples, 0.23%)</title><rect x="2.3727%" y="965" width="0.2300%" height="15" fill="rgb(248,47,43)"/><text x="2.6227%" y="975.50"></text></g><g><title>cswap::rl_s (35 samples, 0.23%)</title><rect x="2.3727%" y="949" width="0.2300%" height="15" fill="rgb(221,10,30)"/><text x="2.6227%" y="959.50"></text></g><g><title>cswap::rl_s (35 samples, 0.23%)</title><rect x="2.3727%" y="933" width="0.2300%" height="15" fill="rgb(210,229,1)"/><text x="2.6227%" y="943.50"></text></g><g><title>cswap::rl_s (27 samples, 0.18%)</title><rect x="2.4252%" y="917" width="0.1775%" height="15" fill="rgb(222,148,37)"/><text x="2.6752%" y="927.50"></text></g><g><title>cswap::rl_s (18 samples, 0.12%)</title><rect x="2.4844%" y="901" width="0.1183%" height="15" fill="rgb(234,67,33)"/><text x="2.7344%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (74 samples, 0.49%)</title><rect x="2.6224%" y="357" width="0.4864%" height="15" fill="rgb(247,98,35)"/><text x="2.8724%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (74 samples, 0.49%)</title><rect x="2.6224%" y="341" width="0.4864%" height="15" fill="rgb(247,138,52)"/><text x="2.8724%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (74 samples, 0.49%)</title><rect x="2.6224%" y="325" width="0.4864%" height="15" fill="rgb(213,79,30)"/><text x="2.8724%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (27 samples, 0.18%)</title><rect x="2.9313%" y="309" width="0.1775%" height="15" fill="rgb(246,177,23)"/><text x="3.1813%" y="319.50"></text></g><g><title>__memcpy_avx_unaligned (84 samples, 0.55%)</title><rect x="4.5679%" y="213" width="0.5521%" height="15" fill="rgb(230,62,27)"/><text x="4.8179%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend::_{{closure}} (236 samples, 1.55%)</title><rect x="4.4167%" y="229" width="1.5511%" height="15" fill="rgb(216,154,8)"/><text x="4.6667%" y="239.50"></text></g><g><title>core::ptr::write (105 samples, 0.69%)</title><rect x="5.2777%" y="213" width="0.6901%" height="15" fill="rgb(244,35,45)"/><text x="5.5277%" y="223.50"></text></g><g><title>__memcpy_avx_unaligned (93 samples, 0.61%)</title><rect x="5.3566%" y="197" width="0.6112%" height="15" fill="rgb(251,115,12)"/><text x="5.6066%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (479 samples, 3.15%)</title><rect x="4.2984%" y="245" width="3.1482%" height="15" fill="rgb(240,54,50)"/><text x="4.5484%" y="255.50">cor..</text></g><g><title>__memcpy_avx_unaligned (225 samples, 1.48%)</title><rect x="5.9678%" y="229" width="1.4788%" height="15" fill="rgb(233,84,52)"/><text x="6.2178%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (74 samples, 0.49%)</title><rect x="11.2783%" y="133" width="0.4864%" height="15" fill="rgb(207,117,47)"/><text x="11.5283%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (74 samples, 0.49%)</title><rect x="11.2783%" y="117" width="0.4864%" height="15" fill="rgb(249,43,39)"/><text x="11.5283%" y="127.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (74 samples, 0.49%)</title><rect x="11.2783%" y="101" width="0.4864%" height="15" fill="rgb(209,38,44)"/><text x="11.5283%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (74 samples, 0.49%)</title><rect x="11.2783%" y="85" width="0.4864%" height="15" fill="rgb(236,212,23)"/><text x="11.5283%" y="95.50"></text></g><g><title>__memmove_avx_unaligned_erms (62 samples, 0.41%)</title><rect x="11.3572%" y="69" width="0.4075%" height="15" fill="rgb(242,79,21)"/><text x="11.6072%" y="79.50"></text></g><g><title>__GI___libc_malloc (307 samples, 2.02%)</title><rect x="11.8304%" y="53" width="2.0177%" height="15" fill="rgb(211,96,35)"/><text x="12.0804%" y="63.50">_..</text></g><g><title>_int_malloc (173 samples, 1.14%)</title><rect x="12.7111%" y="37" width="1.1370%" height="15" fill="rgb(253,215,40)"/><text x="12.9611%" y="47.50"></text></g><g><title>&lt;cswap::parser::SExp as core::clone::Clone&gt;::clone (1,722 samples, 11.32%)</title><rect x="2.6224%" y="949" width="11.3178%" height="15" fill="rgb(211,81,21)"/><text x="2.8724%" y="959.50">&lt;cswap::parser::S..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (1,722 samples, 11.32%)</title><rect x="2.6224%" y="933" width="11.3178%" height="15" fill="rgb(208,190,38)"/><text x="2.8724%" y="943.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1,722 samples, 11.32%)</title><rect x="2.6224%" y="917" width="11.3178%" height="15" fill="rgb(235,213,38)"/><text x="2.8724%" y="927.50">alloc::slice::&lt;im..</text></g><g><title>alloc::slice::hack::to_vec (1,722 samples, 11.32%)</title><rect x="2.6224%" y="901" width="11.3178%" height="15" fill="rgb(237,122,38)"/><text x="2.8724%" y="911.50">alloc::slice::hac..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (1,722 samples, 11.32%)</title><rect x="2.6224%" y="885" width="11.3178%" height="15" fill="rgb(244,218,35)"/><text x="2.8724%" y="895.50">alloc::vec::Vec&lt;T..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (1,722 samples, 11.32%)</title><rect x="2.6224%" y="869" width="11.3178%" height="15" fill="rgb(240,68,47)"/><text x="2.8724%" y="879.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,722 samples, 11.32%)</title><rect x="2.6224%" y="853" width="11.3178%" height="15" fill="rgb(210,16,53)"/><text x="2.8724%" y="863.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1,722 samples, 11.32%)</title><rect x="2.6224%" y="837" width="11.3178%" height="15" fill="rgb(235,124,12)"/><text x="2.8724%" y="847.50">core::iter::trait..</text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,722 samples, 11.32%)</title><rect x="2.6224%" y="821" width="11.3178%" height="15" fill="rgb(224,169,11)"/><text x="2.8724%" y="831.50">&lt;core::iter::adap..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,722 samples, 11.32%)</title><rect x="2.6224%" y="805" width="11.3178%" height="15" fill="rgb(250,166,2)"/><text x="2.8724%" y="815.50">&lt;core::iter::adap..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (1,722 samples, 11.32%)</title><rect x="2.6224%" y="789" width="11.3178%" height="15" fill="rgb(242,216,29)"/><text x="2.8724%" y="799.50">core::iter::trait..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1,722 samples, 11.32%)</title><rect x="2.6224%" y="773" width="11.3178%" height="15" fill="rgb(230,116,27)"/><text x="2.8724%" y="783.50">core::iter::trait..</text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::_{{closure}} (1,722 samples, 11.32%)</title><rect x="2.6224%" y="757" width="11.3178%" height="15" fill="rgb(228,99,48)"/><text x="2.8724%" y="767.50">core::iter::trait..</text></g><g><title>core::iter::adapters::map_fold::_{{closure}} (1,722 samples, 11.32%)</title><rect x="2.6224%" y="741" width="11.3178%" height="15" fill="rgb(253,11,6)"/><text x="2.8724%" y="751.50">core::iter::adapt..</text></g><g><title>core::ops::function::FnMut::call_mut (1,722 samples, 11.32%)</title><rect x="2.6224%" y="725" width="11.3178%" height="15" fill="rgb(247,143,39)"/><text x="2.8724%" y="735.50">core::ops::functi..</text></g><g><title>&lt;cswap::parser::SExp as core::clone::Clone&gt;::clone (1,722 samples, 11.32%)</title><rect x="2.6224%" y="709" width="11.3178%" height="15" fill="rgb(236,97,10)"/><text x="2.8724%" y="719.50">&lt;cswap::parser::S..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (1,722 samples, 11.32%)</title><rect x="2.6224%" y="693" width="11.3178%" height="15" fill="rgb(233,208,19)"/><text x="2.8724%" y="703.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1,722 samples, 11.32%)</title><rect x="2.6224%" y="677" width="11.3178%" height="15" fill="rgb(216,164,2)"/><text x="2.8724%" y="687.50">alloc::slice::&lt;im..</text></g><g><title>alloc::slice::hack::to_vec (1,722 samples, 11.32%)</title><rect x="2.6224%" y="661" width="11.3178%" height="15" fill="rgb(220,129,5)"/><text x="2.8724%" y="671.50">alloc::slice::hac..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (1,722 samples, 11.32%)</title><rect x="2.6224%" y="645" width="11.3178%" height="15" fill="rgb(242,17,10)"/><text x="2.8724%" y="655.50">alloc::vec::Vec&lt;T..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (1,722 samples, 11.32%)</title><rect x="2.6224%" y="629" width="11.3178%" height="15" fill="rgb(242,107,0)"/><text x="2.8724%" y="639.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,722 samples, 11.32%)</title><rect x="2.6224%" y="613" width="11.3178%" height="15" fill="rgb(251,28,31)"/><text x="2.8724%" y="623.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1,722 samples, 11.32%)</title><rect x="2.6224%" y="597" width="11.3178%" height="15" fill="rgb(233,223,10)"/><text x="2.8724%" y="607.50">core::iter::trait..</text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,722 samples, 11.32%)</title><rect x="2.6224%" y="581" width="11.3178%" height="15" fill="rgb(215,21,27)"/><text x="2.8724%" y="591.50">&lt;core::iter::adap..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,722 samples, 11.32%)</title><rect x="2.6224%" y="565" width="11.3178%" height="15" fill="rgb(232,23,21)"/><text x="2.8724%" y="575.50">&lt;core::iter::adap..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (1,722 samples, 11.32%)</title><rect x="2.6224%" y="549" width="11.3178%" height="15" fill="rgb(244,5,23)"/><text x="2.8724%" y="559.50">core::iter::trait..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1,722 samples, 11.32%)</title><rect x="2.6224%" y="533" width="11.3178%" height="15" fill="rgb(226,81,46)"/><text x="2.8724%" y="543.50">core::iter::trait..</text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::_{{closure}} (1,722 samples, 11.32%)</title><rect x="2.6224%" y="517" width="11.3178%" height="15" fill="rgb(247,70,30)"/><text x="2.8724%" y="527.50">core::iter::trait..</text></g><g><title>core::iter::adapters::map_fold::_{{closure}} (1,722 samples, 11.32%)</title><rect x="2.6224%" y="501" width="11.3178%" height="15" fill="rgb(212,68,19)"/><text x="2.8724%" y="511.50">core::iter::adapt..</text></g><g><title>core::ops::function::FnMut::call_mut (1,722 samples, 11.32%)</title><rect x="2.6224%" y="485" width="11.3178%" height="15" fill="rgb(240,187,13)"/><text x="2.8724%" y="495.50">core::ops::functi..</text></g><g><title>&lt;cswap::parser::SExp as core::clone::Clone&gt;::clone (1,722 samples, 11.32%)</title><rect x="2.6224%" y="469" width="11.3178%" height="15" fill="rgb(223,113,26)"/><text x="2.8724%" y="479.50">&lt;cswap::parser::S..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (1,722 samples, 11.32%)</title><rect x="2.6224%" y="453" width="11.3178%" height="15" fill="rgb(206,192,2)"/><text x="2.8724%" y="463.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1,722 samples, 11.32%)</title><rect x="2.6224%" y="437" width="11.3178%" height="15" fill="rgb(241,108,4)"/><text x="2.8724%" y="447.50">alloc::slice::&lt;im..</text></g><g><title>alloc::slice::hack::to_vec (1,722 samples, 11.32%)</title><rect x="2.6224%" y="421" width="11.3178%" height="15" fill="rgb(247,173,49)"/><text x="2.8724%" y="431.50">alloc::slice::hac..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (1,722 samples, 11.32%)</title><rect x="2.6224%" y="405" width="11.3178%" height="15" fill="rgb(224,114,35)"/><text x="2.8724%" y="415.50">alloc::vec::Vec&lt;T..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (1,722 samples, 11.32%)</title><rect x="2.6224%" y="389" width="11.3178%" height="15" fill="rgb(245,159,27)"/><text x="2.8724%" y="399.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,722 samples, 11.32%)</title><rect x="2.6224%" y="373" width="11.3178%" height="15" fill="rgb(245,172,44)"/><text x="2.8724%" y="383.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1,648 samples, 10.83%)</title><rect x="3.1088%" y="357" width="10.8314%" height="15" fill="rgb(236,23,11)"/><text x="3.3588%" y="367.50">core::iter::trai..</text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,648 samples, 10.83%)</title><rect x="3.1088%" y="341" width="10.8314%" height="15" fill="rgb(205,117,38)"/><text x="3.3588%" y="351.50">&lt;core::iter::ada..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,648 samples, 10.83%)</title><rect x="3.1088%" y="325" width="10.8314%" height="15" fill="rgb(237,72,25)"/><text x="3.3588%" y="335.50">&lt;core::iter::ada..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (1,648 samples, 10.83%)</title><rect x="3.1088%" y="309" width="10.8314%" height="15" fill="rgb(244,70,9)"/><text x="3.3588%" y="319.50">core::iter::trai..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1,648 samples, 10.83%)</title><rect x="3.1088%" y="293" width="10.8314%" height="15" fill="rgb(217,125,39)"/><text x="3.3588%" y="303.50">core::iter::trai..</text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::_{{closure}} (1,648 samples, 10.83%)</title><rect x="3.1088%" y="277" width="10.8314%" height="15" fill="rgb(235,36,10)"/><text x="3.3588%" y="287.50">core::iter::trai..</text></g><g><title>core::iter::adapters::map_fold::_{{closure}} (1,648 samples, 10.83%)</title><rect x="3.1088%" y="261" width="10.8314%" height="15" fill="rgb(251,123,47)"/><text x="3.3588%" y="271.50">core::iter::adap..</text></g><g><title>core::ops::function::FnMut::call_mut (988 samples, 6.49%)</title><rect x="7.4466%" y="245" width="6.4936%" height="15" fill="rgb(221,13,13)"/><text x="7.6966%" y="255.50">core::ops..</text></g><g><title>&lt;cswap::parser::SExp as core::clone::Clone&gt;::clone (944 samples, 6.20%)</title><rect x="7.7358%" y="229" width="6.2044%" height="15" fill="rgb(238,131,9)"/><text x="7.9858%" y="239.50">&lt;cswap::..</text></g><g><title>&lt;cswap::parser::Symbol as core::clone::Clone&gt;::clone (648 samples, 4.26%)</title><rect x="9.6812%" y="213" width="4.2590%" height="15" fill="rgb(211,50,8)"/><text x="9.9312%" y="223.50">&lt;cswa..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (458 samples, 3.01%)</title><rect x="10.9300%" y="197" width="3.0102%" height="15" fill="rgb(245,182,24)"/><text x="11.1800%" y="207.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (413 samples, 2.71%)</title><rect x="11.2258%" y="181" width="2.7144%" height="15" fill="rgb(242,14,37)"/><text x="11.4758%" y="191.50">&lt;a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (405 samples, 2.66%)</title><rect x="11.2783%" y="165" width="2.6618%" height="15" fill="rgb(246,228,12)"/><text x="11.5283%" y="175.50">al..</text></g><g><title>alloc::slice::hack::to_vec (405 samples, 2.66%)</title><rect x="11.2783%" y="149" width="2.6618%" height="15" fill="rgb(213,55,15)"/><text x="11.5283%" y="159.50">al..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (331 samples, 2.18%)</title><rect x="11.7647%" y="133" width="2.1755%" height="15" fill="rgb(209,9,3)"/><text x="12.0147%" y="143.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (331 samples, 2.18%)</title><rect x="11.7647%" y="117" width="2.1755%" height="15" fill="rgb(230,59,30)"/><text x="12.0147%" y="127.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (331 samples, 2.18%)</title><rect x="11.7647%" y="101" width="2.1755%" height="15" fill="rgb(209,121,21)"/><text x="12.0147%" y="111.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::alloc (324 samples, 2.13%)</title><rect x="11.8107%" y="85" width="2.1295%" height="15" fill="rgb(220,109,13)"/><text x="12.0607%" y="95.50">&lt;..</text></g><g><title>alloc::alloc::alloc (324 samples, 2.13%)</title><rect x="11.8107%" y="69" width="2.1295%" height="15" fill="rgb(232,18,1)"/><text x="12.0607%" y="79.50">a..</text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (137 samples, 0.90%)</title><rect x="15.1101%" y="341" width="0.9004%" height="15" fill="rgb(215,41,42)"/><text x="15.3601%" y="351.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (128 samples, 0.84%)</title><rect x="15.1692%" y="325" width="0.8413%" height="15" fill="rgb(224,123,36)"/><text x="15.4192%" y="335.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (16 samples, 0.11%)</title><rect x="15.9054%" y="309" width="0.1052%" height="15" fill="rgb(240,125,3)"/><text x="16.1554%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (26 samples, 0.17%)</title><rect x="16.1485%" y="325" width="0.1709%" height="15" fill="rgb(205,98,50)"/><text x="16.3985%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (71 samples, 0.47%)</title><rect x="16.0302%" y="341" width="0.4666%" height="15" fill="rgb(205,185,37)"/><text x="16.2802%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (27 samples, 0.18%)</title><rect x="16.3194%" y="325" width="0.1775%" height="15" fill="rgb(238,207,15)"/><text x="16.5694%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (65 samples, 0.43%)</title><rect x="16.5100%" y="341" width="0.4272%" height="15" fill="rgb(213,199,42)"/><text x="16.7600%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (41 samples, 0.27%)</title><rect x="16.6678%" y="325" width="0.2695%" height="15" fill="rgb(235,201,11)"/><text x="16.9178%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok (17 samples, 0.11%)</title><rect x="19.0864%" y="277" width="0.1117%" height="15" fill="rgb(207,46,11)"/><text x="19.3364%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (16 samples, 0.11%)</title><rect x="21.3934%" y="245" width="0.1052%" height="15" fill="rgb(241,35,35)"/><text x="21.6434%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (118 samples, 0.78%)</title><rect x="21.4985%" y="245" width="0.7756%" height="15" fill="rgb(243,32,47)"/><text x="21.7485%" y="255.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (60 samples, 0.39%)</title><rect x="22.2741%" y="245" width="0.3943%" height="15" fill="rgb(247,202,23)"/><text x="22.5241%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (72 samples, 0.47%)</title><rect x="22.7276%" y="229" width="0.4732%" height="15" fill="rgb(219,102,11)"/><text x="22.9776%" y="239.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (37 samples, 0.24%)</title><rect x="23.2008%" y="229" width="0.2432%" height="15" fill="rgb(243,110,44)"/><text x="23.4508%" y="239.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (517 samples, 3.40%)</title><rect x="20.4929%" y="261" width="3.3980%" height="15" fill="rgb(222,74,54)"/><text x="20.7429%" y="271.50">&lt;co..</text></g><g><title>core::slice::Iter&lt;T&gt;::post_inc_start (186 samples, 1.22%)</title><rect x="22.6684%" y="245" width="1.2225%" height="15" fill="rgb(216,99,12)"/><text x="22.9184%" y="255.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (68 samples, 0.45%)</title><rect x="23.4440%" y="229" width="0.4469%" height="15" fill="rgb(226,22,26)"/><text x="23.6940%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::_{{closure}} (82 samples, 0.54%)</title><rect x="23.8909%" y="261" width="0.5389%" height="15" fill="rgb(217,163,10)"/><text x="24.1409%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (979 samples, 6.43%)</title><rect x="19.1982%" y="277" width="6.4344%" height="15" fill="rgb(213,25,53)"/><text x="19.4482%" y="287.50">core::it..</text></g><g><title>core::ptr::drop_in_place (183 samples, 1.20%)</title><rect x="24.4298%" y="261" width="1.2028%" height="15" fill="rgb(252,105,26)"/><text x="24.6798%" y="271.50"></text></g><g><title>core::ptr::drop_in_place (131 samples, 0.86%)</title><rect x="24.7716%" y="245" width="0.8610%" height="15" fill="rgb(220,39,43)"/><text x="25.0216%" y="255.50"></text></g><g><title>core::ptr::drop_in_place (112 samples, 0.74%)</title><rect x="24.8965%" y="229" width="0.7361%" height="15" fill="rgb(229,68,48)"/><text x="25.1465%" y="239.50"></text></g><g><title>core::ptr::drop_in_place (93 samples, 0.61%)</title><rect x="25.0214%" y="213" width="0.6112%" height="15" fill="rgb(252,8,32)"/><text x="25.2714%" y="223.50"></text></g><g><title>core::ptr::drop_in_place (68 samples, 0.45%)</title><rect x="25.1857%" y="197" width="0.4469%" height="15" fill="rgb(223,20,43)"/><text x="25.4357%" y="207.50"></text></g><g><title>&lt;alloc::vec::SetLenOnDrop as core::ops::drop::Drop&gt;::drop (37 samples, 0.24%)</title><rect x="25.3894%" y="181" width="0.2432%" height="15" fill="rgb(229,81,49)"/><text x="25.6394%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,223 samples, 8.04%)</title><rect x="17.7785%" y="309" width="8.0381%" height="15" fill="rgb(236,28,36)"/><text x="18.0285%" y="319.50">&lt;core::iter..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (1,140 samples, 7.49%)</title><rect x="18.3240%" y="293" width="7.4926%" height="15" fill="rgb(249,185,26)"/><text x="18.5740%" y="303.50">core::iter..</text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (28 samples, 0.18%)</title><rect x="25.6326%" y="277" width="0.1840%" height="15" fill="rgb(249,174,33)"/><text x="25.8826%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,292 samples, 8.49%)</title><rect x="17.4696%" y="325" width="8.4916%" height="15" fill="rgb(233,201,37)"/><text x="17.7196%" y="335.50">&lt;core::iter:..</text></g><g><title>core::iter::traits::iterator::Iterator::map (22 samples, 0.14%)</title><rect x="25.8166%" y="309" width="0.1446%" height="15" fill="rgb(221,78,26)"/><text x="26.0666%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1,400 samples, 9.20%)</title><rect x="16.9372%" y="341" width="9.2014%" height="15" fill="rgb(250,127,30)"/><text x="17.1872%" y="351.50">core::iter::t..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call (26 samples, 0.17%)</title><rect x="25.9678%" y="325" width="0.1709%" height="15" fill="rgb(230,49,44)"/><text x="26.2178%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,882 samples, 12.37%)</title><rect x="14.2425%" y="357" width="12.3694%" height="15" fill="rgb(229,67,23)"/><text x="14.4925%" y="367.50">&lt;alloc::vec::Vec&lt;T..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (72 samples, 0.47%)</title><rect x="26.1387%" y="341" width="0.4732%" height="15" fill="rgb(249,83,47)"/><text x="26.3887%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (52 samples, 0.34%)</title><rect x="26.2701%" y="325" width="0.3418%" height="15" fill="rgb(215,43,3)"/><text x="26.5201%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (2,000 samples, 13.14%)</title><rect x="13.9402%" y="373" width="13.1449%" height="15" fill="rgb(238,154,13)"/><text x="14.1902%" y="383.50">&lt;alloc::vec::Vec&lt;T&gt; ..</text></g><g><title>core::iter::traits::iterator::Iterator::cloned (72 samples, 0.47%)</title><rect x="26.6119%" y="357" width="0.4732%" height="15" fill="rgb(219,56,2)"/><text x="26.8619%" y="367.50"></text></g><g><title>core::iter::adapters::Cloned&lt;I&gt;::new (35 samples, 0.23%)</title><rect x="26.8551%" y="341" width="0.2300%" height="15" fill="rgb(233,0,4)"/><text x="27.1051%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (2,067 samples, 13.59%)</title><rect x="13.9402%" y="389" width="13.5853%" height="15" fill="rgb(235,30,7)"/><text x="14.1902%" y="399.50">alloc::vec::Vec&lt;T&gt;::e..</text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (67 samples, 0.44%)</title><rect x="27.0851%" y="373" width="0.4404%" height="15" fill="rgb(250,79,13)"/><text x="27.3351%" y="383.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (24 samples, 0.16%)</title><rect x="29.3000%" y="309" width="0.1577%" height="15" fill="rgb(211,146,34)"/><text x="29.5500%" y="319.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (144 samples, 0.95%)</title><rect x="28.7940%" y="341" width="0.9464%" height="15" fill="rgb(228,22,38)"/><text x="29.0440%" y="351.50"></text></g><g><title>&lt;core::ptr::unique::Unique&lt;T&gt; as core::convert::From&lt;core::ptr::non_null::NonNull&lt;T&gt;&gt;&gt;::from (102 samples, 0.67%)</title><rect x="29.0700%" y="325" width="0.6704%" height="15" fill="rgb(235,168,5)"/><text x="29.3200%" y="335.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::new_unchecked (43 samples, 0.28%)</title><rect x="29.4578%" y="309" width="0.2826%" height="15" fill="rgb(221,155,16)"/><text x="29.7078%" y="319.50"></text></g><g><title>__GI___libc_malloc (147 samples, 0.97%)</title><rect x="30.6211%" y="309" width="0.9662%" height="15" fill="rgb(215,215,53)"/><text x="30.8711%" y="319.50"></text></g><g><title>_int_malloc (117 samples, 0.77%)</title><rect x="30.8183%" y="293" width="0.7690%" height="15" fill="rgb(223,4,10)"/><text x="31.0683%" y="303.50"></text></g><g><title>core::alloc::Layout::align (40 samples, 0.26%)</title><rect x="31.6070%" y="309" width="0.2629%" height="15" fill="rgb(234,103,6)"/><text x="31.8570%" y="319.50"></text></g><g><title>alloc::alloc::alloc (252 samples, 1.66%)</title><rect x="30.2596%" y="325" width="1.6563%" height="15" fill="rgb(227,97,0)"/><text x="30.5096%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (54 samples, 0.35%)</title><rect x="31.9159%" y="325" width="0.3549%" height="15" fill="rgb(234,150,53)"/><text x="32.1659%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::alloc (476 samples, 3.13%)</title><rect x="29.7404%" y="341" width="3.1285%" height="15" fill="rgb(228,201,54)"/><text x="29.9904%" y="351.50">&lt;al..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (91 samples, 0.60%)</title><rect x="32.2708%" y="325" width="0.5981%" height="15" fill="rgb(222,22,37)"/><text x="32.5208%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (42 samples, 0.28%)</title><rect x="32.5928%" y="309" width="0.2760%" height="15" fill="rgb(237,53,32)"/><text x="32.8428%" y="319.50"></text></g><g><title>core::alloc::Layout::from_size_align_unchecked (21 samples, 0.14%)</title><rect x="33.2106%" y="325" width="0.1380%" height="15" fill="rgb(233,25,53)"/><text x="33.4606%" y="335.50"></text></g><g><title>core::alloc::Layout::from_size_align (155 samples, 1.02%)</title><rect x="32.9215%" y="341" width="1.0187%" height="15" fill="rgb(210,40,34)"/><text x="33.1715%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (90 samples, 0.59%)</title><rect x="33.3487%" y="325" width="0.5915%" height="15" fill="rgb(241,220,44)"/><text x="33.5987%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (63 samples, 0.41%)</title><rect x="33.5261%" y="309" width="0.4141%" height="15" fill="rgb(235,28,35)"/><text x="33.7761%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (193 samples, 1.27%)</title><rect x="33.9533%" y="341" width="1.2685%" height="15" fill="rgb(210,56,17)"/><text x="34.2033%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (120 samples, 0.79%)</title><rect x="34.4331%" y="325" width="0.7887%" height="15" fill="rgb(224,130,29)"/><text x="34.6831%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (54 samples, 0.35%)</title><rect x="35.2218%" y="341" width="0.3549%" height="15" fill="rgb(235,212,8)"/><text x="35.4718%" y="351.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (19 samples, 0.12%)</title><rect x="35.9185%" y="325" width="0.1249%" height="15" fill="rgb(223,33,50)"/><text x="36.1685%" y="335.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::cast (101 samples, 0.66%)</title><rect x="35.5767%" y="341" width="0.6638%" height="15" fill="rgb(219,149,13)"/><text x="35.8267%" y="351.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (30 samples, 0.20%)</title><rect x="36.0434%" y="325" width="0.1972%" height="15" fill="rgb(250,156,29)"/><text x="36.2934%" y="335.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (39 samples, 0.26%)</title><rect x="36.2406%" y="341" width="0.2563%" height="15" fill="rgb(216,193,19)"/><text x="36.4906%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (3,444 samples, 22.64%)</title><rect x="13.9402%" y="437" width="22.6356%" height="15" fill="rgb(216,135,14)"/><text x="14.1902%" y="447.50">&lt;alloc::vec::Vec&lt;T&gt; as core::clone::..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (3,444 samples, 22.64%)</title><rect x="13.9402%" y="421" width="22.6356%" height="15" fill="rgb(241,47,5)"/><text x="14.1902%" y="431.50">alloc::slice::&lt;impl [T]&gt;::to_vec</text></g><g><title>alloc::slice::hack::to_vec (3,444 samples, 22.64%)</title><rect x="13.9402%" y="405" width="22.6356%" height="15" fill="rgb(233,42,35)"/><text x="14.1902%" y="415.50">alloc::slice::hack::to_vec</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,377 samples, 9.05%)</title><rect x="27.5255%" y="389" width="9.0503%" height="15" fill="rgb(231,13,6)"/><text x="27.7755%" y="399.50">alloc::vec::V..</text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (1,377 samples, 9.05%)</title><rect x="27.5255%" y="373" width="9.0503%" height="15" fill="rgb(207,181,40)"/><text x="27.7755%" y="383.50">alloc::raw_ve..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,377 samples, 9.05%)</title><rect x="27.5255%" y="357" width="9.0503%" height="15" fill="rgb(254,173,49)"/><text x="27.7755%" y="367.50">alloc::raw_ve..</text></g><g><title>&lt;cswap::parser::SExp as core::clone::Clone&gt;::clone (3,470 samples, 22.81%)</title><rect x="13.9402%" y="933" width="22.8064%" height="15" fill="rgb(221,1,38)"/><text x="14.1902%" y="943.50">&lt;cswap::parser::SExp as core::clone:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (3,470 samples, 22.81%)</title><rect x="13.9402%" y="917" width="22.8064%" height="15" fill="rgb(206,124,46)"/><text x="14.1902%" y="927.50">&lt;alloc::vec::Vec&lt;T&gt; as core::clone::..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (3,470 samples, 22.81%)</title><rect x="13.9402%" y="901" width="22.8064%" height="15" fill="rgb(249,21,11)"/><text x="14.1902%" y="911.50">alloc::slice::&lt;impl [T]&gt;::to_vec</text></g><g><title>alloc::slice::hack::to_vec (3,470 samples, 22.81%)</title><rect x="13.9402%" y="885" width="22.8064%" height="15" fill="rgb(222,201,40)"/><text x="14.1902%" y="895.50">alloc::slice::hack::to_vec</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (3,470 samples, 22.81%)</title><rect x="13.9402%" y="869" width="22.8064%" height="15" fill="rgb(235,61,29)"/><text x="14.1902%" y="879.50">alloc::vec::Vec&lt;T&gt;::extend_from_slice</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (3,470 samples, 22.81%)</title><rect x="13.9402%" y="853" width="22.8064%" height="15" fill="rgb(219,207,3)"/><text x="14.1902%" y="863.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::S..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3,470 samples, 22.81%)</title><rect x="13.9402%" y="837" width="22.8064%" height="15" fill="rgb(222,56,46)"/><text x="14.1902%" y="847.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::S..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3,470 samples, 22.81%)</title><rect x="13.9402%" y="821" width="22.8064%" height="15" fill="rgb(239,76,54)"/><text x="14.1902%" y="831.50">core::iter::traits::iterator::Iterat..</text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,470 samples, 22.81%)</title><rect x="13.9402%" y="805" width="22.8064%" height="15" fill="rgb(231,124,27)"/><text x="14.1902%" y="815.50">&lt;core::iter::adapters::Cloned&lt;I&gt; as ..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,470 samples, 22.81%)</title><rect x="13.9402%" y="789" width="22.8064%" height="15" fill="rgb(249,195,6)"/><text x="14.1902%" y="799.50">&lt;core::iter::adapters::Map&lt;I,F&gt; as c..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (3,470 samples, 22.81%)</title><rect x="13.9402%" y="773" width="22.8064%" height="15" fill="rgb(237,174,47)"/><text x="14.1902%" y="783.50">core::iter::traits::iterator::Iterat..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3,470 samples, 22.81%)</title><rect x="13.9402%" y="757" width="22.8064%" height="15" fill="rgb(206,201,31)"/><text x="14.1902%" y="767.50">core::iter::traits::iterator::Iterat..</text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::_{{closure}} (3,470 samples, 22.81%)</title><rect x="13.9402%" y="741" width="22.8064%" height="15" fill="rgb(231,57,52)"/><text x="14.1902%" y="751.50">core::iter::traits::iterator::Iterat..</text></g><g><title>core::iter::adapters::map_fold::_{{closure}} (3,470 samples, 22.81%)</title><rect x="13.9402%" y="725" width="22.8064%" height="15" fill="rgb(248,177,22)"/><text x="14.1902%" y="735.50">core::iter::adapters::map_fold::_{{c..</text></g><g><title>core::ops::function::FnMut::call_mut (3,470 samples, 22.81%)</title><rect x="13.9402%" y="709" width="22.8064%" height="15" fill="rgb(215,211,37)"/><text x="14.1902%" y="719.50">core::ops::function::FnMut::call_mut</text></g><g><title>&lt;cswap::parser::SExp as core::clone::Clone&gt;::clone (3,470 samples, 22.81%)</title><rect x="13.9402%" y="693" width="22.8064%" height="15" fill="rgb(241,128,51)"/><text x="14.1902%" y="703.50">&lt;cswap::parser::SExp as core::clone:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (3,470 samples, 22.81%)</title><rect x="13.9402%" y="677" width="22.8064%" height="15" fill="rgb(227,165,31)"/><text x="14.1902%" y="687.50">&lt;alloc::vec::Vec&lt;T&gt; as core::clone::..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (3,470 samples, 22.81%)</title><rect x="13.9402%" y="661" width="22.8064%" height="15" fill="rgb(228,167,24)"/><text x="14.1902%" y="671.50">alloc::slice::&lt;impl [T]&gt;::to_vec</text></g><g><title>alloc::slice::hack::to_vec (3,470 samples, 22.81%)</title><rect x="13.9402%" y="645" width="22.8064%" height="15" fill="rgb(228,143,12)"/><text x="14.1902%" y="655.50">alloc::slice::hack::to_vec</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (3,470 samples, 22.81%)</title><rect x="13.9402%" y="629" width="22.8064%" height="15" fill="rgb(249,149,8)"/><text x="14.1902%" y="639.50">alloc::vec::Vec&lt;T&gt;::extend_from_slice</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (3,470 samples, 22.81%)</title><rect x="13.9402%" y="613" width="22.8064%" height="15" fill="rgb(243,35,44)"/><text x="14.1902%" y="623.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::S..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3,470 samples, 22.81%)</title><rect x="13.9402%" y="597" width="22.8064%" height="15" fill="rgb(246,89,9)"/><text x="14.1902%" y="607.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::S..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3,470 samples, 22.81%)</title><rect x="13.9402%" y="581" width="22.8064%" height="15" fill="rgb(233,213,13)"/><text x="14.1902%" y="591.50">core::iter::traits::iterator::Iterat..</text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,470 samples, 22.81%)</title><rect x="13.9402%" y="565" width="22.8064%" height="15" fill="rgb(233,141,41)"/><text x="14.1902%" y="575.50">&lt;core::iter::adapters::Cloned&lt;I&gt; as ..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,470 samples, 22.81%)</title><rect x="13.9402%" y="549" width="22.8064%" height="15" fill="rgb(239,167,4)"/><text x="14.1902%" y="559.50">&lt;core::iter::adapters::Map&lt;I,F&gt; as c..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (3,470 samples, 22.81%)</title><rect x="13.9402%" y="533" width="22.8064%" height="15" fill="rgb(209,217,16)"/><text x="14.1902%" y="543.50">core::iter::traits::iterator::Iterat..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3,470 samples, 22.81%)</title><rect x="13.9402%" y="517" width="22.8064%" height="15" fill="rgb(219,88,35)"/><text x="14.1902%" y="527.50">core::iter::traits::iterator::Iterat..</text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::_{{closure}} (3,470 samples, 22.81%)</title><rect x="13.9402%" y="501" width="22.8064%" height="15" fill="rgb(220,193,23)"/><text x="14.1902%" y="511.50">core::iter::traits::iterator::Iterat..</text></g><g><title>core::iter::adapters::map_fold::_{{closure}} (3,470 samples, 22.81%)</title><rect x="13.9402%" y="485" width="22.8064%" height="15" fill="rgb(230,90,52)"/><text x="14.1902%" y="495.50">core::iter::adapters::map_fold::_{{c..</text></g><g><title>core::ops::function::FnMut::call_mut (3,470 samples, 22.81%)</title><rect x="13.9402%" y="469" width="22.8064%" height="15" fill="rgb(252,106,19)"/><text x="14.1902%" y="479.50">core::ops::function::FnMut::call_mut</text></g><g><title>&lt;cswap::parser::SExp as core::clone::Clone&gt;::clone (3,470 samples, 22.81%)</title><rect x="13.9402%" y="453" width="22.8064%" height="15" fill="rgb(206,74,20)"/><text x="14.1902%" y="463.50">&lt;cswap::parser::SExp as core::clone:..</text></g><g><title>&lt;cswap::parser::Symbol as core::clone::Clone&gt;::clone (26 samples, 0.17%)</title><rect x="36.5757%" y="437" width="0.1709%" height="15" fill="rgb(230,138,44)"/><text x="36.8257%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (26 samples, 0.17%)</title><rect x="36.5757%" y="421" width="0.1709%" height="15" fill="rgb(235,182,43)"/><text x="36.8257%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (26 samples, 0.17%)</title><rect x="36.5757%" y="405" width="0.1709%" height="15" fill="rgb(242,16,51)"/><text x="36.8257%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (26 samples, 0.17%)</title><rect x="36.5757%" y="389" width="0.1709%" height="15" fill="rgb(248,9,4)"/><text x="36.8257%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (26 samples, 0.17%)</title><rect x="36.5757%" y="373" width="0.1709%" height="15" fill="rgb(210,31,22)"/><text x="36.8257%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (26 samples, 0.17%)</title><rect x="36.5757%" y="357" width="0.1709%" height="15" fill="rgb(239,54,39)"/><text x="36.8257%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (26 samples, 0.17%)</title><rect x="36.5757%" y="341" width="0.1709%" height="15" fill="rgb(230,99,41)"/><text x="36.8257%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (26 samples, 0.17%)</title><rect x="36.5757%" y="325" width="0.1709%" height="15" fill="rgb(253,106,12)"/><text x="36.8257%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::alloc (26 samples, 0.17%)</title><rect x="36.5757%" y="309" width="0.1709%" height="15" fill="rgb(213,46,41)"/><text x="36.8257%" y="319.50"></text></g><g><title>alloc::alloc::alloc (26 samples, 0.17%)</title><rect x="36.5757%" y="293" width="0.1709%" height="15" fill="rgb(215,133,35)"/><text x="36.8257%" y="303.50"></text></g><g><title>__GI___libc_malloc (26 samples, 0.17%)</title><rect x="36.5757%" y="277" width="0.1709%" height="15" fill="rgb(213,28,5)"/><text x="36.8257%" y="287.50"></text></g><g><title>_int_malloc (26 samples, 0.17%)</title><rect x="36.5757%" y="261" width="0.1709%" height="15" fill="rgb(215,77,49)"/><text x="36.8257%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (39 samples, 0.26%)</title><rect x="36.7466%" y="565" width="0.2563%" height="15" fill="rgb(248,100,22)"/><text x="36.9966%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (39 samples, 0.26%)</title><rect x="36.7466%" y="549" width="0.2563%" height="15" fill="rgb(208,67,9)"/><text x="36.9966%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (39 samples, 0.26%)</title><rect x="36.7466%" y="533" width="0.2563%" height="15" fill="rgb(219,133,21)"/><text x="36.9966%" y="543.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (16 samples, 0.11%)</title><rect x="36.8978%" y="517" width="0.1052%" height="15" fill="rgb(246,46,29)"/><text x="37.1478%" y="527.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (33 samples, 0.22%)</title><rect x="39.1982%" y="485" width="0.2169%" height="15" fill="rgb(246,185,52)"/><text x="39.4482%" y="495.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (74 samples, 0.49%)</title><rect x="40.1512%" y="469" width="0.4864%" height="15" fill="rgb(252,136,11)"/><text x="40.4012%" y="479.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (43 samples, 0.28%)</title><rect x="40.6375%" y="469" width="0.2826%" height="15" fill="rgb(219,138,53)"/><text x="40.8875%" y="479.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (82 samples, 0.54%)</title><rect x="41.0122%" y="453" width="0.5389%" height="15" fill="rgb(211,51,23)"/><text x="41.2622%" y="463.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (30 samples, 0.20%)</title><rect x="41.5511%" y="453" width="0.1972%" height="15" fill="rgb(247,221,28)"/><text x="41.8011%" y="463.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (416 samples, 2.73%)</title><rect x="39.4151%" y="485" width="2.7341%" height="15" fill="rgb(251,222,45)"/><text x="39.6651%" y="495.50">&lt;c..</text></g><g><title>core::slice::Iter&lt;T&gt;::post_inc_start (187 samples, 1.23%)</title><rect x="40.9201%" y="469" width="1.2291%" height="15" fill="rgb(217,162,53)"/><text x="41.1701%" y="479.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (61 samples, 0.40%)</title><rect x="41.7483%" y="453" width="0.4009%" height="15" fill="rgb(229,93,14)"/><text x="41.9983%" y="463.50"></text></g><g><title>__memcpy_avx_unaligned (81 samples, 0.53%)</title><rect x="43.7857%" y="421" width="0.5324%" height="15" fill="rgb(209,67,49)"/><text x="44.0357%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend::_{{closure}} (211 samples, 1.39%)</title><rect x="43.6411%" y="437" width="1.3868%" height="15" fill="rgb(213,87,29)"/><text x="43.8911%" y="447.50"></text></g><g><title>core::ptr::write (92 samples, 0.60%)</title><rect x="44.4233%" y="421" width="0.6047%" height="15" fill="rgb(205,151,52)"/><text x="44.6733%" y="431.50"></text></g><g><title>__memcpy_avx_unaligned (83 samples, 0.55%)</title><rect x="44.4824%" y="405" width="0.5455%" height="15" fill="rgb(253,215,39)"/><text x="44.7324%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (403 samples, 2.65%)</title><rect x="43.4703%" y="453" width="2.6487%" height="15" fill="rgb(221,220,41)"/><text x="43.7203%" y="463.50">co..</text></g><g><title>__memcpy_avx_unaligned (162 samples, 1.06%)</title><rect x="45.0542%" y="437" width="1.0647%" height="15" fill="rgb(218,133,21)"/><text x="45.3042%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (59 samples, 0.39%)</title><rect x="49.3066%" y="373" width="0.3878%" height="15" fill="rgb(221,193,43)"/><text x="49.5566%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (139 samples, 0.91%)</title><rect x="49.0963%" y="389" width="0.9136%" height="15" fill="rgb(240,128,52)"/><text x="49.3463%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (48 samples, 0.32%)</title><rect x="49.6944%" y="373" width="0.3155%" height="15" fill="rgb(253,114,12)"/><text x="49.9444%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (234 samples, 1.54%)</title><rect x="48.8925%" y="405" width="1.5380%" height="15" fill="rgb(215,223,47)"/><text x="49.1425%" y="415.50"></text></g><g><title>core::slice::from_raw_parts (64 samples, 0.42%)</title><rect x="50.0099%" y="389" width="0.4206%" height="15" fill="rgb(248,225,23)"/><text x="50.2599%" y="399.50"></text></g><g><title>core::ptr::slice_from_raw_parts (40 samples, 0.26%)</title><rect x="50.1676%" y="373" width="0.2629%" height="15" fill="rgb(250,108,0)"/><text x="50.4176%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (104 samples, 0.68%)</title><rect x="51.0746%" y="373" width="0.6835%" height="15" fill="rgb(228,208,7)"/><text x="51.3246%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (67 samples, 0.44%)</title><rect x="51.7581%" y="373" width="0.4404%" height="15" fill="rgb(244,45,10)"/><text x="52.0081%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (41 samples, 0.27%)</title><rect x="51.9290%" y="357" width="0.2695%" height="15" fill="rgb(207,125,25)"/><text x="52.1790%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (577 samples, 3.79%)</title><rect x="48.4982%" y="421" width="3.7923%" height="15" fill="rgb(210,195,18)"/><text x="48.7482%" y="431.50">&lt;all..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (283 samples, 1.86%)</title><rect x="50.4305%" y="405" width="1.8600%" height="15" fill="rgb(249,80,12)"/><text x="50.6805%" y="415.50">a..</text></g><g><title>alloc::slice::hack::to_vec (256 samples, 1.68%)</title><rect x="50.6080%" y="389" width="1.6826%" height="15" fill="rgb(221,65,9)"/><text x="50.8580%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::_{{closure}} (1,638 samples, 10.77%)</title><rect x="42.1492%" y="485" width="10.7657%" height="15" fill="rgb(235,49,36)"/><text x="42.3992%" y="495.50">core::iter::trai..</text></g><g><title>core::iter::adapters::map_fold::_{{closure}} (1,593 samples, 10.47%)</title><rect x="42.4450%" y="469" width="10.4699%" height="15" fill="rgb(225,32,20)"/><text x="42.6950%" y="479.50">core::iter::ada..</text></g><g><title>core::ops::function::FnMut::call_mut (1,034 samples, 6.80%)</title><rect x="46.1190%" y="453" width="6.7959%" height="15" fill="rgb(215,141,46)"/><text x="46.3690%" y="463.50">core::ops..</text></g><g><title>&lt;cswap::parser::SExp as core::clone::Clone&gt;::clone (957 samples, 6.29%)</title><rect x="46.6250%" y="437" width="6.2898%" height="15" fill="rgb(250,160,47)"/><text x="46.8750%" y="447.50">&lt;cswap::..</text></g><g><title>&lt;cswap::parser::Symbol as core::clone::Clone&gt;::clone (95 samples, 0.62%)</title><rect x="52.2905%" y="421" width="0.6244%" height="15" fill="rgb(216,222,40)"/><text x="52.5405%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (40 samples, 0.26%)</title><rect x="52.6520%" y="405" width="0.2629%" height="15" fill="rgb(234,217,39)"/><text x="52.9020%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (26 samples, 0.17%)</title><rect x="52.7440%" y="389" width="0.1709%" height="15" fill="rgb(207,178,40)"/><text x="52.9940%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (24 samples, 0.16%)</title><rect x="52.7571%" y="373" width="0.1577%" height="15" fill="rgb(221,136,13)"/><text x="53.0071%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (24 samples, 0.16%)</title><rect x="52.7571%" y="357" width="0.1577%" height="15" fill="rgb(249,199,10)"/><text x="53.0071%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (16 samples, 0.11%)</title><rect x="52.8097%" y="341" width="0.1052%" height="15" fill="rgb(249,222,13)"/><text x="53.0597%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (16 samples, 0.11%)</title><rect x="52.8097%" y="325" width="0.1052%" height="15" fill="rgb(244,185,38)"/><text x="53.0597%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (16 samples, 0.11%)</title><rect x="52.8097%" y="309" width="0.1052%" height="15" fill="rgb(236,202,9)"/><text x="53.0597%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::alloc (16 samples, 0.11%)</title><rect x="52.8097%" y="293" width="0.1052%" height="15" fill="rgb(250,229,37)"/><text x="53.0597%" y="303.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.11%)</title><rect x="52.8097%" y="277" width="0.1052%" height="15" fill="rgb(206,174,23)"/><text x="53.0597%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2,352 samples, 15.46%)</title><rect x="37.9034%" y="501" width="15.4584%" height="15" fill="rgb(211,33,43)"/><text x="38.1534%" y="511.50">core::iter::traits::iter..</text></g><g><title>core::ptr::drop_in_place (68 samples, 0.45%)</title><rect x="52.9149%" y="485" width="0.4469%" height="15" fill="rgb(245,58,50)"/><text x="53.1649%" y="495.50"></text></g><g><title>core::ptr::drop_in_place (59 samples, 0.39%)</title><rect x="52.9740%" y="469" width="0.3878%" height="15" fill="rgb(244,68,36)"/><text x="53.2240%" y="479.50"></text></g><g><title>core::ptr::drop_in_place (54 samples, 0.35%)</title><rect x="53.0069%" y="453" width="0.3549%" height="15" fill="rgb(232,229,15)"/><text x="53.2569%" y="463.50"></text></g><g><title>core::ptr::drop_in_place (44 samples, 0.29%)</title><rect x="53.0726%" y="437" width="0.2892%" height="15" fill="rgb(254,30,23)"/><text x="53.3226%" y="447.50"></text></g><g><title>core::ptr::drop_in_place (36 samples, 0.24%)</title><rect x="53.1252%" y="421" width="0.2366%" height="15" fill="rgb(235,160,14)"/><text x="53.3752%" y="431.50"></text></g><g><title>&lt;alloc::vec::SetLenOnDrop as core::ops::drop::Drop&gt;::drop (24 samples, 0.16%)</title><rect x="53.2041%" y="405" width="0.1577%" height="15" fill="rgb(212,155,44)"/><text x="53.4541%" y="415.50"></text></g><g><title>&lt;cswap::parser::SExp as core::clone::Clone&gt;::clone (2,544 samples, 16.72%)</title><rect x="36.7466%" y="917" width="16.7203%" height="15" fill="rgb(226,2,50)"/><text x="36.9966%" y="927.50">&lt;cswap::parser::SExp as co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (2,544 samples, 16.72%)</title><rect x="36.7466%" y="901" width="16.7203%" height="15" fill="rgb(234,177,6)"/><text x="36.9966%" y="911.50">&lt;alloc::vec::Vec&lt;T&gt; as cor..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2,544 samples, 16.72%)</title><rect x="36.7466%" y="885" width="16.7203%" height="15" fill="rgb(217,24,9)"/><text x="36.9966%" y="895.50">alloc::slice::&lt;impl [T]&gt;::..</text></g><g><title>alloc::slice::hack::to_vec (2,544 samples, 16.72%)</title><rect x="36.7466%" y="869" width="16.7203%" height="15" fill="rgb(220,13,46)"/><text x="36.9966%" y="879.50">alloc::slice::hack::to_vec</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (2,544 samples, 16.72%)</title><rect x="36.7466%" y="853" width="16.7203%" height="15" fill="rgb(239,221,27)"/><text x="36.9966%" y="863.50">alloc::vec::Vec&lt;T&gt;::extend..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (2,544 samples, 16.72%)</title><rect x="36.7466%" y="837" width="16.7203%" height="15" fill="rgb(222,198,25)"/><text x="36.9966%" y="847.50">&lt;alloc::vec::Vec&lt;T&gt; as all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2,544 samples, 16.72%)</title><rect x="36.7466%" y="821" width="16.7203%" height="15" fill="rgb(211,99,13)"/><text x="36.9966%" y="831.50">&lt;alloc::vec::Vec&lt;T&gt; as all..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2,544 samples, 16.72%)</title><rect x="36.7466%" y="805" width="16.7203%" height="15" fill="rgb(232,111,31)"/><text x="36.9966%" y="815.50">core::iter::traits::iterat..</text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,544 samples, 16.72%)</title><rect x="36.7466%" y="789" width="16.7203%" height="15" fill="rgb(245,82,37)"/><text x="36.9966%" y="799.50">&lt;core::iter::adapters::Clo..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,544 samples, 16.72%)</title><rect x="36.7466%" y="773" width="16.7203%" height="15" fill="rgb(227,149,46)"/><text x="36.9966%" y="783.50">&lt;core::iter::adapters::Map..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (2,544 samples, 16.72%)</title><rect x="36.7466%" y="757" width="16.7203%" height="15" fill="rgb(218,36,50)"/><text x="36.9966%" y="767.50">core::iter::traits::iterat..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2,544 samples, 16.72%)</title><rect x="36.7466%" y="741" width="16.7203%" height="15" fill="rgb(226,80,48)"/><text x="36.9966%" y="751.50">core::iter::traits::iterat..</text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::_{{closure}} (2,544 samples, 16.72%)</title><rect x="36.7466%" y="725" width="16.7203%" height="15" fill="rgb(238,224,15)"/><text x="36.9966%" y="735.50">core::iter::traits::iterat..</text></g><g><title>core::iter::adapters::map_fold::_{{closure}} (2,544 samples, 16.72%)</title><rect x="36.7466%" y="709" width="16.7203%" height="15" fill="rgb(241,136,10)"/><text x="36.9966%" y="719.50">core::iter::adapters::map_..</text></g><g><title>core::ops::function::FnMut::call_mut (2,544 samples, 16.72%)</title><rect x="36.7466%" y="693" width="16.7203%" height="15" fill="rgb(208,32,45)"/><text x="36.9966%" y="703.50">core::ops::function::FnMut..</text></g><g><title>&lt;cswap::parser::SExp as core::clone::Clone&gt;::clone (2,544 samples, 16.72%)</title><rect x="36.7466%" y="677" width="16.7203%" height="15" fill="rgb(207,135,9)"/><text x="36.9966%" y="687.50">&lt;cswap::parser::SExp as co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (2,544 samples, 16.72%)</title><rect x="36.7466%" y="661" width="16.7203%" height="15" fill="rgb(206,86,44)"/><text x="36.9966%" y="671.50">&lt;alloc::vec::Vec&lt;T&gt; as cor..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2,544 samples, 16.72%)</title><rect x="36.7466%" y="645" width="16.7203%" height="15" fill="rgb(245,177,15)"/><text x="36.9966%" y="655.50">alloc::slice::&lt;impl [T]&gt;::..</text></g><g><title>alloc::slice::hack::to_vec (2,544 samples, 16.72%)</title><rect x="36.7466%" y="629" width="16.7203%" height="15" fill="rgb(206,64,50)"/><text x="36.9966%" y="639.50">alloc::slice::hack::to_vec</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (2,544 samples, 16.72%)</title><rect x="36.7466%" y="613" width="16.7203%" height="15" fill="rgb(234,36,40)"/><text x="36.9966%" y="623.50">alloc::vec::Vec&lt;T&gt;::extend..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (2,544 samples, 16.72%)</title><rect x="36.7466%" y="597" width="16.7203%" height="15" fill="rgb(213,64,8)"/><text x="36.9966%" y="607.50">&lt;alloc::vec::Vec&lt;T&gt; as all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2,544 samples, 16.72%)</title><rect x="36.7466%" y="581" width="16.7203%" height="15" fill="rgb(210,75,36)"/><text x="36.9966%" y="591.50">&lt;alloc::vec::Vec&lt;T&gt; as all..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2,505 samples, 16.46%)</title><rect x="37.0030%" y="565" width="16.4640%" height="15" fill="rgb(229,88,21)"/><text x="37.2530%" y="575.50">core::iter::traits::itera..</text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,505 samples, 16.46%)</title><rect x="37.0030%" y="549" width="16.4640%" height="15" fill="rgb(252,204,47)"/><text x="37.2530%" y="559.50">&lt;core::iter::adapters::Cl..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,505 samples, 16.46%)</title><rect x="37.0030%" y="533" width="16.4640%" height="15" fill="rgb(208,77,27)"/><text x="37.2530%" y="543.50">&lt;core::iter::adapters::Ma..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (2,445 samples, 16.07%)</title><rect x="37.3973%" y="517" width="16.0697%" height="15" fill="rgb(221,76,26)"/><text x="37.6473%" y="527.50">core::iter::traits::itera..</text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (16 samples, 0.11%)</title><rect x="53.3618%" y="501" width="0.1052%" height="15" fill="rgb(225,139,18)"/><text x="53.6118%" y="511.50"></text></g><g><title>__memcpy_avx_unaligned (28 samples, 0.18%)</title><rect x="53.4933%" y="645" width="0.1840%" height="15" fill="rgb(230,137,11)"/><text x="53.7433%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (69 samples, 0.45%)</title><rect x="53.4670%" y="677" width="0.4535%" height="15" fill="rgb(212,28,1)"/><text x="53.7170%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend::_{{closure}} (69 samples, 0.45%)</title><rect x="53.4670%" y="661" width="0.4535%" height="15" fill="rgb(248,164,17)"/><text x="53.7170%" y="671.50"></text></g><g><title>core::ptr::write (30 samples, 0.20%)</title><rect x="53.7233%" y="645" width="0.1972%" height="15" fill="rgb(222,171,42)"/><text x="53.9733%" y="655.50"></text></g><g><title>__memcpy_avx_unaligned (28 samples, 0.18%)</title><rect x="53.7364%" y="629" width="0.1840%" height="15" fill="rgb(243,84,45)"/><text x="53.9864%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (26 samples, 0.17%)</title><rect x="55.1561%" y="597" width="0.1709%" height="15" fill="rgb(252,49,23)"/><text x="55.4061%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (74 samples, 0.49%)</title><rect x="55.0707%" y="613" width="0.4864%" height="15" fill="rgb(215,19,7)"/><text x="55.3207%" y="623.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (35 samples, 0.23%)</title><rect x="55.3270%" y="597" width="0.2300%" height="15" fill="rgb(238,81,41)"/><text x="55.5770%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (116 samples, 0.76%)</title><rect x="54.9786%" y="629" width="0.7624%" height="15" fill="rgb(210,199,37)"/><text x="55.2286%" y="639.50"></text></g><g><title>core::slice::from_raw_parts (28 samples, 0.18%)</title><rect x="55.5570%" y="613" width="0.1840%" height="15" fill="rgb(244,192,49)"/><text x="55.8070%" y="623.50"></text></g><g><title>core::ptr::slice_from_raw_parts (21 samples, 0.14%)</title><rect x="55.6030%" y="597" width="0.1380%" height="15" fill="rgb(226,211,11)"/><text x="55.8530%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (86 samples, 0.57%)</title><rect x="57.4827%" y="549" width="0.5652%" height="15" fill="rgb(236,162,54)"/><text x="57.7327%" y="559.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (82 samples, 0.54%)</title><rect x="57.5090%" y="533" width="0.5389%" height="15" fill="rgb(220,229,9)"/><text x="57.7590%" y="543.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (16 samples, 0.11%)</title><rect x="57.9428%" y="517" width="0.1052%" height="15" fill="rgb(250,87,22)"/><text x="58.1928%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (42 samples, 0.28%)</title><rect x="58.0743%" y="549" width="0.2760%" height="15" fill="rgb(239,43,17)"/><text x="58.3243%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (16 samples, 0.11%)</title><rect x="58.2452%" y="533" width="0.1052%" height="15" fill="rgb(231,177,25)"/><text x="58.4952%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (31 samples, 0.20%)</title><rect x="58.3503%" y="549" width="0.2037%" height="15" fill="rgb(219,179,1)"/><text x="58.6003%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (18 samples, 0.12%)</title><rect x="58.4358%" y="533" width="0.1183%" height="15" fill="rgb(238,219,53)"/><text x="58.6858%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (48 samples, 0.32%)</title><rect x="59.0338%" y="533" width="0.3155%" height="15" fill="rgb(232,167,36)"/><text x="59.2838%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (129 samples, 0.85%)</title><rect x="58.5541%" y="549" width="0.8478%" height="15" fill="rgb(244,19,51)"/><text x="58.8041%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (418 samples, 2.75%)</title><rect x="56.9438%" y="565" width="2.7473%" height="15" fill="rgb(224,6,22)"/><text x="57.1938%" y="575.50">&lt;a..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (44 samples, 0.29%)</title><rect x="59.4019%" y="549" width="0.2892%" height="15" fill="rgb(224,145,5)"/><text x="59.6519%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (31 samples, 0.20%)</title><rect x="59.4873%" y="533" width="0.2037%" height="15" fill="rgb(234,130,49)"/><text x="59.7373%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (513 samples, 3.37%)</title><rect x="56.6086%" y="581" width="3.3717%" height="15" fill="rgb(254,6,2)"/><text x="56.8586%" y="591.50">&lt;al..</text></g><g><title>core::iter::traits::iterator::Iterator::cloned (44 samples, 0.29%)</title><rect x="59.6911%" y="565" width="0.2892%" height="15" fill="rgb(208,96,46)"/><text x="59.9411%" y="575.50"></text></g><g><title>core::iter::adapters::Cloned&lt;I&gt;::new (23 samples, 0.15%)</title><rect x="59.8291%" y="549" width="0.1512%" height="15" fill="rgb(239,3,39)"/><text x="60.0791%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (596 samples, 3.92%)</title><rect x="56.2866%" y="597" width="3.9172%" height="15" fill="rgb(233,210,1)"/><text x="56.5366%" y="607.50">allo..</text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (34 samples, 0.22%)</title><rect x="59.9803%" y="581" width="0.2235%" height="15" fill="rgb(244,137,37)"/><text x="60.2303%" y="591.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (71 samples, 0.47%)</title><rect x="61.1896%" y="549" width="0.4666%" height="15" fill="rgb(240,136,2)"/><text x="61.4396%" y="559.50"></text></g><g><title>&lt;core::ptr::unique::Unique&lt;T&gt; as core::convert::From&lt;core::ptr::non_null::NonNull&lt;T&gt;&gt;&gt;::from (55 samples, 0.36%)</title><rect x="61.2948%" y="533" width="0.3615%" height="15" fill="rgb(239,18,37)"/><text x="61.5448%" y="543.50"></text></g><g><title>__GI___libc_malloc (60 samples, 0.39%)</title><rect x="62.0506%" y="517" width="0.3943%" height="15" fill="rgb(218,185,22)"/><text x="62.3006%" y="527.50"></text></g><g><title>_int_malloc (50 samples, 0.33%)</title><rect x="62.1163%" y="501" width="0.3286%" height="15" fill="rgb(225,218,4)"/><text x="62.3663%" y="511.50"></text></g><g><title>core::alloc::Layout::align (17 samples, 0.11%)</title><rect x="62.4647%" y="517" width="0.1117%" height="15" fill="rgb(230,182,32)"/><text x="62.7147%" y="527.50"></text></g><g><title>alloc::alloc::alloc (109 samples, 0.72%)</title><rect x="61.8863%" y="533" width="0.7164%" height="15" fill="rgb(242,56,43)"/><text x="62.1363%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (26 samples, 0.17%)</title><rect x="62.6027%" y="533" width="0.1709%" height="15" fill="rgb(233,99,24)"/><text x="62.8527%" y="543.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (23 samples, 0.15%)</title><rect x="62.9445%" y="517" width="0.1512%" height="15" fill="rgb(234,209,42)"/><text x="63.1945%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::alloc (220 samples, 1.45%)</title><rect x="61.6563%" y="549" width="1.4459%" height="15" fill="rgb(227,7,12)"/><text x="61.9063%" y="559.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (50 samples, 0.33%)</title><rect x="62.7736%" y="533" width="0.3286%" height="15" fill="rgb(245,203,43)"/><text x="63.0236%" y="543.50"></text></g><g><title>core::alloc::Layout::from_size_align (74 samples, 0.49%)</title><rect x="63.1153%" y="549" width="0.4864%" height="15" fill="rgb(238,205,33)"/><text x="63.3653%" y="559.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (42 samples, 0.28%)</title><rect x="63.3257%" y="533" width="0.2760%" height="15" fill="rgb(231,56,7)"/><text x="63.5757%" y="543.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (27 samples, 0.18%)</title><rect x="63.4243%" y="517" width="0.1775%" height="15" fill="rgb(244,186,29)"/><text x="63.6743%" y="527.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (92 samples, 0.60%)</title><rect x="63.6214%" y="549" width="0.6047%" height="15" fill="rgb(234,111,31)"/><text x="63.8714%" y="559.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (53 samples, 0.35%)</title><rect x="63.8778%" y="533" width="0.3483%" height="15" fill="rgb(241,149,10)"/><text x="64.1278%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (24 samples, 0.16%)</title><rect x="64.2261%" y="549" width="0.1577%" height="15" fill="rgb(249,206,44)"/><text x="64.4761%" y="559.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (17 samples, 0.11%)</title><rect x="64.4890%" y="533" width="0.1117%" height="15" fill="rgb(251,153,30)"/><text x="64.7390%" y="543.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::cast (46 samples, 0.30%)</title><rect x="64.3838%" y="549" width="0.3023%" height="15" fill="rgb(239,152,38)"/><text x="64.6338%" y="559.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (29 samples, 0.19%)</title><rect x="64.6862%" y="549" width="0.1906%" height="15" fill="rgb(249,139,47)"/><text x="64.9362%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (714 samples, 4.69%)</title><rect x="60.2037%" y="597" width="4.6927%" height="15" fill="rgb(244,64,35)"/><text x="60.4537%" y="607.50">alloc..</text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (697 samples, 4.58%)</title><rect x="60.3155%" y="581" width="4.5810%" height="15" fill="rgb(216,46,15)"/><text x="60.5655%" y="591.50">alloc..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (672 samples, 4.42%)</title><rect x="60.4798%" y="565" width="4.4167%" height="15" fill="rgb(250,74,19)"/><text x="60.7298%" y="575.50">alloc..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (1,551 samples, 10.19%)</title><rect x="54.7420%" y="645" width="10.1939%" height="15" fill="rgb(249,42,33)"/><text x="54.9920%" y="655.50">&lt;alloc::vec::Ve..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1,399 samples, 9.19%)</title><rect x="55.7410%" y="629" width="9.1949%" height="15" fill="rgb(242,149,17)"/><text x="55.9910%" y="639.50">alloc::slice:..</text></g><g><title>alloc::slice::hack::to_vec (1,368 samples, 8.99%)</title><rect x="55.9448%" y="613" width="8.9911%" height="15" fill="rgb(244,29,21)"/><text x="56.1948%" y="623.50">alloc::slice:..</text></g><g><title>&lt;cswap::parser::SExp as core::clone::Clone&gt;::clone (1,791 samples, 11.77%)</title><rect x="53.4670%" y="901" width="11.7713%" height="15" fill="rgb(220,130,37)"/><text x="53.7170%" y="911.50">&lt;cswap::parser::S..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (1,791 samples, 11.77%)</title><rect x="53.4670%" y="885" width="11.7713%" height="15" fill="rgb(211,67,2)"/><text x="53.7170%" y="895.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1,791 samples, 11.77%)</title><rect x="53.4670%" y="869" width="11.7713%" height="15" fill="rgb(235,68,52)"/><text x="53.7170%" y="879.50">alloc::slice::&lt;im..</text></g><g><title>alloc::slice::hack::to_vec (1,791 samples, 11.77%)</title><rect x="53.4670%" y="853" width="11.7713%" height="15" fill="rgb(246,142,3)"/><text x="53.7170%" y="863.50">alloc::slice::hac..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (1,791 samples, 11.77%)</title><rect x="53.4670%" y="837" width="11.7713%" height="15" fill="rgb(241,25,7)"/><text x="53.7170%" y="847.50">alloc::vec::Vec&lt;T..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (1,791 samples, 11.77%)</title><rect x="53.4670%" y="821" width="11.7713%" height="15" fill="rgb(242,119,39)"/><text x="53.7170%" y="831.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,791 samples, 11.77%)</title><rect x="53.4670%" y="805" width="11.7713%" height="15" fill="rgb(241,98,45)"/><text x="53.7170%" y="815.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1,791 samples, 11.77%)</title><rect x="53.4670%" y="789" width="11.7713%" height="15" fill="rgb(254,28,30)"/><text x="53.7170%" y="799.50">core::iter::trait..</text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,791 samples, 11.77%)</title><rect x="53.4670%" y="773" width="11.7713%" height="15" fill="rgb(241,142,54)"/><text x="53.7170%" y="783.50">&lt;core::iter::adap..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,791 samples, 11.77%)</title><rect x="53.4670%" y="757" width="11.7713%" height="15" fill="rgb(222,85,15)"/><text x="53.7170%" y="767.50">&lt;core::iter::adap..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (1,791 samples, 11.77%)</title><rect x="53.4670%" y="741" width="11.7713%" height="15" fill="rgb(210,85,47)"/><text x="53.7170%" y="751.50">core::iter::trait..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1,791 samples, 11.77%)</title><rect x="53.4670%" y="725" width="11.7713%" height="15" fill="rgb(224,206,25)"/><text x="53.7170%" y="735.50">core::iter::trait..</text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::_{{closure}} (1,791 samples, 11.77%)</title><rect x="53.4670%" y="709" width="11.7713%" height="15" fill="rgb(243,201,19)"/><text x="53.7170%" y="719.50">core::iter::trait..</text></g><g><title>core::iter::adapters::map_fold::_{{closure}} (1,791 samples, 11.77%)</title><rect x="53.4670%" y="693" width="11.7713%" height="15" fill="rgb(236,59,4)"/><text x="53.7170%" y="703.50">core::iter::adapt..</text></g><g><title>core::ops::function::FnMut::call_mut (1,722 samples, 11.32%)</title><rect x="53.9205%" y="677" width="11.3178%" height="15" fill="rgb(254,179,45)"/><text x="54.1705%" y="687.50">core::ops::functi..</text></g><g><title>&lt;cswap::parser::SExp as core::clone::Clone&gt;::clone (1,722 samples, 11.32%)</title><rect x="53.9205%" y="661" width="11.3178%" height="15" fill="rgb(226,14,10)"/><text x="54.1705%" y="671.50">&lt;cswap::parser::S..</text></g><g><title>&lt;cswap::parser::BoolOp as core::clone::Clone&gt;::clone (46 samples, 0.30%)</title><rect x="64.9359%" y="645" width="0.3023%" height="15" fill="rgb(244,27,41)"/><text x="65.1859%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (28 samples, 0.18%)</title><rect x="66.3950%" y="661" width="0.1840%" height="15" fill="rgb(235,35,32)"/><text x="66.6450%" y="671.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (16 samples, 0.11%)</title><rect x="66.5790%" y="661" width="0.1052%" height="15" fill="rgb(218,68,31)"/><text x="66.8290%" y="671.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (148 samples, 0.97%)</title><rect x="65.8429%" y="693" width="0.9727%" height="15" fill="rgb(207,120,37)"/><text x="66.0929%" y="703.50"></text></g><g><title>core::slice::Iter&lt;T&gt;::post_inc_start (71 samples, 0.47%)</title><rect x="66.3490%" y="677" width="0.4666%" height="15" fill="rgb(227,98,0)"/><text x="66.5990%" y="687.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (20 samples, 0.13%)</title><rect x="66.6842%" y="661" width="0.1314%" height="15" fill="rgb(207,7,3)"/><text x="66.9342%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (54 samples, 0.35%)</title><rect x="67.2560%" y="661" width="0.3549%" height="15" fill="rgb(206,98,19)"/><text x="67.5060%" y="671.50"></text></g><g><title>__memcpy_avx_unaligned (44 samples, 0.29%)</title><rect x="67.3217%" y="645" width="0.2892%" height="15" fill="rgb(217,5,26)"/><text x="67.5717%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (390 samples, 2.56%)</title><rect x="65.2383%" y="821" width="2.5633%" height="15" fill="rgb(235,190,38)"/><text x="65.4883%" y="831.50">al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (390 samples, 2.56%)</title><rect x="65.2383%" y="805" width="2.5633%" height="15" fill="rgb(247,86,24)"/><text x="65.4883%" y="815.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (390 samples, 2.56%)</title><rect x="65.2383%" y="789" width="2.5633%" height="15" fill="rgb(205,101,16)"/><text x="65.4883%" y="799.50">&lt;a..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (390 samples, 2.56%)</title><rect x="65.2383%" y="773" width="2.5633%" height="15" fill="rgb(246,168,33)"/><text x="65.4883%" y="783.50">co..</text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (390 samples, 2.56%)</title><rect x="65.2383%" y="757" width="2.5633%" height="15" fill="rgb(231,114,1)"/><text x="65.4883%" y="767.50">&lt;c..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (390 samples, 2.56%)</title><rect x="65.2383%" y="741" width="2.5633%" height="15" fill="rgb(207,184,53)"/><text x="65.4883%" y="751.50">&lt;c..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (390 samples, 2.56%)</title><rect x="65.2383%" y="725" width="2.5633%" height="15" fill="rgb(224,95,51)"/><text x="65.4883%" y="735.50">co..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (390 samples, 2.56%)</title><rect x="65.2383%" y="709" width="2.5633%" height="15" fill="rgb(212,188,45)"/><text x="65.4883%" y="719.50">co..</text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::_{{closure}} (150 samples, 0.99%)</title><rect x="66.8156%" y="693" width="0.9859%" height="15" fill="rgb(223,154,38)"/><text x="67.0656%" y="703.50"></text></g><g><title>core::iter::adapters::map_fold::_{{closure}} (127 samples, 0.83%)</title><rect x="66.9668%" y="677" width="0.8347%" height="15" fill="rgb(251,22,52)"/><text x="67.2168%" y="687.50"></text></g><g><title>core::ops::function::FnMut::call_mut (29 samples, 0.19%)</title><rect x="67.6109%" y="661" width="0.1906%" height="15" fill="rgb(229,209,22)"/><text x="67.8609%" y="671.50"></text></g><g><title>&lt;cswap::parser::SExp as core::clone::Clone&gt;::clone (392 samples, 2.58%)</title><rect x="65.2383%" y="885" width="2.5764%" height="15" fill="rgb(234,138,34)"/><text x="65.4883%" y="895.50">&lt;c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (392 samples, 2.58%)</title><rect x="65.2383%" y="869" width="2.5764%" height="15" fill="rgb(212,95,11)"/><text x="65.4883%" y="879.50">&lt;a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (392 samples, 2.58%)</title><rect x="65.2383%" y="853" width="2.5764%" height="15" fill="rgb(240,179,47)"/><text x="65.4883%" y="863.50">al..</text></g><g><title>alloc::slice::hack::to_vec (392 samples, 2.58%)</title><rect x="65.2383%" y="837" width="2.5764%" height="15" fill="rgb(240,163,11)"/><text x="65.4883%" y="847.50">al..</text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 0.21%)</title><rect x="67.9132%" y="821" width="0.2103%" height="15" fill="rgb(236,37,12)"/><text x="68.1632%" y="831.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.11%)</title><rect x="68.0118%" y="805" width="0.1117%" height="15" fill="rgb(232,164,16)"/><text x="68.2618%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (24 samples, 0.16%)</title><rect x="68.1959%" y="789" width="0.1577%" height="15" fill="rgb(244,205,15)"/><text x="68.4459%" y="799.50"></text></g><g><title>alloc::str::&lt;impl core::borrow::Borrow&lt;str&gt; for alloc::string::String&gt;::borrow (32 samples, 0.21%)</title><rect x="68.1499%" y="821" width="0.2103%" height="15" fill="rgb(223,117,47)"/><text x="68.3999%" y="831.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;core::ops::range::RangeFull&gt;&gt;::index (29 samples, 0.19%)</title><rect x="68.1696%" y="805" width="0.1906%" height="15" fill="rgb(244,107,35)"/><text x="68.4196%" y="815.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::get (100 samples, 0.66%)</title><rect x="67.8147%" y="885" width="0.6572%" height="15" fill="rgb(205,140,8)"/><text x="68.0647%" y="895.50"></text></g><g><title>alloc::collections::btree::search::search_tree (100 samples, 0.66%)</title><rect x="67.8147%" y="869" width="0.6572%" height="15" fill="rgb(228,84,46)"/><text x="68.0647%" y="879.50"></text></g><g><title>alloc::collections::btree::search::search_node (95 samples, 0.62%)</title><rect x="67.8475%" y="853" width="0.6244%" height="15" fill="rgb(254,188,9)"/><text x="68.0975%" y="863.50"></text></g><g><title>alloc::collections::btree::search::search_linear (94 samples, 0.62%)</title><rect x="67.8541%" y="837" width="0.6178%" height="15" fill="rgb(206,112,54)"/><text x="68.1041%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (35 samples, 0.23%)</title><rect x="68.4850%" y="677" width="0.2300%" height="15" fill="rgb(216,84,49)"/><text x="68.7350%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (35 samples, 0.23%)</title><rect x="68.4850%" y="661" width="0.2300%" height="15" fill="rgb(214,194,35)"/><text x="68.7350%" y="671.50"></text></g><g><title>core::slice::from_raw_parts_mut (35 samples, 0.23%)</title><rect x="68.4850%" y="645" width="0.2300%" height="15" fill="rgb(249,28,3)"/><text x="68.7350%" y="655.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (35 samples, 0.23%)</title><rect x="68.4850%" y="629" width="0.2300%" height="15" fill="rgb(222,56,52)"/><text x="68.7350%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (112 samples, 0.74%)</title><rect x="70.4108%" y="533" width="0.7361%" height="15" fill="rgb(245,217,50)"/><text x="70.6608%" y="543.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (32 samples, 0.21%)</title><rect x="70.9366%" y="517" width="0.2103%" height="15" fill="rgb(213,201,24)"/><text x="71.1866%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (262 samples, 1.72%)</title><rect x="69.9376%" y="549" width="1.7220%" height="15" fill="rgb(248,116,28)"/><text x="70.1876%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (78 samples, 0.51%)</title><rect x="71.1469%" y="533" width="0.5127%" height="15" fill="rgb(219,72,43)"/><text x="71.3969%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (469 samples, 3.08%)</title><rect x="69.4512%" y="565" width="3.0825%" height="15" fill="rgb(209,138,14)"/><text x="69.7012%" y="575.50">&lt;al..</text></g><g><title>core::slice::from_raw_parts_mut (133 samples, 0.87%)</title><rect x="71.6595%" y="549" width="0.8741%" height="15" fill="rgb(222,18,33)"/><text x="71.9095%" y="559.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (81 samples, 0.53%)</title><rect x="72.0013%" y="533" width="0.5324%" height="15" fill="rgb(213,199,7)"/><text x="72.2513%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (693 samples, 4.55%)</title><rect x="68.7151%" y="597" width="4.5547%" height="15" fill="rgb(250,110,10)"/><text x="68.9651%" y="607.50">&lt;allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (693 samples, 4.55%)</title><rect x="68.7151%" y="581" width="4.5547%" height="15" fill="rgb(248,123,6)"/><text x="68.9651%" y="591.50">&lt;allo..</text></g><g><title>core::slice::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (112 samples, 0.74%)</title><rect x="72.5337%" y="565" width="0.7361%" height="15" fill="rgb(206,91,31)"/><text x="72.7837%" y="575.50"></text></g><g><title>&lt;core::ops::range::RangeFull as core::slice::SliceIndex&lt;[T]&gt;&gt;::index_mut (36 samples, 0.24%)</title><rect x="73.0332%" y="549" width="0.2366%" height="15" fill="rgb(211,154,13)"/><text x="73.2832%" y="559.50"></text></g><g><title>_int_free (78 samples, 0.51%)</title><rect x="75.0969%" y="517" width="0.5127%" height="15" fill="rgb(225,148,7)"/><text x="75.3469%" y="527.50"></text></g><g><title>alloc::alloc::dealloc (173 samples, 1.14%)</title><rect x="74.5646%" y="533" width="1.1370%" height="15" fill="rgb(220,160,43)"/><text x="74.8146%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::dealloc (253 samples, 1.66%)</title><rect x="74.2097%" y="549" width="1.6628%" height="15" fill="rgb(213,52,39)"/><text x="74.4597%" y="559.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (26 samples, 0.17%)</title><rect x="75.7016%" y="533" width="0.1709%" height="15" fill="rgb(243,137,7)"/><text x="75.9516%" y="543.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (76 samples, 0.50%)</title><rect x="76.1485%" y="533" width="0.4995%" height="15" fill="rgb(230,79,13)"/><text x="76.3985%" y="543.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::convert::From&lt;core::ptr::unique::Unique&lt;T&gt;&gt;&gt;::from (127 samples, 0.83%)</title><rect x="75.8725%" y="549" width="0.8347%" height="15" fill="rgb(247,105,23)"/><text x="76.1225%" y="559.50"></text></g><g><title>core::alloc::Layout::from_size_align_unchecked (16 samples, 0.11%)</title><rect x="76.7992%" y="533" width="0.1052%" height="15" fill="rgb(223,179,41)"/><text x="77.0492%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_layout (34 samples, 0.22%)</title><rect x="76.7072%" y="549" width="0.2235%" height="15" fill="rgb(218,9,34)"/><text x="76.9572%" y="559.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (35 samples, 0.23%)</title><rect x="77.6208%" y="533" width="0.2300%" height="15" fill="rgb(222,106,8)"/><text x="77.8708%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1,502 samples, 9.87%)</title><rect x="68.4850%" y="693" width="9.8718%" height="15" fill="rgb(211,220,0)"/><text x="68.7350%" y="703.50">&lt;alloc::vec::V..</text></g><g><title>core::ptr::drop_in_place (1,467 samples, 9.64%)</title><rect x="68.7151%" y="677" width="9.6418%" height="15" fill="rgb(229,52,16)"/><text x="68.9651%" y="687.50">core::ptr::dro..</text></g><g><title>core::ptr::drop_in_place (1,467 samples, 9.64%)</title><rect x="68.7151%" y="661" width="9.6418%" height="15" fill="rgb(212,155,18)"/><text x="68.9651%" y="671.50">core::ptr::dro..</text></g><g><title>core::ptr::drop_in_place (1,467 samples, 9.64%)</title><rect x="68.7151%" y="645" width="9.6418%" height="15" fill="rgb(242,21,14)"/><text x="68.9651%" y="655.50">core::ptr::dro..</text></g><g><title>core::ptr::drop_in_place (1,467 samples, 9.64%)</title><rect x="68.7151%" y="629" width="9.6418%" height="15" fill="rgb(222,19,48)"/><text x="68.9651%" y="639.50">core::ptr::dro..</text></g><g><title>core::ptr::drop_in_place (1,467 samples, 9.64%)</title><rect x="68.7151%" y="613" width="9.6418%" height="15" fill="rgb(232,45,27)"/><text x="68.9651%" y="623.50">core::ptr::dro..</text></g><g><title>core::ptr::drop_in_place (774 samples, 5.09%)</title><rect x="73.2698%" y="597" width="5.0871%" height="15" fill="rgb(249,103,42)"/><text x="73.5198%" y="607.50">core::..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (774 samples, 5.09%)</title><rect x="73.2698%" y="581" width="5.0871%" height="15" fill="rgb(246,81,33)"/><text x="73.5198%" y="591.50">&lt;alloc..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::dealloc_buffer (763 samples, 5.01%)</title><rect x="73.3421%" y="565" width="5.0148%" height="15" fill="rgb(252,33,42)"/><text x="73.5921%" y="575.50">alloc:..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::cast (217 samples, 1.43%)</title><rect x="76.9307%" y="549" width="1.4262%" height="15" fill="rgb(209,212,41)"/><text x="77.1807%" y="559.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (77 samples, 0.51%)</title><rect x="77.8508%" y="533" width="0.5061%" height="15" fill="rgb(207,154,6)"/><text x="78.1008%" y="543.50"></text></g><g><title>_int_free (34 samples, 0.22%)</title><rect x="78.4095%" y="613" width="0.2235%" height="15" fill="rgb(223,64,47)"/><text x="78.6595%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::dealloc (49 samples, 0.32%)</title><rect x="78.3569%" y="645" width="0.3221%" height="15" fill="rgb(211,161,38)"/><text x="78.6069%" y="655.50"></text></g><g><title>alloc::alloc::dealloc (49 samples, 0.32%)</title><rect x="78.3569%" y="629" width="0.3221%" height="15" fill="rgb(219,138,40)"/><text x="78.6069%" y="639.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (112 samples, 0.74%)</title><rect x="78.3569%" y="677" width="0.7361%" height="15" fill="rgb(241,228,46)"/><text x="78.6069%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::dealloc_buffer (112 samples, 0.74%)</title><rect x="78.3569%" y="661" width="0.7361%" height="15" fill="rgb(223,209,38)"/><text x="78.6069%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_layout (63 samples, 0.41%)</title><rect x="78.6789%" y="645" width="0.4141%" height="15" fill="rgb(236,164,45)"/><text x="78.9289%" y="655.50"></text></g><g><title>core::alloc::Layout::from_size_align_unchecked (63 samples, 0.41%)</title><rect x="78.6789%" y="629" width="0.4141%" height="15" fill="rgb(231,15,5)"/><text x="78.9289%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.22%)</title><rect x="79.0930%" y="661" width="0.2235%" height="15" fill="rgb(252,35,15)"/><text x="79.3430%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (34 samples, 0.22%)</title><rect x="79.0930%" y="645" width="0.2235%" height="15" fill="rgb(248,181,18)"/><text x="79.3430%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (34 samples, 0.22%)</title><rect x="79.0930%" y="629" width="0.2235%" height="15" fill="rgb(233,39,42)"/><text x="79.3430%" y="639.50"></text></g><g><title>core::slice::from_raw_parts_mut (27 samples, 0.18%)</title><rect x="79.1390%" y="613" width="0.1775%" height="15" fill="rgb(238,110,33)"/><text x="79.3890%" y="623.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (27 samples, 0.18%)</title><rect x="79.1390%" y="597" width="0.1775%" height="15" fill="rgb(233,195,10)"/><text x="79.3890%" y="607.50"></text></g><g><title>_int_free (29 samples, 0.19%)</title><rect x="79.4545%" y="581" width="0.1906%" height="15" fill="rgb(254,105,3)"/><text x="79.7045%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::dealloc (54 samples, 0.35%)</title><rect x="79.3165%" y="613" width="0.3549%" height="15" fill="rgb(221,225,9)"/><text x="79.5665%" y="623.50"></text></g><g><title>alloc::alloc::dealloc (54 samples, 0.35%)</title><rect x="79.3165%" y="597" width="0.3549%" height="15" fill="rgb(224,227,45)"/><text x="79.5665%" y="607.50"></text></g><g><title>core::ptr::drop_in_place (1,711 samples, 11.25%)</title><rect x="68.4850%" y="885" width="11.2455%" height="15" fill="rgb(229,198,43)"/><text x="68.7350%" y="895.50">core::ptr::drop_i..</text></g><g><title>core::ptr::drop_in_place (1,711 samples, 11.25%)</title><rect x="68.4850%" y="869" width="11.2455%" height="15" fill="rgb(206,209,35)"/><text x="68.7350%" y="879.50">core::ptr::drop_i..</text></g><g><title>core::ptr::drop_in_place (1,711 samples, 11.25%)</title><rect x="68.4850%" y="853" width="11.2455%" height="15" fill="rgb(245,195,53)"/><text x="68.7350%" y="863.50">core::ptr::drop_i..</text></g><g><title>core::ptr::drop_in_place (1,711 samples, 11.25%)</title><rect x="68.4850%" y="837" width="11.2455%" height="15" fill="rgb(240,92,26)"/><text x="68.7350%" y="847.50">core::ptr::drop_i..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1,711 samples, 11.25%)</title><rect x="68.4850%" y="821" width="11.2455%" height="15" fill="rgb(207,40,23)"/><text x="68.7350%" y="831.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>core::ptr::drop_in_place (1,711 samples, 11.25%)</title><rect x="68.4850%" y="805" width="11.2455%" height="15" fill="rgb(223,111,35)"/><text x="68.7350%" y="815.50">core::ptr::drop_i..</text></g><g><title>core::ptr::drop_in_place (1,711 samples, 11.25%)</title><rect x="68.4850%" y="789" width="11.2455%" height="15" fill="rgb(229,147,28)"/><text x="68.7350%" y="799.50">core::ptr::drop_i..</text></g><g><title>core::ptr::drop_in_place (1,711 samples, 11.25%)</title><rect x="68.4850%" y="773" width="11.2455%" height="15" fill="rgb(211,29,28)"/><text x="68.7350%" y="783.50">core::ptr::drop_i..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1,711 samples, 11.25%)</title><rect x="68.4850%" y="757" width="11.2455%" height="15" fill="rgb(228,72,33)"/><text x="68.7350%" y="767.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>core::ptr::drop_in_place (1,711 samples, 11.25%)</title><rect x="68.4850%" y="741" width="11.2455%" height="15" fill="rgb(205,214,31)"/><text x="68.7350%" y="751.50">core::ptr::drop_i..</text></g><g><title>core::ptr::drop_in_place (1,711 samples, 11.25%)</title><rect x="68.4850%" y="725" width="11.2455%" height="15" fill="rgb(224,111,15)"/><text x="68.7350%" y="735.50">core::ptr::drop_i..</text></g><g><title>core::ptr::drop_in_place (1,711 samples, 11.25%)</title><rect x="68.4850%" y="709" width="11.2455%" height="15" fill="rgb(253,21,26)"/><text x="68.7350%" y="719.50">core::ptr::drop_i..</text></g><g><title>core::ptr::drop_in_place (209 samples, 1.37%)</title><rect x="78.3569%" y="693" width="1.3736%" height="15" fill="rgb(245,139,43)"/><text x="78.6069%" y="703.50"></text></g><g><title>core::ptr::drop_in_place (97 samples, 0.64%)</title><rect x="79.0930%" y="677" width="0.6375%" height="15" fill="rgb(252,170,7)"/><text x="79.3430%" y="687.50"></text></g><g><title>core::ptr::drop_in_place (63 samples, 0.41%)</title><rect x="79.3165%" y="661" width="0.4141%" height="15" fill="rgb(231,118,14)"/><text x="79.5665%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (63 samples, 0.41%)</title><rect x="79.3165%" y="645" width="0.4141%" height="15" fill="rgb(238,83,0)"/><text x="79.5665%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::dealloc_buffer (63 samples, 0.41%)</title><rect x="79.3165%" y="629" width="0.4141%" height="15" fill="rgb(221,39,39)"/><text x="79.5665%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (27 samples, 0.18%)</title><rect x="81.1370%" y="677" width="0.1775%" height="15" fill="rgb(222,119,46)"/><text x="81.3870%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (64 samples, 0.42%)</title><rect x="81.0056%" y="693" width="0.4206%" height="15" fill="rgb(222,165,49)"/><text x="81.2556%" y="703.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (17 samples, 0.11%)</title><rect x="81.3145%" y="677" width="0.1117%" height="15" fill="rgb(219,113,52)"/><text x="81.5645%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (119 samples, 0.78%)</title><rect x="80.9004%" y="709" width="0.7821%" height="15" fill="rgb(214,7,15)"/><text x="81.1504%" y="719.50"></text></g><g><title>core::slice::from_raw_parts_mut (39 samples, 0.26%)</title><rect x="81.4262%" y="693" width="0.2563%" height="15" fill="rgb(235,32,4)"/><text x="81.6762%" y="703.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (30 samples, 0.20%)</title><rect x="81.4854%" y="677" width="0.1972%" height="15" fill="rgb(238,90,54)"/><text x="81.7354%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (191 samples, 1.26%)</title><rect x="80.6441%" y="725" width="1.2553%" height="15" fill="rgb(213,208,19)"/><text x="80.8941%" y="735.50"></text></g><g><title>core::slice::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (33 samples, 0.22%)</title><rect x="81.6826%" y="709" width="0.2169%" height="15" fill="rgb(233,156,4)"/><text x="81.9326%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (63 samples, 0.41%)</title><rect x="83.8449%" y="613" width="0.4141%" height="15" fill="rgb(207,194,5)"/><text x="84.0949%" y="623.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (16 samples, 0.11%)</title><rect x="84.1538%" y="597" width="0.1052%" height="15" fill="rgb(206,111,30)"/><text x="84.4038%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (131 samples, 0.86%)</title><rect x="83.6280%" y="629" width="0.8610%" height="15" fill="rgb(243,70,54)"/><text x="83.8780%" y="639.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (35 samples, 0.23%)</title><rect x="84.2590%" y="613" width="0.2300%" height="15" fill="rgb(242,28,8)"/><text x="84.5090%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (191 samples, 1.26%)</title><rect x="83.3454%" y="645" width="1.2553%" height="15" fill="rgb(219,106,18)"/><text x="83.5954%" y="655.50"></text></g><g><title>core::slice::from_raw_parts_mut (17 samples, 0.11%)</title><rect x="84.4890%" y="629" width="0.1117%" height="15" fill="rgb(244,222,10)"/><text x="84.7390%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (293 samples, 1.93%)</title><rect x="83.0956%" y="661" width="1.9257%" height="15" fill="rgb(236,179,52)"/><text x="83.3456%" y="671.50">&lt;..</text></g><g><title>core::slice::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (64 samples, 0.42%)</title><rect x="84.6007%" y="645" width="0.4206%" height="15" fill="rgb(213,23,39)"/><text x="84.8507%" y="655.50"></text></g><g><title>&lt;core::ops::range::RangeFull as core::slice::SliceIndex&lt;[T]&gt;&gt;::index_mut (24 samples, 0.16%)</title><rect x="84.8636%" y="629" width="0.1577%" height="15" fill="rgb(238,48,10)"/><text x="85.1136%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (49 samples, 0.32%)</title><rect x="86.7105%" y="581" width="0.3221%" height="15" fill="rgb(251,196,23)"/><text x="86.9605%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (649 samples, 4.27%)</title><rect x="82.8853%" y="677" width="4.2655%" height="15" fill="rgb(250,152,24)"/><text x="83.1353%" y="687.50">&lt;allo..</text></g><g><title>core::ptr::drop_in_place (324 samples, 2.13%)</title><rect x="85.0214%" y="661" width="2.1295%" height="15" fill="rgb(209,150,17)"/><text x="85.2714%" y="671.50">c..</text></g><g><title>core::ptr::drop_in_place (236 samples, 1.55%)</title><rect x="85.5997%" y="645" width="1.5511%" height="15" fill="rgb(234,202,34)"/><text x="85.8497%" y="655.50"></text></g><g><title>core::ptr::drop_in_place (173 samples, 1.14%)</title><rect x="86.0138%" y="629" width="1.1370%" height="15" fill="rgb(253,148,53)"/><text x="86.2638%" y="639.50"></text></g><g><title>core::ptr::drop_in_place (112 samples, 0.74%)</title><rect x="86.4147%" y="613" width="0.7361%" height="15" fill="rgb(218,129,16)"/><text x="86.6647%" y="623.50"></text></g><g><title>core::ptr::drop_in_place (94 samples, 0.62%)</title><rect x="86.5330%" y="597" width="0.6178%" height="15" fill="rgb(216,85,19)"/><text x="86.7830%" y="607.50"></text></g><g><title>core::ptr::drop_in_place (18 samples, 0.12%)</title><rect x="87.0325%" y="581" width="0.1183%" height="15" fill="rgb(235,228,7)"/><text x="87.2825%" y="591.50"></text></g><g><title>alloc::alloc::dealloc (27 samples, 0.18%)</title><rect x="87.8935%" y="613" width="0.1775%" height="15" fill="rgb(245,175,0)"/><text x="88.1435%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::dealloc (74 samples, 0.49%)</title><rect x="87.7029%" y="629" width="0.4864%" height="15" fill="rgb(208,168,36)"/><text x="87.9529%" y="639.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (18 samples, 0.12%)</title><rect x="88.0710%" y="613" width="0.1183%" height="15" fill="rgb(246,171,24)"/><text x="88.3210%" y="623.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::convert::From&lt;core::ptr::unique::Unique&lt;T&gt;&gt;&gt;::from (17 samples, 0.11%)</title><rect x="88.1893%" y="629" width="0.1117%" height="15" fill="rgb(215,142,24)"/><text x="88.4393%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_layout (81 samples, 0.53%)</title><rect x="88.3010%" y="629" width="0.5324%" height="15" fill="rgb(250,187,7)"/><text x="88.5510%" y="639.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (18 samples, 0.12%)</title><rect x="89.1949%" y="613" width="0.1183%" height="15" fill="rgb(228,66,33)"/><text x="89.4449%" y="623.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (352 samples, 2.31%)</title><rect x="87.2823%" y="661" width="2.3135%" height="15" fill="rgb(234,215,21)"/><text x="87.5323%" y="671.50">&lt;..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::dealloc_buffer (336 samples, 2.21%)</title><rect x="87.3874%" y="645" width="2.2083%" height="15" fill="rgb(222,191,20)"/><text x="87.6374%" y="655.50">a..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::cast (116 samples, 0.76%)</title><rect x="88.8334%" y="629" width="0.7624%" height="15" fill="rgb(245,79,54)"/><text x="89.0834%" y="639.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (43 samples, 0.28%)</title><rect x="89.3132%" y="613" width="0.2826%" height="15" fill="rgb(240,10,37)"/><text x="89.5632%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (22 samples, 0.14%)</title><rect x="90.2136%" y="581" width="0.1446%" height="15" fill="rgb(214,192,32)"/><text x="90.4636%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (67 samples, 0.44%)</title><rect x="90.0887%" y="597" width="0.4404%" height="15" fill="rgb(209,36,54)"/><text x="90.3387%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (26 samples, 0.17%)</title><rect x="90.3582%" y="581" width="0.1709%" height="15" fill="rgb(220,10,11)"/><text x="90.6082%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (103 samples, 0.68%)</title><rect x="89.9441%" y="613" width="0.6770%" height="15" fill="rgb(221,106,17)"/><text x="90.1941%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (173 samples, 1.14%)</title><rect x="89.6681%" y="645" width="1.1370%" height="15" fill="rgb(251,142,44)"/><text x="89.9181%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (165 samples, 1.08%)</title><rect x="89.7207%" y="629" width="1.0845%" height="15" fill="rgb(238,13,15)"/><text x="89.9707%" y="639.50"></text></g><g><title>core::slice::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (28 samples, 0.18%)</title><rect x="90.6211%" y="613" width="0.1840%" height="15" fill="rgb(208,107,27)"/><text x="90.8711%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::dealloc (28 samples, 0.18%)</title><rect x="91.0943%" y="597" width="0.1840%" height="15" fill="rgb(205,136,37)"/><text x="91.3443%" y="607.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (19 samples, 0.12%)</title><rect x="91.3178%" y="581" width="0.1249%" height="15" fill="rgb(250,205,27)"/><text x="91.5678%" y="591.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::convert::From&lt;core::ptr::unique::Unique&lt;T&gt;&gt;&gt;::from (30 samples, 0.20%)</title><rect x="91.2783%" y="597" width="0.1972%" height="15" fill="rgb(210,80,43)"/><text x="91.5283%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1,741 samples, 11.44%)</title><rect x="80.4929%" y="741" width="11.4427%" height="15" fill="rgb(247,160,36)"/><text x="80.7429%" y="751.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>core::ptr::drop_in_place (1,527 samples, 10.04%)</title><rect x="81.8994%" y="725" width="10.0361%" height="15" fill="rgb(234,13,49)"/><text x="82.1494%" y="735.50">core::ptr::drop..</text></g><g><title>core::ptr::drop_in_place (1,495 samples, 9.83%)</title><rect x="82.1098%" y="709" width="9.8258%" height="15" fill="rgb(234,122,0)"/><text x="82.3598%" y="719.50">core::ptr::dro..</text></g><g><title>core::ptr::drop_in_place (1,420 samples, 9.33%)</title><rect x="82.6027%" y="693" width="9.3329%" height="15" fill="rgb(207,146,38)"/><text x="82.8527%" y="703.50">core::ptr::dr..</text></g><g><title>core::ptr::drop_in_place (728 samples, 4.78%)</title><rect x="87.1508%" y="677" width="4.7848%" height="15" fill="rgb(207,177,25)"/><text x="87.4008%" y="687.50">core::..</text></g><g><title>core::ptr::drop_in_place (356 samples, 2.34%)</title><rect x="89.5958%" y="661" width="2.3398%" height="15" fill="rgb(211,178,42)"/><text x="89.8458%" y="671.50">c..</text></g><g><title>core::ptr::drop_in_place (172 samples, 1.13%)</title><rect x="90.8051%" y="645" width="1.1305%" height="15" fill="rgb(230,69,54)"/><text x="91.0551%" y="655.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (170 samples, 1.12%)</title><rect x="90.8183%" y="629" width="1.1173%" height="15" fill="rgb(214,135,41)"/><text x="91.0683%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::dealloc_buffer (166 samples, 1.09%)</title><rect x="90.8446%" y="613" width="1.0910%" height="15" fill="rgb(237,67,25)"/><text x="91.0946%" y="623.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::cast (70 samples, 0.46%)</title><rect x="91.4755%" y="597" width="0.4601%" height="15" fill="rgb(222,189,50)"/><text x="91.7255%" y="607.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (27 samples, 0.18%)</title><rect x="91.7581%" y="581" width="0.1775%" height="15" fill="rgb(245,148,34)"/><text x="92.0081%" y="591.50"></text></g><g><title>_int_free (34 samples, 0.22%)</title><rect x="92.5665%" y="661" width="0.2235%" height="15" fill="rgb(222,29,6)"/><text x="92.8165%" y="671.50"></text></g><g><title>alloc::alloc::dealloc (58 samples, 0.38%)</title><rect x="92.4285%" y="677" width="0.3812%" height="15" fill="rgb(221,189,43)"/><text x="92.6785%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::dealloc (84 samples, 0.55%)</title><rect x="92.3102%" y="693" width="0.5521%" height="15" fill="rgb(207,36,27)"/><text x="92.5602%" y="703.50"></text></g><g><title>core::alloc::Layout::from_size_align_unchecked (27 samples, 0.18%)</title><rect x="93.2041%" y="677" width="0.1775%" height="15" fill="rgb(217,90,24)"/><text x="93.4541%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_layout (65 samples, 0.43%)</title><rect x="92.9609%" y="693" width="0.4272%" height="15" fill="rgb(224,66,35)"/><text x="93.2109%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2,113 samples, 13.89%)</title><rect x="79.7963%" y="805" width="13.8876%" height="15" fill="rgb(221,13,50)"/><text x="80.0463%" y="815.50">&lt;alloc::vec::Vec&lt;T&gt; a..</text></g><g><title>core::ptr::drop_in_place (2,113 samples, 13.89%)</title><rect x="79.7963%" y="789" width="13.8876%" height="15" fill="rgb(236,68,49)"/><text x="80.0463%" y="799.50">core::ptr::drop_in_pl..</text></g><g><title>core::ptr::drop_in_place (2,102 samples, 13.82%)</title><rect x="79.8686%" y="773" width="13.8153%" height="15" fill="rgb(229,146,28)"/><text x="80.1186%" y="783.50">core::ptr::drop_in_pl..</text></g><g><title>core::ptr::drop_in_place (2,051 samples, 13.48%)</title><rect x="80.2037%" y="757" width="13.4801%" height="15" fill="rgb(225,31,38)"/><text x="80.4537%" y="767.50">core::ptr::drop_in_p..</text></g><g><title>core::ptr::drop_in_place (266 samples, 1.75%)</title><rect x="91.9356%" y="741" width="1.7483%" height="15" fill="rgb(250,208,3)"/><text x="92.1856%" y="751.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (247 samples, 1.62%)</title><rect x="92.0605%" y="725" width="1.6234%" height="15" fill="rgb(246,54,23)"/><text x="92.3105%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::dealloc_buffer (240 samples, 1.58%)</title><rect x="92.1065%" y="709" width="1.5774%" height="15" fill="rgb(243,76,11)"/><text x="92.3565%" y="719.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::cast (45 samples, 0.30%)</title><rect x="93.3881%" y="693" width="0.2958%" height="15" fill="rgb(245,21,50)"/><text x="93.6381%" y="703.50"></text></g><g><title>cswap::rl_s (14,592 samples, 95.91%)</title><rect x="2.6224%" y="997" width="95.9054%" height="15" fill="rgb(228,9,43)"/><text x="2.8724%" y="1007.50">cswap::rl_s</text></g><g><title>cswap::rl_s (14,592 samples, 95.91%)</title><rect x="2.6224%" y="981" width="95.9054%" height="15" fill="rgb(208,100,47)"/><text x="2.8724%" y="991.50">cswap::rl_s</text></g><g><title>cswap::rl_s (14,592 samples, 95.91%)</title><rect x="2.6224%" y="965" width="95.9054%" height="15" fill="rgb(232,26,8)"/><text x="2.8724%" y="975.50">cswap::rl_s</text></g><g><title>cswap::rl_s (12,870 samples, 84.59%)</title><rect x="13.9402%" y="949" width="84.5876%" height="15" fill="rgb(216,166,38)"/><text x="14.1902%" y="959.50">cswap::rl_s</text></g><g><title>cswap::rl_s (9,400 samples, 61.78%)</title><rect x="36.7466%" y="933" width="61.7811%" height="15" fill="rgb(251,202,51)"/><text x="36.9966%" y="943.50">cswap::rl_s</text></g><g><title>cswap::rl_s (6,856 samples, 45.06%)</title><rect x="53.4670%" y="917" width="45.0608%" height="15" fill="rgb(254,216,34)"/><text x="53.7170%" y="927.50">cswap::rl_s</text></g><g><title>cswap::rl_s (5,065 samples, 33.29%)</title><rect x="65.2383%" y="901" width="33.2895%" height="15" fill="rgb(251,32,27)"/><text x="65.4883%" y="911.50">cswap::rl_s</text></g><g><title>cswap::rl_s (2,860 samples, 18.80%)</title><rect x="79.7305%" y="885" width="18.7972%" height="15" fill="rgb(208,127,28)"/><text x="79.9805%" y="895.50">cswap::rl_s</text></g><g><title>core::ptr::drop_in_place (2,852 samples, 18.74%)</title><rect x="79.7831%" y="869" width="18.7447%" height="15" fill="rgb(224,137,22)"/><text x="80.0331%" y="879.50">core::ptr::drop_in_place</text></g><g><title>core::ptr::drop_in_place (2,852 samples, 18.74%)</title><rect x="79.7831%" y="853" width="18.7447%" height="15" fill="rgb(254,70,32)"/><text x="80.0331%" y="863.50">core::ptr::drop_in_place</text></g><g><title>core::ptr::drop_in_place (2,850 samples, 18.73%)</title><rect x="79.7963%" y="837" width="18.7315%" height="15" fill="rgb(229,75,37)"/><text x="80.0463%" y="847.50">core::ptr::drop_in_place</text></g><g><title>core::ptr::drop_in_place (2,850 samples, 18.73%)</title><rect x="79.7963%" y="821" width="18.7315%" height="15" fill="rgb(252,64,23)"/><text x="80.0463%" y="831.50">core::ptr::drop_in_place</text></g><g><title>core::ptr::drop_in_place (737 samples, 4.84%)</title><rect x="93.6839%" y="805" width="4.8439%" height="15" fill="rgb(232,162,48)"/><text x="93.9339%" y="815.50">core::..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (737 samples, 4.84%)</title><rect x="93.6839%" y="789" width="4.8439%" height="15" fill="rgb(246,160,12)"/><text x="93.9339%" y="799.50">&lt;alloc..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::dealloc_buffer (737 samples, 4.84%)</title><rect x="93.6839%" y="773" width="4.8439%" height="15" fill="rgb(247,166,0)"/><text x="93.9339%" y="783.50">alloc:..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::dealloc (737 samples, 4.84%)</title><rect x="93.6839%" y="757" width="4.8439%" height="15" fill="rgb(249,219,21)"/><text x="93.9339%" y="767.50">&lt;alloc..</text></g><g><title>alloc::alloc::dealloc (737 samples, 4.84%)</title><rect x="93.6839%" y="741" width="4.8439%" height="15" fill="rgb(205,209,3)"/><text x="93.9339%" y="751.50">alloc:..</text></g><g><title>_int_free (737 samples, 4.84%)</title><rect x="93.6839%" y="725" width="4.8439%" height="15" fill="rgb(243,44,1)"/><text x="93.9339%" y="735.50">_int_f..</text></g><g><title>malloc_consolidate (737 samples, 4.84%)</title><rect x="93.6839%" y="709" width="4.8439%" height="15" fill="rgb(206,159,16)"/><text x="93.9339%" y="719.50">malloc..</text></g><g><title>unlink_chunk.isra.0 (403 samples, 2.65%)</title><rect x="95.8791%" y="693" width="2.6487%" height="15" fill="rgb(244,77,30)"/><text x="96.1291%" y="703.50">un..</text></g><g><title>nom::combinator::map::_{{closure}} (18 samples, 0.12%)</title><rect x="98.6592%" y="869" width="0.1183%" height="15" fill="rgb(218,69,12)"/><text x="98.9092%" y="879.50"></text></g><g><title>nom::sequence::delimited::_{{closure}} (18 samples, 0.12%)</title><rect x="98.6592%" y="853" width="0.1183%" height="15" fill="rgb(212,87,7)"/><text x="98.9092%" y="863.50"></text></g><g><title>nom::sequence::delimited::_{{closure}} (34 samples, 0.22%)</title><rect x="98.5606%" y="981" width="0.2235%" height="15" fill="rgb(245,114,25)"/><text x="98.8106%" y="991.50"></text></g><g><title>nom::sequence::delimited::_{{closure}} (19 samples, 0.12%)</title><rect x="98.6592%" y="965" width="0.1249%" height="15" fill="rgb(210,61,42)"/><text x="98.9092%" y="975.50"></text></g><g><title>nom::multi::many1::_{{closure}} (19 samples, 0.12%)</title><rect x="98.6592%" y="949" width="0.1249%" height="15" fill="rgb(211,52,33)"/><text x="98.9092%" y="959.50"></text></g><g><title>core::ops::function::Fn::call (19 samples, 0.12%)</title><rect x="98.6592%" y="933" width="0.1249%" height="15" fill="rgb(234,58,33)"/><text x="98.9092%" y="943.50"></text></g><g><title>cswap::parser::sexp (19 samples, 0.12%)</title><rect x="98.6592%" y="917" width="0.1249%" height="15" fill="rgb(220,115,36)"/><text x="98.9092%" y="927.50"></text></g><g><title>nom::branch::alt::_{{closure}} (19 samples, 0.12%)</title><rect x="98.6592%" y="901" width="0.1249%" height="15" fill="rgb(243,153,54)"/><text x="98.9092%" y="911.50"></text></g><g><title>&lt; (19 samples, 0.12%)</title><rect x="98.6592%" y="885" width="0.1249%" height="15" fill="rgb(251,47,18)"/><text x="98.9092%" y="895.50"></text></g><g><title>nom::combinator::map::_{{closure}} (47 samples, 0.31%)</title><rect x="98.5541%" y="997" width="0.3089%" height="15" fill="rgb(242,102,42)"/><text x="98.8041%" y="1007.50"></text></g><g><title>core::ops::function::Fn::call (19 samples, 0.12%)</title><rect x="98.8695%" y="885" width="0.1249%" height="15" fill="rgb(234,31,38)"/><text x="99.1195%" y="895.50"></text></g><g><title>nom::combinator::map::_{{closure}} (25 samples, 0.16%)</title><rect x="98.8695%" y="917" width="0.1643%" height="15" fill="rgb(221,117,51)"/><text x="99.1195%" y="927.50"></text></g><g><title>nom::sequence::delimited::_{{closure}} (25 samples, 0.16%)</title><rect x="98.8695%" y="901" width="0.1643%" height="15" fill="rgb(212,20,18)"/><text x="99.1195%" y="911.50"></text></g><g><title>nom::multi::many1::_{{closure}} (28 samples, 0.18%)</title><rect x="98.8695%" y="997" width="0.1840%" height="15" fill="rgb(245,133,36)"/><text x="99.1195%" y="1007.50"></text></g><g><title>core::ops::function::Fn::call (28 samples, 0.18%)</title><rect x="98.8695%" y="981" width="0.1840%" height="15" fill="rgb(212,6,19)"/><text x="99.1195%" y="991.50"></text></g><g><title>cswap::parser::sexp (28 samples, 0.18%)</title><rect x="98.8695%" y="965" width="0.1840%" height="15" fill="rgb(218,1,36)"/><text x="99.1195%" y="975.50"></text></g><g><title>nom::branch::alt::_{{closure}} (28 samples, 0.18%)</title><rect x="98.8695%" y="949" width="0.1840%" height="15" fill="rgb(246,84,54)"/><text x="99.1195%" y="959.50"></text></g><g><title>&lt; (28 samples, 0.18%)</title><rect x="98.8695%" y="933" width="0.1840%" height="15" fill="rgb(242,110,6)"/><text x="99.1195%" y="943.50"></text></g><g><title>cswap::parser::bool_sexp (17 samples, 0.11%)</title><rect x="99.0536%" y="965" width="0.1117%" height="15" fill="rgb(214,47,5)"/><text x="99.3036%" y="975.50"></text></g><g><title>nom::sequence::delimited::_{{closure}} (17 samples, 0.11%)</title><rect x="99.0536%" y="949" width="0.1117%" height="15" fill="rgb(218,159,25)"/><text x="99.3036%" y="959.50"></text></g><g><title>nom::branch::alt::_{{closure}} (17 samples, 0.11%)</title><rect x="99.0536%" y="933" width="0.1117%" height="15" fill="rgb(215,211,28)"/><text x="99.3036%" y="943.50"></text></g><g><title>&lt; (17 samples, 0.11%)</title><rect x="99.0536%" y="917" width="0.1117%" height="15" fill="rgb(238,59,32)"/><text x="99.3036%" y="927.50"></text></g><g><title>nom::combinator::map::_{{closure}} (17 samples, 0.11%)</title><rect x="99.0536%" y="901" width="0.1117%" height="15" fill="rgb(226,82,3)"/><text x="99.3036%" y="911.50"></text></g><g><title>nom::sequence::tuple::_{{closure}} (17 samples, 0.11%)</title><rect x="99.0536%" y="885" width="0.1117%" height="15" fill="rgb(240,164,32)"/><text x="99.3036%" y="895.50"></text></g><g><title>&lt; (17 samples, 0.11%)</title><rect x="99.0536%" y="869" width="0.1117%" height="15" fill="rgb(232,46,7)"/><text x="99.3036%" y="879.50"></text></g><g><title>core::ops::function::Fn::call (24 samples, 0.16%)</title><rect x="99.0536%" y="981" width="0.1577%" height="15" fill="rgb(229,129,53)"/><text x="99.3036%" y="991.50"></text></g><g><title>nom::combinator::map::_{{closure}} (17 samples, 0.11%)</title><rect x="99.2902%" y="821" width="0.1117%" height="15" fill="rgb(234,188,29)"/><text x="99.5402%" y="831.50"></text></g><g><title>nom::branch::alt::_{{closure}} (44 samples, 0.29%)</title><rect x="99.2113%" y="981" width="0.2892%" height="15" fill="rgb(246,141,4)"/><text x="99.4613%" y="991.50"></text></g><g><title>&lt; (44 samples, 0.29%)</title><rect x="99.2113%" y="965" width="0.2892%" height="15" fill="rgb(229,23,39)"/><text x="99.4613%" y="975.50"></text></g><g><title>nom::combinator::map::_{{closure}} (44 samples, 0.29%)</title><rect x="99.2113%" y="949" width="0.2892%" height="15" fill="rgb(206,12,3)"/><text x="99.4613%" y="959.50"></text></g><g><title>nom::sequence::tuple::_{{closure}} (44 samples, 0.29%)</title><rect x="99.2113%" y="933" width="0.2892%" height="15" fill="rgb(252,226,20)"/><text x="99.4613%" y="943.50"></text></g><g><title>&lt; (44 samples, 0.29%)</title><rect x="99.2113%" y="917" width="0.2892%" height="15" fill="rgb(216,123,35)"/><text x="99.4613%" y="927.50"></text></g><g><title>nom::multi::many1::_{{closure}} (32 samples, 0.21%)</title><rect x="99.2902%" y="901" width="0.2103%" height="15" fill="rgb(212,68,40)"/><text x="99.5402%" y="911.50"></text></g><g><title>core::ops::function::Fn::call (32 samples, 0.21%)</title><rect x="99.2902%" y="885" width="0.2103%" height="15" fill="rgb(254,125,32)"/><text x="99.5402%" y="895.50"></text></g><g><title>cswap::parser::sexp (32 samples, 0.21%)</title><rect x="99.2902%" y="869" width="0.2103%" height="15" fill="rgb(253,97,22)"/><text x="99.5402%" y="879.50"></text></g><g><title>nom::branch::alt::_{{closure}} (32 samples, 0.21%)</title><rect x="99.2902%" y="853" width="0.2103%" height="15" fill="rgb(241,101,14)"/><text x="99.5402%" y="863.50"></text></g><g><title>&lt; (32 samples, 0.21%)</title><rect x="99.2902%" y="837" width="0.2103%" height="15" fill="rgb(238,103,29)"/><text x="99.5402%" y="847.50"></text></g><g><title>nom::sequence::delimited::_{{closure}} (95 samples, 0.62%)</title><rect x="99.0536%" y="997" width="0.6244%" height="15" fill="rgb(233,195,47)"/><text x="99.3036%" y="1007.50"></text></g><g><title>[unknown] (15,167 samples, 99.68%)</title><rect x="0.0329%" y="1013" width="99.6845%" height="15" fill="rgb(246,218,30)"/><text x="0.2829%" y="1023.50">[unknown]</text></g><g><title>cswap::parser::rmv_comments (20 samples, 0.13%)</title><rect x="99.7634%" y="805" width="0.1314%" height="15" fill="rgb(219,145,47)"/><text x="100.0134%" y="815.50"></text></g><g><title>nom::multi::many1::_{{closure}} (20 samples, 0.13%)</title><rect x="99.7634%" y="789" width="0.1314%" height="15" fill="rgb(243,12,26)"/><text x="100.0134%" y="799.50"></text></g><g><title>nom::branch::alt::_{{closure}} (20 samples, 0.13%)</title><rect x="99.7634%" y="773" width="0.1314%" height="15" fill="rgb(214,87,16)"/><text x="100.0134%" y="783.50"></text></g><g><title>&lt; (20 samples, 0.13%)</title><rect x="99.7634%" y="757" width="0.1314%" height="15" fill="rgb(208,99,42)"/><text x="100.0134%" y="767.50"></text></g><g><title>nom::bytes::complete::take_while1::_{{closure}} (20 samples, 0.13%)</title><rect x="99.7634%" y="741" width="0.1314%" height="15" fill="rgb(253,99,2)"/><text x="100.0134%" y="751.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputTakeAtPosition&gt;::split_at_position1_complete (20 samples, 0.13%)</title><rect x="99.7634%" y="725" width="0.1314%" height="15" fill="rgb(220,168,23)"/><text x="100.0134%" y="735.50"></text></g><g><title>core::str::&lt;impl str&gt;::find (20 samples, 0.13%)</title><rect x="99.7634%" y="709" width="0.1314%" height="15" fill="rgb(242,38,24)"/><text x="100.0134%" y="719.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (20 samples, 0.13%)</title><rect x="99.7634%" y="693" width="0.1314%" height="15" fill="rgb(225,182,9)"/><text x="100.0134%" y="703.50"></text></g><g><title>core::str::pattern::Searcher::next_match (20 samples, 0.13%)</title><rect x="99.7634%" y="677" width="0.1314%" height="15" fill="rgb(243,178,37)"/><text x="100.0134%" y="687.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (20 samples, 0.13%)</title><rect x="99.7634%" y="661" width="0.1314%" height="15" fill="rgb(232,139,19)"/><text x="100.0134%" y="671.50"></text></g><g><title>__libc_start_main (38 samples, 0.25%)</title><rect x="99.7240%" y="997" width="0.2498%" height="15" fill="rgb(225,201,24)"/><text x="99.9740%" y="1007.50"></text></g><g><title>main (38 samples, 0.25%)</title><rect x="99.7240%" y="981" width="0.2498%" height="15" fill="rgb(221,47,46)"/><text x="99.9740%" y="991.50"></text></g><g><title>std::rt::lang_start (38 samples, 0.25%)</title><rect x="99.7240%" y="965" width="0.2498%" height="15" fill="rgb(249,23,13)"/><text x="99.9740%" y="975.50"></text></g><g><title>std::rt::lang_start_internal (38 samples, 0.25%)</title><rect x="99.7240%" y="949" width="0.2498%" height="15" fill="rgb(219,9,5)"/><text x="99.9740%" y="959.50"></text></g><g><title>std::panic::catch_unwind (38 samples, 0.25%)</title><rect x="99.7240%" y="933" width="0.2498%" height="15" fill="rgb(254,171,16)"/><text x="99.9740%" y="943.50"></text></g><g><title>std::panicking::try (38 samples, 0.25%)</title><rect x="99.7240%" y="917" width="0.2498%" height="15" fill="rgb(230,171,20)"/><text x="99.9740%" y="927.50"></text></g><g><title>__rust_maybe_catch_panic (38 samples, 0.25%)</title><rect x="99.7240%" y="901" width="0.2498%" height="15" fill="rgb(210,71,41)"/><text x="99.9740%" y="911.50"></text></g><g><title>std::panicking::try::do_call (38 samples, 0.25%)</title><rect x="99.7240%" y="885" width="0.2498%" height="15" fill="rgb(206,173,20)"/><text x="99.9740%" y="895.50"></text></g><g><title>std::rt::lang_start_internal::_{{closure}} (38 samples, 0.25%)</title><rect x="99.7240%" y="869" width="0.2498%" height="15" fill="rgb(233,88,34)"/><text x="99.9740%" y="879.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (38 samples, 0.25%)</title><rect x="99.7240%" y="853" width="0.2498%" height="15" fill="rgb(223,209,46)"/><text x="99.9740%" y="863.50"></text></g><g><title>main::main (38 samples, 0.25%)</title><rect x="99.7240%" y="837" width="0.2498%" height="15" fill="rgb(250,43,18)"/><text x="99.9740%" y="847.50"></text></g><g><title>cswap::perf_exec (38 samples, 0.25%)</title><rect x="99.7240%" y="821" width="0.2498%" height="15" fill="rgb(208,13,10)"/><text x="99.9740%" y="831.50"></text></g><g><title>all (15,215 samples, 100%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(212,200,36)"/><text x="0.2500%" y="1055.50"></text></g><g><title>main (15,215 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(225,90,30)"/><text x="0.2500%" y="1039.50">main</text></g><g><title>_start (43 samples, 0.28%)</title><rect x="99.7174%" y="1013" width="0.2826%" height="15" fill="rgb(236,182,39)"/><text x="99.9674%" y="1023.50"></text></g></svg></svg>