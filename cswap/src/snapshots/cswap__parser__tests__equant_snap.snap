---
source: cswap/src/parser.rs
expression: "existential_q(\"(exists ((x Int)) (and (< (* 3 x) 2) (< 1 (* 2 x))))\").unwrap()"
---
(
    "",
    (
        [
            (
                RefCell {
                    value: Token(
                        "x",
                    ),
                },
                RefCell {
                    value: UInt,
                },
            ),
        ],
        BExp(
            RefCell {
                value: And,
            },
            [
                RefCell {
                    value: BExp(
                        RefCell {
                            value: Lt,
                        },
                        [
                            RefCell {
                                value: NExp(
                                    Mul,
                                    [
                                        RefCell {
                                            value: Constant(
                                                RefCell {
                                                    value: UInt(
                                                        "3",
                                                    ),
                                                },
                                            ),
                                        },
                                        RefCell {
                                            value: Symbol(
                                                RefCell {
                                                    value: Token(
                                                        "x",
                                                    ),
                                                },
                                            ),
                                        },
                                    ],
                                ),
                            },
                            RefCell {
                                value: Constant(
                                    RefCell {
                                        value: UInt(
                                            "2",
                                        ),
                                    },
                                ),
                            },
                        ],
                    ),
                },
                RefCell {
                    value: BExp(
                        RefCell {
                            value: Lt,
                        },
                        [
                            RefCell {
                                value: Constant(
                                    RefCell {
                                        value: UInt(
                                            "1",
                                        ),
                                    },
                                ),
                            },
                            RefCell {
                                value: NExp(
                                    Mul,
                                    [
                                        RefCell {
                                            value: Constant(
                                                RefCell {
                                                    value: UInt(
                                                        "2",
                                                    ),
                                                },
                                            ),
                                        },
                                        RefCell {
                                            value: Symbol(
                                                RefCell {
                                                    value: Token(
                                                        "x",
                                                    ),
                                                },
                                            ),
                                        },
                                    ],
                                ),
                            },
                        ],
                    ),
                },
            ],
        ),
    ),
)
