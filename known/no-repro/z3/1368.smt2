(set-logic LIA)
(set-info :source |
    SMT script generated on 2017/11/27 by Ultimate. http://ultimate.informatik.uni-freiburg.de/
|)
(set-info :smt-lib-version 2.5)
(set-info :category "industrial")

(declare-fun c_main_~P1~4 () Int)
(declare-fun c_main_~P1~4_primed () Int)
(declare-fun c_main_~P2~4 () Int)
(declare-fun c_main_~P2~4_primed () Int)
(declare-fun c_main_~P3~4 () Int)
(declare-fun c_main_~P3~4_primed () Int)
(declare-fun c_main_~P4~4 () Int)
(declare-fun c_main_~P4~4_primed () Int)
(declare-fun c_main_~P5~4 () Int)
(declare-fun c_main_~P5~4_primed () Int)
(declare-fun c_main_~P6~4 () Int)
(declare-fun c_main_~P6~4_primed () Int)
(declare-fun c_main_~P7~4 () Int)
(declare-fun c_main_~P7~4_primed () Int)
(declare-fun c_main_~P8~4 () Int)
(declare-fun c_main_~P8~4_primed () Int)
(declare-fun c_main_~P9~4 () Int)
(declare-fun c_main_~P9~4_primed () Int)
(declare-fun c_main_~q~3 () Int)
(declare-fun c_main_~q~3_primed () Int)
(declare-fun c_main_~method_id~3 () Int)
(declare-fun c_main_~method_id~3_primed () Int)
(declare-fun c_main_~this_expect~3 () Int)
(declare-fun c_main_~this_expect~3_primed () Int)
(declare-fun c_main_~this_buffer_empty~3 () Int)
(declare-fun c_main_~this_buffer_empty~3_primed () Int)

(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (= 0 (ite (and (< c_main_~P1~4 0) (not (= (mod c_main_~P1~4 2) 0))) (+ (mod c_main_~P1~4 2) (- 2)) (mod c_main_~P1~4 2)))) :named codeBlock))
(push 1)
(assert (! (and (<= c_main_~this_expect~3 0) (<= 0 c_main_~this_expect~3)) :named precondition))
(push 1)
(assert (! (not (or (not (= 0 c_main_~P1~4)) (and (<= c_main_~this_expect~3 (+ c_main_~P1~4 1)) (<= 1 c_main_~this_expect~3)))) :named negatedPostcondition))
(check-sat)
