(declare-const GEN1 Int)
(declare-const GEN2 Int)
(declare-const GEN3 String)
(declare-const GEN4 Int)
(declare-const GEN5 String)
(declare-fun f () String)
(declare-fun a () Int)
(declare-fun b () Int)
(declare-fun g () String)
(declare-fun c () String)
(declare-fun d () String)
(declare-fun shifted_T4_3 () String)
(declare-fun shifted_T5_3 () String)
(declare-fun e () Bool)
(declare-const BAV1 Real)
(declare-const BAV2 Real)
(declare-const BAV3 String)
(declare-const BAV4 Real)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BDOM1 Bool)
(declare-const BDOM2 Bool)
(declare-const BDOM3 Bool)
(declare-const BDOM4 Bool)
(declare-const BDOM5 Bool)
(declare-const BDOM6 Bool)
(declare-const BDOM7 Bool)
(declare-const BDOM8 Bool)
(declare-const BDOM9 Bool)
(declare-const BDOM10 Bool)
(declare-const BDOM11 Bool)
(declare-const BDOM12 Bool)
(declare-const BDOM13 Bool)
(declare-const BDOM14 Bool)
(declare-const BDOM15 Bool)
(assert (= BAV1 (str.len shifted_T4_3)))
(assert (= BAV2 (str.len g)))
(assert (= BAV3 (str.substr f GEN2 (str.len g))))
(assert (= BAV4 (str.len (str.substr f GEN2 (str.len g)))))
(assert (= BAV5 (= b a (str.len shifted_T4_3) GEN1 (str.len (str.substr f GEN2 (str.len g))))))
(assert (= BAV6 (= c d shifted_T5_3 GEN3)))
(assert (= BAV7 (and (= b a (str.len shifted_T4_3) GEN1 (str.len (str.substr f GEN2 (str.len g)))) (= c d shifted_T5_3 GEN3))))
(assert (= BAV8 (= b GEN4)))
(assert (= BAV9 (and (= b GEN4) (not (str.in.re c (str.to.re GEN5))))))
(assert (= (= BAV1 0) BDOM1))
(assert (= (< BAV1 0) BDOM2))
(assert (= (> BAV1 0) BDOM3))
(assert (= (= BAV2 0) BDOM4))
(assert (= (< BAV2 0) BDOM5))
(assert (= (> BAV2 0) BDOM6))
(assert (= (= BAV3 "") BDOM7))
(assert (= (= BAV4 0) BDOM8))
(assert (= (< BAV4 0) BDOM9))
(assert (= (> BAV4 0) BDOM10))
(assert (= BDOM11 BAV5))
(assert (= BDOM12 BAV6))
(assert (= BDOM13 BAV7))
(assert (= BDOM14 BAV8))
(assert (= BDOM15 BAV9))
(check-sat)
(get-model)
