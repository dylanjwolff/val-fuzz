(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const BAV23 Bool)
(declare-const BAV24 Bool)
(declare-const BAV25 Bool)
(declare-const BAV26 Bool)
(declare-const BAV27 Bool)
(declare-const BAV28 Bool)
(declare-const BAV29 Bool)
(declare-const BAV30 Bool)
(declare-const BAV31 Bool)
(declare-const BAV32 Bool)
(declare-const BAV33 Bool)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(define-sort Elt () Int)
(define-sort mySet () (Set Elt ))
(define-fun smt_set_emp () mySet (as emptyset mySet))
(define-fun smt_set_mem ((x Elt) (s mySet)) Bool (member x s))
(define-fun smt_set_add ((s mySet) (x Elt)) mySet (union s (singleton x)))
(define-fun smt_set_cup ((s1 mySet) (s2 mySet)) mySet (union s1 s2))
(define-fun smt_set_cap ((s1 mySet) (s2 mySet)) mySet (intersection s1 s2))
(define-fun smt_set_dif ((s1 mySet) (s2 mySet)) mySet (setminus s1 s2))
(define-fun smt_set_sub ((s1 mySet) (s2 mySet)) Bool (subset s1 s2))
(declare-fun z3v58 () Int)
(declare-fun z3v59 () Int)
(assert (distinct z3v58 z3v59))
(declare-fun z3f60 (Int) Bool)
(declare-fun z3v61 () Int)
(declare-fun z3f62 (Int) Int)
(declare-fun z3v63 () Int)
(declare-fun z3v64 () Int)
(declare-fun z3v65 () Int)
(declare-fun z3v66 () Int)
(declare-fun z3f67 (Int) mySet)
(declare-fun z3v69 () Int)
(declare-fun z3f70 (Int) Int)
(declare-fun z3v76 () Int)
(declare-fun z3v77 () Int)
(declare-fun z3v78 () Int)
(declare-fun z3v79 () Int)
(declare-fun z3v80 () Int)
(declare-fun z3v81 () Int)
(declare-fun z3v82 () Int)
(declare-fun z3f83 (Int) Int)
(declare-fun z3f84 (Int) Int)
(declare-fun z3v85 () Int)
(declare-fun z3f86 (Int) Int)
(declare-fun z3f87 (Int Int) Int)
(declare-fun z3v88 () Int)
(declare-fun z3v89 () Int)
(declare-fun z3f90 (Int) mySet)
(declare-fun z3f91 (Int) Bool)
(declare-fun z3f92 (Int Int) Int)
(declare-fun z3v93 () Int)
(declare-fun z3v94 () Int)
(declare-fun z3v95 () Int)
(declare-fun z3v96 () Int)
(declare-fun z3v97 () Int)
(assert (and (not (z3f60 z3v79)) (not (z3f60 z3v79)) (= z3v79 z3v80) (= (z3f60 z3v79) (= z3v76 z3v81)) (= (z3f60 z3v80) (= z3v76 z3v81)) (= (z3f83 z3v82) z3v81) (= (z3f84 z3v82) z3v81) (= (z3f86 z3v82) z3v85) (= z3v82 (z3f87 z3v81 z3v85)) (= z3v82 z3v88) (>= (z3f70 z3v78) GEN1) (= (z3f67 z3v78) (smt_set_cup (smt_set_add smt_set_emp (z3f83 z3v88)) (z3f67 z3v89))) (= (z3f90 z3v78) (smt_set_cup (smt_set_add smt_set_emp z3v88) (z3f90 z3v89))) (= (z3f70 z3v78) (+ GEN2 (z3f70 z3v89))) (= (z3f91 z3v78) false) (= z3v78 (z3f92 z3v88 z3v89)) (>= (z3f70 z3v78) GEN3) (= z3v78 z3v77) (>= (z3f70 z3v78) GEN4) (>= (z3f70 z3v89) GEN5) (>= (z3f70 z3v77) GEN6) (>= (z3f70 z3v97) GEN7) (= z3v97 z3v89) (>= (z3f70 z3v97) GEN8) (z3f60 z3v58) (= (z3f62 z3v61) z3v61) (= (z3f62 z3v63) z3v63) (not (z3f60 z3v59)) (= (z3f62 z3v64) z3v64)))
(assert (smt_set_mem z3v76 (z3f67 z3v78)))
(assert (<= z3v95 z3v93))
(assert (>= z3v95 z3v93))
(assert (= z3v95 z3v93))
(assert (smt_set_mem z3v76 (z3f67 z3v77)))
(declare-fun z3v98 () Int)
(assert (not (< z3v98 z3v85)))
(assert (= BAV1 (distinct z3v58 z3v59)))
(assert (= BAV2 (and (not (z3f60 z3v79)) (not (z3f60 z3v79)) (= z3v79 z3v80) (= (z3f60 z3v79) (= z3v76 z3v81)) (= (z3f60 z3v80) (= z3v76 z3v81)) (= (z3f83 z3v82) z3v81) (= (z3f84 z3v82) z3v81) (= (z3f86 z3v82) z3v85) (= z3v82 (z3f87 z3v81 z3v85)) (= z3v82 z3v88) (>= (z3f70 z3v78) GEN1) (= (z3f67 z3v78) (smt_set_cup (smt_set_add smt_set_emp (z3f83 z3v88)) (z3f67 z3v89))) (= (z3f90 z3v78) (smt_set_cup (smt_set_add smt_set_emp z3v88) (z3f90 z3v89))) (= (z3f70 z3v78) (+ GEN2 (z3f70 z3v89))) (= (z3f91 z3v78) false) (= z3v78 (z3f92 z3v88 z3v89)) (>= (z3f70 z3v78) GEN3) (= z3v78 z3v77) (>= (z3f70 z3v78) GEN4) (>= (z3f70 z3v89) GEN5) (>= (z3f70 z3v77) GEN6) (>= (z3f70 z3v97) GEN7) (= z3v97 z3v89) (>= (z3f70 z3v97) GEN8) (z3f60 z3v58) (= (z3f62 z3v61) z3v61) (= (z3f62 z3v63) z3v63) (not (z3f60 z3v59)) (= (z3f62 z3v64) z3v64))))
(assert (= BAV3 (= z3v79 z3v80)))
(assert (= BAV4 (= (z3f60 z3v79) (= z3v76 z3v81))))
(assert (= BAV5 (= z3v76 z3v81)))
(assert (= BAV6 (= (z3f60 z3v80) (= z3v76 z3v81))))
(assert (= BAV7 (= z3v76 z3v81)))
(assert (= BAV8 (= (z3f83 z3v82) z3v81)))
(assert (= BAV9 (= (z3f84 z3v82) z3v81)))
(assert (= BAV10 (= (z3f86 z3v82) z3v85)))
(assert (= BAV11 (= z3v82 (z3f87 z3v81 z3v85))))
(assert (= BAV12 (= z3v82 z3v88)))
(assert (= BAV13 (>= (z3f70 z3v78) GEN1)))
(assert (= BAV14 (= (z3f67 z3v78) (smt_set_cup (smt_set_add smt_set_emp (z3f83 z3v88)) (z3f67 z3v89)))))
(assert (= BAV15 (= (z3f90 z3v78) (smt_set_cup (smt_set_add smt_set_emp z3v88) (z3f90 z3v89)))))
(assert (= BAV16 (= (z3f70 z3v78) (+ GEN2 (z3f70 z3v89)))))
(assert (= BAV17 (= (z3f91 z3v78) false)))
(assert (= BAV18 (= z3v78 (z3f92 z3v88 z3v89))))
(assert (= BAV19 (>= (z3f70 z3v78) GEN3)))
(assert (= BAV20 (= z3v78 z3v77)))
(assert (= BAV21 (>= (z3f70 z3v78) GEN4)))
(assert (= BAV22 (>= (z3f70 z3v89) GEN5)))
(assert (= BAV23 (>= (z3f70 z3v77) GEN6)))
(assert (= BAV24 (>= (z3f70 z3v97) GEN7)))
(assert (= BAV25 (= z3v97 z3v89)))
(assert (= BAV26 (>= (z3f70 z3v97) GEN8)))
(assert (= BAV27 (= (z3f62 z3v61) z3v61)))
(assert (= BAV28 (= (z3f62 z3v63) z3v63)))
(assert (= BAV29 (= (z3f62 z3v64) z3v64)))
(assert (= BAV30 (<= z3v95 z3v93)))
(assert (= BAV31 (>= z3v95 z3v93)))
(assert (= BAV32 (= z3v95 z3v93)))
(assert (= BAV33 (< z3v98 z3v85)))
(check-sat)
(get-model)