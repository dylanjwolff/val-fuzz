(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(get-model)
(get-model)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const GEN60 Int)
(declare-const GEN59 Int)
(declare-const GEN58 Int)
(declare-const GEN57 Int)
(declare-const GEN56 Int)
(declare-const GEN55 Int)
(declare-const GEN54 Int)
(declare-const GEN53 Int)
(declare-const GEN52 Int)
(declare-const GEN51 Int)
(declare-const GEN50 Int)
(declare-const GEN49 Int)
(declare-const GEN48 Int)
(declare-const GEN47 Int)
(declare-const GEN46 Int)
(declare-const GEN45 Int)
(declare-const GEN44 Int)
(declare-const GEN43 Int)
(declare-const GEN42 Int)
(declare-const GEN41 Int)
(declare-const GEN40 Int)
(declare-const GEN39 Int)
(declare-const GEN38 Int)
(declare-const GEN37 Int)
(declare-const GEN36 Int)
(declare-const GEN35 Int)
(declare-const GEN34 Int)
(declare-const GEN33 Int)
(declare-const GEN32 Int)
(declare-const GEN31 Int)
(declare-const GEN30 Int)
(declare-const GEN29 Int)
(declare-const GEN28 Int)
(declare-const GEN27 Int)
(declare-const GEN26 Int)
(declare-const GEN25 Int)
(declare-const GEN24 Int)
(declare-const GEN23 Int)
(declare-const GEN22 Int)
(declare-const GEN21 Int)
(declare-const GEN20 Int)
(declare-const GEN19 Int)
(declare-const GEN18 Int)
(declare-const GEN17 Int)
(declare-const GEN16 Int)
(declare-const GEN15 Int)
(declare-const GEN14 Int)
(declare-const GEN13 Int)
(declare-const GEN12 Int)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(define-fun a () (Array Int Int) ((as const (Array Int Int)) 0))
(assert (= (store (store a GEN1 GEN2) GEN3 GEN4) (store a GEN5 GEN6)))
(assert (= BAV1 (= (store (store a GEN1 GEN2) GEN3 GEN4) (store a GEN5 GEN6))))
(assert (= BAV2 (= (store (store (store a 0 1) 1 2) 0 0) (store (store a 0 1) 1 2))))
(assert (= BAV3 (= (store (store (store (store a 0 1) 1 2) 2 3) 0 0) (store (store (store a 0 1) 1 2) 2 3))))
(assert (= BAV4 (= (store (store a 0 1) 0 0) (store a 0 1))))
(assert (= BAV5 (= (store (store (store a 0 1) 1 2) 0 0) (store (store a 0 1) 1 2))))
(assert (= BAV6 (= (store (store (store (store a 0 1) 1 2) 2 3) 0 0) (store (store (store a 0 1) 1 2) 2 3))))
(check-sat)
(get-model)
(reset)
(define-fun a () (Array Int Int) ((as const (Array Int Int)) 0))
(assert (= (store (store (store a 0 1) 1 2) 0 0) (store (store a 0 1) 1 2)))
(check-sat)
(reset)
(define-fun a () (Array Int Int) ((as const (Array Int Int)) 0))
(assert (= (store (store (store (store a 0 1) 1 2) 2 3) 0 0) (store (store (store a 0 1) 1 2) 2 3)))
(check-sat)
(reset)
(set-option :auto-config true)
(define-fun a () (Array Int Int) ((as const (Array Int Int)) 0))
(assert (= (store (store a 0 1) 0 0) (store a 0 1)))
(check-sat)
(reset)
(set-option :auto-config true)
(define-fun a () (Array Int Int) ((as const (Array Int Int)) 0))
(assert (= (store (store (store a 0 1) 1 2) 0 0) (store (store a 0 1) 1 2)))
(check-sat)
(reset)
(set-option :auto-config true)
(define-fun a () (Array Int Int) ((as const (Array Int Int)) 0))
(assert (= (store (store (store (store a 0 1) 1 2) 2 3) 0 0) (store (store (store a 0 1) 1 2) 2 3)))
(check-sat)