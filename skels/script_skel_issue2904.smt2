(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-fun n () Int)
(declare-fun f () Int)
(declare-fun m () Int)
(declare-fun b () (Set Int))
(declare-fun c () (Set Int))
(declare-fun UNIVERALSET () (Set Int))
(assert (subset b UNIVERALSET))
(assert (subset c UNIVERALSET))
(assert (> n GEN1))
(assert (= (card UNIVERALSET) n))
(assert (= (card b) m))
(assert (= (card c) (- f m)))
(assert (>= m GEN2))
(assert (>= f m))
(assert (> n (+ (* GEN3 f) m)))
(assert (>= (card (setminus UNIVERALSET (intersection (setminus UNIVERALSET b) (setminus UNIVERALSET c)))) n))
(assert (= BAV1 (> n GEN1)))
(assert (= BAV2 (= (card UNIVERALSET) n)))
(assert (= BAV3 (= (card b) m)))
(assert (= BAV4 (= (card c) (- f m))))
(assert (= BAV5 (>= m GEN2)))
(assert (= BAV6 (>= f m)))
(assert (= BAV7 (> n (+ (* GEN3 f) m))))
(assert (= BAV8 (>= (card (setminus UNIVERALSET (intersection (setminus UNIVERALSET b) (setminus UNIVERALSET c)))) n)))
(check-sat)
(get-model)