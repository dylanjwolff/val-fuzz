(set-option :incremental false)
(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const BAV23 Bool)
(declare-const BAV24 Bool)
(declare-const BAV25 Bool)
(declare-const BAV26 Bool)
(declare-const BAV27 Bool)
(declare-const BAV28 Bool)
(declare-const BAV29 Bool)
(declare-const BAV30 Bool)
(declare-const BAV31 Bool)
(declare-const BAV32 Bool)
(declare-const BAV33 Bool)
(declare-const BAV34 Bool)
(declare-const BAV35 Bool)
(declare-const BAV36 Bool)
(declare-const BAV37 Bool)
(declare-const BAV38 Bool)
(declare-const BAV39 Bool)
(declare-const BAV40 Bool)
(declare-const BAV41 Bool)
(declare-const BAV42 Bool)
(declare-const BAV43 Bool)
(declare-const BAV44 Bool)
(declare-const BAV45 Bool)
(declare-const BAV46 Bool)
(declare-const BAV47 Bool)
(declare-const BAV48 Bool)
(declare-const BAV49 Bool)
(declare-const BAV50 Bool)
(declare-const BAV51 Bool)
(declare-const BAV52 Bool)
(declare-const BAV53 Bool)
(declare-const BAV54 Bool)
(declare-const BAV55 Bool)
(declare-const BAV56 Bool)
(declare-const BAV57 Bool)
(declare-const BAV58 Bool)
(declare-const BAV59 Bool)
(declare-const BAV60 Bool)
(declare-const BAV61 Bool)
(declare-const BAV62 Bool)
(declare-const BAV63 Bool)
(declare-const BAV64 Bool)
(declare-const BAV65 Bool)
(declare-const BAV66 Bool)
(declare-const BAV67 Bool)
(declare-const BAV68 Bool)
(declare-const BAV69 Bool)
(declare-const BAV70 Bool)
(declare-const BAV71 Bool)
(declare-const BAV72 Bool)
(declare-const BAV73 Bool)
(declare-const BAV74 Bool)
(declare-const BAV75 Bool)
(declare-const BAV76 Bool)
(declare-const BAV77 Bool)
(declare-const BAV78 Bool)
(declare-const BAV79 Bool)
(declare-const BAV80 Bool)
(declare-const BAV81 Bool)
(declare-const BAV82 Bool)
(declare-const BAV83 Bool)
(declare-const BAV84 Bool)
(declare-const BAV85 Bool)
(declare-const BAV86 Bool)
(declare-const BAV87 Bool)
(declare-const BAV88 Bool)
(declare-const BAV89 Bool)
(declare-const BAV90 Bool)
(declare-const BAV91 Bool)
(declare-const BAV92 Bool)
(declare-const BAV93 Bool)
(declare-const BAV94 Bool)
(declare-const BAV95 Bool)
(declare-const BAV96 Bool)
(declare-const BAV97 Bool)
(declare-const BAV98 Bool)
(declare-const GEN87 Int)
(declare-const GEN86 Int)
(declare-const GEN85 Int)
(declare-const GEN84 Int)
(declare-const GEN83 Int)
(declare-const GEN82 Int)
(declare-const GEN81 Int)
(declare-const GEN80 Int)
(declare-const GEN79 Int)
(declare-const GEN78 Int)
(declare-const GEN77 Int)
(declare-const GEN76 Int)
(declare-const GEN75 Int)
(declare-const GEN74 Int)
(declare-const GEN73 Int)
(declare-const GEN72 Int)
(declare-const GEN71 Int)
(declare-const GEN70 Int)
(declare-const GEN69 Int)
(declare-const GEN68 Int)
(declare-const GEN67 Int)
(declare-const GEN66 Int)
(declare-const GEN65 Int)
(declare-const GEN64 Int)
(declare-const GEN63 Int)
(declare-const GEN62 Int)
(declare-const GEN61 Int)
(declare-const GEN60 Int)
(declare-const GEN59 Int)
(declare-const GEN58 Int)
(declare-const GEN57 Int)
(declare-const GEN56 Int)
(declare-const GEN55 Int)
(declare-const GEN54 Int)
(declare-const GEN53 Int)
(declare-const GEN52 Int)
(declare-const GEN51 Int)
(declare-const GEN50 Int)
(declare-const GEN49 Int)
(declare-const GEN48 Int)
(declare-const GEN47 Int)
(declare-const GEN46 Int)
(declare-const GEN45 Int)
(declare-const GEN44 Int)
(declare-const GEN43 Int)
(declare-const GEN42 Int)
(declare-const GEN41 Int)
(declare-const GEN40 Int)
(declare-const GEN39 Int)
(declare-const GEN38 Int)
(declare-const GEN37 Int)
(declare-const GEN36 Int)
(declare-const GEN35 Int)
(declare-const GEN34 Int)
(declare-const GEN33 Int)
(declare-const GEN32 Int)
(declare-const GEN31 Int)
(declare-const GEN30 Int)
(declare-const GEN29 Int)
(declare-const GEN28 Int)
(declare-const GEN27 Int)
(declare-const GEN26 Int)
(declare-const GEN25 Int)
(declare-const GEN24 Int)
(declare-const GEN23 Int)
(declare-const GEN22 Int)
(declare-const GEN21 Int)
(declare-const GEN20 Int)
(declare-const GEN19 Int)
(declare-const GEN18 Int)
(declare-const GEN17 Int)
(declare-const GEN16 Int)
(declare-const GEN15 Int)
(declare-const GEN14 Int)
(declare-const GEN13 Int)
(declare-const GEN12 Int)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-fun v0 () (_ BitVec 4))
(declare-fun v1 () (_ BitVec 4))
(declare-fun v2 () (_ BitVec 4))
(declare-fun v3 () (_ BitVec 4))
(declare-fun v4 () (_ BitVec 4))
(assert (= BAV1 (and (or (not (= (bvnor ((_ zero_extend 0) (_ bv12 4)) (_ bv12 4)) (bvneg (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0)))))) (= (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4))))) (= (bvnor ((_ zero_extend 0) (_ bv12 4)) (_ bv12 4)) (bvneg (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0)))))) (or (= (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4))))) (distinct (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))) v2) (not (bvsge (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))) (ite (= (_ bv1 1) ((_ extract 0 0) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))) ((_ zero_extend 3) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1))) (bvnot v2))))) (or (not (bvult v3 (bvnor ((_ zero_extend 0) (_ bv12 4)) (_ bv12 4)))) (not (bvsle (bvshl (_ bv12 4) ((_ zero_extend 0) (_ bv12 4))) (bvlshr (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))) v3))) (not (bvsle (bvnot ((_ rotate_left 1) v0)) (bvnot v2)))) (or (not (bvult ((_ zero_extend 0) (_ bv12 4)) (_ bv12 4))) (not (= (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))) v4)) (not (= (ite (= (_ bv1 1) ((_ extract 0 0) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))) ((_ zero_extend 3) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1))) (bvnot v2)) (bvashr v1 (bvnot v2))))) (or (bvsge (bvlshr (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))) v3) (_ bv12 4)) (not (bvuge ((_ sign_extend 3) (ite (bvult ((_ rotate_left 0) (bvnot v2)) (bvxor v4 ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1))) (bvneg (bvnot v2)))) (bvugt (bvnot v2) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))))) (or (bvslt v3 (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2)) (bvsge (bvxor ((_ sign_extend 0) (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0)))) (_ bv12 4)) ((_ sign_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))) (not (bvult ((_ rotate_left 1) v0) ((_ zero_extend 3) (ite (bvult ((_ zero_extend 0) (_ bv12 4)) ((_ sign_extend 3) (bvnot (ite (bvult v1 (bvnot ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1)))))) (or (bvsle (bvnot ((_ rotate_left 1) v0)) (bvnot v2)) (not (bvsle ((_ sign_extend 3) (ite (bvule (_ bv12 4) (bvneg (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))))) (_ bv1 1) (_ bv0 1))) ((_ rotate_right 3) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4))))))) (not (bvsgt (bvnot ((_ rotate_left 1) v0)) v1))) (or (bvsle v0 ((_ sign_extend 3) (ite (bvult ((_ zero_extend 0) (_ bv12 4)) ((_ sign_extend 3) (bvnot (ite (bvult v1 (bvnot ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1)))) (not (bvuge ((_ rotate_left 0) (bvnot v2)) ((_ sign_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1))))) (not (bvsgt (bvnot (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2)) (bvxor v4 ((_ rotate_left 1) v0))))) (or (not (bvuge (bvshl (_ bv12 4) ((_ zero_extend 0) (_ bv12 4))) (bvnot ((_ rotate_left 1) v0)))) (not (bvsge (bvxor ((_ sign_extend 0) (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0)))) (_ bv12 4)) ((_ sign_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1))))) (not (bvsgt ((_ rotate_left 1) v0) ((_ zero_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))))) (or (not (bvsge (bvmul ((_ repeat 1) (bvnot ((_ rotate_left 1) v0))) ((_ zero_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))) ((_ sign_extend 3) (ite (bvult ((_ zero_extend 0) (_ bv12 4)) ((_ sign_extend 3) (bvnot (ite (bvult v1 (bvnot ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))))) (not (distinct (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))) v2)) (= (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))) v4)) (or (not (bvugt ((_ sign_extend 0) (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0)))) (bvxor v4 ((_ rotate_left 1) v0)))) (not (bvslt (bvashr v1 (bvnot v2)) ((_ sign_extend 3) (bvcomp v0 (_ bv12 4))))) (not (bvsgt ((_ rotate_left 1) v0) ((_ zero_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))))) (or (bvslt (bvlshr (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))) v3) (bvneg (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))))) (not (distinct (ite (bvslt (bvneg (bvnot v2)) v4) (_ bv1 1) (_ bv0 1)) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1)))) (= (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))))) (or (not (bvult ((_ rotate_left 1) v0) ((_ sign_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1))))) (not (bvsge (_ bv12 4) ((_ sign_extend 3) (ite (bvult ((_ zero_extend 0) (_ bv12 4)) ((_ sign_extend 3) (bvnot (ite (bvult v1 (bvnot ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))))) (not (= (bvxor v4 ((_ rotate_left 1) v0)) (bvashr (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))) ((_ repeat 1) (bvnot ((_ rotate_left 1) v0))))))) (or (not (= (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))))) (not (bvslt v2 ((_ sign_extend 3) (ite (bvule (_ bv12 4) (bvneg (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))))) (_ bv1 1) (_ bv0 1))))) (bvsgt (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ sign_extend 3) (ite (bvult v1 (bvnot ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1))))) (or (distinct (ite (bvslt (bvneg (bvnot v2)) v4) (_ bv1 1) (_ bv0 1)) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1))) (not (bvsge (ite (= (_ bv1 1) ((_ extract 0 0) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))) ((_ zero_extend 3) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1))) (bvnot v2)) ((_ rotate_left 1) v0))) (bvsgt (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ sign_extend 3) (ite (bvult v1 (bvnot ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1))))) (or (not (distinct ((_ rotate_left 1) v0) ((_ rotate_right 3) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4))))))) (not (= v1 (bvmul ((_ repeat 1) (bvnot ((_ rotate_left 1) v0))) ((_ zero_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))))) (bvule ((_ zero_extend 3) (bvnot (ite (bvult v1 (bvnot ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1)))) (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))))) (or (not (bvsge (bvlshr (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))) v3) (_ bv12 4))) (bvuge (bvshl (_ bv12 4) ((_ zero_extend 0) (_ bv12 4))) (bvnot ((_ rotate_left 1) v0))) (bvslt (bvnot v2) (bvnot ((_ rotate_left 1) v0)))) (or (not (bvugt v0 ((_ repeat 1) (bvnot ((_ rotate_left 1) v0))))) (bvult v3 ((_ zero_extend 0) (_ bv12 4))) (bvslt (bvxor v4 ((_ rotate_left 1) v0)) ((_ zero_extend 0) (bvnor ((_ zero_extend 0) (_ bv12 4)) (_ bv12 4))))) (or (distinct (ite (bvslt (bvneg (bvnot v2)) v4) (_ bv1 1) (_ bv0 1)) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1))) (bvslt (bvxor ((_ sign_extend 0) (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0)))) (_ bv12 4)) (bvnot ((_ rotate_left 1) v0))) (bvsge (bvlshr (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))) v3) (_ bv12 4))) (or (not (bvsgt (bvnot ((_ rotate_left 1) v0)) v1)) (not (bvuge ((_ zero_extend 0) (_ bv12 4)) v1)) (not (= (ite (= (_ bv1 1) ((_ extract 0 0) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))) ((_ zero_extend 3) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1))) (bvnot v2)) (bvashr v1 (bvnot v2))))) (or (not (bvsge (bvmul ((_ repeat 1) (bvnot ((_ rotate_left 1) v0))) ((_ zero_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))) ((_ sign_extend 3) (ite (bvult ((_ zero_extend 0) (_ bv12 4)) ((_ sign_extend 3) (bvnot (ite (bvult v1 (bvnot ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))))) (distinct (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))) v2) (not (bvslt (bvlshr (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))) v3) ((_ zero_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))))) (or (not (bvuge (_ bv12 4) v2)) (not (distinct ((_ rotate_left 1) v0) ((_ rotate_right 3) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4))))))) (= (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))) v4)) (or (bvult v3 (bvor (bvnot v2) (bvnot ((_ rotate_left 1) v0)))) (not (bvule ((_ sign_extend 3) (ite (bvult v1 (bvnot ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1))) (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))))) (not (bvsgt (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ sign_extend 3) (ite (bvult v1 (bvnot ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1)))))) (or (= (ite (= (_ bv1 1) ((_ extract 0 0) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))) ((_ zero_extend 3) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1))) (bvnot v2)) (bvashr v1 (bvnot v2))) (bvsge (ite (= (_ bv1 1) ((_ extract 0 0) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))) ((_ zero_extend 3) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1))) (bvnot v2)) ((_ rotate_left 1) v0)) (bvult v3 (bvor (bvnot v2) (bvnot ((_ rotate_left 1) v0))))) (or (bvule ((_ sign_extend 3) (ite (bvult v1 (bvnot ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1))) (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0)))) (bvsle (ite (= (_ bv1 1) ((_ extract 0 0) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))) ((_ zero_extend 3) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1))) (bvnot v2)) ((_ zero_extend 0) (_ bv12 4))) (bvult v3 ((_ zero_extend 0) (_ bv12 4)))) (or (not (bvult ((_ rotate_left 1) v0) ((_ zero_extend 3) (ite (bvult ((_ zero_extend 0) (_ bv12 4)) ((_ sign_extend 3) (bvnot (ite (bvult v1 (bvnot ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))))) (bvslt (bvlshr (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))) v3) (bvneg (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))))) (not (= (ite (= (_ bv1 1) ((_ extract 0 0) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))) ((_ zero_extend 3) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1))) (bvnot v2)) (bvashr v1 (bvnot v2))))) (or (bvslt (bvnot v2) (bvnot ((_ rotate_left 1) v0))) (bvule ((_ sign_extend 3) (ite (bvult v1 (bvnot ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1))) (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0)))) (bvule (bvnot v2) v1)) (or (not (= (bvnor ((_ zero_extend 0) (_ bv12 4)) (_ bv12 4)) (bvneg (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0)))))) (bvsgt (bvshl (_ bv12 4) ((_ zero_extend 0) (_ bv12 4))) (bvshl (_ bv12 4) ((_ zero_extend 0) (_ bv12 4)))) (not (bvsgt (bvnot ((_ rotate_left 1) v0)) v1))) (or (not (bvslt (bvlshr (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))) v3) ((_ zero_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1))))) (not (= (bvxor v4 ((_ rotate_left 1) v0)) (bvashr (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))) ((_ repeat 1) (bvnot ((_ rotate_left 1) v0)))))) (bvslt ((_ sign_extend 3) (ite (bvslt (bvneg (bvnot v2)) v4) (_ bv1 1) (_ bv0 1))) ((_ rotate_right 3) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4))))))) (or (bvugt ((_ rotate_left 0) (bvnot v2)) v2) (not (= v3 ((_ rotate_right 3) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4))))))) (not (bvslt (bvmul ((_ repeat 1) (bvnot ((_ rotate_left 1) v0))) ((_ zero_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))) ((_ rotate_left 1) v0)))) (or (bvuge ((_ zero_extend 0) (_ bv12 4)) (bvxor v2 (_ bv12 4))) (distinct (ite (bvslt (bvneg (bvnot v2)) v4) (_ bv1 1) (_ bv0 1)) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1))) (not (= v1 (bvmul ((_ repeat 1) (bvnot ((_ rotate_left 1) v0))) ((_ zero_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1))))))) (or (bvule (bvnor ((_ zero_extend 0) (_ bv12 4)) (_ bv12 4)) ((_ repeat 1) (bvnot ((_ rotate_left 1) v0)))) (= (_ bv12 4) (bvashr v1 (bvnot v2))) (distinct ((_ rotate_left 1) v0) ((_ rotate_right 3) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4))))))) (or (not (= v3 ((_ rotate_right 3) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4))))))) (distinct (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))) v2) (not (bvuge ((_ rotate_left 0) (bvnot v2)) ((_ sign_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))))) (or (not (bvult v3 ((_ zero_extend 0) (_ bv12 4)))) (not (bvsge ((_ repeat 1) (bvnot ((_ rotate_left 1) v0))) ((_ sign_extend 3) (ite (bvule (_ bv12 4) (bvneg (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))))) (_ bv1 1) (_ bv0 1))))) (bvugt v0 ((_ repeat 1) (bvnot ((_ rotate_left 1) v0))))) (or (bvule (bvnor ((_ zero_extend 0) (_ bv12 4)) (_ bv12 4)) ((_ repeat 1) (bvnot ((_ rotate_left 1) v0)))) (not (bvslt (bvnot v2) (bvnot ((_ rotate_left 1) v0)))) (distinct (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))) v2)))))
(assert (= BAV2 (or (not (= (bvnor ((_ zero_extend 0) (_ bv12 4)) (_ bv12 4)) (bvneg (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0)))))) (= (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4))))) (= (bvnor ((_ zero_extend 0) (_ bv12 4)) (_ bv12 4)) (bvneg (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))))))))
(assert (= BAV3 (= (bvnor ((_ zero_extend 0) (_ bv12 4)) (_ bv12 4)) (bvneg (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0)))))))
(assert (= BAV4 (= (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))))))
(assert (= BAV5 (= (_ bv1 1) ((_ extract 2 2) v0))))
(assert (= BAV6 (= (bvnor ((_ zero_extend 0) (_ bv12 4)) (_ bv12 4)) (bvneg (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0)))))))
(assert (= BAV7 (or (= (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4))))) (distinct (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))) v2) (not (bvsge (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))) (ite (= (_ bv1 1) ((_ extract 0 0) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))) ((_ zero_extend 3) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1))) (bvnot v2)))))))
(assert (= BAV8 (= (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))))))
(assert (= BAV9 (= (_ bv1 1) ((_ extract 2 2) v0))))
(assert (= BAV10 (distinct (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))) v2)))
(assert (= BAV11 (= (_ bv1 1) ((_ extract 0 0) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1))))))
(assert (= BAV12 (= (_ bv1 1) ((_ extract 2 2) v0))))
(assert (= BAV13 (or (not (bvult v3 (bvnor ((_ zero_extend 0) (_ bv12 4)) (_ bv12 4)))) (not (bvsle (bvshl (_ bv12 4) ((_ zero_extend 0) (_ bv12 4))) (bvlshr (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))) v3))) (not (bvsle (bvnot ((_ rotate_left 1) v0)) (bvnot v2))))))
(assert (= BAV14 (or (not (bvult ((_ zero_extend 0) (_ bv12 4)) (_ bv12 4))) (not (= (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))) v4)) (not (= (ite (= (_ bv1 1) ((_ extract 0 0) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))) ((_ zero_extend 3) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1))) (bvnot v2)) (bvashr v1 (bvnot v2)))))))
(assert (= BAV15 (= (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))) v4)))
(assert (= BAV16 (= (ite (= (_ bv1 1) ((_ extract 0 0) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))) ((_ zero_extend 3) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1))) (bvnot v2)) (bvashr v1 (bvnot v2)))))
(assert (= BAV17 (= (_ bv1 1) ((_ extract 0 0) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1))))))
(assert (= BAV18 (= (_ bv1 1) ((_ extract 2 2) v0))))
(assert (= BAV19 (or (bvsge (bvlshr (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))) v3) (_ bv12 4)) (not (bvuge ((_ sign_extend 3) (ite (bvult ((_ rotate_left 0) (bvnot v2)) (bvxor v4 ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1))) (bvneg (bvnot v2)))) (bvugt (bvnot v2) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4))))))))
(assert (= BAV20 (or (bvslt v3 (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2)) (bvsge (bvxor ((_ sign_extend 0) (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0)))) (_ bv12 4)) ((_ sign_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))) (not (bvult ((_ rotate_left 1) v0) ((_ zero_extend 3) (ite (bvult ((_ zero_extend 0) (_ bv12 4)) ((_ sign_extend 3) (bvnot (ite (bvult v1 (bvnot ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))))))))
(assert (= BAV21 (= (_ bv1 1) ((_ extract 2 2) v0))))
(assert (= BAV22 (or (bvsle (bvnot ((_ rotate_left 1) v0)) (bvnot v2)) (not (bvsle ((_ sign_extend 3) (ite (bvule (_ bv12 4) (bvneg (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))))) (_ bv1 1) (_ bv0 1))) ((_ rotate_right 3) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4))))))) (not (bvsgt (bvnot ((_ rotate_left 1) v0)) v1)))))
(assert (= BAV23 (or (bvsle v0 ((_ sign_extend 3) (ite (bvult ((_ zero_extend 0) (_ bv12 4)) ((_ sign_extend 3) (bvnot (ite (bvult v1 (bvnot ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1)))) (not (bvuge ((_ rotate_left 0) (bvnot v2)) ((_ sign_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1))))) (not (bvsgt (bvnot (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2)) (bvxor v4 ((_ rotate_left 1) v0)))))))
(assert (= BAV24 (= (_ bv1 1) ((_ extract 2 2) v0))))
(assert (= BAV25 (or (not (bvuge (bvshl (_ bv12 4) ((_ zero_extend 0) (_ bv12 4))) (bvnot ((_ rotate_left 1) v0)))) (not (bvsge (bvxor ((_ sign_extend 0) (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0)))) (_ bv12 4)) ((_ sign_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1))))) (not (bvsgt ((_ rotate_left 1) v0) ((_ zero_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1))))))))
(assert (= BAV26 (or (not (bvsge (bvmul ((_ repeat 1) (bvnot ((_ rotate_left 1) v0))) ((_ zero_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))) ((_ sign_extend 3) (ite (bvult ((_ zero_extend 0) (_ bv12 4)) ((_ sign_extend 3) (bvnot (ite (bvult v1 (bvnot ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))))) (not (distinct (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))) v2)) (= (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))) v4))))
(assert (= BAV27 (distinct (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))) v2)))
(assert (= BAV28 (= (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))) v4)))
(assert (= BAV29 (or (not (bvugt ((_ sign_extend 0) (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0)))) (bvxor v4 ((_ rotate_left 1) v0)))) (not (bvslt (bvashr v1 (bvnot v2)) ((_ sign_extend 3) (bvcomp v0 (_ bv12 4))))) (not (bvsgt ((_ rotate_left 1) v0) ((_ zero_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1))))))))
(assert (= BAV30 (or (bvslt (bvlshr (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))) v3) (bvneg (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))))) (not (distinct (ite (bvslt (bvneg (bvnot v2)) v4) (_ bv1 1) (_ bv0 1)) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1)))) (= (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4))))))))
(assert (= BAV31 (distinct (ite (bvslt (bvneg (bvnot v2)) v4) (_ bv1 1) (_ bv0 1)) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1)))))
(assert (= BAV32 (= (_ bv1 1) ((_ extract 2 2) v0))))
(assert (= BAV33 (= (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))))))
(assert (= BAV34 (= (_ bv1 1) ((_ extract 2 2) v0))))
(assert (= BAV35 (or (not (bvult ((_ rotate_left 1) v0) ((_ sign_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1))))) (not (bvsge (_ bv12 4) ((_ sign_extend 3) (ite (bvult ((_ zero_extend 0) (_ bv12 4)) ((_ sign_extend 3) (bvnot (ite (bvult v1 (bvnot ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))))) (not (= (bvxor v4 ((_ rotate_left 1) v0)) (bvashr (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))) ((_ repeat 1) (bvnot ((_ rotate_left 1) v0)))))))))
(assert (= BAV36 (= (bvxor v4 ((_ rotate_left 1) v0)) (bvashr (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))) ((_ repeat 1) (bvnot ((_ rotate_left 1) v0)))))))
(assert (= BAV37 (or (not (= (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))))) (not (bvslt v2 ((_ sign_extend 3) (ite (bvule (_ bv12 4) (bvneg (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))))) (_ bv1 1) (_ bv0 1))))) (bvsgt (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ sign_extend 3) (ite (bvult v1 (bvnot ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1)))))))
(assert (= BAV38 (= (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))))))
(assert (= BAV39 (= (_ bv1 1) ((_ extract 2 2) v0))))
(assert (= BAV40 (= (_ bv1 1) ((_ extract 2 2) v0))))
(assert (= BAV41 (or (distinct (ite (bvslt (bvneg (bvnot v2)) v4) (_ bv1 1) (_ bv0 1)) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1))) (not (bvsge (ite (= (_ bv1 1) ((_ extract 0 0) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))) ((_ zero_extend 3) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1))) (bvnot v2)) ((_ rotate_left 1) v0))) (bvsgt (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ sign_extend 3) (ite (bvult v1 (bvnot ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1)))))))
(assert (= BAV42 (distinct (ite (bvslt (bvneg (bvnot v2)) v4) (_ bv1 1) (_ bv0 1)) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1)))))
(assert (= BAV43 (= (_ bv1 1) ((_ extract 2 2) v0))))
(assert (= BAV44 (= (_ bv1 1) ((_ extract 0 0) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1))))))
(assert (= BAV45 (= (_ bv1 1) ((_ extract 2 2) v0))))
(assert (= BAV46 (= (_ bv1 1) ((_ extract 2 2) v0))))
(assert (= BAV47 (or (not (distinct ((_ rotate_left 1) v0) ((_ rotate_right 3) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4))))))) (not (= v1 (bvmul ((_ repeat 1) (bvnot ((_ rotate_left 1) v0))) ((_ zero_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))))) (bvule ((_ zero_extend 3) (bvnot (ite (bvult v1 (bvnot ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1)))) (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0)))))))
(assert (= BAV48 (distinct ((_ rotate_left 1) v0) ((_ rotate_right 3) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4))))))))
(assert (= BAV49 (= v1 (bvmul ((_ repeat 1) (bvnot ((_ rotate_left 1) v0))) ((_ zero_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))))))
(assert (= BAV50 (or (not (bvsge (bvlshr (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))) v3) (_ bv12 4))) (bvuge (bvshl (_ bv12 4) ((_ zero_extend 0) (_ bv12 4))) (bvnot ((_ rotate_left 1) v0))) (bvslt (bvnot v2) (bvnot ((_ rotate_left 1) v0))))))
(assert (= BAV51 (or (not (bvugt v0 ((_ repeat 1) (bvnot ((_ rotate_left 1) v0))))) (bvult v3 ((_ zero_extend 0) (_ bv12 4))) (bvslt (bvxor v4 ((_ rotate_left 1) v0)) ((_ zero_extend 0) (bvnor ((_ zero_extend 0) (_ bv12 4)) (_ bv12 4)))))))
(assert (= BAV52 (or (distinct (ite (bvslt (bvneg (bvnot v2)) v4) (_ bv1 1) (_ bv0 1)) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1))) (bvslt (bvxor ((_ sign_extend 0) (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0)))) (_ bv12 4)) (bvnot ((_ rotate_left 1) v0))) (bvsge (bvlshr (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))) v3) (_ bv12 4)))))
(assert (= BAV53 (distinct (ite (bvslt (bvneg (bvnot v2)) v4) (_ bv1 1) (_ bv0 1)) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1)))))
(assert (= BAV54 (= (_ bv1 1) ((_ extract 2 2) v0))))
(assert (= BAV55 (or (not (bvsgt (bvnot ((_ rotate_left 1) v0)) v1)) (not (bvuge ((_ zero_extend 0) (_ bv12 4)) v1)) (not (= (ite (= (_ bv1 1) ((_ extract 0 0) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))) ((_ zero_extend 3) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1))) (bvnot v2)) (bvashr v1 (bvnot v2)))))))
(assert (= BAV56 (= (ite (= (_ bv1 1) ((_ extract 0 0) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))) ((_ zero_extend 3) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1))) (bvnot v2)) (bvashr v1 (bvnot v2)))))
(assert (= BAV57 (= (_ bv1 1) ((_ extract 0 0) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1))))))
(assert (= BAV58 (= (_ bv1 1) ((_ extract 2 2) v0))))
(assert (= BAV59 (or (not (bvsge (bvmul ((_ repeat 1) (bvnot ((_ rotate_left 1) v0))) ((_ zero_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))) ((_ sign_extend 3) (ite (bvult ((_ zero_extend 0) (_ bv12 4)) ((_ sign_extend 3) (bvnot (ite (bvult v1 (bvnot ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))))) (distinct (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))) v2) (not (bvslt (bvlshr (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))) v3) ((_ zero_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1))))))))
(assert (= BAV60 (distinct (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))) v2)))
(assert (= BAV61 (or (not (bvuge (_ bv12 4) v2)) (not (distinct ((_ rotate_left 1) v0) ((_ rotate_right 3) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4))))))) (= (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))) v4))))
(assert (= BAV62 (distinct ((_ rotate_left 1) v0) ((_ rotate_right 3) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4))))))))
(assert (= BAV63 (= (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))) v4)))
(assert (= BAV64 (or (bvult v3 (bvor (bvnot v2) (bvnot ((_ rotate_left 1) v0)))) (not (bvule ((_ sign_extend 3) (ite (bvult v1 (bvnot ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1))) (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))))) (not (bvsgt (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ sign_extend 3) (ite (bvult v1 (bvnot ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1))))))))
(assert (= BAV65 (= (_ bv1 1) ((_ extract 2 2) v0))))
(assert (= BAV66 (or (= (ite (= (_ bv1 1) ((_ extract 0 0) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))) ((_ zero_extend 3) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1))) (bvnot v2)) (bvashr v1 (bvnot v2))) (bvsge (ite (= (_ bv1 1) ((_ extract 0 0) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))) ((_ zero_extend 3) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1))) (bvnot v2)) ((_ rotate_left 1) v0)) (bvult v3 (bvor (bvnot v2) (bvnot ((_ rotate_left 1) v0)))))))
(assert (= BAV67 (= (ite (= (_ bv1 1) ((_ extract 0 0) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))) ((_ zero_extend 3) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1))) (bvnot v2)) (bvashr v1 (bvnot v2)))))
(assert (= BAV68 (= (_ bv1 1) ((_ extract 0 0) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1))))))
(assert (= BAV69 (= (_ bv1 1) ((_ extract 2 2) v0))))
(assert (= BAV70 (= (_ bv1 1) ((_ extract 0 0) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1))))))
(assert (= BAV71 (= (_ bv1 1) ((_ extract 2 2) v0))))
(assert (= BAV72 (or (bvule ((_ sign_extend 3) (ite (bvult v1 (bvnot ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1))) (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0)))) (bvsle (ite (= (_ bv1 1) ((_ extract 0 0) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))) ((_ zero_extend 3) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1))) (bvnot v2)) ((_ zero_extend 0) (_ bv12 4))) (bvult v3 ((_ zero_extend 0) (_ bv12 4))))))
(assert (= BAV73 (= (_ bv1 1) ((_ extract 0 0) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1))))))
(assert (= BAV74 (= (_ bv1 1) ((_ extract 2 2) v0))))
(assert (= BAV75 (or (not (bvult ((_ rotate_left 1) v0) ((_ zero_extend 3) (ite (bvult ((_ zero_extend 0) (_ bv12 4)) ((_ sign_extend 3) (bvnot (ite (bvult v1 (bvnot ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))))) (bvslt (bvlshr (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))) v3) (bvneg (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))))) (not (= (ite (= (_ bv1 1) ((_ extract 0 0) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))) ((_ zero_extend 3) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1))) (bvnot v2)) (bvashr v1 (bvnot v2)))))))
(assert (= BAV76 (= (ite (= (_ bv1 1) ((_ extract 0 0) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))) ((_ zero_extend 3) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1))) (bvnot v2)) (bvashr v1 (bvnot v2)))))
(assert (= BAV77 (= (_ bv1 1) ((_ extract 0 0) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1))))))
(assert (= BAV78 (= (_ bv1 1) ((_ extract 2 2) v0))))
(assert (= BAV79 (or (bvslt (bvnot v2) (bvnot ((_ rotate_left 1) v0))) (bvule ((_ sign_extend 3) (ite (bvult v1 (bvnot ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1))) (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0)))) (bvule (bvnot v2) v1))))
(assert (= BAV80 (or (not (= (bvnor ((_ zero_extend 0) (_ bv12 4)) (_ bv12 4)) (bvneg (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0)))))) (bvsgt (bvshl (_ bv12 4) ((_ zero_extend 0) (_ bv12 4))) (bvshl (_ bv12 4) ((_ zero_extend 0) (_ bv12 4)))) (not (bvsgt (bvnot ((_ rotate_left 1) v0)) v1)))))
(assert (= BAV81 (= (bvnor ((_ zero_extend 0) (_ bv12 4)) (_ bv12 4)) (bvneg (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0)))))))
(assert (= BAV82 (or (not (bvslt (bvlshr (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))) v3) ((_ zero_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1))))) (not (= (bvxor v4 ((_ rotate_left 1) v0)) (bvashr (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))) ((_ repeat 1) (bvnot ((_ rotate_left 1) v0)))))) (bvslt ((_ sign_extend 3) (ite (bvslt (bvneg (bvnot v2)) v4) (_ bv1 1) (_ bv0 1))) ((_ rotate_right 3) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))))))))
(assert (= BAV83 (= (bvxor v4 ((_ rotate_left 1) v0)) (bvashr (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))) ((_ repeat 1) (bvnot ((_ rotate_left 1) v0)))))))
(assert (= BAV84 (or (bvugt ((_ rotate_left 0) (bvnot v2)) v2) (not (= v3 ((_ rotate_right 3) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4))))))) (not (bvslt (bvmul ((_ repeat 1) (bvnot ((_ rotate_left 1) v0))) ((_ zero_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))) ((_ rotate_left 1) v0))))))
(assert (= BAV85 (= v3 ((_ rotate_right 3) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4))))))))
(assert (= BAV86 (or (bvuge ((_ zero_extend 0) (_ bv12 4)) (bvxor v2 (_ bv12 4))) (distinct (ite (bvslt (bvneg (bvnot v2)) v4) (_ bv1 1) (_ bv0 1)) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1))) (not (= v1 (bvmul ((_ repeat 1) (bvnot ((_ rotate_left 1) v0))) ((_ zero_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))))))))
(assert (= BAV87 (distinct (ite (bvslt (bvneg (bvnot v2)) v4) (_ bv1 1) (_ bv0 1)) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1)))))
(assert (= BAV88 (= (_ bv1 1) ((_ extract 2 2) v0))))
(assert (= BAV89 (= v1 (bvmul ((_ repeat 1) (bvnot ((_ rotate_left 1) v0))) ((_ zero_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))))))
(assert (= BAV90 (or (bvule (bvnor ((_ zero_extend 0) (_ bv12 4)) (_ bv12 4)) ((_ repeat 1) (bvnot ((_ rotate_left 1) v0)))) (= (_ bv12 4) (bvashr v1 (bvnot v2))) (distinct ((_ rotate_left 1) v0) ((_ rotate_right 3) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))))))))
(assert (= BAV91 (= (_ bv12 4) (bvashr v1 (bvnot v2)))))
(assert (= BAV92 (distinct ((_ rotate_left 1) v0) ((_ rotate_right 3) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4))))))))
(assert (= BAV93 (or (not (= v3 ((_ rotate_right 3) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4))))))) (distinct (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))) v2) (not (bvuge ((_ rotate_left 0) (bvnot v2)) ((_ sign_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1))))))))
(assert (= BAV94 (= v3 ((_ rotate_right 3) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4))))))))
(assert (= BAV95 (distinct (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))) v2)))
(assert (= BAV96 (or (not (bvult v3 ((_ zero_extend 0) (_ bv12 4)))) (not (bvsge ((_ repeat 1) (bvnot ((_ rotate_left 1) v0))) ((_ sign_extend 3) (ite (bvule (_ bv12 4) (bvneg (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))))) (_ bv1 1) (_ bv0 1))))) (bvugt v0 ((_ repeat 1) (bvnot ((_ rotate_left 1) v0)))))))
(assert (= BAV97 (or (bvule (bvnor ((_ zero_extend 0) (_ bv12 4)) (_ bv12 4)) ((_ repeat 1) (bvnot ((_ rotate_left 1) v0)))) (not (bvslt (bvnot v2) (bvnot ((_ rotate_left 1) v0)))) (distinct (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))) v2))))
(assert (= BAV98 (distinct (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))) v2)))
(check-sat-assuming ((and (or (not (= (bvnor ((_ zero_extend 0) (_ bv12 4)) (_ bv12 4)) (bvneg (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0)))))) (= (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4))))) (= (bvnor ((_ zero_extend 0) (_ bv12 4)) (_ bv12 4)) (bvneg (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0)))))) (or (= (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4))))) (distinct (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))) v2) (not (bvsge (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))) (ite (= (_ bv1 1) ((_ extract 0 0) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))) ((_ zero_extend 3) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1))) (bvnot v2))))) (or (not (bvult v3 (bvnor ((_ zero_extend 0) (_ bv12 4)) (_ bv12 4)))) (not (bvsle (bvshl (_ bv12 4) ((_ zero_extend 0) (_ bv12 4))) (bvlshr (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))) v3))) (not (bvsle (bvnot ((_ rotate_left 1) v0)) (bvnot v2)))) (or (not (bvult ((_ zero_extend 0) (_ bv12 4)) (_ bv12 4))) (not (= (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))) v4)) (not (= (ite (= (_ bv1 1) ((_ extract 0 0) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))) ((_ zero_extend 3) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1))) (bvnot v2)) (bvashr v1 (bvnot v2))))) (or (bvsge (bvlshr (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))) v3) (_ bv12 4)) (not (bvuge ((_ sign_extend 3) (ite (bvult ((_ rotate_left 0) (bvnot v2)) (bvxor v4 ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1))) (bvneg (bvnot v2)))) (bvugt (bvnot v2) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))))) (or (bvslt v3 (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2)) (bvsge (bvxor ((_ sign_extend 0) (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0)))) (_ bv12 4)) ((_ sign_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))) (not (bvult ((_ rotate_left 1) v0) ((_ zero_extend 3) (ite (bvult ((_ zero_extend 0) (_ bv12 4)) ((_ sign_extend 3) (bvnot (ite (bvult v1 (bvnot ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1)))))) (or (bvsle (bvnot ((_ rotate_left 1) v0)) (bvnot v2)) (not (bvsle ((_ sign_extend 3) (ite (bvule (_ bv12 4) (bvneg (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))))) (_ bv1 1) (_ bv0 1))) ((_ rotate_right 3) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4))))))) (not (bvsgt (bvnot ((_ rotate_left 1) v0)) v1))) (or (bvsle v0 ((_ sign_extend 3) (ite (bvult ((_ zero_extend 0) (_ bv12 4)) ((_ sign_extend 3) (bvnot (ite (bvult v1 (bvnot ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1)))) (not (bvuge ((_ rotate_left 0) (bvnot v2)) ((_ sign_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1))))) (not (bvsgt (bvnot (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2)) (bvxor v4 ((_ rotate_left 1) v0))))) (or (not (bvuge (bvshl (_ bv12 4) ((_ zero_extend 0) (_ bv12 4))) (bvnot ((_ rotate_left 1) v0)))) (not (bvsge (bvxor ((_ sign_extend 0) (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0)))) (_ bv12 4)) ((_ sign_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1))))) (not (bvsgt ((_ rotate_left 1) v0) ((_ zero_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))))) (or (not (bvsge (bvmul ((_ repeat 1) (bvnot ((_ rotate_left 1) v0))) ((_ zero_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))) ((_ sign_extend 3) (ite (bvult ((_ zero_extend 0) (_ bv12 4)) ((_ sign_extend 3) (bvnot (ite (bvult v1 (bvnot ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))))) (not (distinct (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))) v2)) (= (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))) v4)) (or (not (bvugt ((_ sign_extend 0) (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0)))) (bvxor v4 ((_ rotate_left 1) v0)))) (not (bvslt (bvashr v1 (bvnot v2)) ((_ sign_extend 3) (bvcomp v0 (_ bv12 4))))) (not (bvsgt ((_ rotate_left 1) v0) ((_ zero_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))))) (or (bvslt (bvlshr (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))) v3) (bvneg (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))))) (not (distinct (ite (bvslt (bvneg (bvnot v2)) v4) (_ bv1 1) (_ bv0 1)) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1)))) (= (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))))) (or (not (bvult ((_ rotate_left 1) v0) ((_ sign_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1))))) (not (bvsge (_ bv12 4) ((_ sign_extend 3) (ite (bvult ((_ zero_extend 0) (_ bv12 4)) ((_ sign_extend 3) (bvnot (ite (bvult v1 (bvnot ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))))) (not (= (bvxor v4 ((_ rotate_left 1) v0)) (bvashr (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))) ((_ repeat 1) (bvnot ((_ rotate_left 1) v0))))))) (or (not (= (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))))) (not (bvslt v2 ((_ sign_extend 3) (ite (bvule (_ bv12 4) (bvneg (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))))) (_ bv1 1) (_ bv0 1))))) (bvsgt (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ sign_extend 3) (ite (bvult v1 (bvnot ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1))))) (or (distinct (ite (bvslt (bvneg (bvnot v2)) v4) (_ bv1 1) (_ bv0 1)) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1))) (not (bvsge (ite (= (_ bv1 1) ((_ extract 0 0) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))) ((_ zero_extend 3) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1))) (bvnot v2)) ((_ rotate_left 1) v0))) (bvsgt (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ sign_extend 3) (ite (bvult v1 (bvnot ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1))))) (or (not (distinct ((_ rotate_left 1) v0) ((_ rotate_right 3) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4))))))) (not (= v1 (bvmul ((_ repeat 1) (bvnot ((_ rotate_left 1) v0))) ((_ zero_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))))) (bvule ((_ zero_extend 3) (bvnot (ite (bvult v1 (bvnot ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1)))) (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))))) (or (not (bvsge (bvlshr (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))) v3) (_ bv12 4))) (bvuge (bvshl (_ bv12 4) ((_ zero_extend 0) (_ bv12 4))) (bvnot ((_ rotate_left 1) v0))) (bvslt (bvnot v2) (bvnot ((_ rotate_left 1) v0)))) (or (not (bvugt v0 ((_ repeat 1) (bvnot ((_ rotate_left 1) v0))))) (bvult v3 ((_ zero_extend 0) (_ bv12 4))) (bvslt (bvxor v4 ((_ rotate_left 1) v0)) ((_ zero_extend 0) (bvnor ((_ zero_extend 0) (_ bv12 4)) (_ bv12 4))))) (or (distinct (ite (bvslt (bvneg (bvnot v2)) v4) (_ bv1 1) (_ bv0 1)) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1))) (bvslt (bvxor ((_ sign_extend 0) (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0)))) (_ bv12 4)) (bvnot ((_ rotate_left 1) v0))) (bvsge (bvlshr (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))) v3) (_ bv12 4))) (or (not (bvsgt (bvnot ((_ rotate_left 1) v0)) v1)) (not (bvuge ((_ zero_extend 0) (_ bv12 4)) v1)) (not (= (ite (= (_ bv1 1) ((_ extract 0 0) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))) ((_ zero_extend 3) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1))) (bvnot v2)) (bvashr v1 (bvnot v2))))) (or (not (bvsge (bvmul ((_ repeat 1) (bvnot ((_ rotate_left 1) v0))) ((_ zero_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))) ((_ sign_extend 3) (ite (bvult ((_ zero_extend 0) (_ bv12 4)) ((_ sign_extend 3) (bvnot (ite (bvult v1 (bvnot ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))))) (distinct (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))) v2) (not (bvslt (bvlshr (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))) v3) ((_ zero_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))))) (or (not (bvuge (_ bv12 4) v2)) (not (distinct ((_ rotate_left 1) v0) ((_ rotate_right 3) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4))))))) (= (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))) v4)) (or (bvult v3 (bvor (bvnot v2) (bvnot ((_ rotate_left 1) v0)))) (not (bvule ((_ sign_extend 3) (ite (bvult v1 (bvnot ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1))) (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))))) (not (bvsgt (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ sign_extend 3) (ite (bvult v1 (bvnot ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1)))))) (or (= (ite (= (_ bv1 1) ((_ extract 0 0) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))) ((_ zero_extend 3) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1))) (bvnot v2)) (bvashr v1 (bvnot v2))) (bvsge (ite (= (_ bv1 1) ((_ extract 0 0) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))) ((_ zero_extend 3) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1))) (bvnot v2)) ((_ rotate_left 1) v0)) (bvult v3 (bvor (bvnot v2) (bvnot ((_ rotate_left 1) v0))))) (or (bvule ((_ sign_extend 3) (ite (bvult v1 (bvnot ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1))) (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0)))) (bvsle (ite (= (_ bv1 1) ((_ extract 0 0) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))) ((_ zero_extend 3) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1))) (bvnot v2)) ((_ zero_extend 0) (_ bv12 4))) (bvult v3 ((_ zero_extend 0) (_ bv12 4)))) (or (not (bvult ((_ rotate_left 1) v0) ((_ zero_extend 3) (ite (bvult ((_ zero_extend 0) (_ bv12 4)) ((_ sign_extend 3) (bvnot (ite (bvult v1 (bvnot ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))))) (bvslt (bvlshr (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))) v3) (bvneg (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))))) (not (= (ite (= (_ bv1 1) ((_ extract 0 0) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))) ((_ zero_extend 3) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1))) (bvnot v2)) (bvashr v1 (bvnot v2))))) (or (bvslt (bvnot v2) (bvnot ((_ rotate_left 1) v0))) (bvule ((_ sign_extend 3) (ite (bvult v1 (bvnot ((_ rotate_left 1) v0))) (_ bv1 1) (_ bv0 1))) (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0)))) (bvule (bvnot v2) v1)) (or (not (= (bvnor ((_ zero_extend 0) (_ bv12 4)) (_ bv12 4)) (bvneg (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0)))))) (bvsgt (bvshl (_ bv12 4) ((_ zero_extend 0) (_ bv12 4))) (bvshl (_ bv12 4) ((_ zero_extend 0) (_ bv12 4)))) (not (bvsgt (bvnot ((_ rotate_left 1) v0)) v1))) (or (not (bvslt (bvlshr (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))) v3) ((_ zero_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1))))) (not (= (bvxor v4 ((_ rotate_left 1) v0)) (bvashr (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))) ((_ repeat 1) (bvnot ((_ rotate_left 1) v0)))))) (bvslt ((_ sign_extend 3) (ite (bvslt (bvneg (bvnot v2)) v4) (_ bv1 1) (_ bv0 1))) ((_ rotate_right 3) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4))))))) (or (bvugt ((_ rotate_left 0) (bvnot v2)) v2) (not (= v3 ((_ rotate_right 3) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4))))))) (not (bvslt (bvmul ((_ repeat 1) (bvnot ((_ rotate_left 1) v0))) ((_ zero_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))) ((_ rotate_left 1) v0)))) (or (bvuge ((_ zero_extend 0) (_ bv12 4)) (bvxor v2 (_ bv12 4))) (distinct (ite (bvslt (bvneg (bvnot v2)) v4) (_ bv1 1) (_ bv0 1)) (ite (bvsge (ite (= (_ bv1 1) ((_ extract 2 2) v0)) v1 v2) ((_ zero_extend 0) (_ bv12 4))) (_ bv1 1) (_ bv0 1))) (not (= v1 (bvmul ((_ repeat 1) (bvnot ((_ rotate_left 1) v0))) ((_ zero_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1))))))) (or (bvule (bvnor ((_ zero_extend 0) (_ bv12 4)) (_ bv12 4)) ((_ repeat 1) (bvnot ((_ rotate_left 1) v0)))) (= (_ bv12 4) (bvashr v1 (bvnot v2))) (distinct ((_ rotate_left 1) v0) ((_ rotate_right 3) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4))))))) (or (not (= v3 ((_ rotate_right 3) (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4))))))) (distinct (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))) v2) (not (bvuge ((_ rotate_left 0) (bvnot v2)) ((_ sign_extend 3) (ite (bvsgt ((_ rotate_left 1) v0) (bvnot v2)) (_ bv1 1) (_ bv0 1)))))) (or (not (bvult v3 ((_ zero_extend 0) (_ bv12 4)))) (not (bvsge ((_ repeat 1) (bvnot ((_ rotate_left 1) v0))) ((_ sign_extend 3) (ite (bvule (_ bv12 4) (bvneg (bvlshr (bvashr v1 (bvnot v2)) (bvnot ((_ rotate_left 1) v0))))) (_ bv1 1) (_ bv0 1))))) (bvugt v0 ((_ repeat 1) (bvnot ((_ rotate_left 1) v0))))) (or (bvule (bvnor ((_ zero_extend 0) (_ bv12 4)) (_ bv12 4)) ((_ repeat 1) (bvnot ((_ rotate_left 1) v0)))) (not (bvslt (bvnot v2) (bvnot ((_ rotate_left 1) v0)))) (distinct (bvxnor ((_ rotate_left 0) (bvnot v2)) ((_ zero_extend 3) (bvcomp v0 (_ bv12 4)))) v2)))))
(get-model)