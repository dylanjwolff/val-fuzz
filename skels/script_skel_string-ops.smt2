(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(get-model)
(get-model)
(get-model)
(get-model)
(get-model)
(declare-const BAV5 Bool)
(get-model)
(declare-const BAV6 Bool)
(get-model)
(get-model)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(get-model)
(declare-const BAV9 Bool)
(get-model)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(get-model)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const BAV23 Bool)
(declare-const BAV24 Bool)
(declare-const BAV25 Bool)
(declare-const BAV26 Bool)
(declare-const BAV27 Bool)
(declare-const BAV28 Bool)
(declare-const BAV29 Bool)
(declare-const BAV30 Bool)
(declare-const BAV31 Bool)
(declare-const BAV32 Bool)
(declare-const BAV33 Bool)
(declare-const BAV34 Bool)
(declare-const BAV35 Bool)
(declare-const BAV36 Bool)
(declare-const BAV37 Bool)
(declare-const BAV38 Bool)
(declare-const BAV39 Bool)
(declare-const BAV40 Bool)
(declare-const BAV41 Bool)
(declare-const BAV42 Bool)
(declare-const BAV43 Bool)
(declare-const BAV44 Bool)
(declare-const BAV45 Bool)
(declare-const BAV46 Bool)
(declare-const BAV47 Bool)
(declare-const BAV48 Bool)
(declare-const BAV49 Bool)
(declare-const BAV50 Bool)
(declare-const BAV51 Bool)
(declare-const BAV52 Bool)
(declare-const BAV53 Bool)
(declare-const BAV54 Bool)
(declare-const BAV55 Bool)
(declare-const BAV56 Bool)
(declare-const BAV57 Bool)
(declare-const BAV58 Bool)
(declare-const BAV59 Bool)
(declare-const BAV60 Bool)
(declare-const BAV61 Bool)
(declare-const BAV62 Bool)
(declare-const BAV63 Bool)
(declare-const BAV64 Bool)
(declare-const BAV65 Bool)
(declare-const BAV66 Bool)
(declare-const BAV67 Bool)
(declare-const BAV68 Bool)
(declare-const BAV69 Bool)
(declare-const BAV70 Bool)
(declare-const BAV71 Bool)
(declare-const BAV72 Bool)
(declare-const BAV73 Bool)
(declare-const BAV74 Bool)
(declare-const BAV75 Bool)
(declare-const BAV76 Bool)
(declare-const BAV77 Bool)
(declare-const BAV78 Bool)
(declare-const BAV79 Bool)
(declare-const BAV80 Bool)
(declare-const BAV81 Bool)
(declare-const BAV82 Bool)
(declare-const BAV83 Bool)
(declare-const BAV84 Bool)
(declare-const BAV85 Bool)
(declare-const BAV86 Bool)
(declare-const BAV87 Bool)
(declare-const BAV88 Bool)
(declare-const GEN56 Int)
(declare-const GEN55 String)
(declare-const GEN54 Int)
(declare-const GEN53 String)
(declare-const GEN52 Int)
(declare-const GEN51 String)
(declare-const GEN50 String)
(declare-const GEN49 String)
(declare-const GEN48 Int)
(declare-const GEN47 String)
(declare-const GEN46 String)
(declare-const GEN45 Int)
(declare-const GEN44 String)
(declare-const GEN43 String)
(declare-const GEN42 Int)
(declare-const GEN41 String)
(declare-const GEN40 String)
(declare-const GEN39 String)
(declare-const GEN38 String)
(declare-const GEN37 Int)
(declare-const GEN36 String)
(declare-const GEN35 String)
(declare-const GEN34 String)
(declare-const GEN33 String)
(declare-const GEN32 String)
(declare-const GEN31 String)
(declare-const GEN30 String)
(declare-const GEN29 Int)
(declare-const GEN28 String)
(declare-const GEN27 Int)
(declare-const GEN26 String)
(declare-const GEN25 String)
(declare-const GEN24 Int)
(declare-const GEN23 Int)
(declare-const GEN22 Int)
(declare-const GEN21 Int)
(declare-const GEN20 Int)
(declare-const GEN19 Int)
(declare-const GEN18 Int)
(declare-const GEN17 Int)
(declare-const GEN16 Int)
(declare-const GEN15 Int)
(declare-const GEN14 Int)
(declare-const GEN13 Int)
(declare-const GEN12 Int)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-const a String)
(declare-const b String)
(declare-const c String)
(declare-const d String)
(declare-const i Int)
(declare-const j Int)
(set-option :model_validate true)
(simplify (= "b" (str.substr "abc" 1 1)))
(push)
(assert (>= (str.len a) GEN1))
(assert (= (str.len b) GEN2))
(assert (= b (str.substr a GEN3 GEN4)))
(assert (= BAV1 (>= (str.len a) GEN1)))
(assert (= BAV2 (= (str.len b) GEN2)))
(assert (= BAV3 (= b (str.substr a GEN3 GEN4))))
(assert (= BAV4 (= (str.len a) GEN5)))
(assert (= BAV5 (= (str.len b) GEN6)))
(assert (= BAV6 (= b (str.substr a GEN7 GEN8))))
(assert (= BAV7 (= (str.len a) GEN9)))
(assert (= BAV8 (= (str.len b) GEN10)))
(assert (= BAV9 (= b (str.substr a GEN11 GEN12))))
(assert (= BAV10 (= (str.len a) GEN13)))
(assert (= BAV11 (= (str.len b) GEN14)))
(assert (= BAV12 (= b (str.substr a GEN15 GEN16))))
(assert (= BAV13 (= (str.len a) GEN17)))
(assert (= BAV14 (= (str.len b) GEN18)))
(assert (= BAV15 (= b (str.substr a GEN19 GEN20))))
(assert (= BAV16 (= (seq.len a) GEN21)))
(assert (= BAV17 (= b (seq.at a GEN22))))
(assert (= BAV18 (= b (seq.at a GEN23))))
(assert (= BAV19 (= b (str.at a i))))
(assert (= BAV20 (< i GEN24)))
(assert (= BAV21 (= GEN25 (str.at a i))))
(assert (= BAV22 (>= i (str.len a))))
(assert (= BAV23 (= GEN26 (str.at a i))))
(assert (= BAV24 (<= GEN27 i)))
(assert (= BAV25 (< i (str.len a))))
(assert (= BAV26 (= GEN28 (str.at a i))))
(assert (= BAV27 (<= GEN29 i)))
(assert (= BAV28 (< i (str.len a))))
(assert (= BAV29 (= GEN30 (str.at a i))))
(assert (= BAV30 (= a c)))
(assert (= BAV31 (>= (str.len a) GEN37)))
(assert (= BAV32 (>= (str.len a) GEN42)))
(assert (= BAV33 (>= (str.len a) GEN45)))
(assert (= BAV34 (>= (str.len a) GEN48)))
(assert (= BAV35 (= a GEN51)))
(assert (= BAV36 (= (str.len a) (+ GEN52 (str.indexof a GEN53)))))
(assert (= BAV37 (= (str.len a) (+ GEN54 (str.indexof a GEN55)))))
(assert (= BAV38 (= (str.len a) GEN56)))
(assert (= BAV39 (= (str.len a) (+ 3 (str.indexof a "abc")))))
(assert (= BAV40 (= -1 (str.indexof a "abc"))))
(assert (= BAV41 (= (str.len a) 2)))
(assert (= BAV42 (= (str.len a) (+ 3 (str.indexof a "abc")))))
(assert (= BAV43 (= (str.len a) 3)))
(assert (= BAV44 (= (str.len a) (+ 3 (str.indexof a "abc")))))
(assert (= BAV45 (= (str.len a) 3)))
(assert (= BAV46 (= a "abc")))
(assert (= BAV47 (= (str.len a) (+ 3 (str.indexof a "abc")))))
(assert (= BAV48 (= -1 (str.indexof a "abc"))))
(assert (= BAV49 (= a "abc")))
(assert (= BAV50 (= -1 (str.indexof a "abc"))))
(assert (= BAV51 (= (str.len (str.++ a a)) (+ 3 (str.indexof a "abc")))))
(assert (= BAV52 (= a "abcde")))
(assert (= BAV53 (<= (str.len a) 5)))
(assert (= BAV54 (= a "abcde")))
(assert (= BAV55 (<= (str.len a) 4)))
(assert (= BAV56 (= a "abcde")))
(assert (= BAV57 (<= (str.len a) 5)))
(assert (= BAV58 (= (str.++ a b) "abcde")))
(assert (= BAV59 (<= (str.len a) 3)))
(assert (= BAV60 (<= (str.len b) 2)))
(assert (= BAV61 (= (str.++ a b) "abcde")))
(assert (= BAV62 (<= (str.len a) 2)))
(assert (= BAV63 (<= (str.len b) 2)))
(assert (= BAV64 (= (str.++ a b) "abcde")))
(assert (= BAV65 (<= (str.len a) 3)))
(assert (= BAV66 (<= (str.len b) 1)))
(assert (= BAV67 (= (str.++ a b) "abcde")))
(assert (= BAV68 (= (str.len a) 3)))
(assert (= BAV69 (= (str.replace "ab" "a" "A") "Ab")))
(assert (= BAV70 (= (str.replace "ab" "a" "A") "bb")))
(assert (= BAV71 (or (= c "a") (= c "b"))))
(assert (= BAV72 (= c "a")))
(assert (= BAV73 (= c "b")))
(assert (= BAV74 (= (str.replace "ab" c "A") "Ab")))
(assert (= BAV75 (or (= c "c") (= c "b"))))
(assert (= BAV76 (= c "c")))
(assert (= BAV77 (= c "b")))
(assert (= BAV78 (= (str.replace "ab" c "A") "Ab")))
(assert (= BAV79 (= "ab" (str.replace a "yyy" "ab"))))
(assert (= BAV80 (= "ab" (str.replace a "yyy" "abb"))))
(assert (= BAV81 (= "ab" (str.replace a "ab" ""))))
(assert (= BAV82 (= (str.len a) (+ (str.len b) (str.indexof a b)))))
(assert (= BAV83 (= -1 (str.indexof a b))))
(assert (= BAV84 (= (str.len a) (+ 3 (str.indexof a "abc")))))
(assert (= BAV85 (= -1 (str.indexof a "abc"))))
(assert (= BAV86 (= -1 (str.indexof a "abc"))))
(assert (= BAV87 (= (str.len a) (+ (str.len b) (str.indexof a b)))))
(assert (= BAV88 (= -1 (str.indexof a b))))
(check-sat)
(get-model)
(pop)
(push)
(assert (= (str.len a) GEN5))
(assert (= (str.len b) GEN6))
(assert (= b (str.substr a GEN7 GEN8)))
(check-sat)
(pop)
(push)
(assert (= (str.len a) GEN9))
(assert (= (str.len b) GEN10))
(assert (= b (str.substr a GEN11 GEN12)))
(check-sat)
(pop)
(push)
(assert (= (str.len a) GEN13))
(assert (= (str.len b) GEN14))
(assert (= b (str.substr a GEN15 GEN16)))
(check-sat)
(pop)
(push)
(assert (= (str.len a) GEN17))
(assert (= (str.len b) GEN18))
(assert (= b (str.substr a GEN19 GEN20)))
(check-sat)
(pop)
(simplify (= "a" (str.at "abc" 0)))
(simplify (= "b" (str.at "abc" 1)))
(simplify (= "c" (str.at "abc" 2)))
(set-option :model_validate false)
(push)
(assert (= (seq.len a) GEN21))
(assert (= b (seq.at a GEN22)))
(assert (= b (seq.at a GEN23)))
(check-sat)
(pop)
(push)
(assert (= b (str.at a i)))
(check-sat)
(pop)
(push)
(assert (< i GEN24))
(assert (= GEN25 (str.at a i)))
(check-sat)
(pop)
(push)
(assert (>= i (str.len a)))
(assert (= GEN26 (str.at a i)))
(check-sat)
(pop)
(set-option :model_validate true)
(push)
(assert (<= GEN27 i))
(assert (< i (str.len a)))
(assert (= GEN28 (str.at a i)))
(check-sat)
(pop)
(push)
(assert (<= GEN29 i))
(assert (< i (str.len a)))
(assert (= GEN30 (str.at a i)))
(check-sat)
(pop)
(push)
(assert (str.contains a b))
(assert (str.contains b c))
(assert (not (str.contains a c)))
(check-sat)
(pop)
(echo "removed")
(push)
(assert (str.contains a b))
(assert (str.contains a c))
(assert (not (str.contains b c)))
(pop)
(push)
(assert (str.contains a b))
(assert (str.contains b c))
(assert (str.contains c a))
(assert (not (= a c)))
(check-sat)
(pop)
(echo "removed")
(push)
(assert (not (str.contains a b)))
(assert (not (str.contains b c)))
(assert (str.contains a c))
(pop)
(echo "removed")
(push)
(assert (not (str.contains a GEN31)))
(assert (not (str.contains a GEN32)))
(assert (str.contains a GEN33))
(pop)
(echo "removed")
(push)
(assert (not (str.contains a GEN34)))
(assert (not (str.contains a GEN35)))
(assert (str.contains a GEN36))
(assert (>= (str.len a) GEN37))
(pop)
(push)
(assert (str.contains GEN38 a))
(assert (str.contains GEN39 a))
(check-sat)
(pop)
(push)
(assert (str.contains GEN40 a))
(assert (str.contains GEN41 a))
(assert (>= (str.len a) GEN42))
(check-sat)
(pop)
(push)
(assert (str.contains GEN43 a))
(assert (str.contains GEN44 a))
(assert (>= (str.len a) GEN45))
(check-sat)
(pop)
(push)
(assert (str.contains GEN46 a))
(assert (str.contains GEN47 a))
(assert (>= (str.len a) GEN48))
(check-sat)
(pop)
(push)
(assert (str.contains GEN49 a))
(assert (str.contains GEN50 a))
(assert (not (= a GEN51)))
(check-sat)
(pop)
(simplify (= 0  (str.indexof "abc" "a")))
(simplify (= 1  (str.indexof "abc" "b")))
(simplify (= 2  (str.indexof "abc" "c")))
(simplify (= -1 (str.indexof "abc" "d")))
(simplify (= 2  (str.indexof "abc" "c" 1)))
(simplify (= 1  (str.indexof "abc" "b" 1)))
(simplify (= -1 (str.indexof "abc" "b" 2)))
(push)
(assert (= (str.len a) (+ GEN52 (str.indexof a GEN53))))
(check-sat)
(pop)
(push)
(assert (= (str.len a) (+ GEN54 (str.indexof a GEN55))))
(assert (= (str.len a) GEN56))
(check-sat)
(pop)
(push)
(assert (= (str.len a) (+ 3 (str.indexof a "abc"))))
(assert (not (= -1 (str.indexof a "abc"))))
(assert (= (str.len a) 2))
(check-sat)
(pop)
(push)
(assert (= (str.len a) (+ 3 (str.indexof a "abc"))))
(assert (= (str.len a) 3))
(check-sat)
(get-model)
(pop)
(push)
(assert (= (str.len a) (+ 3 (str.indexof a "abc"))))
(assert (= (str.len a) 3))
(assert (not (= a "abc")))
(check-sat)
(pop)
(push)
(assert (= (str.len a) (+ 3 (str.indexof a "abc"))))
(assert (not (= -1 (str.indexof a "abc"))))
(assert (not (= a "abc")))
(check-sat)
(pop)
(push)
(assert (not (= -1 (str.indexof a "abc"))))
(assert (not (str.prefixof "abc" a)))
(check-sat)
(pop)
(push)
(assert (= (str.len (str.++ a a)) (+ 3 (str.indexof a "abc"))))
(check-sat)
(pop)
(push)
(assert (str.suffixof a b))
(assert (str.suffixof b c))
(assert (not (str.suffixof a c)))
(check-sat)
(pop)
(push)
(assert (str.prefixof a b))
(assert (str.prefixof b c))
(assert (not (str.prefixof a c)))
(check-sat)
(pop)
(push)
(assert (str.prefixof a b))
(assert (str.prefixof a c))
(assert (not (str.prefixof b c)))
(assert (not (str.prefixof c b)))
(check-sat)
(pop)
(push)
(assert (= a "abcde"))
(assert (<= (str.len a) 5))
(check-sat)
(pop)
(push)
(assert (= a "abcde"))
(assert (<= (str.len a) 4))
(check-sat)
(pop)
(push)
(assert (= a "abcde"))
(assert (<= (str.len a) 5))
(check-sat)
(pop)
(push)
(assert (= (str.++ a b) "abcde"))
(assert (<= (str.len a) 3))
(assert (<= (str.len b) 2))
(check-sat)
(get-model)
(pop)
(push)
(assert (= (str.++ a b) "abcde"))
(assert (<= (str.len a) 2))
(assert (<= (str.len b) 2))
(check-sat)
(pop)
(push)
(assert (= (str.++ a b) "abcde"))
(assert (<= (str.len a) 3))
(assert (<= (str.len b) 1))
(check-sat)
(pop)
(push)
(assert (= (str.++ a b) "abcde"))
(assert (= (str.len a) 3))
(check-sat)
(get-model)
(pop)
(simplify (str.replace "ab" "a" "A"))
(push)
(assert (= (str.replace "ab" "a" "A") "Ab"))
(check-sat)
(pop)
(push)
(assert (= (str.replace "ab" "a" "A") "bb"))
(check-sat)
(pop)
(push)
(assert (or (= c "a") (= c "b")))
(assert (= (str.replace "ab" c "A") "Ab"))
(check-sat)
(pop)
(push)
(assert (or (= c "c") (= c "b")))
(assert (= (str.replace "ab" c "A") "Ab"))
(check-sat)
(pop)
(exit)
(push)
(assert (= "ab" (str.replace a "yyy" "ab")))
(check-sat)
(pop)
(push)
(assert (= "ab" (str.replace a "yyy" "abb")))
(check-sat)
(get-model)
(pop)
(push)
(assert (str.suffixof a b))
(assert (str.suffixof a c))
(assert (not (str.suffixof b c)))
(assert (not (str.suffixof c b)))
(check-sat)
(pop)
(push)
(assert (= "ab" (str.replace a "ab" "")))
(check-sat)
(pop)
(push)
(assert (= (str.len a) (+ (str.len b) (str.indexof a b))))
(assert (not (= -1 (str.indexof a b))))
(check-sat)
(pop)
(push)
(assert (= (str.len a) (+ 3 (str.indexof a "abc"))))
(assert (not (= -1 (str.indexof a "abc"))))
(assert (not (str.suffixof a "abc")))
(pop)
(push)
(assert (not (= -1 (str.indexof a "abc"))))
(assert (not (str.suffixof "abc" a)))
(assert (not (str.prefixof "abc" a)))
(pop)
(push)
(assert (= (str.len a) (+ (str.len b) (str.indexof a b))))
(assert (not (= -1 (str.indexof a b))))
(assert (not (str.suffixof b a)))
(pop)