(set-logic ALL)
(declare-const GEN1 Int)
(declare-const GEN2 Int)
(declare-const BAV3 Bool)
(get-model)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-datatypes ((Lst 0)) (((cons (head Int) (tail Lst)) (nil))))
(define-fun-rec sum ((l Lst)) Int (ite ((_ is nil) l) 0 (+ (head l) (sum (tail l)))))
(declare-fun input () Int)
(declare-fun p () Bool)
(declare-fun acc () Lst)
(assert (and (= acc (ite (>= input GEN1) (cons input nil) nil)) (= p (>= (sum acc) GEN2))))
(push 1)
(assert (not p))
(assert (= BAV3 (and (= acc (ite (>= input GEN1) (cons input nil) nil)) (= p (>= (sum acc) GEN2)))))
(assert (= BAV4 (= acc (ite (>= input GEN1) (cons input nil) nil))))
(assert (= BAV5 (>= input GEN1)))
(assert (= BAV6 (= p (>= (sum acc) GEN2))))
(assert (= BAV7 (>= (sum acc) GEN2)))
(check-sat)
(get-model)
(pop 1)
(push 1)
(assert (not p))
(check-sat)
(pop 1)