(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const BAV23 Bool)
(declare-const BAV24 Bool)
(declare-const BAV25 Bool)
(declare-const BAV26 Bool)
(declare-const BAV27 Bool)
(declare-const BAV28 Bool)
(declare-const BAV29 Bool)
(declare-const BAV30 Bool)
(declare-const BAV31 Bool)
(declare-const BAV32 Bool)
(declare-const BAV33 Bool)
(declare-const BAV34 Bool)
(declare-const BAV35 Bool)
(declare-const BAV36 Bool)
(declare-const BAV37 Bool)
(declare-const BAV38 Bool)
(declare-const BAV39 Bool)
(declare-const BAV40 Bool)
(declare-const BAV41 Bool)
(declare-const BAV42 Bool)
(declare-const BAV43 Bool)
(declare-const BAV44 Bool)
(declare-const BAV45 Bool)
(declare-const BAV46 Bool)
(declare-const BAV47 Bool)
(declare-const BAV48 Bool)
(declare-const BAV49 Bool)
(declare-const BAV50 Bool)
(declare-const BAV51 Bool)
(declare-const BAV52 Bool)
(declare-const BAV53 Bool)
(declare-const BAV54 Bool)
(declare-const BAV55 Bool)
(declare-const BAV56 Bool)
(declare-const BAV57 Bool)
(declare-const BAV58 Bool)
(declare-const BAV59 Bool)
(declare-const BAV60 Bool)
(declare-const BAV61 Bool)
(declare-const BAV62 Bool)
(declare-const BAV63 Bool)
(declare-const BAV64 Bool)
(declare-const BAV65 Bool)
(declare-const BAV66 Bool)
(declare-const BAV67 Bool)
(declare-const BAV68 Bool)
(declare-const BAV69 Bool)
(declare-const BAV70 Bool)
(declare-const BAV71 Bool)
(declare-const BAV72 Bool)
(declare-const BAV73 Bool)
(declare-const BAV74 Bool)
(declare-const BAV75 Bool)
(declare-const BAV76 Bool)
(declare-const BAV77 Bool)
(declare-const BAV78 Bool)
(declare-const BAV79 Bool)
(declare-const BAV80 Bool)
(declare-const BAV81 Bool)
(declare-const BAV82 Bool)
(declare-const BAV83 Bool)
(declare-const BAV84 Bool)
(declare-const BAV85 Bool)
(declare-const BAV86 Bool)
(declare-const BAV87 Bool)
(declare-const BAV88 Bool)
(declare-const BAV89 Bool)
(declare-const BAV90 Bool)
(declare-const BAV91 Bool)
(declare-const BAV92 Bool)
(declare-const BAV93 Bool)
(declare-const BAV94 Bool)
(declare-const BAV95 Bool)
(declare-const BAV96 Bool)
(declare-const BAV97 Bool)
(declare-const BAV98 Bool)
(declare-const BAV99 Bool)
(declare-const BAV100 Bool)
(declare-const BAV101 Bool)
(declare-const BAV102 Bool)
(declare-const BAV103 Bool)
(declare-const BAV104 Bool)
(declare-const BAV105 Bool)
(declare-const BAV106 Bool)
(declare-const BAV107 Bool)
(declare-const BAV108 Bool)
(declare-const BAV109 Bool)
(declare-const BAV110 Bool)
(declare-const BAV111 Bool)
(declare-const BAV112 Bool)
(declare-const BAV113 Bool)
(declare-sort Node 0)
(declare-sort GrassPat 0)
(declare-sort GrassArray 1)
(declare-sort ArrayCell 1)
(declare-sort Loc 1)
(declare-sort Set 1)
(declare-sort Map 2)
(declare-sort GrassByte 0)
(declare-fun grass_null$0 () (Loc Node))
(declare-fun grass_read$0 ((Map (Loc Node) (Loc Node)) (Loc Node))
             (Loc Node))
(declare-fun grass_emptyset$0 () (Set (Loc Node)))
(declare-fun grass_singleton$0 ((Loc Node)) (Set (Loc Node)))
(declare-fun grass_union$0 ((Set (Loc Node)) (Set (Loc Node)))
             (Set (Loc Node)))
(declare-fun grass_intersection$0 ((Set (Loc Node)) (Set (Loc Node)))
             (Set (Loc Node)))
(declare-fun grass_setminus$0 ((Set (Loc Node)) (Set (Loc Node)))
             (Set (Loc Node)))
(declare-fun grass_Btwn$0 ((Map (Loc Node) (Loc Node)) (Loc Node) (Loc Node)
             (Loc Node)) Bool)
(declare-fun grass_member$0 ((Loc Node) (Set (Loc Node))) Bool)
(declare-fun grass_known$0 ((Map (Loc Node) (Loc Node))) GrassPat)
(declare-fun grass_known$1 (Bool) GrassPat)
(declare-fun Alloc_Node$0 () (Set (Loc Node)))
(declare-fun FP_Caller_Node$0 () (Set (Loc Node)))
(declare-fun FP_Caller_Node_1$0 () (Set (Loc Node)))
(declare-fun FP_Caller_final_Node_2$0 () (Set (Loc Node)))
(declare-fun FP_Node$0 () (Set (Loc Node)))
(declare-fun Label$0 () Bool)
(declare-fun Label_1$0 () Bool)
(declare-fun Label_2$0 () Bool)
(declare-fun Label_3$0 () Bool)
(declare-fun elt$0 () (Loc Node))
(declare-fun lseg$0 ((Map (Loc Node) (Loc Node)) (Loc Node) (Loc Node)
             (Set (Loc Node))) Bool)
(declare-fun lst$0 () (Loc Node))
(declare-fun next$0 () (Map (Loc Node) (Loc Node)))
(declare-fun res_2$0 () (Loc Node))
(declare-fun set_compr$0 ((Map (Loc Node) (Loc Node)) (Loc Node) (Loc Node))
             (Set (Loc Node)))
(declare-fun sk_?X$0 () (Set (Loc Node)))
(declare-fun sk_?X_1$0 () (Set (Loc Node)))
(declare-fun sk_?X_2$0 () (Set (Loc Node)))
(declare-fun sk_?X_3$0 () (Set (Loc Node)))
(declare-fun sk_?X_4$0 () (Set (Loc Node)))
(declare-fun sk_?e$0 () (Loc Node))
(assert (not (grass_member$0 grass_null$0 Alloc_Node$0)))
(assert (and (or (or (and (and (grass_member$0 sk_?e$0 sk_?X_4$0) Label_1$0) (and (not (grass_member$0 sk_?e$0 (set_compr$0 next$0 res_2$0 grass_null$0))) Label_1$0)) (and (and (grass_member$0 sk_?e$0 (set_compr$0 next$0 res_2$0 grass_null$0)) Label_1$0) (and (not (grass_member$0 sk_?e$0 sk_?X_4$0)) Label_1$0))) (and (not (grass_Btwn$0 next$0 res_2$0 grass_null$0 grass_null$0)) Label$0)) Label_2$0))
(assert (forall ((x (Loc Node))) (not (grass_member$0 x grass_emptyset$0))))
(assert (forall ((y (Loc Node))(x (Loc Node))) (or (and (= x y) (grass_member$0 x (grass_singleton$0 y))) (and (not (= x y)) (not (grass_member$0 x (grass_singleton$0 y)))))))
(assert (forall ((x (Loc Node))) (or (and (grass_member$0 x FP_Caller_Node$0) (grass_member$0 x (grass_setminus$0 FP_Caller_Node$0 FP_Node$0)) (not (grass_member$0 x FP_Node$0))) (and (or (grass_member$0 x FP_Node$0) (not (grass_member$0 x FP_Caller_Node$0))) (not (grass_member$0 x (grass_setminus$0 FP_Caller_Node$0 FP_Node$0)))))))
(assert (forall ((x (Loc Node))) (or (and (grass_member$0 x Alloc_Node$0) (grass_member$0 x (grass_setminus$0 Alloc_Node$0 Alloc_Node$0)) (not (grass_member$0 x Alloc_Node$0))) (and (or (grass_member$0 x Alloc_Node$0) (not (grass_member$0 x Alloc_Node$0))) (not (grass_member$0 x (grass_setminus$0 Alloc_Node$0 Alloc_Node$0)))))))
(assert (forall ((x (Loc Node))) (or (and (grass_member$0 x Alloc_Node$0) (grass_member$0 x FP_Node$0) (grass_member$0 x (grass_intersection$0 Alloc_Node$0 FP_Node$0))) (and (or (not (grass_member$0 x Alloc_Node$0)) (not (grass_member$0 x FP_Node$0))) (not (grass_member$0 x (grass_intersection$0 Alloc_Node$0 FP_Node$0)))))))
(assert (forall ((x (Loc Node))) (or (and (grass_member$0 x sk_?X$0) (grass_member$0 x sk_?X_1$0) (grass_member$0 x (grass_intersection$0 sk_?X$0 sk_?X_1$0))) (and (or (not (grass_member$0 x sk_?X$0)) (not (grass_member$0 x sk_?X_1$0))) (not (grass_member$0 x (grass_intersection$0 sk_?X$0 sk_?X_1$0)))))))
(assert (forall ((x (Loc Node))) (or (and (grass_member$0 x (grass_union$0 (grass_intersection$0 Alloc_Node$0 FP_Node$0) (grass_setminus$0 Alloc_Node$0 Alloc_Node$0))) (or (grass_member$0 x (grass_intersection$0 Alloc_Node$0 FP_Node$0)) (grass_member$0 x (grass_setminus$0 Alloc_Node$0 Alloc_Node$0)))) (and (not (grass_member$0 x (grass_intersection$0 Alloc_Node$0 FP_Node$0))) (not (grass_member$0 x (grass_setminus$0 Alloc_Node$0 Alloc_Node$0))) (not (grass_member$0 x (grass_union$0 (grass_intersection$0 Alloc_Node$0 FP_Node$0) (grass_setminus$0 Alloc_Node$0 Alloc_Node$0))))))))
(assert (forall ((x (Loc Node))) (or (and (grass_member$0 x (grass_union$0 sk_?X$0 sk_?X_1$0)) (or (grass_member$0 x sk_?X$0) (grass_member$0 x sk_?X_1$0))) (and (not (grass_member$0 x sk_?X$0)) (not (grass_member$0 x sk_?X_1$0)) (not (grass_member$0 x (grass_union$0 sk_?X$0 sk_?X_1$0)))))))
(assert (forall ((x (Loc Node))) (or (and (grass_member$0 x (grass_union$0 FP_Caller_Node_1$0 FP_Node$0)) (or (grass_member$0 x FP_Caller_Node_1$0) (grass_member$0 x FP_Node$0))) (and (not (grass_member$0 x FP_Caller_Node_1$0)) (not (grass_member$0 x FP_Node$0)) (not (grass_member$0 x (grass_union$0 FP_Caller_Node_1$0 FP_Node$0)))))))
(assert (forall ((x (Loc Node))) (or (and (grass_member$0 x (grass_union$0 FP_Node$0 FP_Caller_Node$0)) (or (grass_member$0 x FP_Node$0) (grass_member$0 x FP_Caller_Node$0))) (and (not (grass_member$0 x FP_Node$0)) (not (grass_member$0 x FP_Caller_Node$0)) (not (grass_member$0 x (grass_union$0 FP_Node$0 FP_Caller_Node$0)))))))
(assert (forall ((x (Loc Node))) (or (and (grass_member$0 x (grass_union$0 FP_Caller_Node$0 Alloc_Node$0)) (or (grass_member$0 x FP_Caller_Node$0) (grass_member$0 x Alloc_Node$0))) (and (not (grass_member$0 x FP_Caller_Node$0)) (not (grass_member$0 x Alloc_Node$0)) (not (grass_member$0 x (grass_union$0 FP_Caller_Node$0 Alloc_Node$0)))))))
(assert (or (grass_Btwn$0 next$0 lst$0 lst$0 lst$0) (not (lseg$0 next$0 lst$0 lst$0 sk_?X$0))))
(assert (forall ((next (Map (Loc Node) (Loc Node)))(x (Loc Node))(y (Loc Node))(z (Loc Node))) (or (and (grass_Btwn$0 next x z y) (grass_member$0 z (set_compr$0 next x y)) (not (= z y))) (and (or (= z y) (not (grass_Btwn$0 next x z y))) (not (grass_member$0 z (set_compr$0 next x y)))))))
(assert (forall ((?u (Loc Node))(?x (Loc Node))(?y (Loc Node))(?z (Loc Node))) (or (not (grass_Btwn$0 next$0 ?x ?y ?z)) (not (grass_Btwn$0 next$0 ?x ?u ?y)) (and (grass_Btwn$0 next$0 ?x ?u ?z) (grass_Btwn$0 next$0 ?u ?y ?z)))))
(assert (forall ((?u (Loc Node))(?x (Loc Node))(?y (Loc Node))(?z (Loc Node))) (or (not (grass_Btwn$0 next$0 ?x ?y ?z)) (not (grass_Btwn$0 next$0 ?y ?u ?z)) (and (grass_Btwn$0 next$0 ?x ?y ?u) (grass_Btwn$0 next$0 ?x ?u ?z)))))
(assert (forall ((?x (Loc Node))(?y (Loc Node))(?z (Loc Node))) (or (not (grass_Btwn$0 next$0 ?x ?y ?y)) (not (grass_Btwn$0 next$0 ?y ?z ?z)) (grass_Btwn$0 next$0 ?x ?z ?z))))
(assert (forall ((?x (Loc Node))(?y (Loc Node))(?z (Loc Node))) (or (not (grass_Btwn$0 next$0 ?x ?y ?z)) (and (grass_Btwn$0 next$0 ?x ?y ?y) (grass_Btwn$0 next$0 ?y ?z ?z)))))
(assert (forall ((?x (Loc Node))(?y (Loc Node))(?z (Loc Node))) (or (not (grass_Btwn$0 next$0 ?x ?y ?y)) (not (grass_Btwn$0 next$0 ?x ?z ?z)) (grass_Btwn$0 next$0 ?x ?y ?z) (grass_Btwn$0 next$0 ?x ?z ?y))))
(assert (forall ((?x (Loc Node))(?y (Loc Node))) (or (not (grass_Btwn$0 next$0 ?x ?y ?x)) (= ?x ?y))))
(assert (forall ((?y (Loc Node))) (or (not (grass_Btwn$0 next$0 res_2$0 ?y ?y)) (= res_2$0 ?y) (grass_Btwn$0 next$0 res_2$0 (grass_read$0 next$0 res_2$0) ?y))))
(assert (forall ((?y (Loc Node))) (or (not (grass_Btwn$0 next$0 lst$0 ?y ?y)) (= lst$0 ?y) (grass_Btwn$0 next$0 lst$0 (grass_read$0 next$0 lst$0) ?y))))
(assert (forall ((?y (Loc Node))) (or (not (= (grass_read$0 next$0 res_2$0) res_2$0)) (not (grass_Btwn$0 next$0 res_2$0 ?y ?y)) (= res_2$0 ?y))))
(assert (forall ((?y (Loc Node))) (or (not (= (grass_read$0 next$0 lst$0) lst$0)) (not (grass_Btwn$0 next$0 lst$0 ?y ?y)) (= lst$0 ?y))))
(assert (grass_Btwn$0 next$0 res_2$0 (grass_read$0 next$0 res_2$0) (grass_read$0 next$0 res_2$0)))
(assert (grass_Btwn$0 next$0 lst$0 (grass_read$0 next$0 lst$0) (grass_read$0 next$0 lst$0)))
(assert (forall ((?x (Loc Node))) (grass_Btwn$0 next$0 ?x ?x ?x)))
(assert (or (= sk_?X$0 (set_compr$0 next$0 lst$0 lst$0)) (not (lseg$0 next$0 lst$0 lst$0 sk_?X$0))))
(assert (= (grass_read$0 next$0 grass_null$0) grass_null$0))
(assert (= FP_Caller_Node_1$0 (grass_setminus$0 FP_Caller_Node$0 FP_Node$0)))
(assert (and (= lst$0 grass_null$0) Label_3$0))
(assert (= Alloc_Node$0 (grass_union$0 FP_Caller_Node$0 Alloc_Node$0)))
(assert (= sk_?X_4$0 (grass_union$0 (grass_intersection$0 Alloc_Node$0 FP_Node$0) (grass_setminus$0 Alloc_Node$0 Alloc_Node$0))))
(assert (= sk_?X_3$0 (grass_union$0 sk_?X$0 sk_?X_2$0)))
(assert (= sk_?X_2$0 sk_?X_1$0))
(assert (= sk_?X_1$0 (grass_singleton$0 elt$0)))
(assert (= (grass_read$0 next$0 elt$0) grass_null$0))
(assert (= FP_Node$0 sk_?X_3$0))
(assert (= FP_Caller_Node$0 (grass_union$0 FP_Node$0 FP_Caller_Node$0)))
(assert (= grass_emptyset$0 (grass_intersection$0 sk_?X$0 sk_?X_2$0)))
(assert (= grass_emptyset$0 grass_emptyset$0))
(assert (lseg$0 next$0 lst$0 grass_null$0 sk_?X$0))
(assert (= FP_Caller_final_Node_2$0 (grass_union$0 FP_Caller_Node_1$0 FP_Node$0)))
(assert (= res_2$0 elt$0))
(assert (= (grass_union$0 FP_Caller_Node$0 Alloc_Node$0) Alloc_Node$0))
(assert (= (grass_read$0 next$0 grass_null$0) grass_null$0))
(assert (= (grass_read$0 next$0 grass_null$0) lst$0))
(assert (= (grass_read$0 next$0 grass_null$0) (grass_read$0 next$0 elt$0)))
(assert (= (grass_known$1 (lseg$0 next$0 lst$0 grass_null$0 sk_?X$0)) (grass_known$1 (lseg$0 next$0 lst$0 lst$0 sk_?X$0))))
(assert (= (grass_intersection$0 sk_?X$0 sk_?X_2$0) grass_emptyset$0))
(assert (= (grass_union$0 (grass_intersection$0 Alloc_Node$0 FP_Node$0) (grass_setminus$0 Alloc_Node$0 Alloc_Node$0)) sk_?X_4$0))
(assert (= res_2$0 elt$0))
(assert (= (grass_union$0 FP_Node$0 FP_Caller_Node$0) FP_Caller_Node$0))
(assert (= sk_?X_1$0 (grass_singleton$0 elt$0)))
(assert (= sk_?X_1$0 sk_?X_2$0))
(assert (= FP_Caller_final_Node_2$0 (grass_union$0 FP_Caller_Node_1$0 FP_Node$0)))
(assert (= FP_Node$0 sk_?X_3$0))
(assert (= FP_Node$0 (grass_union$0 sk_?X$0 sk_?X_2$0)))
(assert (= FP_Caller_Node_1$0 (grass_setminus$0 FP_Caller_Node$0 FP_Node$0)))
(assert (= sk_?X$0 (set_compr$0 next$0 lst$0 lst$0)))
(assert (= sk_?X$0 (set_compr$0 next$0 lst$0 grass_null$0)))
(assert (= BAV1 (and (or (or (and (and (grass_member$0 sk_?e$0 sk_?X_4$0) Label_1$0) (and (not (grass_member$0 sk_?e$0 (set_compr$0 next$0 res_2$0 grass_null$0))) Label_1$0)) (and (and (grass_member$0 sk_?e$0 (set_compr$0 next$0 res_2$0 grass_null$0)) Label_1$0) (and (not (grass_member$0 sk_?e$0 sk_?X_4$0)) Label_1$0))) (and (not (grass_Btwn$0 next$0 res_2$0 grass_null$0 grass_null$0)) Label$0)) Label_2$0)))
(assert (= BAV2 (or (or (and (and (grass_member$0 sk_?e$0 sk_?X_4$0) Label_1$0) (and (not (grass_member$0 sk_?e$0 (set_compr$0 next$0 res_2$0 grass_null$0))) Label_1$0)) (and (and (grass_member$0 sk_?e$0 (set_compr$0 next$0 res_2$0 grass_null$0)) Label_1$0) (and (not (grass_member$0 sk_?e$0 sk_?X_4$0)) Label_1$0))) (and (not (grass_Btwn$0 next$0 res_2$0 grass_null$0 grass_null$0)) Label$0))))
(assert (= BAV3 (or (and (and (grass_member$0 sk_?e$0 sk_?X_4$0) Label_1$0) (and (not (grass_member$0 sk_?e$0 (set_compr$0 next$0 res_2$0 grass_null$0))) Label_1$0)) (and (and (grass_member$0 sk_?e$0 (set_compr$0 next$0 res_2$0 grass_null$0)) Label_1$0) (and (not (grass_member$0 sk_?e$0 sk_?X_4$0)) Label_1$0)))))
(assert (= BAV4 (and (and (grass_member$0 sk_?e$0 sk_?X_4$0) Label_1$0) (and (not (grass_member$0 sk_?e$0 (set_compr$0 next$0 res_2$0 grass_null$0))) Label_1$0))))
(assert (= BAV5 (and (grass_member$0 sk_?e$0 sk_?X_4$0) Label_1$0)))
(assert (= BAV6 (and (not (grass_member$0 sk_?e$0 (set_compr$0 next$0 res_2$0 grass_null$0))) Label_1$0)))
(assert (= BAV7 (and (and (grass_member$0 sk_?e$0 (set_compr$0 next$0 res_2$0 grass_null$0)) Label_1$0) (and (not (grass_member$0 sk_?e$0 sk_?X_4$0)) Label_1$0))))
(assert (= BAV8 (and (grass_member$0 sk_?e$0 (set_compr$0 next$0 res_2$0 grass_null$0)) Label_1$0)))
(assert (= BAV9 (and (not (grass_member$0 sk_?e$0 sk_?X_4$0)) Label_1$0)))
(assert (= BAV10 (and (not (grass_Btwn$0 next$0 res_2$0 grass_null$0 grass_null$0)) Label$0)))
(assert (= BAV11 (forall ((y (Loc Node))(x (Loc Node))) (or (and (= x y) (grass_member$0 x (grass_singleton$0 y))) (and (not (= x y)) (not (grass_member$0 x (grass_singleton$0 y))))))))
(assert (= BAV12 (forall ((y (Loc Node))(x (Loc Node))) (and (= x y) (grass_member$0 x (grass_singleton$0 y))))))
(assert (= BAV13 (forall ((y (Loc Node))(x (Loc Node))) (= x y))))
(assert (= BAV14 (forall ((y (Loc Node))(x (Loc Node))) (and (not (= x y)) (not (grass_member$0 x (grass_singleton$0 y)))))))
(assert (= BAV15 (forall ((y (Loc Node))(x (Loc Node))) (= x y))))
(assert (= BAV16 (forall ((x (Loc Node))) (or (and (grass_member$0 x FP_Caller_Node$0) (grass_member$0 x (grass_setminus$0 FP_Caller_Node$0 FP_Node$0)) (not (grass_member$0 x FP_Node$0))) (and (or (grass_member$0 x FP_Node$0) (not (grass_member$0 x FP_Caller_Node$0))) (not (grass_member$0 x (grass_setminus$0 FP_Caller_Node$0 FP_Node$0))))))))
(assert (= BAV17 (forall ((x (Loc Node))) (and (grass_member$0 x FP_Caller_Node$0) (grass_member$0 x (grass_setminus$0 FP_Caller_Node$0 FP_Node$0)) (not (grass_member$0 x FP_Node$0))))))
(assert (= BAV18 (forall ((x (Loc Node))) (and (or (grass_member$0 x FP_Node$0) (not (grass_member$0 x FP_Caller_Node$0))) (not (grass_member$0 x (grass_setminus$0 FP_Caller_Node$0 FP_Node$0)))))))
(assert (= BAV19 (forall ((x (Loc Node))) (or (grass_member$0 x FP_Node$0) (not (grass_member$0 x FP_Caller_Node$0))))))
(assert (= BAV20 (forall ((x (Loc Node))) (or (and (grass_member$0 x Alloc_Node$0) (grass_member$0 x (grass_setminus$0 Alloc_Node$0 Alloc_Node$0)) (not (grass_member$0 x Alloc_Node$0))) (and (or (grass_member$0 x Alloc_Node$0) (not (grass_member$0 x Alloc_Node$0))) (not (grass_member$0 x (grass_setminus$0 Alloc_Node$0 Alloc_Node$0))))))))
(assert (= BAV21 (forall ((x (Loc Node))) (and (grass_member$0 x Alloc_Node$0) (grass_member$0 x (grass_setminus$0 Alloc_Node$0 Alloc_Node$0)) (not (grass_member$0 x Alloc_Node$0))))))
(assert (= BAV22 (forall ((x (Loc Node))) (and (or (grass_member$0 x Alloc_Node$0) (not (grass_member$0 x Alloc_Node$0))) (not (grass_member$0 x (grass_setminus$0 Alloc_Node$0 Alloc_Node$0)))))))
(assert (= BAV23 (forall ((x (Loc Node))) (or (grass_member$0 x Alloc_Node$0) (not (grass_member$0 x Alloc_Node$0))))))
(assert (= BAV24 (forall ((x (Loc Node))) (or (and (grass_member$0 x Alloc_Node$0) (grass_member$0 x FP_Node$0) (grass_member$0 x (grass_intersection$0 Alloc_Node$0 FP_Node$0))) (and (or (not (grass_member$0 x Alloc_Node$0)) (not (grass_member$0 x FP_Node$0))) (not (grass_member$0 x (grass_intersection$0 Alloc_Node$0 FP_Node$0))))))))
(assert (= BAV25 (forall ((x (Loc Node))) (and (grass_member$0 x Alloc_Node$0) (grass_member$0 x FP_Node$0) (grass_member$0 x (grass_intersection$0 Alloc_Node$0 FP_Node$0))))))
(assert (= BAV26 (forall ((x (Loc Node))) (and (or (not (grass_member$0 x Alloc_Node$0)) (not (grass_member$0 x FP_Node$0))) (not (grass_member$0 x (grass_intersection$0 Alloc_Node$0 FP_Node$0)))))))
(assert (= BAV27 (forall ((x (Loc Node))) (or (not (grass_member$0 x Alloc_Node$0)) (not (grass_member$0 x FP_Node$0))))))
(assert (= BAV28 (forall ((x (Loc Node))) (or (and (grass_member$0 x sk_?X$0) (grass_member$0 x sk_?X_1$0) (grass_member$0 x (grass_intersection$0 sk_?X$0 sk_?X_1$0))) (and (or (not (grass_member$0 x sk_?X$0)) (not (grass_member$0 x sk_?X_1$0))) (not (grass_member$0 x (grass_intersection$0 sk_?X$0 sk_?X_1$0))))))))
(assert (= BAV29 (forall ((x (Loc Node))) (and (grass_member$0 x sk_?X$0) (grass_member$0 x sk_?X_1$0) (grass_member$0 x (grass_intersection$0 sk_?X$0 sk_?X_1$0))))))
(assert (= BAV30 (forall ((x (Loc Node))) (and (or (not (grass_member$0 x sk_?X$0)) (not (grass_member$0 x sk_?X_1$0))) (not (grass_member$0 x (grass_intersection$0 sk_?X$0 sk_?X_1$0)))))))
(assert (= BAV31 (forall ((x (Loc Node))) (or (not (grass_member$0 x sk_?X$0)) (not (grass_member$0 x sk_?X_1$0))))))
(assert (= BAV32 (forall ((x (Loc Node))) (or (and (grass_member$0 x (grass_union$0 (grass_intersection$0 Alloc_Node$0 FP_Node$0) (grass_setminus$0 Alloc_Node$0 Alloc_Node$0))) (or (grass_member$0 x (grass_intersection$0 Alloc_Node$0 FP_Node$0)) (grass_member$0 x (grass_setminus$0 Alloc_Node$0 Alloc_Node$0)))) (and (not (grass_member$0 x (grass_intersection$0 Alloc_Node$0 FP_Node$0))) (not (grass_member$0 x (grass_setminus$0 Alloc_Node$0 Alloc_Node$0))) (not (grass_member$0 x (grass_union$0 (grass_intersection$0 Alloc_Node$0 FP_Node$0) (grass_setminus$0 Alloc_Node$0 Alloc_Node$0)))))))))
(assert (= BAV33 (forall ((x (Loc Node))) (and (grass_member$0 x (grass_union$0 (grass_intersection$0 Alloc_Node$0 FP_Node$0) (grass_setminus$0 Alloc_Node$0 Alloc_Node$0))) (or (grass_member$0 x (grass_intersection$0 Alloc_Node$0 FP_Node$0)) (grass_member$0 x (grass_setminus$0 Alloc_Node$0 Alloc_Node$0)))))))
(assert (= BAV34 (forall ((x (Loc Node))) (or (grass_member$0 x (grass_intersection$0 Alloc_Node$0 FP_Node$0)) (grass_member$0 x (grass_setminus$0 Alloc_Node$0 Alloc_Node$0))))))
(assert (= BAV35 (forall ((x (Loc Node))) (and (not (grass_member$0 x (grass_intersection$0 Alloc_Node$0 FP_Node$0))) (not (grass_member$0 x (grass_setminus$0 Alloc_Node$0 Alloc_Node$0))) (not (grass_member$0 x (grass_union$0 (grass_intersection$0 Alloc_Node$0 FP_Node$0) (grass_setminus$0 Alloc_Node$0 Alloc_Node$0))))))))
(assert (= BAV36 (forall ((x (Loc Node))) (or (and (grass_member$0 x (grass_union$0 sk_?X$0 sk_?X_1$0)) (or (grass_member$0 x sk_?X$0) (grass_member$0 x sk_?X_1$0))) (and (not (grass_member$0 x sk_?X$0)) (not (grass_member$0 x sk_?X_1$0)) (not (grass_member$0 x (grass_union$0 sk_?X$0 sk_?X_1$0))))))))
(assert (= BAV37 (forall ((x (Loc Node))) (and (grass_member$0 x (grass_union$0 sk_?X$0 sk_?X_1$0)) (or (grass_member$0 x sk_?X$0) (grass_member$0 x sk_?X_1$0))))))
(assert (= BAV38 (forall ((x (Loc Node))) (or (grass_member$0 x sk_?X$0) (grass_member$0 x sk_?X_1$0)))))
(assert (= BAV39 (forall ((x (Loc Node))) (and (not (grass_member$0 x sk_?X$0)) (not (grass_member$0 x sk_?X_1$0)) (not (grass_member$0 x (grass_union$0 sk_?X$0 sk_?X_1$0)))))))
(assert (= BAV40 (forall ((x (Loc Node))) (or (and (grass_member$0 x (grass_union$0 FP_Caller_Node_1$0 FP_Node$0)) (or (grass_member$0 x FP_Caller_Node_1$0) (grass_member$0 x FP_Node$0))) (and (not (grass_member$0 x FP_Caller_Node_1$0)) (not (grass_member$0 x FP_Node$0)) (not (grass_member$0 x (grass_union$0 FP_Caller_Node_1$0 FP_Node$0))))))))
(assert (= BAV41 (forall ((x (Loc Node))) (and (grass_member$0 x (grass_union$0 FP_Caller_Node_1$0 FP_Node$0)) (or (grass_member$0 x FP_Caller_Node_1$0) (grass_member$0 x FP_Node$0))))))
(assert (= BAV42 (forall ((x (Loc Node))) (or (grass_member$0 x FP_Caller_Node_1$0) (grass_member$0 x FP_Node$0)))))
(assert (= BAV43 (forall ((x (Loc Node))) (and (not (grass_member$0 x FP_Caller_Node_1$0)) (not (grass_member$0 x FP_Node$0)) (not (grass_member$0 x (grass_union$0 FP_Caller_Node_1$0 FP_Node$0)))))))
(assert (= BAV44 (forall ((x (Loc Node))) (or (and (grass_member$0 x (grass_union$0 FP_Node$0 FP_Caller_Node$0)) (or (grass_member$0 x FP_Node$0) (grass_member$0 x FP_Caller_Node$0))) (and (not (grass_member$0 x FP_Node$0)) (not (grass_member$0 x FP_Caller_Node$0)) (not (grass_member$0 x (grass_union$0 FP_Node$0 FP_Caller_Node$0))))))))
(assert (= BAV45 (forall ((x (Loc Node))) (and (grass_member$0 x (grass_union$0 FP_Node$0 FP_Caller_Node$0)) (or (grass_member$0 x FP_Node$0) (grass_member$0 x FP_Caller_Node$0))))))
(assert (= BAV46 (forall ((x (Loc Node))) (or (grass_member$0 x FP_Node$0) (grass_member$0 x FP_Caller_Node$0)))))
(assert (= BAV47 (forall ((x (Loc Node))) (and (not (grass_member$0 x FP_Node$0)) (not (grass_member$0 x FP_Caller_Node$0)) (not (grass_member$0 x (grass_union$0 FP_Node$0 FP_Caller_Node$0)))))))
(assert (= BAV48 (forall ((x (Loc Node))) (or (and (grass_member$0 x (grass_union$0 FP_Caller_Node$0 Alloc_Node$0)) (or (grass_member$0 x FP_Caller_Node$0) (grass_member$0 x Alloc_Node$0))) (and (not (grass_member$0 x FP_Caller_Node$0)) (not (grass_member$0 x Alloc_Node$0)) (not (grass_member$0 x (grass_union$0 FP_Caller_Node$0 Alloc_Node$0))))))))
(assert (= BAV49 (forall ((x (Loc Node))) (and (grass_member$0 x (grass_union$0 FP_Caller_Node$0 Alloc_Node$0)) (or (grass_member$0 x FP_Caller_Node$0) (grass_member$0 x Alloc_Node$0))))))
(assert (= BAV50 (forall ((x (Loc Node))) (or (grass_member$0 x FP_Caller_Node$0) (grass_member$0 x Alloc_Node$0)))))
(assert (= BAV51 (forall ((x (Loc Node))) (and (not (grass_member$0 x FP_Caller_Node$0)) (not (grass_member$0 x Alloc_Node$0)) (not (grass_member$0 x (grass_union$0 FP_Caller_Node$0 Alloc_Node$0)))))))
(assert (= BAV52 (or (grass_Btwn$0 next$0 lst$0 lst$0 lst$0) (not (lseg$0 next$0 lst$0 lst$0 sk_?X$0)))))
(assert (= BAV53 (forall ((next (Map (Loc Node) (Loc Node)))(x (Loc Node))(y (Loc Node))(z (Loc Node))) (or (and (grass_Btwn$0 next x z y) (grass_member$0 z (set_compr$0 next x y)) (not (= z y))) (and (or (= z y) (not (grass_Btwn$0 next x z y))) (not (grass_member$0 z (set_compr$0 next x y))))))))
(assert (= BAV54 (forall ((next (Map (Loc Node) (Loc Node)))(x (Loc Node))(y (Loc Node))(z (Loc Node))) (and (grass_Btwn$0 next x z y) (grass_member$0 z (set_compr$0 next x y)) (not (= z y))))))
(assert (= BAV55 (forall ((next (Map (Loc Node) (Loc Node)))(x (Loc Node))(y (Loc Node))(z (Loc Node))) (= z y))))
(assert (= BAV56 (forall ((next (Map (Loc Node) (Loc Node)))(x (Loc Node))(y (Loc Node))(z (Loc Node))) (and (or (= z y) (not (grass_Btwn$0 next x z y))) (not (grass_member$0 z (set_compr$0 next x y)))))))
(assert (= BAV57 (forall ((next (Map (Loc Node) (Loc Node)))(x (Loc Node))(y (Loc Node))(z (Loc Node))) (or (= z y) (not (grass_Btwn$0 next x z y))))))
(assert (= BAV58 (forall ((next (Map (Loc Node) (Loc Node)))(x (Loc Node))(y (Loc Node))(z (Loc Node))) (= z y))))
(assert (= BAV59 (forall ((?u (Loc Node))(?x (Loc Node))(?y (Loc Node))(?z (Loc Node))) (or (not (grass_Btwn$0 next$0 ?x ?y ?z)) (not (grass_Btwn$0 next$0 ?x ?u ?y)) (and (grass_Btwn$0 next$0 ?x ?u ?z) (grass_Btwn$0 next$0 ?u ?y ?z))))))
(assert (= BAV60 (forall ((?u (Loc Node))(?x (Loc Node))(?y (Loc Node))(?z (Loc Node))) (and (grass_Btwn$0 next$0 ?x ?u ?z) (grass_Btwn$0 next$0 ?u ?y ?z)))))
(assert (= BAV61 (forall ((?u (Loc Node))(?x (Loc Node))(?y (Loc Node))(?z (Loc Node))) (or (not (grass_Btwn$0 next$0 ?x ?y ?z)) (not (grass_Btwn$0 next$0 ?y ?u ?z)) (and (grass_Btwn$0 next$0 ?x ?y ?u) (grass_Btwn$0 next$0 ?x ?u ?z))))))
(assert (= BAV62 (forall ((?u (Loc Node))(?x (Loc Node))(?y (Loc Node))(?z (Loc Node))) (and (grass_Btwn$0 next$0 ?x ?y ?u) (grass_Btwn$0 next$0 ?x ?u ?z)))))
(assert (= BAV63 (forall ((?x (Loc Node))(?y (Loc Node))(?z (Loc Node))) (or (not (grass_Btwn$0 next$0 ?x ?y ?y)) (not (grass_Btwn$0 next$0 ?y ?z ?z)) (grass_Btwn$0 next$0 ?x ?z ?z)))))
(assert (= BAV64 (forall ((?x (Loc Node))(?y (Loc Node))(?z (Loc Node))) (or (not (grass_Btwn$0 next$0 ?x ?y ?z)) (and (grass_Btwn$0 next$0 ?x ?y ?y) (grass_Btwn$0 next$0 ?y ?z ?z))))))
(assert (= BAV65 (forall ((?x (Loc Node))(?y (Loc Node))(?z (Loc Node))) (and (grass_Btwn$0 next$0 ?x ?y ?y) (grass_Btwn$0 next$0 ?y ?z ?z)))))
(assert (= BAV66 (forall ((?x (Loc Node))(?y (Loc Node))(?z (Loc Node))) (or (not (grass_Btwn$0 next$0 ?x ?y ?y)) (not (grass_Btwn$0 next$0 ?x ?z ?z)) (grass_Btwn$0 next$0 ?x ?y ?z) (grass_Btwn$0 next$0 ?x ?z ?y)))))
(assert (= BAV67 (forall ((?x (Loc Node))(?y (Loc Node))) (or (not (grass_Btwn$0 next$0 ?x ?y ?x)) (= ?x ?y)))))
(assert (= BAV68 (forall ((?x (Loc Node))(?y (Loc Node))) (= ?x ?y))))
(assert (= BAV69 (forall ((?y (Loc Node))) (or (not (grass_Btwn$0 next$0 res_2$0 ?y ?y)) (= res_2$0 ?y) (grass_Btwn$0 next$0 res_2$0 (grass_read$0 next$0 res_2$0) ?y)))))
(assert (= BAV70 (forall ((?y (Loc Node))) (= res_2$0 ?y))))
(assert (= BAV71 (forall ((?y (Loc Node))) (or (not (grass_Btwn$0 next$0 lst$0 ?y ?y)) (= lst$0 ?y) (grass_Btwn$0 next$0 lst$0 (grass_read$0 next$0 lst$0) ?y)))))
(assert (= BAV72 (forall ((?y (Loc Node))) (= lst$0 ?y))))
(assert (= BAV73 (forall ((?y (Loc Node))) (or (not (= (grass_read$0 next$0 res_2$0) res_2$0)) (not (grass_Btwn$0 next$0 res_2$0 ?y ?y)) (= res_2$0 ?y)))))
(assert (= BAV74 (forall ((?y (Loc Node))) (= (grass_read$0 next$0 res_2$0) res_2$0))))
(assert (= BAV75 (forall ((?y (Loc Node))) (= res_2$0 ?y))))
(assert (= BAV76 (forall ((?y (Loc Node))) (or (not (= (grass_read$0 next$0 lst$0) lst$0)) (not (grass_Btwn$0 next$0 lst$0 ?y ?y)) (= lst$0 ?y)))))
(assert (= BAV77 (forall ((?y (Loc Node))) (= (grass_read$0 next$0 lst$0) lst$0))))
(assert (= BAV78 (forall ((?y (Loc Node))) (= lst$0 ?y))))
(assert (= BAV79 (or (= sk_?X$0 (set_compr$0 next$0 lst$0 lst$0)) (not (lseg$0 next$0 lst$0 lst$0 sk_?X$0)))))
(assert (= BAV80 (= sk_?X$0 (set_compr$0 next$0 lst$0 lst$0))))
(assert (= BAV81 (= (grass_read$0 next$0 grass_null$0) grass_null$0)))
(assert (= BAV82 (= FP_Caller_Node_1$0 (grass_setminus$0 FP_Caller_Node$0 FP_Node$0))))
(assert (= BAV83 (and (= lst$0 grass_null$0) Label_3$0)))
(assert (= BAV84 (= lst$0 grass_null$0)))
(assert (= BAV85 (= Alloc_Node$0 (grass_union$0 FP_Caller_Node$0 Alloc_Node$0))))
(assert (= BAV86 (= sk_?X_4$0 (grass_union$0 (grass_intersection$0 Alloc_Node$0 FP_Node$0) (grass_setminus$0 Alloc_Node$0 Alloc_Node$0)))))
(assert (= BAV87 (= sk_?X_3$0 (grass_union$0 sk_?X$0 sk_?X_2$0))))
(assert (= BAV88 (= sk_?X_2$0 sk_?X_1$0)))
(assert (= BAV89 (= sk_?X_1$0 (grass_singleton$0 elt$0))))
(assert (= BAV90 (= (grass_read$0 next$0 elt$0) grass_null$0)))
(assert (= BAV91 (= FP_Node$0 sk_?X_3$0)))
(assert (= BAV92 (= FP_Caller_Node$0 (grass_union$0 FP_Node$0 FP_Caller_Node$0))))
(assert (= BAV93 (= grass_emptyset$0 (grass_intersection$0 sk_?X$0 sk_?X_2$0))))
(assert (= BAV94 (= grass_emptyset$0 grass_emptyset$0)))
(assert (= BAV95 (= FP_Caller_final_Node_2$0 (grass_union$0 FP_Caller_Node_1$0 FP_Node$0))))
(assert (= BAV96 (= res_2$0 elt$0)))
(assert (= BAV97 (= (grass_union$0 FP_Caller_Node$0 Alloc_Node$0) Alloc_Node$0)))
(assert (= BAV98 (= (grass_read$0 next$0 grass_null$0) grass_null$0)))
(assert (= BAV99 (= (grass_read$0 next$0 grass_null$0) lst$0)))
(assert (= BAV100 (= (grass_read$0 next$0 grass_null$0) (grass_read$0 next$0 elt$0))))
(assert (= BAV101 (= (grass_known$1 (lseg$0 next$0 lst$0 grass_null$0 sk_?X$0)) (grass_known$1 (lseg$0 next$0 lst$0 lst$0 sk_?X$0)))))
(assert (= BAV102 (= (grass_intersection$0 sk_?X$0 sk_?X_2$0) grass_emptyset$0)))
(assert (= BAV103 (= (grass_union$0 (grass_intersection$0 Alloc_Node$0 FP_Node$0) (grass_setminus$0 Alloc_Node$0 Alloc_Node$0)) sk_?X_4$0)))
(assert (= BAV104 (= res_2$0 elt$0)))
(assert (= BAV105 (= (grass_union$0 FP_Node$0 FP_Caller_Node$0) FP_Caller_Node$0)))
(assert (= BAV106 (= sk_?X_1$0 (grass_singleton$0 elt$0))))
(assert (= BAV107 (= sk_?X_1$0 sk_?X_2$0)))
(assert (= BAV108 (= FP_Caller_final_Node_2$0 (grass_union$0 FP_Caller_Node_1$0 FP_Node$0))))
(assert (= BAV109 (= FP_Node$0 sk_?X_3$0)))
(assert (= BAV110 (= FP_Node$0 (grass_union$0 sk_?X$0 sk_?X_2$0))))
(assert (= BAV111 (= FP_Caller_Node_1$0 (grass_setminus$0 FP_Caller_Node$0 FP_Node$0))))
(assert (= BAV112 (= sk_?X$0 (set_compr$0 next$0 lst$0 lst$0))))
(assert (= BAV113 (= sk_?X$0 (set_compr$0 next$0 lst$0 grass_null$0))))
(check-sat)
(get-model)