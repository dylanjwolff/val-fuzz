(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-const x1 Int)
(declare-const x2 Int)
(declare-const x3 Int)
(declare-const x4 Int)
(declare-fun f (Int) Int)
(declare-fun p (Int) Bool)
(declare-fun q (Int) Bool)
(set-option :pp.max-depth 20)
(assert (or (= x1 GEN1) (= (f x2) (f x1)) (and (p (f x2)) (= x2 GEN2) (ite (= x1 GEN3) (or (q (f x2)) (= (f (+ x2 GEN4)) (f x1))) (or (q (f (f x2))) (q (f x1))))) (and (p (f x2)) (>= (f x2) GEN5)) (>= (ite (not (= x1 GEN6)) x1 (+ x1 GEN7)) x2)))
(apply (and-then simplify ctx-simplify))
(assert (= BAV1 (or (= x1 GEN1) (= (f x2) (f x1)) (and (p (f x2)) (= x2 GEN2) (ite (= x1 GEN3) (or (q (f x2)) (= (f (+ x2 GEN4)) (f x1))) (or (q (f (f x2))) (q (f x1))))) (and (p (f x2)) (>= (f x2) GEN5)) (>= (ite (not (= x1 GEN6)) x1 (+ x1 GEN7)) x2))))
(assert (= BAV2 (= x1 GEN1)))
(assert (= BAV3 (= (f x2) (f x1))))
(assert (= BAV4 (and (p (f x2)) (= x2 GEN2) (ite (= x1 GEN3) (or (q (f x2)) (= (f (+ x2 GEN4)) (f x1))) (or (q (f (f x2))) (q (f x1)))))))
(assert (= BAV5 (= x2 GEN2)))
(assert (= BAV6 (= x1 GEN3)))
(assert (= BAV7 (or (q (f x2)) (= (f (+ x2 GEN4)) (f x1)))))
(assert (= BAV8 (= (f (+ x2 GEN4)) (f x1))))
(assert (= BAV9 (or (q (f (f x2))) (q (f x1)))))
(assert (= BAV10 (and (p (f x2)) (>= (f x2) GEN5))))
(assert (= BAV11 (>= (f x2) GEN5)))
(assert (= BAV12 (>= (ite (not (= x1 GEN6)) x1 (+ x1 GEN7)) x2)))
(assert (= BAV13 (= x1 GEN6)))