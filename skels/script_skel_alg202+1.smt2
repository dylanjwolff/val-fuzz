(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const BAV23 Bool)
(declare-const BAV24 Bool)
(declare-const BAV25 Bool)
(declare-const BAV26 Bool)
(declare-const BAV27 Bool)
(declare-const BAV28 Bool)
(declare-const BAV29 Bool)
(declare-const BAV30 Bool)
(declare-sort $$unsorted 0)
(declare-fun sorti1 ($$unsorted) Bool)
(declare-fun op1 ($$unsorted $$unsorted) $$unsorted)
(declare-fun sorti2 ($$unsorted) Bool)
(declare-fun op2 ($$unsorted $$unsorted) $$unsorted)
(declare-fun h ($$unsorted) $$unsorted)
(declare-fun j ($$unsorted) $$unsorted)
(assert (forall ((U $$unsorted)(BOUND_VARIABLE_345 $$unsorted)) (or (not (sorti1 U)) (not (sorti1 BOUND_VARIABLE_345)) (sorti1 (op1 U BOUND_VARIABLE_345)))))
(assert (forall ((U $$unsorted)(BOUND_VARIABLE_364 $$unsorted)) (or (not (sorti2 U)) (not (sorti2 BOUND_VARIABLE_364)) (sorti2 (op2 U BOUND_VARIABLE_364)))))
(assert (forall ((U $$unsorted)) (or (not (sorti1 U)) (= U (op1 U U)))))
(assert (not (forall ((U $$unsorted)) (or (not (sorti2 U)) (= U (op2 U U))))))
(assert (not (=> (and (forall ((U $$unsorted)) (or (not (sorti1 U)) (sorti2 (h U)))) (forall ((V $$unsorted)) (or (not (sorti2 V)) (sorti1 (j V))))) (not (and (forall ((W $$unsorted)(BOUND_VARIABLE_406 $$unsorted)) (or (not (sorti1 W)) (not (sorti1 BOUND_VARIABLE_406)) (= (op2 (h W) (h BOUND_VARIABLE_406)) (h (op1 W BOUND_VARIABLE_406))))) (forall ((Y $$unsorted)(BOUND_VARIABLE_431 $$unsorted)) (or (not (sorti2 Y)) (not (sorti2 BOUND_VARIABLE_431)) (= (op1 (j Y) (j BOUND_VARIABLE_431)) (j (op2 Y BOUND_VARIABLE_431))))) (forall ((X1 $$unsorted)) (or (not (sorti2 X1)) (= X1 (h (j X1))))) (forall ((X2 $$unsorted)) (or (not (sorti1 X2)) (= X2 (j (h X2))))))))))
(assert (and (forall ((U $$unsorted)) (or (not (sorti1 U)) (sorti2 (h U)))) (forall ((V $$unsorted)) (or (not (sorti2 V)) (sorti1 (j V)))) (forall ((W $$unsorted)(BOUND_VARIABLE_406 $$unsorted)) (or (not (sorti1 W)) (not (sorti1 BOUND_VARIABLE_406)) (= (op2 (h W) (h BOUND_VARIABLE_406)) (h (op1 W BOUND_VARIABLE_406))))) (forall ((Y $$unsorted)(BOUND_VARIABLE_431 $$unsorted)) (or (not (sorti2 Y)) (not (sorti2 BOUND_VARIABLE_431)) (= (op1 (j Y) (j BOUND_VARIABLE_431)) (j (op2 Y BOUND_VARIABLE_431))))) (forall ((X1 $$unsorted)) (or (not (sorti2 X1)) (= X1 (h (j X1))))) (forall ((X2 $$unsorted)) (or (not (sorti1 X2)) (= X2 (j (h X2)))))))
(assert (= BAV1 (forall ((U $$unsorted)(BOUND_VARIABLE_345 $$unsorted)) (or (not (sorti1 U)) (not (sorti1 BOUND_VARIABLE_345)) (sorti1 (op1 U BOUND_VARIABLE_345))))))
(assert (= BAV2 (forall ((U $$unsorted)(BOUND_VARIABLE_364 $$unsorted)) (or (not (sorti2 U)) (not (sorti2 BOUND_VARIABLE_364)) (sorti2 (op2 U BOUND_VARIABLE_364))))))
(assert (= BAV3 (forall ((U $$unsorted)) (or (not (sorti1 U)) (= U (op1 U U))))))
(assert (= BAV4 (forall ((U $$unsorted)) (= U (op1 U U)))))
(assert (= BAV5 (forall ((U $$unsorted)) (or (not (sorti2 U)) (= U (op2 U U))))))
(assert (= BAV6 (forall ((U $$unsorted)) (= U (op2 U U)))))
(assert (= BAV7 (=> (and (forall ((U $$unsorted)) (or (not (sorti1 U)) (sorti2 (h U)))) (forall ((V $$unsorted)) (or (not (sorti2 V)) (sorti1 (j V))))) (not (and (forall ((W $$unsorted)(BOUND_VARIABLE_406 $$unsorted)) (or (not (sorti1 W)) (not (sorti1 BOUND_VARIABLE_406)) (= (op2 (h W) (h BOUND_VARIABLE_406)) (h (op1 W BOUND_VARIABLE_406))))) (forall ((Y $$unsorted)(BOUND_VARIABLE_431 $$unsorted)) (or (not (sorti2 Y)) (not (sorti2 BOUND_VARIABLE_431)) (= (op1 (j Y) (j BOUND_VARIABLE_431)) (j (op2 Y BOUND_VARIABLE_431))))) (forall ((X1 $$unsorted)) (or (not (sorti2 X1)) (= X1 (h (j X1))))) (forall ((X2 $$unsorted)) (or (not (sorti1 X2)) (= X2 (j (h X2))))))))))
(assert (= BAV8 (and (forall ((U $$unsorted)) (or (not (sorti1 U)) (sorti2 (h U)))) (forall ((V $$unsorted)) (or (not (sorti2 V)) (sorti1 (j V)))))))
(assert (= BAV9 (forall ((U $$unsorted)) (or (not (sorti1 U)) (sorti2 (h U))))))
(assert (= BAV10 (forall ((V $$unsorted)) (or (not (sorti2 V)) (sorti1 (j V))))))
(assert (= BAV11 (and (forall ((W $$unsorted)(BOUND_VARIABLE_406 $$unsorted)) (or (not (sorti1 W)) (not (sorti1 BOUND_VARIABLE_406)) (= (op2 (h W) (h BOUND_VARIABLE_406)) (h (op1 W BOUND_VARIABLE_406))))) (forall ((Y $$unsorted)(BOUND_VARIABLE_431 $$unsorted)) (or (not (sorti2 Y)) (not (sorti2 BOUND_VARIABLE_431)) (= (op1 (j Y) (j BOUND_VARIABLE_431)) (j (op2 Y BOUND_VARIABLE_431))))) (forall ((X1 $$unsorted)) (or (not (sorti2 X1)) (= X1 (h (j X1))))) (forall ((X2 $$unsorted)) (or (not (sorti1 X2)) (= X2 (j (h X2))))))))
(assert (= BAV12 (forall ((W $$unsorted)(BOUND_VARIABLE_406 $$unsorted)) (or (not (sorti1 W)) (not (sorti1 BOUND_VARIABLE_406)) (= (op2 (h W) (h BOUND_VARIABLE_406)) (h (op1 W BOUND_VARIABLE_406)))))))
(assert (= BAV13 (forall ((W $$unsorted)(BOUND_VARIABLE_406 $$unsorted)) (= (op2 (h W) (h BOUND_VARIABLE_406)) (h (op1 W BOUND_VARIABLE_406))))))
(assert (= BAV14 (forall ((Y $$unsorted)(BOUND_VARIABLE_431 $$unsorted)) (or (not (sorti2 Y)) (not (sorti2 BOUND_VARIABLE_431)) (= (op1 (j Y) (j BOUND_VARIABLE_431)) (j (op2 Y BOUND_VARIABLE_431)))))))
(assert (= BAV15 (forall ((Y $$unsorted)(BOUND_VARIABLE_431 $$unsorted)) (= (op1 (j Y) (j BOUND_VARIABLE_431)) (j (op2 Y BOUND_VARIABLE_431))))))
(assert (= BAV16 (forall ((X1 $$unsorted)) (or (not (sorti2 X1)) (= X1 (h (j X1)))))))
(assert (= BAV17 (forall ((X1 $$unsorted)) (= X1 (h (j X1))))))
(assert (= BAV18 (forall ((X2 $$unsorted)) (or (not (sorti1 X2)) (= X2 (j (h X2)))))))
(assert (= BAV19 (forall ((X2 $$unsorted)) (= X2 (j (h X2))))))
(assert (= BAV20 (and (forall ((U $$unsorted)) (or (not (sorti1 U)) (sorti2 (h U)))) (forall ((V $$unsorted)) (or (not (sorti2 V)) (sorti1 (j V)))) (forall ((W $$unsorted)(BOUND_VARIABLE_406 $$unsorted)) (or (not (sorti1 W)) (not (sorti1 BOUND_VARIABLE_406)) (= (op2 (h W) (h BOUND_VARIABLE_406)) (h (op1 W BOUND_VARIABLE_406))))) (forall ((Y $$unsorted)(BOUND_VARIABLE_431 $$unsorted)) (or (not (sorti2 Y)) (not (sorti2 BOUND_VARIABLE_431)) (= (op1 (j Y) (j BOUND_VARIABLE_431)) (j (op2 Y BOUND_VARIABLE_431))))) (forall ((X1 $$unsorted)) (or (not (sorti2 X1)) (= X1 (h (j X1))))) (forall ((X2 $$unsorted)) (or (not (sorti1 X2)) (= X2 (j (h X2))))))))
(assert (= BAV21 (forall ((U $$unsorted)) (or (not (sorti1 U)) (sorti2 (h U))))))
(assert (= BAV22 (forall ((V $$unsorted)) (or (not (sorti2 V)) (sorti1 (j V))))))
(assert (= BAV23 (forall ((W $$unsorted)(BOUND_VARIABLE_406 $$unsorted)) (or (not (sorti1 W)) (not (sorti1 BOUND_VARIABLE_406)) (= (op2 (h W) (h BOUND_VARIABLE_406)) (h (op1 W BOUND_VARIABLE_406)))))))
(assert (= BAV24 (forall ((W $$unsorted)(BOUND_VARIABLE_406 $$unsorted)) (= (op2 (h W) (h BOUND_VARIABLE_406)) (h (op1 W BOUND_VARIABLE_406))))))
(assert (= BAV25 (forall ((Y $$unsorted)(BOUND_VARIABLE_431 $$unsorted)) (or (not (sorti2 Y)) (not (sorti2 BOUND_VARIABLE_431)) (= (op1 (j Y) (j BOUND_VARIABLE_431)) (j (op2 Y BOUND_VARIABLE_431)))))))
(assert (= BAV26 (forall ((Y $$unsorted)(BOUND_VARIABLE_431 $$unsorted)) (= (op1 (j Y) (j BOUND_VARIABLE_431)) (j (op2 Y BOUND_VARIABLE_431))))))
(assert (= BAV27 (forall ((X1 $$unsorted)) (or (not (sorti2 X1)) (= X1 (h (j X1)))))))
(assert (= BAV28 (forall ((X1 $$unsorted)) (= X1 (h (j X1))))))
(assert (= BAV29 (forall ((X2 $$unsorted)) (or (not (sorti1 X2)) (= X2 (j (h X2)))))))
(assert (= BAV30 (forall ((X2 $$unsorted)) (= X2 (j (h X2))))))
(check-sat)
(get-model)