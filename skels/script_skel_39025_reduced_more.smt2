(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(set-info :status unknown)
(declare-fun t.curr () Int)
(declare-fun t.l () Int)
(declare-fun NULL () Int)
(declare-fun t.nxt (Int) Int)
(declare-fun i2 () Int)
(declare-fun t.suc () Int)
(declare-fun t.H_nxt (Int) Bool)
(assert (= (t.nxt t.suc) t.suc))
(assert (not (= (t.nxt t.curr) t.curr)))
(assert (t.H_nxt (t.nxt t.curr)))
(assert (not (t.H_nxt t.curr)))
(assert (or (= i2 t.suc) (= i2 NULL)))
(assert (or (= (t.nxt t.suc) t.curr) (= (t.nxt t.suc) NULL)))
(assert (or (not (= (t.nxt t.l) t.l)) (not (= (t.nxt t.curr) t.suc))))
(assert (= BAV1 (= (t.nxt t.suc) t.suc)))
(assert (= BAV2 (= (t.nxt t.curr) t.curr)))
(assert (= BAV3 (or (= i2 t.suc) (= i2 NULL))))
(assert (= BAV4 (= i2 t.suc)))
(assert (= BAV5 (= i2 NULL)))
(assert (= BAV6 (or (= (t.nxt t.suc) t.curr) (= (t.nxt t.suc) NULL))))
(assert (= BAV7 (= (t.nxt t.suc) t.curr)))
(assert (= BAV8 (= (t.nxt t.suc) NULL)))
(assert (= BAV9 (or (not (= (t.nxt t.l) t.l)) (not (= (t.nxt t.curr) t.suc)))))
(assert (= BAV10 (= (t.nxt t.l) t.l)))
(assert (= BAV11 (= (t.nxt t.curr) t.suc)))
(check-sat)
(get-model)