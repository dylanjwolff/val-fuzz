(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-fun f (Int Int) Int)
(declare-fun p (Int) Bool)
(set-option :pp.max-depth 100)
(push)
(assert (or (forall ((x Int)) (=> (= x GEN1) (p x))) (= (forall ((x1 Int)(x2 Int)) (=> (= x1 (+ x2 GEN2)) (p x1))) (p GEN3))))
(apply (and-then (! simplify :elim-and true) der))
(pop)
(assert (= BAV1 (or (forall ((x Int)) (=> (= x GEN1) (p x))) (= (forall ((x1 Int)(x2 Int)) (=> (= x1 (+ x2 GEN2)) (p x1))) (p GEN3)))))
(assert (= BAV2 (forall ((x Int)) (=> (= x GEN1) (p x)))))
(assert (= BAV3 (forall ((x Int)) (= x GEN1))))
(assert (= BAV4 (= (forall ((x1 Int)(x2 Int)) (=> (= x1 (+ x2 GEN2)) (p x1))) (p GEN3))))
(assert (= BAV5 (forall ((x1 Int)(x2 Int)) (=> (= x1 (+ x2 GEN2)) (p x1)))))
(assert (= BAV6 (forall ((x1 Int)(x2 Int)) (= x1 (+ x2 GEN2)))))