(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(get-model)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(set-option :produce-models true)
(declare-const x1 Int)
(declare-fun f (Int) Int)
(assert (and (= (* x1 x1) GEN1) (= (f GEN2) GEN3) (= (f (- GEN4)) GEN5)))
(assert (= BAV1 (and (= (* x1 x1) GEN1) (= (f GEN2) GEN3) (= (f (- GEN4)) GEN5))))
(assert (= BAV2 (= (* x1 x1) GEN1)))
(assert (= BAV3 (= (f GEN2) GEN3)))
(assert (= BAV4 (= (f (- GEN4)) GEN5)))
(assert (= BAV5 (= x1 GEN6)))
(assert (= BAV6 (= x1 (- GEN7))))
(check-sat)
(get-model)
(eval (or (= x1 1) (= x1 -1)))
(assert (not (= x1 GEN6)))
(check-sat)
(eval x1)
(assert (not (= x1 (- GEN7))))
(check-sat)