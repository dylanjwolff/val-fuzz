(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const BAV23 Bool)
(declare-const BAV24 Bool)
(declare-const BAV25 Bool)
(declare-const BAV26 Bool)
(declare-const BAV27 Bool)
(declare-const BAV28 Bool)
(declare-const BAV29 Bool)
(declare-const BAV30 Bool)
(declare-const BAV31 Bool)
(declare-const BAV32 Bool)
(declare-const BAV33 Bool)
(declare-const BAV34 Bool)
(declare-const BAV35 Bool)
(declare-const BAV36 Bool)
(declare-const BAV37 Bool)
(declare-const BAV38 Bool)
(declare-const BAV39 Bool)
(declare-const BAV40 Bool)
(declare-const BAV41 Bool)
(declare-const BAV42 Bool)
(declare-const GEN40 Int)
(declare-const GEN39 Int)
(declare-const GEN38 Int)
(declare-const GEN37 Int)
(declare-const GEN36 Int)
(declare-const GEN35 Int)
(declare-const GEN34 Int)
(declare-const GEN33 Int)
(declare-const GEN32 Int)
(declare-const GEN31 Int)
(declare-const GEN30 Int)
(declare-const GEN29 Int)
(declare-const GEN28 Int)
(declare-const GEN27 Int)
(declare-const GEN26 Int)
(declare-const GEN25 Int)
(declare-const GEN24 Int)
(declare-const GEN23 Int)
(declare-const GEN22 Int)
(declare-const GEN21 Int)
(declare-const GEN20 Int)
(declare-const GEN19 Int)
(declare-const GEN18 Int)
(declare-const GEN17 Int)
(declare-const GEN16 Int)
(declare-const GEN15 Int)
(declare-const GEN14 Int)
(declare-const GEN13 Int)
(declare-const GEN12 Int)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-fun z$n0s32 () (_ BitVec 32))
(declare-fun dataOut () (_ BitVec 32))
(declare-fun z$2 () (_ BitVec 1))
(declare-fun stageOne () (_ BitVec 32))
(declare-fun z$4 () (_ BitVec 1))
(declare-fun stageTwo () (_ BitVec 32))
(declare-fun z$6 () (_ BitVec 1))
(declare-fun tmp_stageOne () (_ BitVec 32))
(declare-fun z$8 () (_ BitVec 1))
(declare-fun tmp_stageTwo () (_ BitVec 32))
(declare-fun z$10 () (_ BitVec 1))
(declare-fun reset_ () (_ BitVec 1))
(declare-fun z$14 () (_ BitVec 1))
(declare-fun Add_32_32_32 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun z$15 () (_ BitVec 32))
(declare-fun z$17 () (_ BitVec 32))
(declare-fun dataOut$next () (_ BitVec 32))
(declare-fun z$19 () (_ BitVec 1))
(declare-fun c1 () (_ BitVec 32))
(declare-fun dataIn () (_ BitVec 32))
(declare-fun z$23 () (_ BitVec 32))
(declare-fun stageOne$next () (_ BitVec 32))
(declare-fun z$25 () (_ BitVec 1))
(declare-fun c2 () (_ BitVec 32))
(declare-fun z$28 () (_ BitVec 32))
(declare-fun stageTwo$next () (_ BitVec 32))
(declare-fun z$30 () (_ BitVec 1))
(declare-fun tmp_stageOne$next () (_ BitVec 32))
(declare-fun z$32 () (_ BitVec 1))
(declare-fun tmp_stageTwo$next () (_ BitVec 32))
(declare-fun z$34 () (_ BitVec 1))
(declare-fun z$35 () (_ BitVec 1))
(declare-fun z$55 () (_ BitVec 32))
(declare-fun z$57 () (_ BitVec 1))
(declare-fun z$58 () (_ BitVec 1))
(declare-fun z$59 () (_ BitVec 1))
(declare-fun prop$next () (_ BitVec 1))
(declare-fun z$61 () (_ BitVec 1))
(declare-fun z$54 () (_ BitVec 1))
(declare-fun z$63 () (_ BitVec 1))
(assert (= z$15 (Add_32_32_32 stageTwo stageOne)))
(assert (= z$17 (ite (= z$14 (_ bv1 1)) z$15 z$n0s32)))
(assert (= z$19 (ite (= dataOut$next z$17) (_ bv1 1) (_ bv0 1))))
(assert (= z$25 (ite (= stageOne$next z$23) (_ bv1 1) (_ bv0 1))))
(assert (= z$32 (ite (= tmp_stageOne$next stageOne) (_ bv1 1) (_ bv0 1))))
(assert (= z$34 (ite (= tmp_stageTwo$next stageTwo) (_ bv1 1) (_ bv0 1))))
(assert (= z$35 (ite (and (= z$19 (_ bv1 1)) (= z$25 (_ bv1 1)) (= z$30 (_ bv1 1)) (= z$32 (_ bv1 1)) (= z$34 (_ bv1 1))) (_ bv1 1) (_ bv0 1))))
(assert (= z$55 (Add_32_32_32 tmp_stageTwo$next tmp_stageOne$next)))
(assert (= z$57 (ite (= dataOut$next z$55) (_ bv1 1) (_ bv0 1))))
(assert (= z$58 (ite (= dataOut$next z$n0s32) (_ bv1 1) (_ bv0 1))))
(assert (= z$59 (ite (or (= z$57 (_ bv1 1)) (= z$58 (_ bv1 1))) (_ bv1 1) (_ bv0 1))))
(assert (= z$61 (ite (= prop$next z$59) (_ bv1 1) (_ bv0 1))))
(assert (= z$54 (ite (= prop$next (_ bv0 1)) (_ bv1 1) (_ bv0 1))))
(assert (= z$63 (ite (and (= z$2 (_ bv1 1)) (= z$4 (_ bv1 1)) (= z$6 (_ bv1 1)) (= z$8 (_ bv1 1)) (= z$10 (_ bv1 1)) (= z$35 (_ bv1 1)) (= z$61 (_ bv1 1)) (= z$54 (_ bv1 1))) (_ bv1 1) (_ bv0 1))))
(assert (= z$63 (_ bv1 1)))
(assert (= BAV1 (= z$15 (Add_32_32_32 stageTwo stageOne))))
(assert (= BAV2 (= z$17 (ite (= z$14 (_ bv1 1)) z$15 z$n0s32))))
(assert (= BAV3 (= z$14 (_ bv1 1))))
(assert (= BAV4 (= z$19 (ite (= dataOut$next z$17) (_ bv1 1) (_ bv0 1)))))
(assert (= BAV5 (= dataOut$next z$17)))
(assert (= BAV6 (= z$25 (ite (= stageOne$next z$23) (_ bv1 1) (_ bv0 1)))))
(assert (= BAV7 (= stageOne$next z$23)))
(assert (= BAV8 (= z$32 (ite (= tmp_stageOne$next stageOne) (_ bv1 1) (_ bv0 1)))))
(assert (= BAV9 (= tmp_stageOne$next stageOne)))
(assert (= BAV10 (= z$34 (ite (= tmp_stageTwo$next stageTwo) (_ bv1 1) (_ bv0 1)))))
(assert (= BAV11 (= tmp_stageTwo$next stageTwo)))
(assert (= BAV12 (= z$35 (ite (and (= z$19 (_ bv1 1)) (= z$25 (_ bv1 1)) (= z$30 (_ bv1 1)) (= z$32 (_ bv1 1)) (= z$34 (_ bv1 1))) (_ bv1 1) (_ bv0 1)))))
(assert (= BAV13 (and (= z$19 (_ bv1 1)) (= z$25 (_ bv1 1)) (= z$30 (_ bv1 1)) (= z$32 (_ bv1 1)) (= z$34 (_ bv1 1)))))
(assert (= BAV14 (= z$19 (_ bv1 1))))
(assert (= BAV15 (= z$25 (_ bv1 1))))
(assert (= BAV16 (= z$30 (_ bv1 1))))
(assert (= BAV17 (= z$32 (_ bv1 1))))
(assert (= BAV18 (= z$34 (_ bv1 1))))
(assert (= BAV19 (= z$55 (Add_32_32_32 tmp_stageTwo$next tmp_stageOne$next))))
(assert (= BAV20 (= z$57 (ite (= dataOut$next z$55) (_ bv1 1) (_ bv0 1)))))
(assert (= BAV21 (= dataOut$next z$55)))
(assert (= BAV22 (= z$58 (ite (= dataOut$next z$n0s32) (_ bv1 1) (_ bv0 1)))))
(assert (= BAV23 (= dataOut$next z$n0s32)))
(assert (= BAV24 (= z$59 (ite (or (= z$57 (_ bv1 1)) (= z$58 (_ bv1 1))) (_ bv1 1) (_ bv0 1)))))
(assert (= BAV25 (or (= z$57 (_ bv1 1)) (= z$58 (_ bv1 1)))))
(assert (= BAV26 (= z$57 (_ bv1 1))))
(assert (= BAV27 (= z$58 (_ bv1 1))))
(assert (= BAV28 (= z$61 (ite (= prop$next z$59) (_ bv1 1) (_ bv0 1)))))
(assert (= BAV29 (= prop$next z$59)))
(assert (= BAV30 (= z$54 (ite (= prop$next (_ bv0 1)) (_ bv1 1) (_ bv0 1)))))
(assert (= BAV31 (= prop$next (_ bv0 1))))
(assert (= BAV32 (= z$63 (ite (and (= z$2 (_ bv1 1)) (= z$4 (_ bv1 1)) (= z$6 (_ bv1 1)) (= z$8 (_ bv1 1)) (= z$10 (_ bv1 1)) (= z$35 (_ bv1 1)) (= z$61 (_ bv1 1)) (= z$54 (_ bv1 1))) (_ bv1 1) (_ bv0 1)))))
(assert (= BAV33 (and (= z$2 (_ bv1 1)) (= z$4 (_ bv1 1)) (= z$6 (_ bv1 1)) (= z$8 (_ bv1 1)) (= z$10 (_ bv1 1)) (= z$35 (_ bv1 1)) (= z$61 (_ bv1 1)) (= z$54 (_ bv1 1)))))
(assert (= BAV34 (= z$2 (_ bv1 1))))
(assert (= BAV35 (= z$4 (_ bv1 1))))
(assert (= BAV36 (= z$6 (_ bv1 1))))
(assert (= BAV37 (= z$8 (_ bv1 1))))
(assert (= BAV38 (= z$10 (_ bv1 1))))
(assert (= BAV39 (= z$35 (_ bv1 1))))
(assert (= BAV40 (= z$61 (_ bv1 1))))
(assert (= BAV41 (= z$54 (_ bv1 1))))
(assert (= BAV42 (= z$63 (_ bv1 1))))
(check-sat)
(get-model)
(exit)