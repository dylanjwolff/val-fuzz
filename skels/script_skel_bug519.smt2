(set-logic ALL)
(declare-const GEN1 Int)
(declare-const GEN2 Int)
(declare-const GEN3 Int)
(declare-const GEN4 Int)
(declare-const GEN5 Int)
(declare-const GEN6 Int)
(declare-const GEN7 Int)
(declare-const GEN8 Int)
(declare-const GEN9 Int)
(declare-const GEN10 Int)
(declare-const GEN11 Int)
(declare-const GEN12 Int)
(declare-const GEN13 Int)
(declare-const GEN14 Int)
(declare-const GEN15 Int)
(declare-const GEN16 Int)
(declare-const GEN17 Int)
(declare-const GEN18 Int)
(declare-const GEN19 Int)
(declare-const GEN20 Int)
(declare-const GEN21 Int)
(declare-const GEN22 Int)
(declare-const GEN23 Int)
(declare-const GEN24 Int)
(declare-const GEN25 Int)
(declare-const GEN26 Int)
(declare-const GEN27 Int)
(declare-const GEN28 Int)
(declare-const GEN29 Int)
(declare-const GEN30 Int)
(declare-const GEN31 Int)
(declare-const GEN32 Int)
(declare-const GEN33 Int)
(declare-const GEN34 Int)
(declare-const GEN35 Int)
(declare-const GEN36 Int)
(declare-const GEN37 Int)
(declare-const GEN38 Int)
(declare-const GEN39 Int)
(declare-const GEN40 Int)
(declare-const GEN41 Int)
(declare-const GEN42 Int)
(declare-const BAV43 Bool)
(declare-const BAV44 Bool)
(declare-const BAV45 Bool)
(declare-const BAV46 Bool)
(declare-const BAV47 Bool)
(declare-const BAV48 Bool)
(declare-const BAV49 Bool)
(declare-const BAV50 Bool)
(declare-const BAV51 Bool)
(declare-const BAV52 Bool)
(declare-const BAV53 Bool)
(declare-fun start (Int) Int)
(declare-fun complete (Int) Int)
(define-fun before ((i Int) (j Int)) Bool (< (complete i) (start j)))
(assert (before GEN1 GEN2))
(assert (before GEN3 GEN4))
(assert (before GEN5 GEN6))
(assert (before GEN7 GEN8))
(assert (before GEN9 GEN10))
(assert (before GEN11 GEN12))
(assert (before GEN13 GEN14))
(assert (before GEN15 GEN16))
(define-fun requires ((i Int) (j Int)) Bool (= (complete i) (+ (start i) j)))
(assert (requires GEN17 GEN18))
(assert (requires GEN19 GEN20))
(assert (requires GEN21 GEN22))
(assert (requires GEN23 GEN24))
(assert (requires GEN25 GEN26))
(assert (requires GEN27 GEN28))
(assert (>= (start GEN29) GEN30))
(assert (>= (start GEN31) GEN32))
(assert (>= (start GEN33) GEN34))
(assert (>= (start GEN35) GEN36))
(assert (>= (start GEN37) GEN38))
(assert (>= (start GEN39) GEN40))
(define-fun cost () Int (complete 6))
(define-fun parallel ((t Int)) Int
            (+ (ite (<= (start 1) t (complete 1)) 1 0)
               (ite (<= (start 2) t (complete 2)) 1 0)
               (ite (<= (start 3) t (complete 3)) 1 0)
               (ite (<= (start 4) t (complete 4)) 1 0)
               (ite (<= (start 5) t (complete 5)) 1 0)
               (ite (<= (start 6) t (complete 6)) 1 0)))
(declare-fun cost2 () Int)
(assert (= cost2 cost))
(declare-fun max-parallel () Int)
(assert (forall ((t Int)) (=> (<= GEN41 t cost2) (>= max-parallel (parallel t)))))
(assert (= BAV43 (>= (start GEN29) GEN30)))
(assert (= BAV44 (>= (start GEN31) GEN32)))
(assert (= BAV45 (>= (start GEN33) GEN34)))
(assert (= BAV46 (>= (start GEN35) GEN36)))
(assert (= BAV47 (>= (start GEN37) GEN38)))
(assert (= BAV48 (>= (start GEN39) GEN40)))
(assert (= BAV49 (= cost2 cost)))
(assert (= BAV50 (forall ((t Int)) (=> (<= GEN41 t cost2) (>= max-parallel (parallel t))))))
(assert (= BAV51 (forall ((t Int)) (<= GEN41 t cost2))))
(assert (= BAV52 (forall ((t Int)) (>= max-parallel (parallel t)))))
(assert (= BAV53 (< cost GEN42)))
(check-sat)
(assert (< cost GEN42))
(check-sat)