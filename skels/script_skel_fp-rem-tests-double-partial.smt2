(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const GEN36 (_ BitVec 52))
(declare-const GEN35 (_ BitVec 11))
(declare-const GEN34 (_ BitVec 1))
(declare-const GEN33 (_ BitVec 52))
(declare-const GEN32 (_ BitVec 11))
(declare-const GEN31 (_ BitVec 1))
(declare-const GEN30 (_ BitVec 52))
(declare-const GEN29 (_ BitVec 11))
(declare-const GEN28 (_ BitVec 1))
(declare-const GEN27 (_ BitVec 52))
(declare-const GEN26 (_ BitVec 11))
(declare-const GEN25 (_ BitVec 1))
(declare-const GEN24 (_ BitVec 52))
(declare-const GEN23 (_ BitVec 11))
(declare-const GEN22 (_ BitVec 1))
(declare-const GEN21 (_ BitVec 52))
(declare-const GEN20 (_ BitVec 11))
(declare-const GEN19 (_ BitVec 1))
(declare-const GEN18 (_ BitVec 52))
(declare-const GEN17 (_ BitVec 11))
(declare-const GEN16 (_ BitVec 1))
(declare-const GEN15 (_ BitVec 52))
(declare-const GEN14 (_ BitVec 11))
(declare-const GEN13 (_ BitVec 1))
(declare-const GEN12 (_ BitVec 52))
(declare-const GEN11 (_ BitVec 11))
(declare-const GEN10 (_ BitVec 1))
(declare-const GEN9 (_ BitVec 52))
(declare-const GEN8 (_ BitVec 11))
(declare-const GEN7 (_ BitVec 1))
(declare-const GEN6 (_ BitVec 52))
(declare-const GEN5 (_ BitVec 11))
(declare-const GEN4 (_ BitVec 1))
(declare-const GEN3 (_ BitVec 52))
(declare-const GEN2 (_ BitVec 11))
(declare-const GEN1 (_ BitVec 1))
(set-info :source "Handcrafted by CM Wintersteiger")
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-const x FPN)
(declare-const y FPN)
(declare-const r FPN)
(push)
(assert (= x (fp GEN1 GEN2 GEN3)))
(assert (= y (fp GEN4 GEN5 GEN6)))
(assert (= r (fp.rem x y)))
(assert (not (= r (fp GEN7 GEN8 GEN9))))
(check-sat-using qffp)
(pop)
(push)
(assert (= x (fp GEN10 GEN11 GEN12)))
(assert (= y (fp GEN13 GEN14 GEN15)))
(assert (= r (fp.rem x y)))
(assert (not (= r (fp GEN16 GEN17 GEN18))))
(check-sat-using qffp)
(pop)
(push)
(assert (= x (fp GEN19 GEN20 GEN21)))
(assert (= y (fp GEN22 GEN23 GEN24)))
(assert (= r (fp.rem x y)))
(assert (not (= r (fp GEN25 GEN26 GEN27))))
(check-sat-using qffp)
(pop)
(push)
(assert (= x (fp GEN28 GEN29 GEN30)))
(assert (= y (fp GEN31 GEN32 GEN33)))
(assert (= r (fp.rem x y)))
(assert (not (= r (fp GEN34 GEN35 GEN36))))
(check-sat-using qffp)
(pop)
(exit)
(assert (= BAV1 (= x (fp GEN1 GEN2 GEN3))))
(assert (= BAV2 (= y (fp GEN4 GEN5 GEN6))))
(assert (= BAV3 (= r (fp.rem x y))))
(assert (= BAV4 (= r (fp GEN7 GEN8 GEN9))))
(assert (= BAV5 (= x (fp GEN10 GEN11 GEN12))))
(assert (= BAV6 (= y (fp GEN13 GEN14 GEN15))))
(assert (= BAV7 (= r (fp.rem x y))))
(assert (= BAV8 (= r (fp GEN16 GEN17 GEN18))))
(assert (= BAV9 (= x (fp GEN19 GEN20 GEN21))))
(assert (= BAV10 (= y (fp GEN22 GEN23 GEN24))))
(assert (= BAV11 (= r (fp.rem x y))))
(assert (= BAV12 (= r (fp GEN25 GEN26 GEN27))))
(assert (= BAV13 (= x (fp GEN28 GEN29 GEN30))))
(assert (= BAV14 (= y (fp GEN31 GEN32 GEN33))))
(assert (= BAV15 (= r (fp.rem x y))))
(assert (= BAV16 (= r (fp GEN34 GEN35 GEN36))))