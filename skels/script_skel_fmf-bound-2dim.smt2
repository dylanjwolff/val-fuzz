(set-logic ALL)
(declare-const GEN1 Int)
(declare-const GEN2 Int)
(declare-const GEN3 Int)
(declare-const GEN4 Int)
(declare-const GEN5 Int)
(declare-const GEN6 Int)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-fun P (Int Int) Bool)
(declare-fun a () Int)
(assert (> a GEN1))
(assert (forall ((x Int)(y Int)) (=> (and (<= a x) (<= x (+ a GEN2)) (<= GEN3 y) (<= y (+ GEN4 x))) (P x y))))
(assert (not (P GEN5 GEN6)))
(assert (= BAV7 (> a GEN1)))
(assert (= BAV8 (forall ((x Int)(y Int)) (=> (and (<= a x) (<= x (+ a GEN2)) (<= GEN3 y) (<= y (+ GEN4 x))) (P x y)))))
(assert (= BAV9 (forall ((x Int)(y Int)) (and (<= a x) (<= x (+ a GEN2)) (<= GEN3 y) (<= y (+ GEN4 x))))))
(assert (= BAV10 (forall ((x Int)(y Int)) (<= a x))))
(assert (= BAV11 (forall ((x Int)(y Int)) (<= x (+ a GEN2)))))
(assert (= BAV12 (forall ((x Int)(y Int)) (<= GEN3 y))))
(assert (= BAV13 (forall ((x Int)(y Int)) (<= y (+ GEN4 x)))))
(check-sat)
(get-model)