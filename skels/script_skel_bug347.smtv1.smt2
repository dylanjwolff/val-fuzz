(set-option :incremental false)
(set-info :category "unknown")
(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-fun delete_0_val_1 () (_ BitVec 32))
(declare-fun delete_0_curr_6 () (_ BitVec 32))
(declare-fun arr_next_13 () (Array (_ BitVec 32) (_ BitVec 32)))
(declare-fun arr_next_14 () (Array (_ BitVec 32) (_ BitVec 32)))
(declare-fun delete_0_head_1 () (_ BitVec 32))
(assert (= BAV1 (and (= (_ bv0 32) (ite (= (_ bv0 32) delete_0_head_1) (select arr_next_14 delete_0_curr_6) delete_0_curr_6)) (= arr_next_14 arr_next_13) (= (_ bv1 32) (select arr_next_13 (_ bv1 32))) (= delete_0_curr_6 (ite (= (_ bv0 32) delete_0_val_1) (_ bv0 32) (_ bv1 32))))))
(assert (= BAV2 (= (_ bv0 32) (ite (= (_ bv0 32) delete_0_head_1) (select arr_next_14 delete_0_curr_6) delete_0_curr_6))))
(assert (= BAV3 (= (_ bv0 32) delete_0_head_1)))
(assert (= BAV4 (= arr_next_14 arr_next_13)))
(assert (= BAV5 (= (_ bv1 32) (select arr_next_13 (_ bv1 32)))))
(assert (= BAV6 (= delete_0_curr_6 (ite (= (_ bv0 32) delete_0_val_1) (_ bv0 32) (_ bv1 32)))))
(assert (= BAV7 (= (_ bv0 32) delete_0_val_1)))
(check-sat-assuming ((and (= (_ bv0 32) (ite (= (_ bv0 32) delete_0_head_1) (select arr_next_14 delete_0_curr_6) delete_0_curr_6)) (= arr_next_14 arr_next_13) (= (_ bv1 32) (select arr_next_13 (_ bv1 32))) (= delete_0_curr_6 (ite (= (_ bv0 32) delete_0_val_1) (_ bv0 32) (_ bv1 32))))))
(get-model)