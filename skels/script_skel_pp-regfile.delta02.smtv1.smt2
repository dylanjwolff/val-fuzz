(set-option :incremental false)
(set-info :status unknown)
(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const GEN16 Int)
(declare-const GEN15 Int)
(declare-const GEN14 Int)
(declare-const GEN13 Int)
(declare-const GEN12 Int)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-fun REGFILE_INIT () (Array Int Int))
(declare-fun BDEST_S2M_INIT () Int)
(declare-fun CLOCK_INIT () Bool)
(assert (= BAV1 (= (select REGFILE_INIT GEN7) (select (ite (ite (= GEN8 (ite (= GEN9 (ite (= GEN10 (ite CLOCK_INIT GEN1 GEN2)) GEN11 GEN12)) GEN13 (select (ite (ite (= GEN3 BDEST_S2M_INIT) false true) (store REGFILE_INIT BDEST_S2M_INIT GEN4) REGFILE_INIT) (ite CLOCK_INIT GEN1 GEN2)))) false true) (ite (ite CLOCK_INIT false true) (store (ite (ite (= GEN3 BDEST_S2M_INIT) false true) (store REGFILE_INIT BDEST_S2M_INIT GEN4) REGFILE_INIT) GEN5 GEN6) (ite (ite (= GEN3 BDEST_S2M_INIT) false true) (store REGFILE_INIT BDEST_S2M_INIT GEN4) REGFILE_INIT)) (store (ite (ite CLOCK_INIT false true) (store (ite (ite (= GEN3 BDEST_S2M_INIT) false true) (store REGFILE_INIT BDEST_S2M_INIT GEN4) REGFILE_INIT) GEN5 GEN6) (ite (ite (= GEN3 BDEST_S2M_INIT) false true) (store REGFILE_INIT BDEST_S2M_INIT GEN4) REGFILE_INIT)) GEN14 GEN15)) GEN16))))
(assert (= BAV2 (= GEN8 (ite (= GEN9 (ite (= GEN10 (ite CLOCK_INIT GEN1 GEN2)) GEN11 GEN12)) GEN13 (select (ite (ite (= GEN3 BDEST_S2M_INIT) false true) (store REGFILE_INIT BDEST_S2M_INIT GEN4) REGFILE_INIT) (ite CLOCK_INIT GEN1 GEN2))))))
(assert (= BAV3 (= GEN9 (ite (= GEN10 (ite CLOCK_INIT GEN1 GEN2)) GEN11 GEN12))))
(assert (= BAV4 (= GEN10 (ite CLOCK_INIT GEN1 GEN2))))
(assert (= BAV5 (= GEN3 BDEST_S2M_INIT)))
(assert (= BAV6 (= GEN3 BDEST_S2M_INIT)))
(assert (= BAV7 (= GEN3 BDEST_S2M_INIT)))
(assert (= BAV8 (= GEN3 BDEST_S2M_INIT)))
(assert (= BAV9 (= GEN3 BDEST_S2M_INIT)))
(check-sat-assuming ((not (= (select REGFILE_INIT GEN7) (select (ite (ite (= GEN8 (ite (= GEN9 (ite (= GEN10 (ite CLOCK_INIT GEN1 GEN2)) GEN11 GEN12)) GEN13 (select (ite (ite (= GEN3 BDEST_S2M_INIT) false true) (store REGFILE_INIT BDEST_S2M_INIT GEN4) REGFILE_INIT) (ite CLOCK_INIT GEN1 GEN2)))) false true) (ite (ite CLOCK_INIT false true) (store (ite (ite (= GEN3 BDEST_S2M_INIT) false true) (store REGFILE_INIT BDEST_S2M_INIT GEN4) REGFILE_INIT) GEN5 GEN6) (ite (ite (= GEN3 BDEST_S2M_INIT) false true) (store REGFILE_INIT BDEST_S2M_INIT GEN4) REGFILE_INIT)) (store (ite (ite CLOCK_INIT false true) (store (ite (ite (= GEN3 BDEST_S2M_INIT) false true) (store REGFILE_INIT BDEST_S2M_INIT GEN4) REGFILE_INIT) GEN5 GEN6) (ite (ite (= GEN3 BDEST_S2M_INIT) false true) (store REGFILE_INIT BDEST_S2M_INIT GEN4) REGFILE_INIT)) GEN14 GEN15)) GEN16)))))
(get-model)