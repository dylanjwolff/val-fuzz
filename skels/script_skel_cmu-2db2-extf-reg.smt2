(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const GEN12 Int)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 String)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 String)
(set-option :strings-exp true)
(declare-fun s () String)
(assert (and (not (not (= (ite (= (str.indexof s GEN1 GEN2) (- GEN3)) GEN4 GEN5) GEN6))) (not (not (= (ite (= (str.indexof s GEN7 GEN8) GEN9) GEN10 GEN11) GEN12)))))
(assert (= BAV1 (and (not (not (= (ite (= (str.indexof s GEN1 GEN2) (- GEN3)) GEN4 GEN5) GEN6))) (not (not (= (ite (= (str.indexof s GEN7 GEN8) GEN9) GEN10 GEN11) GEN12))))))
(assert (= BAV2 (= (ite (= (str.indexof s GEN1 GEN2) (- GEN3)) GEN4 GEN5) GEN6)))
(assert (= BAV3 (= (str.indexof s GEN1 GEN2) (- GEN3))))
(assert (= BAV4 (= (ite (= (str.indexof s GEN7 GEN8) GEN9) GEN10 GEN11) GEN12)))
(assert (= BAV5 (= (str.indexof s GEN7 GEN8) GEN9)))
(check-sat)
(get-model)