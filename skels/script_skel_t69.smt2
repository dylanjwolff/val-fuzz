(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const GEN16 Int)
(declare-const GEN15 Int)
(declare-const GEN14 Int)
(declare-const GEN13 Int)
(declare-const GEN12 Int)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-const x Int)
(declare-const y Int)
(declare-const z Int)
(declare-fun f (Int Int) Int)
(declare-fun p (Bool) Bool)
(declare-fun q (Int) Bool)
(assert (= x GEN1))
(assert (= y (+ x GEN2)))
(assert (= z y))
(assert (>= (f GEN3 GEN4) GEN5))
(assert (= (f x z) GEN6))
(assert (or (p (>= (f GEN7 GEN8) GEN9)) (= (f GEN10 GEN11) GEN12)))
(assert (q GEN13))
(assert (not (q GEN14)))
(assert (or (p (q GEN15)) (p (q GEN16))))
(apply propagate-values)
(assert (= BAV1 (= x GEN1)))
(assert (= BAV2 (= y (+ x GEN2))))
(assert (= BAV3 (= z y)))
(assert (= BAV4 (>= (f GEN3 GEN4) GEN5)))
(assert (= BAV5 (= (f x z) GEN6)))
(assert (= BAV6 (or (p (>= (f GEN7 GEN8) GEN9)) (= (f GEN10 GEN11) GEN12))))
(assert (= BAV7 (>= (f GEN7 GEN8) GEN9)))
(assert (= BAV8 (= (f GEN10 GEN11) GEN12)))
(assert (= BAV9 (or (p (q GEN15)) (p (q GEN16)))))