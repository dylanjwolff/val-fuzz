(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const BAV23 Bool)
(declare-const BAV24 Bool)
(declare-const BAV25 Bool)
(declare-const BAV26 Bool)
(declare-const BAV27 Bool)
(declare-const BAV28 Bool)
(declare-const BAV29 Bool)
(declare-const BAV30 Bool)
(declare-const BAV31 Bool)
(declare-const BAV32 Bool)
(declare-const BAV33 Bool)
(declare-const BAV34 Bool)
(declare-const BAV35 Bool)
(declare-const BAV36 Bool)
(declare-const BAV37 Bool)
(declare-const BAV38 Bool)
(declare-const BAV39 Bool)
(declare-const BAV40 Bool)
(declare-const BAV41 Bool)
(declare-const BAV42 Bool)
(declare-const BAV43 Bool)
(declare-const BAV44 Bool)
(declare-const BAV45 Bool)
(declare-const BAV46 Bool)
(declare-const BAV47 Bool)
(declare-const BAV48 Bool)
(declare-const BAV49 Bool)
(declare-const BAV50 Bool)
(declare-const BAV51 Bool)
(declare-const BAV52 Bool)
(declare-const BAV53 Bool)
(declare-const BAV54 Bool)
(declare-const BAV55 Bool)
(declare-const BAV56 Bool)
(declare-const BAV57 Bool)
(declare-const BAV58 Bool)
(declare-const BAV59 Bool)
(declare-const BAV60 Bool)
(declare-const BAV61 Bool)
(declare-const BAV62 Bool)
(declare-const BAV63 Bool)
(declare-const BAV64 Bool)
(declare-const BAV65 Bool)
(declare-const BAV66 Bool)
(declare-const BAV67 Bool)
(declare-const BAV68 Bool)
(declare-const BAV69 Bool)
(declare-const BAV70 Bool)
(declare-const BAV71 Bool)
(declare-const BAV72 Bool)
(declare-const BAV73 Bool)
(declare-const BAV74 Bool)
(declare-const BAV75 Bool)
(declare-const BAV76 Bool)
(declare-const BAV77 Bool)
(declare-const BAV78 Bool)
(declare-const BAV79 Bool)
(declare-const BAV80 Bool)
(declare-const BAV81 Bool)
(declare-const BAV82 Bool)
(declare-const BAV83 Bool)
(declare-const BAV84 Bool)
(declare-const BAV85 Bool)
(declare-const BAV86 Bool)
(declare-const BAV87 Bool)
(declare-const BAV88 Bool)
(declare-const BAV89 Bool)
(declare-const BAV90 Bool)
(declare-const BAV91 Bool)
(declare-const BAV92 Bool)
(declare-const BAV93 Bool)
(declare-const BAV94 Bool)
(declare-const BAV95 Bool)
(declare-const BAV96 Bool)
(declare-const BAV97 Bool)
(declare-const BAV98 Bool)
(declare-const BAV99 Bool)
(declare-const BAV100 Bool)
(declare-const BAV101 Bool)
(declare-const BAV102 Bool)
(declare-const BAV103 Bool)
(declare-const BAV104 Bool)
(declare-const BAV105 Bool)
(declare-const BAV106 Bool)
(declare-const BAV107 Bool)
(declare-const BAV108 Bool)
(declare-const BAV109 Bool)
(declare-const BAV110 Bool)
(declare-const BAV111 Bool)
(declare-const BAV112 Bool)
(declare-const BAV113 Bool)
(declare-const BAV114 Bool)
(declare-const BAV115 Bool)
(declare-const BAV116 Bool)
(declare-const BAV117 Bool)
(declare-const BAV118 Bool)
(declare-const BAV119 Bool)
(declare-const BAV120 Bool)
(declare-const BAV121 Bool)
(declare-const BAV122 Bool)
(declare-const BAV123 Bool)
(declare-const BAV124 Bool)
(declare-const BAV125 Bool)
(declare-const BAV126 Bool)
(declare-const BAV127 Bool)
(declare-const BAV128 Bool)
(declare-const BAV129 Bool)
(declare-const BAV130 Bool)
(declare-const BAV131 Bool)
(declare-const BAV132 Bool)
(declare-const BAV133 Bool)
(declare-const BAV134 Bool)
(declare-const BAV135 Bool)
(declare-const BAV136 Bool)
(declare-const BAV137 Bool)
(declare-const BAV138 Bool)
(declare-const BAV139 Bool)
(declare-const BAV140 Bool)
(declare-const BAV141 Bool)
(declare-const BAV142 Bool)
(declare-const BAV143 Bool)
(declare-const BAV144 Bool)
(declare-const BAV145 Bool)
(declare-const BAV146 Bool)
(declare-const BAV147 Bool)
(declare-const BAV148 Bool)
(declare-const BAV149 Bool)
(declare-const BAV150 Bool)
(declare-const BAV151 Bool)
(declare-const BAV152 Bool)
(declare-const BAV153 Bool)
(declare-const BAV154 Bool)
(declare-const BAV155 Bool)
(declare-const BAV156 Bool)
(declare-const BAV157 Bool)
(declare-const BAV158 Bool)
(declare-const BAV159 Bool)
(declare-const BAV160 Bool)
(declare-const BAV161 Bool)
(declare-const BAV162 Bool)
(declare-const BAV163 Bool)
(declare-const BAV164 Bool)
(declare-const BAV165 Bool)
(declare-const BAV166 Bool)
(declare-const BAV167 Bool)
(declare-const BAV168 Bool)
(declare-const BAV169 Bool)
(declare-const BAV170 Bool)
(declare-const BAV171 Bool)
(declare-const BAV172 Bool)
(declare-const BAV173 Bool)
(declare-const BAV174 Bool)
(declare-const BAV175 Bool)
(declare-const BAV176 Bool)
(declare-const BAV177 Bool)
(declare-const BAV178 Bool)
(declare-const BAV179 Bool)
(declare-const BAV180 Bool)
(declare-const BAV181 Bool)
(declare-const BAV182 Bool)
(declare-const BAV183 Bool)
(declare-const BAV184 Bool)
(declare-const BAV185 Bool)
(declare-const BAV186 Bool)
(declare-const BAV187 Bool)
(declare-const BAV188 Bool)
(declare-const BAV189 Bool)
(declare-const BAV190 Bool)
(declare-const BAV191 Bool)
(declare-const BAV192 Bool)
(declare-const BAV193 Bool)
(declare-const BAV194 Bool)
(declare-const BAV195 Bool)
(declare-const BAV196 Bool)
(declare-const BAV197 Bool)
(declare-const BAV198 Bool)
(declare-const BAV199 Bool)
(declare-const BAV200 Bool)
(declare-const BAV201 Bool)
(declare-const BAV202 Bool)
(declare-const BAV203 Bool)
(declare-const BAV204 Bool)
(declare-const BAV205 Bool)
(declare-const BAV206 Bool)
(declare-const BAV207 Bool)
(declare-const BAV208 Bool)
(declare-const BAV209 Bool)
(declare-const BAV210 Bool)
(declare-const BAV211 Bool)
(declare-const BAV212 Bool)
(declare-const BAV213 Bool)
(declare-const BAV214 Bool)
(declare-const BAV215 Bool)
(declare-const BAV216 Bool)
(declare-const BAV217 Bool)
(declare-const BAV218 Bool)
(declare-const BAV219 Bool)
(declare-const GEN154 Real)
(declare-const GEN153 Real)
(declare-const GEN152 Int)
(declare-const GEN151 Int)
(declare-const GEN150 Int)
(declare-const GEN149 Int)
(declare-const GEN148 Int)
(declare-const GEN147 Int)
(declare-const GEN146 Int)
(declare-const GEN145 Int)
(declare-const GEN144 Int)
(declare-const GEN143 Int)
(declare-const GEN142 Int)
(declare-const GEN141 Int)
(declare-const GEN140 Int)
(declare-const GEN139 Int)
(declare-const GEN138 Int)
(declare-const GEN137 Int)
(declare-const GEN136 Int)
(declare-const GEN135 Int)
(declare-const GEN134 Int)
(declare-const GEN133 Int)
(declare-const GEN132 Int)
(declare-const GEN131 Int)
(declare-const GEN130 Int)
(declare-const GEN129 Int)
(declare-const GEN128 Int)
(declare-const GEN127 Int)
(declare-const GEN126 Int)
(declare-const GEN125 Int)
(declare-const GEN124 Int)
(declare-const GEN123 Int)
(declare-const GEN122 Int)
(declare-const GEN121 Int)
(declare-const GEN120 Int)
(declare-const GEN119 Int)
(declare-const GEN118 Int)
(declare-const GEN117 Int)
(declare-const GEN116 Int)
(declare-const GEN115 Int)
(declare-const GEN114 Int)
(declare-const GEN113 Int)
(declare-const GEN112 Int)
(declare-const GEN111 Int)
(declare-const GEN110 Int)
(declare-const GEN109 Int)
(declare-const GEN108 Int)
(declare-const GEN107 Int)
(declare-const GEN106 Int)
(declare-const GEN105 Int)
(declare-const GEN104 Int)
(declare-const GEN103 Int)
(declare-const GEN102 Int)
(declare-const GEN101 Int)
(declare-const GEN100 Int)
(declare-const GEN99 Int)
(declare-const GEN98 Int)
(declare-const GEN97 Int)
(declare-const GEN96 Int)
(declare-const GEN95 Int)
(declare-const GEN94 Int)
(declare-const GEN93 Int)
(declare-const GEN92 Int)
(declare-const GEN91 Int)
(declare-const GEN90 Int)
(declare-const GEN89 Int)
(declare-const GEN88 Int)
(declare-const GEN87 Int)
(declare-const GEN86 Int)
(declare-const GEN85 Int)
(declare-const GEN84 Int)
(declare-const GEN83 Int)
(declare-const GEN82 Int)
(declare-const GEN81 Int)
(declare-const GEN80 Int)
(declare-const GEN79 Int)
(declare-const GEN78 Int)
(declare-const GEN77 Int)
(declare-const GEN76 Int)
(declare-const GEN75 Int)
(declare-const GEN74 Int)
(declare-const GEN73 Int)
(declare-const GEN72 Int)
(declare-const GEN71 Int)
(declare-const GEN70 Int)
(declare-const GEN69 Int)
(declare-const GEN68 Int)
(declare-const GEN67 Int)
(declare-const GEN66 Int)
(declare-const GEN65 Int)
(declare-const GEN64 Int)
(declare-const GEN63 Int)
(declare-const GEN62 Int)
(declare-const GEN61 Int)
(declare-const GEN60 Int)
(declare-const GEN59 Int)
(declare-const GEN58 Int)
(declare-const GEN57 Int)
(declare-const GEN56 Int)
(declare-const GEN55 Int)
(declare-const GEN54 Int)
(declare-const GEN53 Int)
(declare-const GEN52 Int)
(declare-const GEN51 Int)
(declare-const GEN50 Int)
(declare-const GEN49 Int)
(declare-const GEN48 Int)
(declare-const GEN47 Int)
(declare-const GEN46 Int)
(declare-const GEN45 Int)
(declare-const GEN44 Int)
(declare-const GEN43 Int)
(declare-const GEN42 Int)
(declare-const GEN41 Int)
(declare-const GEN40 Int)
(declare-const GEN39 Int)
(declare-const GEN38 Int)
(declare-const GEN37 Int)
(declare-const GEN36 Int)
(declare-const GEN35 Int)
(declare-const GEN34 Int)
(declare-const GEN33 Int)
(declare-const GEN32 Int)
(declare-const GEN31 Int)
(declare-const GEN30 Int)
(declare-const GEN29 Int)
(declare-const GEN28 Int)
(declare-const GEN27 Int)
(declare-const GEN26 Int)
(declare-const GEN25 Int)
(declare-const GEN24 Int)
(declare-const GEN23 Int)
(declare-const GEN22 Int)
(declare-const GEN21 Int)
(declare-const GEN20 Int)
(declare-const GEN19 Int)
(declare-const GEN18 Int)
(declare-const GEN17 Int)
(declare-const GEN16 Int)
(declare-const GEN15 Int)
(declare-const GEN14 Int)
(declare-const GEN13 Int)
(declare-const GEN12 Int)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TV (Int) Bool)
(declare-fun TO (Int) Bool)
(declare-fun between (Int Int Int) Bool)
(declare-fun word (Int) Bool)
(declare-fun WORD_HI () Int)
(declare-fun NULL () Int)
(declare-fun TVM (Int Int) Bool)
(declare-fun Mult (Int Int) Int)
(declare-fun TVM3 (Int Int Int) Bool)
(declare-fun memAddr (Int) Bool)
(declare-fun ?memLo () Int)
(declare-fun ?memHi () Int)
(declare-fun memAddrEx (Int) Bool)
(declare-fun PtrOk (Int) Bool)
(declare-fun Aligned (Int) Bool)
(declare-fun ?SegmentDescriptorSize () Int)
(declare-fun ?SegmentDescriptorTypeData () Int)
(declare-fun ?SegmentDescriptorTypeCode () Int)
(declare-sort T@SegmentDescriptor 0)
(declare-fun ValidSegmentDescriptor (T@SegmentDescriptor) Bool)
(declare-fun SegmentDescriptorGetType (T@SegmentDescriptor) Int)
(declare-fun SegmentDescriptorWord0 (T@SegmentDescriptor) Int)
(declare-fun q@or (Int Int) Int)
(declare-fun shl (Int Int) Int)
(declare-fun SegmentDescriptorGetBase (T@SegmentDescriptor) Int)
(declare-fun SegmentDescriptorWord1 (T@SegmentDescriptor) Int)
(declare-fun q@and (Int Int) Int)
(declare-fun shr (Int Int) Int)
(declare-fun ValidSegmentSelector (Int Int) Bool)
(declare-fun ValidGdtDescriptor (Int T@SegmentDescriptor Int Int (Array Int Int)) Bool)
(declare-fun GdtParamsWord0 (Int Int) Int)
(declare-fun GdtParamsWord1 (Int Int) Int)
(declare-fun ?NIdt () Int)
(declare-fun IsHandlerForEntry (Int Int) Bool)
(declare-fun ?FatalHandler () Int)
(declare-fun ?CodeSegmentSelector () Int)
(declare-fun ?Mask16Hi () Int)
(declare-fun ?Mask16Lo () Int)
(declare-fun ?IdtWord4Lo () Int)
(declare-fun IdtWord0 (Int) Int)
(declare-fun IdtWord4 (Int) Int)
(declare-fun ?idtHi () Int)
(declare-fun ?idtLo () Int)
(declare-fun IdtMemOk ((Array Int Bool)) Bool)
(declare-fun PicOk ((Array Int Int)) Bool)
(declare-fun TimerOk (Int) Bool)
(declare-fun ?VgaTextLo () Int)
(declare-fun ?VgaTextHi () Int)
(declare-fun vgaAddr2 (Int) Bool)
(declare-fun ?RoBiosLo () Int)
(declare-fun ?RoBiosHi () Int)
(declare-fun inBiosRo (Int) Bool)
(declare-fun MatchesRsdp (Int) Bool)
(declare-fun ro32 (Int) Int)
(declare-fun ByteSum (Int Int) Int)
(declare-fun MatchesDmar (Int) Bool)
(declare-fun MatchesDrhd (Int) Bool)
(declare-fun roU16 (Int) Int)
(declare-fun MaybeDrhd (Int Int) Bool)
(declare-fun ?DrhdPtr () (Array Int Int))
(declare-fun inRo (Int Int) Bool)
(declare-fun ?DmarPtr () Int)
(declare-fun ?DmarLen () Int)
(declare-fun DrhdInv (Int Int) Bool)
(declare-fun ?DrhdRegs () (Array Int Int))
(declare-fun ?iomHi () Int)
(declare-fun ?iomLo () Int)
(declare-fun ?dmaHi () Int)
(declare-fun ?dmaLo () Int)
(declare-fun iomAddr (Int) Bool)
(declare-fun IsDmaPage (Int) Bool)
(declare-fun IoPageTableEntry (Int Int) Bool)
(declare-fun IoPageTable ((Array Int Int) Int) Bool)
(declare-fun IoPageDirEntry ((Array Int Int) Int Int) Bool)
(declare-fun IoPageDir ((Array Int Int) Int) Bool)
(declare-fun IoPageDirStub ((Array Int Int) Int) Bool)
(declare-fun IoContextEntry ((Array Int Int) Int Int Int Int) Bool)
(declare-fun IoContextTable ((Array Int Int) Int) Bool)
(declare-fun IoRootEntry ((Array Int Int) Int Int Int Int) Bool)
(declare-fun IoRootTable ((Array Int Int) Int) Bool)
(declare-fun IsValidPciId (Int) Bool)
(declare-fun IsValidPciOffset (Int) Bool)
(declare-fun ?FFFFFFFF () Int)
(declare-fun PciVendorId (Int) Int)
(declare-fun PciHeaderType (Int) Int)
(declare-sort T@SegmentRegister 0)
(declare-fun SegmentRegisterGetIndex (T@SegmentRegister) Int)
(declare-fun SegmentRegisterCreate (Int T@SegmentDescriptor) T@SegmentRegister)
(declare-fun SegmentRegisterGetDescriptor (T@SegmentRegister) T@SegmentDescriptor)
(declare-fun SegmentDescriptorCreate (Int Int) T@SegmentDescriptor)
(declare-fun FlagsCmp (Int Int Int) Bool)
(declare-fun Je (Int) Bool)
(declare-fun Jne (Int) Bool)
(declare-fun Jbe (Int) Bool)
(declare-fun Jb (Int) Bool)
(declare-fun Jae (Int) Bool)
(declare-fun Ja (Int) Bool)
(declare-sort T@opn 0)
(declare-fun OpnOk ((Array Int Int) T@opn) Bool)
(declare-fun OpnReg (Int) T@opn)
(declare-fun OpnMem (Int) T@opn)
(declare-fun EvalOpn ((Array Int Int) T@opn) Int)
(declare-fun UpdateOpn ((Array Int Int) T@opn Int) (Array Int Int))
(declare-fun MapStacksToMem ((Array Int Int)) (Array Int (Array Int Int)))
(declare-fun %lbl%+6010 () Bool)
(declare-fun %lbl%+6329 () Bool)
(assert (forall ((val Int)) (! (= (TV val) true) :qid |baseibpl.14:28| :skolemid |0| :pattern ((TV val)))))
(assert (forall ((wordOffset Int)) (! (= (TO wordOffset) true) :qid |baseibpl.18:28| :skolemid |1| :pattern ((TO wordOffset)))))
(assert (forall ((i1 Int)(i2 Int)(x Int)) (! (= (between i1 i2 x) (and (<= i1 x) (< x i2))) :qid |baseibpl.25:18| :skolemid |2| :pattern ((between i1 i2 x)))))
(assert (forall ((val@@0 Int)) (! (= (word val@@0) (and (<= GEN1 val@@0) (< val@@0 WORD_HI))) :qid |baseibpl.30:15| :skolemid |3| :pattern ((word val@@0)))))
(assert (= NULL GEN2))
(assert (forall ((a Int)(b Int)) (! (= (TVM a b) true) :qid |baseibpl.45:29| :skolemid |4| :pattern ((TVM a b)))))
(assert (forall ((a@@0 Int)(b@@0 Int)) (! (= (Mult a@@0 b@@0) (* a@@0 b@@0)) :qid |baseibpl.47:15| :skolemid |5| :pattern ((TVM a@@0 b@@0)))))
(assert (forall ((a@@1 Int)(b1 Int)(b2 Int)) (! (= (TVM3 a@@1 b1 b2) true) :qid |baseibpl.49:30| :skolemid |6| :pattern ((TVM3 a@@1 b1 b2)))))
(assert (forall ((i Int)) (! (= (memAddr i) (and (<= ?memLo i) (< i ?memHi))) :qid |memoryib.18:18| :skolemid |7| :pattern ((memAddr i)))))
(assert (forall ((i@@0 Int)) (! (= (memAddrEx i@@0) (and (<= ?memLo i@@0) (<= i@@0 ?memHi))) :qid |memoryib.19:20| :skolemid |8| :pattern ((memAddrEx i@@0)))))
(assert (forall ((ptr Int)) (! (= (PtrOk ptr) (and (memAddr ptr) (Aligned ptr))) :qid |assembly.36:16| :skolemid |9| :pattern ((PtrOk ptr)))))
(assert (= ?SegmentDescriptorSize GEN3))
(assert (= ?SegmentDescriptorTypeData GEN4))
(assert (= ?SegmentDescriptorTypeCode GEN5))
(assert (forall (($descriptor T@SegmentDescriptor)) (! (= (ValidSegmentDescriptor $descriptor) (or (= (SegmentDescriptorGetType $descriptor) ?SegmentDescriptorTypeData) (= (SegmentDescriptorGetType $descriptor) ?SegmentDescriptorTypeCode))) :qid |assembly.287:33| :skolemid |10| :pattern ((ValidSegmentDescriptor $descriptor)))))
(assert (forall (($descriptor@@0 T@SegmentDescriptor)) (! (= (SegmentDescriptorWord0 $descriptor@@0) (q@or (shl (SegmentDescriptorGetBase $descriptor@@0) GEN6) GEN7)) :qid |assembly.293:33| :skolemid |11| :pattern ((SegmentDescriptorWord0 $descriptor@@0)))))
(assert (forall (($descriptor@@1 T@SegmentDescriptor)) (! (= (SegmentDescriptorWord1 $descriptor@@1) (q@or (q@and (SegmentDescriptorGetBase $descriptor@@1) GEN8) (q@or (shr (q@and (SegmentDescriptorGetBase $descriptor@@1) GEN9) GEN10) (q@or (shl GEN11 GEN12) (SegmentDescriptorGetType $descriptor@@1))))) :qid |assembly.299:33| :skolemid |12| :pattern ((SegmentDescriptorWord1 $descriptor@@1)))))
(assert (forall (($register Int)($index Int)) (! (= (ValidSegmentSelector $register $index) (= $register (shl $index GEN13))) :qid |assembly.314:31| :skolemid |13| :pattern ((ValidSegmentSelector $register $index)))))
(assert (forall (($index@@0 Int)($descriptor@@2 T@SegmentDescriptor)($GdtBase Int)($GdtLen Int)($Mem (Array Int Int))) (! (= (ValidGdtDescriptor $index@@0 $descriptor@@2 $GdtBase $GdtLen $Mem) (and (> $index@@0 GEN14) (< $index@@0 $GdtLen) (ValidSegmentDescriptor $descriptor@@2) (= (SegmentDescriptorWord0 $descriptor@@2) (select $Mem (+ $GdtBase (* $index@@0 ?SegmentDescriptorSize)))) (= (SegmentDescriptorWord1 $descriptor@@2) (select $Mem (+ (+ $GdtBase (* $index@@0 ?SegmentDescriptorSize)) GEN15))))) :qid |assembly.321:29| :skolemid |14| :pattern ((ValidGdtDescriptor $index@@0 $descriptor@@2 $GdtBase $GdtLen $Mem)))))
(assert (forall (($base Int)($len Int)) (! (= (GdtParamsWord0 $base $len) (q@or (shl $len GEN16) (shr $base GEN17))) :qid |assembly.352:25| :skolemid |15| :pattern ((GdtParamsWord0 $base $len)))))
(assert (forall (($base@@0 Int)($len@@0 Int)) (! (= (GdtParamsWord1 $base@@0 $len@@0) (shl $base@@0 GEN18)) :qid |assembly.357:25| :skolemid |16| :pattern ((GdtParamsWord1 $base@@0 $len@@0)))))
(assert (= ?NIdt GEN19))
(assert (forall (($entry Int)($handler Int)) (! (= (IsHandlerForEntry $entry $handler) (= $handler ?FatalHandler)) :qid |Interrup.25:28| :skolemid |17| :pattern ((IsHandlerForEntry $entry $handler)))))
(assert (= ?CodeSegmentSelector GEN20))
(assert (= ?Mask16Hi (+ GEN21 GEN22)))
(assert (= ?Mask16Lo GEN23))
(assert (= ?IdtWord4Lo GEN24))
(assert (forall ((handler Int)) (! (= (IdtWord0 handler) (q@or (shl ?CodeSegmentSelector GEN25) (q@and handler ?Mask16Lo))) :qid |Interrup.39:19| :skolemid |18| :pattern ((IdtWord0 handler)))))
(assert (forall ((handler@@0 Int)) (! (= (IdtWord4 handler@@0) (q@or (q@and handler@@0 ?Mask16Hi) ?IdtWord4Lo)) :qid |Interrup.40:19| :skolemid |19| :pattern ((IdtWord4 handler@@0)))))
(assert (= ?idtHi (+ ?idtLo (* ?NIdt GEN26))))
(assert (forall (($IdtMemOk (Array Int Bool))) (! (= (IdtMemOk $IdtMemOk) (forall ((i@@1 Int)) (! (=> (TV i@@1) (=> (and (<= GEN27 i@@1) (< i@@1 ?NIdt)) (and (select $IdtMemOk (+ ?idtLo (* GEN28 i@@1))) (select $IdtMemOk (+ (+ ?idtLo (* GEN29 i@@1)) GEN30))))) :qid |Interrup.68:11| :skolemid |20| :pattern ((TV i@@1))))) :qid |Interrup.66:19| :skolemid |21| :pattern ((IdtMemOk $IdtMemOk)))))
(assert (forall (($PicSeq (Array Int Int))) (! (= (PicOk $PicSeq) (and (>= (select $PicSeq GEN31) GEN32) (>= (select $PicSeq GEN33) GEN34))) :qid |Interrup.94:16| :skolemid |22| :pattern ((PicOk $PicSeq)))))
(assert (forall (($TimerSeq Int)) (! (= (TimerOk $TimerSeq) (= $TimerSeq GEN35)) :qid |Interrup.128:18| :skolemid |23| :pattern ((TimerOk $TimerSeq)))))
(assert (= ?VgaTextLo GEN36))
(assert (= ?VgaTextHi GEN37))
(assert (forall ((i@@2 Int)) (! (= (vgaAddr2 i@@2) (and (<= ?VgaTextLo i@@2) (<= i@@2 (- ?VgaTextHi GEN38)))) :qid |Ioibpl.16:19| :skolemid |24| :pattern ((vgaAddr2 i@@2)))))
(assert (= ?RoBiosLo GEN39))
(assert (= ?RoBiosHi GEN40))
(assert (forall ((i@@3 Int)) (! (= (inBiosRo i@@3) (and (<= ?RoBiosLo i@@3) (< i@@3 ?RoBiosHi))) :qid |Ioibpl.75:19| :skolemid |25| :pattern ((inBiosRo i@@3)))))
(assert (forall ((ptr@@0 Int)) (! (= (MatchesRsdp ptr@@0) (and (= (ro32 (+ ptr@@0 GEN41)) GEN42) (= (ro32 (+ ptr@@0 GEN43)) GEN44) (= (q@and (ByteSum ptr@@0 (+ ptr@@0 GEN45)) GEN46) GEN47))) :qid |Ioibpl.79:22| :skolemid |26| :pattern ((MatchesRsdp ptr@@0)))))
(assert (forall ((ptr@@1 Int)) (! (= (MatchesDmar ptr@@1) (= (ro32 (+ ptr@@1 GEN48)) GEN49)) :qid |Ioibpl.86:22| :skolemid |27| :pattern ((MatchesDmar ptr@@1)))))
(assert (forall ((ptr@@2 Int)) (! (= (MatchesDrhd ptr@@2) (= (roU16 ptr@@2) GEN50)) :qid |Ioibpl.91:22| :skolemid |28| :pattern ((MatchesDrhd ptr@@2)))))
(assert (forall ((ptr@@3 Int)(entry Int)) (! (= (MaybeDrhd ptr@@3 entry) (and (= (select ?DrhdPtr entry) ptr@@3) (inRo (+ ptr@@3 GEN51) GEN52) (inRo (+ ptr@@3 GEN53) GEN54) (<= (+ ptr@@3 (roU16 (+ ptr@@3 GEN55))) (+ ?DmarPtr ?DmarLen)))) :qid |Ioibpl.96:20| :skolemid |29| :pattern ((MaybeDrhd ptr@@3 entry)))))
(assert (forall ((ptr@@4 Int)(entry@@0 Int)) (! (= (DrhdInv ptr@@4 entry@@0) (and (inRo (+ ptr@@4 GEN56) GEN57) (inRo (+ ptr@@4 GEN58) GEN59) (=> (= (ro32 (+ ptr@@4 GEN60)) GEN61) (= (select ?DrhdRegs entry@@0) (ro32 (+ (select ?DrhdPtr entry@@0) GEN62)))))) :qid |Ioibpl.104:18| :skolemid |30| :pattern ((DrhdInv ptr@@4 entry@@0)))))
(assert (= ?iomHi (+ ?iomLo GEN63)))
(assert (= ?dmaHi (+ ?dmaLo (* (* GEN64 GEN65) GEN66))))
(assert (forall ((i@@4 Int)) (! (= (iomAddr i@@4) (and (<= ?iomLo i@@4) (< i@@4 ?iomHi))) :qid |Ioibpl.152:18| :skolemid |33| :pattern ((iomAddr i@@4)))))
(assert (forall ((ptr@@5 Int)) (! (= (IsDmaPage ptr@@5) (and (= (q@and ptr@@5 GEN67) GEN68) (<= ?dmaLo ptr@@5) (<= (+ ptr@@5 GEN69) ?dmaHi))) :qid |Ioibpl.194:20| :skolemid |35| :pattern ((IsDmaPage ptr@@5)))))
(assert (forall ((w0 Int)(w1 Int)) (! (= (IoPageTableEntry w0 w1) (and (= w1 GEN70) (or (= w0 GEN71) (IsDmaPage (- w0 GEN72))))) :qid |Ioibpl.200:27| :skolemid |36| :pattern ((IoPageTableEntry w0 w1)))))
(assert (forall (($IomMem (Array Int Int))(ptr@@6 Int)) (! (= (IoPageTable $IomMem ptr@@6) (and (= (q@and ptr@@6 GEN73) GEN74) (forall ((i@@5 Int)) (! (=> (and (TV i@@5) (<= GEN75 i@@5) (< i@@5 GEN76)) (IoPageTableEntry (select $IomMem (+ ptr@@6 (* GEN77 i@@5))) (select $IomMem (+ (+ ptr@@6 (* GEN78 i@@5)) GEN79)))) :qid |Ioibpl.208:13| :skolemid |37| :pattern ((TV i@@5)))))) :qid |Ioibpl.205:37| :skolemid |38| :pattern ((IoPageTable $IomMem ptr@@6)))))
(assert (forall (($IomMem@@0 (Array Int Int))(w0@@0 Int)(w1@@0 Int)) (! (= (IoPageDirEntry $IomMem@@0 w0@@0 w1@@0) (and (= w1@@0 GEN80) (or (= w0@@0 GEN81) (IoPageTable $IomMem@@0 (- w0@@0 GEN82))))) :qid |Ioibpl.212:25| :skolemid |39| :pattern ((IoPageDirEntry $IomMem@@0 w0@@0 w1@@0)))))
(assert (forall (($IomMem@@1 (Array Int Int))(ptr@@7 Int)) (! (= (IoPageDir $IomMem@@1 ptr@@7) (and (= (q@and ptr@@7 GEN83) GEN84) (forall ((i@@6 Int)) (! (=> (and (TV i@@6) (<= GEN85 i@@6) (< i@@6 GEN86)) (IoPageDirEntry $IomMem@@1 (select $IomMem@@1 (+ ptr@@7 (* GEN87 i@@6))) (select $IomMem@@1 (+ (+ ptr@@7 (* GEN88 i@@6)) GEN89)))) :qid |Ioibpl.220:13| :skolemid |40| :pattern ((TV i@@6)))))) :qid |Ioibpl.217:35| :skolemid |41| :pattern ((IoPageDir $IomMem@@1 ptr@@7)))))
(assert (forall (($IomMem@@2 (Array Int Int))(ptr@@8 Int)) (! (= (IoPageDirStub $IomMem@@2 ptr@@8) (and (= (q@and ptr@@8 GEN90) GEN91) (= (select $IomMem@@2 (+ ptr@@8 GEN92)) GEN93) (forall ((i@@7 Int)) (! (=> (and (TV i@@7) (<= GEN94 i@@7) (< i@@7 GEN95)) (and (= (select $IomMem@@2 (+ ptr@@8 (* GEN96 i@@7))) GEN97) (= (select $IomMem@@2 (+ (+ ptr@@8 (* GEN98 i@@7)) GEN99)) GEN100))) :qid |Ioibpl.228:13| :skolemid |42| :pattern ((TV i@@7)))))) :qid |Ioibpl.224:39| :skolemid |43| :pattern ((IoPageDirStub $IomMem@@2 ptr@@8)))))
(assert (forall (($IomMem@@3 (Array Int Int))(w0@@1 Int)(w1@@1 Int)(w2 Int)(w3 Int)) (! (= (IoContextEntry $IomMem@@3 w0@@1 w1@@1 w2 w3) (and (= w3 GEN101) (= w2 GEN102) (= w1@@1 GEN103) (IoPageDirStub $IomMem@@3 (- w0@@1 GEN104)) (IoPageDirStub $IomMem@@3 (- (select $IomMem@@3 (- w0@@1 GEN105)) GEN106)) (IoPageDir $IomMem@@3 (- (select $IomMem@@3 (- (select $IomMem@@3 (- w0@@1 GEN107)) GEN108)) GEN109)))) :qid |Ioibpl.232:25| :skolemid |44| :pattern ((IoContextEntry $IomMem@@3 w0@@1 w1@@1 w2 w3)))))
(assert (forall (($IomMem@@4 (Array Int Int))(ptr@@9 Int)) (! (= (IoContextTable $IomMem@@4 ptr@@9) (and (= (q@and ptr@@9 GEN110) GEN111) (forall ((i@@8 Int)) (! (=> (and (TV i@@8) (<= GEN112 i@@8) (< i@@8 GEN113)) (IoContextEntry $IomMem@@4 (select $IomMem@@4 (+ (+ ptr@@9 (* GEN114 i@@8)) GEN115)) (select $IomMem@@4 (+ (+ ptr@@9 (* GEN116 i@@8)) GEN117)) (select $IomMem@@4 (+ (+ ptr@@9 (* GEN118 i@@8)) GEN119)) (select $IomMem@@4 (+ (+ ptr@@9 (* GEN120 i@@8)) GEN121)))) :qid |Ioibpl.243:13| :skolemid |45| :pattern ((TV i@@8)))))) :qid |Ioibpl.240:40| :skolemid |46| :pattern ((IoContextTable $IomMem@@4 ptr@@9)))))
(assert (forall (($IomMem@@5 (Array Int Int))(w0@@2 Int)(w1@@2 Int)(w2@@0 Int)(w3@@0 Int)) (! (= (IoRootEntry $IomMem@@5 w0@@2 w1@@2 w2@@0 w3@@0) (and (= w3@@0 GEN122) (= w2@@0 GEN123) (= w1@@2 GEN124) (IoContextTable $IomMem@@5 (- w0@@2 GEN125)))) :qid |Ioibpl.251:22| :skolemid |47| :pattern ((IoRootEntry $IomMem@@5 w0@@2 w1@@2 w2@@0 w3@@0)))))
(assert (forall (($IomMem@@6 (Array Int Int))(ptr@@10 Int)) (! (= (IoRootTable $IomMem@@6 ptr@@10) (and (= (q@and ptr@@10 GEN126) GEN127) (forall ((i@@9 Int)) (! (=> (and (TV i@@9) (<= GEN128 i@@9) (< i@@9 GEN129)) (IoRootEntry $IomMem@@6 (select $IomMem@@6 (+ (+ ptr@@10 (* GEN130 i@@9)) GEN131)) (select $IomMem@@6 (+ (+ ptr@@10 (* GEN132 i@@9)) GEN133)) (select $IomMem@@6 (+ (+ ptr@@10 (* GEN134 i@@9)) GEN135)) (select $IomMem@@6 (+ (+ ptr@@10 (* GEN136 i@@9)) GEN137)))) :qid |Ioibpl.259:13| :skolemid |48| :pattern ((TV i@@9)))))) :qid |Ioibpl.256:37| :skolemid |49| :pattern ((IoRootTable $IomMem@@6 ptr@@10)))))
(assert (forall ((id Int)) (! (= (IsValidPciId id) (and (<= GEN138 id) (< id GEN139))) :qid |Ioibpl.271:23| :skolemid |50| :pattern ((IsValidPciId id)))))
(assert (forall ((o Int)) (! (= (IsValidPciOffset o) (and (<= GEN140 o) (< o GEN141) (Aligned o))) :qid |Ioibpl.274:27| :skolemid |51| :pattern ((IsValidPciOffset o)))))
(assert (= ?FFFFFFFF (+ (+ GEN142 GEN143) GEN144)))
(assert (forall ((config0 Int)) (! (= (PciVendorId config0) (q@and config0 GEN145)) :qid |Ioibpl.302:22| :skolemid |52| :pattern ((PciVendorId config0)))))
(assert (forall ((config12 Int)) (! (= (PciHeaderType config12) (q@and (shr config12 GEN146) GEN147)) :qid |Ioibpl.303:24| :skolemid |53| :pattern ((PciHeaderType config12)))))
(assert (>= WORD_HI GEN148))
(assert (forall ((a@@2 Int)(b1@@0 Int)(b2@@0 Int)) (! (= (Mult a@@2 (+ b1@@0 b2@@0)) (* a@@2 (+ b1@@0 b2@@0))) :qid |baseaxio.13:15| :skolemid |54| :pattern ((TVM3 a@@2 b1@@0 b2@@0)))))
(assert (forall ((i@@10 Int)(j Int)) (! (=> (and (TV i@@10) (TO j)) (= (Aligned i@@10) (Aligned (+ i@@10 (* GEN149 j))))) :qid |memoryax.10:15| :skolemid |55| :pattern ((TV i@@10) (TO j)))))
(assert (< NULL ?memLo))
(assert (<= ?memLo ?memHi))
(assert (< ?memHi WORD_HI))
(assert (Aligned ?memLo))
(assert (Aligned ?memHi))
(assert (forall (($index@@1 Int)($descriptor@@3 T@SegmentDescriptor)) (! (= (SegmentRegisterGetIndex (SegmentRegisterCreate $index@@1 $descriptor@@3)) $index@@1) :qid |assembly.29:15| :skolemid |56| :pattern ((SegmentRegisterGetIndex (SegmentRegisterCreate $index@@1 $descriptor@@3))))))
(assert (forall (($index@@2 Int)($descriptor@@4 T@SegmentDescriptor)) (! (= (SegmentRegisterGetDescriptor (SegmentRegisterCreate $index@@2 $descriptor@@4)) $descriptor@@4) :qid |assembly.33:15| :skolemid |57| :pattern ((SegmentRegisterGetDescriptor (SegmentRegisterCreate $index@@2 $descriptor@@4))))))
(assert (forall (($base@@1 Int)($type Int)) (! (= (SegmentDescriptorGetBase (SegmentDescriptorCreate $base@@1 $type)) $base@@1) :qid |assembly.37:15| :skolemid |58| :pattern ((SegmentDescriptorGetBase (SegmentDescriptorCreate $base@@1 $type))))))
(assert (forall (($base@@2 Int)($type@@0 Int)) (! (= (SegmentDescriptorGetType (SegmentDescriptorCreate $base@@2 $type@@0)) $type@@0) :qid |assembly.39:15| :skolemid |59| :pattern ((SegmentDescriptorGetType (SegmentDescriptorCreate $base@@2 $type@@0))))))
(assert (forall ((f Int)(x@@0 Int)(y Int)) (! (=> (FlagsCmp f x@@0 y) (= (Je f) (= x@@0 y))) :qid |assembly.46:15| :skolemid |60| :pattern ((FlagsCmp f x@@0 y) (Je f)))))
(assert (forall ((f@@0 Int)(x@@1 Int)(y@@0 Int)) (! (=> (FlagsCmp f@@0 x@@1 y@@0) (= (Jne f@@0) (not (= x@@1 y@@0)))) :qid |assembly.47:15| :skolemid |61| :pattern ((FlagsCmp f@@0 x@@1 y@@0) (Jne f@@0)))))
(assert (forall ((f@@1 Int)(x@@2 Int)(y@@1 Int)) (! (=> (FlagsCmp f@@1 x@@2 y@@1) (= (Jbe f@@1) (<= x@@2 y@@1))) :qid |assembly.48:15| :skolemid |62| :pattern ((FlagsCmp f@@1 x@@2 y@@1) (Jbe f@@1)))))
(assert (forall ((f@@2 Int)(x@@3 Int)(y@@2 Int)) (! (=> (FlagsCmp f@@2 x@@3 y@@2) (= (Jb f@@2) (< x@@3 y@@2))) :qid |assembly.49:15| :skolemid |63| :pattern ((FlagsCmp f@@2 x@@3 y@@2) (Jb f@@2)))))
(assert (forall ((f@@3 Int)(x@@4 Int)(y@@3 Int)) (! (=> (FlagsCmp f@@3 x@@4 y@@3) (= (Jae f@@3) (>= x@@4 y@@3))) :qid |assembly.50:15| :skolemid |64| :pattern ((FlagsCmp f@@3 x@@4 y@@3) (Jae f@@3)))))
(assert (forall ((f@@4 Int)(x@@5 Int)(y@@4 Int)) (! (=> (FlagsCmp f@@4 x@@5 y@@4) (= (Ja f@@4) (> x@@5 y@@4))) :qid |assembly.51:15| :skolemid |65| :pattern ((FlagsCmp f@@4 x@@5 y@@4) (Ja f@@4)))))
(assert (forall ((Mem (Array Int Int))(reg Int)) (! (OpnOk Mem (OpnReg reg)) :qid |assembly.56:15| :skolemid |66| :pattern ((OpnOk Mem (OpnReg reg))))))
(assert (forall ((Mem@@0 (Array Int Int))(ptr@@11 Int)) (! (=> (PtrOk ptr@@11) (OpnOk Mem@@0 (OpnMem ptr@@11))) :qid |assembly.57:15| :skolemid |67| :pattern ((OpnOk Mem@@0 (OpnMem ptr@@11))))))
(assert (forall ((Mem@@1 (Array Int Int))(reg@@0 Int)) (! (= (EvalOpn Mem@@1 (OpnReg reg@@0)) reg@@0) :qid |assembly.58:15| :skolemid |68| :pattern ((EvalOpn Mem@@1 (OpnReg reg@@0))))))
(assert (forall ((Mem@@2 (Array Int Int))(ptr@@12 Int)) (! (= (EvalOpn Mem@@2 (OpnMem ptr@@12)) (select Mem@@2 ptr@@12)) :qid |assembly.59:15| :skolemid |69| :pattern ((EvalOpn Mem@@2 (OpnMem ptr@@12))))))
(assert (forall ((Mem@@3 (Array Int Int))(reg@@1 Int)(v Int)) (! (= (UpdateOpn Mem@@3 (OpnReg reg@@1) v) Mem@@3) :qid |assembly.60:15| :skolemid |70| :pattern ((UpdateOpn Mem@@3 (OpnReg reg@@1) v)))))
(assert (forall ((Mem@@4 (Array Int Int))(ptr@@13 Int)(v@@0 Int)) (! (= (UpdateOpn Mem@@4 (OpnMem ptr@@13) v@@0) (store Mem@@4 ptr@@13 v@@0)) :qid |assembly.61:15| :skolemid |71| :pattern ((UpdateOpn Mem@@4 (OpnMem ptr@@13) v@@0)))))
(assert (forall (($Mem@@0 (Array Int Int))(s Int)(i@@11 Int)) (! (= (select (select (MapStacksToMem $Mem@@0) s) i@@11) (select $Mem@@0 i@@11)) :qid |Utilibpl.20:15| :skolemid |72| :pattern ((select (select (MapStacksToMem $Mem@@0) s) i@@11)))))
(assert (= WORD_HI (+ (+ GEN150 GEN151) GEN152)))
(push 1)
(set-info :boogie-vc-id Overflow)
(assert (not (=> (! (and %lbl%+6329 true) :lblpos GEN154) (=> (! (and %lbl%+6010 true) :lblpos GEN153) true))))
(assert (= BAV1 (and (tickleBool true) (tickleBool false))))
(assert (= BAV2 (forall ((val Int)) (= (TV val) true))))
(assert (= BAV3 (forall ((wordOffset Int)) (= (TO wordOffset) true))))
(assert (= BAV4 (forall ((i1 Int)(i2 Int)(x Int)) (= (between i1 i2 x) (and (<= i1 x) (< x i2))))))
(assert (= BAV5 (forall ((i1 Int)(i2 Int)(x Int)) (and (<= i1 x) (< x i2)))))
(assert (= BAV6 (forall ((i1 Int)(i2 Int)(x Int)) (<= i1 x))))
(assert (= BAV7 (forall ((i1 Int)(i2 Int)(x Int)) (< x i2))))
(assert (= BAV8 (forall ((val@@0 Int)) (= (word val@@0) (and (<= GEN1 val@@0) (< val@@0 WORD_HI))))))
(assert (= BAV9 (forall ((val@@0 Int)) (and (<= GEN1 val@@0) (< val@@0 WORD_HI)))))
(assert (= BAV10 (forall ((val@@0 Int)) (<= GEN1 val@@0))))
(assert (= BAV11 (forall ((val@@0 Int)) (< val@@0 WORD_HI))))
(assert (= BAV12 (= NULL GEN2)))
(assert (= BAV13 (forall ((a Int)(b Int)) (= (TVM a b) true))))
(assert (= BAV14 (forall ((a@@0 Int)(b@@0 Int)) (= (Mult a@@0 b@@0) (* a@@0 b@@0)))))
(assert (= BAV15 (forall ((a@@1 Int)(b1 Int)(b2 Int)) (= (TVM3 a@@1 b1 b2) true))))
(assert (= BAV16 (forall ((i Int)) (= (memAddr i) (and (<= ?memLo i) (< i ?memHi))))))
(assert (= BAV17 (forall ((i Int)) (and (<= ?memLo i) (< i ?memHi)))))
(assert (= BAV18 (forall ((i Int)) (<= ?memLo i))))
(assert (= BAV19 (forall ((i Int)) (< i ?memHi))))
(assert (= BAV20 (forall ((i@@0 Int)) (= (memAddrEx i@@0) (and (<= ?memLo i@@0) (<= i@@0 ?memHi))))))
(assert (= BAV21 (forall ((i@@0 Int)) (and (<= ?memLo i@@0) (<= i@@0 ?memHi)))))
(assert (= BAV22 (forall ((i@@0 Int)) (<= ?memLo i@@0))))
(assert (= BAV23 (forall ((i@@0 Int)) (<= i@@0 ?memHi))))
(assert (= BAV24 (forall ((ptr Int)) (= (PtrOk ptr) (and (memAddr ptr) (Aligned ptr))))))
(assert (= BAV25 (forall ((ptr Int)) (and (memAddr ptr) (Aligned ptr)))))
(assert (= BAV26 (= ?SegmentDescriptorSize GEN3)))
(assert (= BAV27 (= ?SegmentDescriptorTypeData GEN4)))
(assert (= BAV28 (= ?SegmentDescriptorTypeCode GEN5)))
(assert (= BAV29 (forall (($descriptor T@SegmentDescriptor)) (= (ValidSegmentDescriptor $descriptor) (or (= (SegmentDescriptorGetType $descriptor) ?SegmentDescriptorTypeData) (= (SegmentDescriptorGetType $descriptor) ?SegmentDescriptorTypeCode))))))
(assert (= BAV30 (forall (($descriptor T@SegmentDescriptor)) (or (= (SegmentDescriptorGetType $descriptor) ?SegmentDescriptorTypeData) (= (SegmentDescriptorGetType $descriptor) ?SegmentDescriptorTypeCode)))))
(assert (= BAV31 (forall (($descriptor T@SegmentDescriptor)) (= (SegmentDescriptorGetType $descriptor) ?SegmentDescriptorTypeData))))
(assert (= BAV32 (forall (($descriptor T@SegmentDescriptor)) (= (SegmentDescriptorGetType $descriptor) ?SegmentDescriptorTypeCode))))
(assert (= BAV33 (forall (($descriptor@@0 T@SegmentDescriptor)) (= (SegmentDescriptorWord0 $descriptor@@0) (q@or (shl (SegmentDescriptorGetBase $descriptor@@0) GEN6) GEN7)))))
(assert (= BAV34 (forall (($descriptor@@1 T@SegmentDescriptor)) (= (SegmentDescriptorWord1 $descriptor@@1) (q@or (q@and (SegmentDescriptorGetBase $descriptor@@1) GEN8) (q@or (shr (q@and (SegmentDescriptorGetBase $descriptor@@1) GEN9) GEN10) (q@or (shl GEN11 GEN12) (SegmentDescriptorGetType $descriptor@@1))))))))
(assert (= BAV35 (forall (($register Int)($index Int)) (= (ValidSegmentSelector $register $index) (= $register (shl $index GEN13))))))
(assert (= BAV36 (forall (($register Int)($index Int)) (= $register (shl $index GEN13)))))
(assert (= BAV37 (forall (($index@@0 Int)($descriptor@@2 T@SegmentDescriptor)($GdtBase Int)($GdtLen Int)($Mem (Array Int Int))) (= (ValidGdtDescriptor $index@@0 $descriptor@@2 $GdtBase $GdtLen $Mem) (and (> $index@@0 GEN14) (< $index@@0 $GdtLen) (ValidSegmentDescriptor $descriptor@@2) (= (SegmentDescriptorWord0 $descriptor@@2) (select $Mem (+ $GdtBase (* $index@@0 ?SegmentDescriptorSize)))) (= (SegmentDescriptorWord1 $descriptor@@2) (select $Mem (+ (+ $GdtBase (* $index@@0 ?SegmentDescriptorSize)) GEN15))))))))
(assert (= BAV38 (forall (($index@@0 Int)($descriptor@@2 T@SegmentDescriptor)($GdtBase Int)($GdtLen Int)($Mem (Array Int Int))) (and (> $index@@0 GEN14) (< $index@@0 $GdtLen) (ValidSegmentDescriptor $descriptor@@2) (= (SegmentDescriptorWord0 $descriptor@@2) (select $Mem (+ $GdtBase (* $index@@0 ?SegmentDescriptorSize)))) (= (SegmentDescriptorWord1 $descriptor@@2) (select $Mem (+ (+ $GdtBase (* $index@@0 ?SegmentDescriptorSize)) GEN15)))))))
(assert (= BAV39 (forall (($index@@0 Int)($descriptor@@2 T@SegmentDescriptor)($GdtBase Int)($GdtLen Int)($Mem (Array Int Int))) (> $index@@0 GEN14))))
(assert (= BAV40 (forall (($index@@0 Int)($descriptor@@2 T@SegmentDescriptor)($GdtBase Int)($GdtLen Int)($Mem (Array Int Int))) (< $index@@0 $GdtLen))))
(assert (= BAV41 (forall (($index@@0 Int)($descriptor@@2 T@SegmentDescriptor)($GdtBase Int)($GdtLen Int)($Mem (Array Int Int))) (= (SegmentDescriptorWord0 $descriptor@@2) (select $Mem (+ $GdtBase (* $index@@0 ?SegmentDescriptorSize)))))))
(assert (= BAV42 (forall (($index@@0 Int)($descriptor@@2 T@SegmentDescriptor)($GdtBase Int)($GdtLen Int)($Mem (Array Int Int))) (= (SegmentDescriptorWord1 $descriptor@@2) (select $Mem (+ (+ $GdtBase (* $index@@0 ?SegmentDescriptorSize)) GEN15))))))
(assert (= BAV43 (forall (($base Int)($len Int)) (= (GdtParamsWord0 $base $len) (q@or (shl $len GEN16) (shr $base GEN17))))))
(assert (= BAV44 (forall (($base@@0 Int)($len@@0 Int)) (= (GdtParamsWord1 $base@@0 $len@@0) (shl $base@@0 GEN18)))))
(assert (= BAV45 (= ?NIdt GEN19)))
(assert (= BAV46 (forall (($entry Int)($handler Int)) (= (IsHandlerForEntry $entry $handler) (= $handler ?FatalHandler)))))
(assert (= BAV47 (forall (($entry Int)($handler Int)) (= $handler ?FatalHandler))))
(assert (= BAV48 (= ?CodeSegmentSelector GEN20)))
(assert (= BAV49 (= ?Mask16Hi (+ GEN21 GEN22))))
(assert (= BAV50 (= ?Mask16Lo GEN23)))
(assert (= BAV51 (= ?IdtWord4Lo GEN24)))
(assert (= BAV52 (forall ((handler Int)) (= (IdtWord0 handler) (q@or (shl ?CodeSegmentSelector GEN25) (q@and handler ?Mask16Lo))))))
(assert (= BAV53 (forall ((handler@@0 Int)) (= (IdtWord4 handler@@0) (q@or (q@and handler@@0 ?Mask16Hi) ?IdtWord4Lo)))))
(assert (= BAV54 (= ?idtHi (+ ?idtLo (* ?NIdt GEN26)))))
(assert (= BAV55 (forall (($IdtMemOk (Array Int Bool))) (= (IdtMemOk $IdtMemOk) (forall ((i@@1 Int)) (! (=> (TV i@@1) (=> (and (<= GEN27 i@@1) (< i@@1 ?NIdt)) (and (select $IdtMemOk (+ ?idtLo (* GEN28 i@@1))) (select $IdtMemOk (+ (+ ?idtLo (* GEN29 i@@1)) GEN30))))) :qid |Interrup.68:11| :skolemid |20| :pattern ((TV i@@1))))))))
(assert (= BAV56 (forall (($IdtMemOk (Array Int Bool))(i@@1 Int)) (=> (TV i@@1) (=> (and (<= GEN27 i@@1) (< i@@1 ?NIdt)) (and (select $IdtMemOk (+ ?idtLo (* GEN28 i@@1))) (select $IdtMemOk (+ (+ ?idtLo (* GEN29 i@@1)) GEN30))))))))
(assert (= BAV57 (forall (($IdtMemOk (Array Int Bool))(i@@1 Int)) (=> (and (<= GEN27 i@@1) (< i@@1 ?NIdt)) (and (select $IdtMemOk (+ ?idtLo (* GEN28 i@@1))) (select $IdtMemOk (+ (+ ?idtLo (* GEN29 i@@1)) GEN30)))))))
(assert (= BAV58 (forall (($IdtMemOk (Array Int Bool))(i@@1 Int)) (and (<= GEN27 i@@1) (< i@@1 ?NIdt)))))
(assert (= BAV59 (forall (($IdtMemOk (Array Int Bool))(i@@1 Int)) (<= GEN27 i@@1))))
(assert (= BAV60 (forall (($IdtMemOk (Array Int Bool))(i@@1 Int)) (< i@@1 ?NIdt))))
(assert (= BAV61 (forall (($IdtMemOk (Array Int Bool))(i@@1 Int)) (and (select $IdtMemOk (+ ?idtLo (* GEN28 i@@1))) (select $IdtMemOk (+ (+ ?idtLo (* GEN29 i@@1)) GEN30))))))
(assert (= BAV62 (forall (($PicSeq (Array Int Int))) (= (PicOk $PicSeq) (and (>= (select $PicSeq GEN31) GEN32) (>= (select $PicSeq GEN33) GEN34))))))
(assert (= BAV63 (forall (($PicSeq (Array Int Int))) (and (>= (select $PicSeq GEN31) GEN32) (>= (select $PicSeq GEN33) GEN34)))))
(assert (= BAV64 (forall (($PicSeq (Array Int Int))) (>= (select $PicSeq GEN31) GEN32))))
(assert (= BAV65 (forall (($PicSeq (Array Int Int))) (>= (select $PicSeq GEN33) GEN34))))
(assert (= BAV66 (forall (($TimerSeq Int)) (= (TimerOk $TimerSeq) (= $TimerSeq GEN35)))))
(assert (= BAV67 (forall (($TimerSeq Int)) (= $TimerSeq GEN35))))
(assert (= BAV68 (= ?VgaTextLo GEN36)))
(assert (= BAV69 (= ?VgaTextHi GEN37)))
(assert (= BAV70 (forall ((i@@2 Int)) (= (vgaAddr2 i@@2) (and (<= ?VgaTextLo i@@2) (<= i@@2 (- ?VgaTextHi GEN38)))))))
(assert (= BAV71 (forall ((i@@2 Int)) (and (<= ?VgaTextLo i@@2) (<= i@@2 (- ?VgaTextHi GEN38))))))
(assert (= BAV72 (forall ((i@@2 Int)) (<= ?VgaTextLo i@@2))))
(assert (= BAV73 (forall ((i@@2 Int)) (<= i@@2 (- ?VgaTextHi GEN38)))))
(assert (= BAV74 (= ?RoBiosLo GEN39)))
(assert (= BAV75 (= ?RoBiosHi GEN40)))
(assert (= BAV76 (forall ((i@@3 Int)) (= (inBiosRo i@@3) (and (<= ?RoBiosLo i@@3) (< i@@3 ?RoBiosHi))))))
(assert (= BAV77 (forall ((i@@3 Int)) (and (<= ?RoBiosLo i@@3) (< i@@3 ?RoBiosHi)))))
(assert (= BAV78 (forall ((i@@3 Int)) (<= ?RoBiosLo i@@3))))
(assert (= BAV79 (forall ((i@@3 Int)) (< i@@3 ?RoBiosHi))))
(assert (= BAV80 (forall ((ptr@@0 Int)) (= (MatchesRsdp ptr@@0) (and (= (ro32 (+ ptr@@0 GEN41)) GEN42) (= (ro32 (+ ptr@@0 GEN43)) GEN44) (= (q@and (ByteSum ptr@@0 (+ ptr@@0 GEN45)) GEN46) GEN47))))))
(assert (= BAV81 (forall ((ptr@@0 Int)) (and (= (ro32 (+ ptr@@0 GEN41)) GEN42) (= (ro32 (+ ptr@@0 GEN43)) GEN44) (= (q@and (ByteSum ptr@@0 (+ ptr@@0 GEN45)) GEN46) GEN47)))))
(assert (= BAV82 (forall ((ptr@@0 Int)) (= (ro32 (+ ptr@@0 GEN41)) GEN42))))
(assert (= BAV83 (forall ((ptr@@0 Int)) (= (ro32 (+ ptr@@0 GEN43)) GEN44))))
(assert (= BAV84 (forall ((ptr@@0 Int)) (= (q@and (ByteSum ptr@@0 (+ ptr@@0 GEN45)) GEN46) GEN47))))
(assert (= BAV85 (forall ((ptr@@1 Int)) (= (MatchesDmar ptr@@1) (= (ro32 (+ ptr@@1 GEN48)) GEN49)))))
(assert (= BAV86 (forall ((ptr@@1 Int)) (= (ro32 (+ ptr@@1 GEN48)) GEN49))))
(assert (= BAV87 (forall ((ptr@@2 Int)) (= (MatchesDrhd ptr@@2) (= (roU16 ptr@@2) GEN50)))))
(assert (= BAV88 (forall ((ptr@@2 Int)) (= (roU16 ptr@@2) GEN50))))
(assert (= BAV89 (forall ((ptr@@3 Int)(entry Int)) (= (MaybeDrhd ptr@@3 entry) (and (= (select ?DrhdPtr entry) ptr@@3) (inRo (+ ptr@@3 GEN51) GEN52) (inRo (+ ptr@@3 GEN53) GEN54) (<= (+ ptr@@3 (roU16 (+ ptr@@3 GEN55))) (+ ?DmarPtr ?DmarLen)))))))
(assert (= BAV90 (forall ((ptr@@3 Int)(entry Int)) (and (= (select ?DrhdPtr entry) ptr@@3) (inRo (+ ptr@@3 GEN51) GEN52) (inRo (+ ptr@@3 GEN53) GEN54) (<= (+ ptr@@3 (roU16 (+ ptr@@3 GEN55))) (+ ?DmarPtr ?DmarLen))))))
(assert (= BAV91 (forall ((ptr@@3 Int)(entry Int)) (= (select ?DrhdPtr entry) ptr@@3))))
(assert (= BAV92 (forall ((ptr@@3 Int)(entry Int)) (<= (+ ptr@@3 (roU16 (+ ptr@@3 GEN55))) (+ ?DmarPtr ?DmarLen)))))
(assert (= BAV93 (forall ((ptr@@4 Int)(entry@@0 Int)) (= (DrhdInv ptr@@4 entry@@0) (and (inRo (+ ptr@@4 GEN56) GEN57) (inRo (+ ptr@@4 GEN58) GEN59) (=> (= (ro32 (+ ptr@@4 GEN60)) GEN61) (= (select ?DrhdRegs entry@@0) (ro32 (+ (select ?DrhdPtr entry@@0) GEN62)))))))))
(assert (= BAV94 (forall ((ptr@@4 Int)(entry@@0 Int)) (and (inRo (+ ptr@@4 GEN56) GEN57) (inRo (+ ptr@@4 GEN58) GEN59) (=> (= (ro32 (+ ptr@@4 GEN60)) GEN61) (= (select ?DrhdRegs entry@@0) (ro32 (+ (select ?DrhdPtr entry@@0) GEN62))))))))
(assert (= BAV95 (forall ((ptr@@4 Int)(entry@@0 Int)) (=> (= (ro32 (+ ptr@@4 GEN60)) GEN61) (= (select ?DrhdRegs entry@@0) (ro32 (+ (select ?DrhdPtr entry@@0) GEN62)))))))
(assert (= BAV96 (forall ((ptr@@4 Int)(entry@@0 Int)) (= (ro32 (+ ptr@@4 GEN60)) GEN61))))
(assert (= BAV97 (forall ((ptr@@4 Int)(entry@@0 Int)) (= (select ?DrhdRegs entry@@0) (ro32 (+ (select ?DrhdPtr entry@@0) GEN62))))))
(assert (= BAV98 (= ?iomHi (+ ?iomLo GEN63))))
(assert (= BAV99 (= ?dmaHi (+ ?dmaLo (* (* GEN64 GEN65) GEN66)))))
(assert (= BAV100 (forall ((i@@4 Int)) (= (iomAddr i@@4) (and (<= ?iomLo i@@4) (< i@@4 ?iomHi))))))
(assert (= BAV101 (forall ((i@@4 Int)) (and (<= ?iomLo i@@4) (< i@@4 ?iomHi)))))
(assert (= BAV102 (forall ((i@@4 Int)) (<= ?iomLo i@@4))))
(assert (= BAV103 (forall ((i@@4 Int)) (< i@@4 ?iomHi))))
(assert (= BAV104 (forall ((ptr@@5 Int)) (= (IsDmaPage ptr@@5) (and (= (q@and ptr@@5 GEN67) GEN68) (<= ?dmaLo ptr@@5) (<= (+ ptr@@5 GEN69) ?dmaHi))))))
(assert (= BAV105 (forall ((ptr@@5 Int)) (and (= (q@and ptr@@5 GEN67) GEN68) (<= ?dmaLo ptr@@5) (<= (+ ptr@@5 GEN69) ?dmaHi)))))
(assert (= BAV106 (forall ((ptr@@5 Int)) (= (q@and ptr@@5 GEN67) GEN68))))
(assert (= BAV107 (forall ((ptr@@5 Int)) (<= ?dmaLo ptr@@5))))
(assert (= BAV108 (forall ((ptr@@5 Int)) (<= (+ ptr@@5 GEN69) ?dmaHi))))
(assert (= BAV109 (forall ((w0 Int)(w1 Int)) (= (IoPageTableEntry w0 w1) (and (= w1 GEN70) (or (= w0 GEN71) (IsDmaPage (- w0 GEN72))))))))
(assert (= BAV110 (forall ((w0 Int)(w1 Int)) (and (= w1 GEN70) (or (= w0 GEN71) (IsDmaPage (- w0 GEN72)))))))
(assert (= BAV111 (forall ((w0 Int)(w1 Int)) (= w1 GEN70))))
(assert (= BAV112 (forall ((w0 Int)(w1 Int)) (or (= w0 GEN71) (IsDmaPage (- w0 GEN72))))))
(assert (= BAV113 (forall ((w0 Int)(w1 Int)) (= w0 GEN71))))
(assert (= BAV114 (forall (($IomMem (Array Int Int))(ptr@@6 Int)) (= (IoPageTable $IomMem ptr@@6) (and (= (q@and ptr@@6 GEN73) GEN74) (forall ((i@@5 Int)) (! (=> (and (TV i@@5) (<= GEN75 i@@5) (< i@@5 GEN76)) (IoPageTableEntry (select $IomMem (+ ptr@@6 (* GEN77 i@@5))) (select $IomMem (+ (+ ptr@@6 (* GEN78 i@@5)) GEN79)))) :qid |Ioibpl.208:13| :skolemid |37| :pattern ((TV i@@5)))))))))
(assert (= BAV115 (forall (($IomMem (Array Int Int))(ptr@@6 Int)) (and (= (q@and ptr@@6 GEN73) GEN74) (forall ((i@@5 Int)) (! (=> (and (TV i@@5) (<= GEN75 i@@5) (< i@@5 GEN76)) (IoPageTableEntry (select $IomMem (+ ptr@@6 (* GEN77 i@@5))) (select $IomMem (+ (+ ptr@@6 (* GEN78 i@@5)) GEN79)))) :qid |Ioibpl.208:13| :skolemid |37| :pattern ((TV i@@5))))))))
(assert (= BAV116 (forall (($IomMem (Array Int Int))(ptr@@6 Int)) (= (q@and ptr@@6 GEN73) GEN74))))
(assert (= BAV117 (forall (($IomMem (Array Int Int))(ptr@@6 Int)(i@@5 Int)) (=> (and (TV i@@5) (<= GEN75 i@@5) (< i@@5 GEN76)) (IoPageTableEntry (select $IomMem (+ ptr@@6 (* GEN77 i@@5))) (select $IomMem (+ (+ ptr@@6 (* GEN78 i@@5)) GEN79)))))))
(assert (= BAV118 (forall (($IomMem (Array Int Int))(ptr@@6 Int)(i@@5 Int)) (and (TV i@@5) (<= GEN75 i@@5) (< i@@5 GEN76)))))
(assert (= BAV119 (forall (($IomMem (Array Int Int))(ptr@@6 Int)(i@@5 Int)) (<= GEN75 i@@5))))
(assert (= BAV120 (forall (($IomMem (Array Int Int))(ptr@@6 Int)(i@@5 Int)) (< i@@5 GEN76))))
(assert (= BAV121 (forall (($IomMem@@0 (Array Int Int))(w0@@0 Int)(w1@@0 Int)) (= (IoPageDirEntry $IomMem@@0 w0@@0 w1@@0) (and (= w1@@0 GEN80) (or (= w0@@0 GEN81) (IoPageTable $IomMem@@0 (- w0@@0 GEN82))))))))
(assert (= BAV122 (forall (($IomMem@@0 (Array Int Int))(w0@@0 Int)(w1@@0 Int)) (and (= w1@@0 GEN80) (or (= w0@@0 GEN81) (IoPageTable $IomMem@@0 (- w0@@0 GEN82)))))))
(assert (= BAV123 (forall (($IomMem@@0 (Array Int Int))(w0@@0 Int)(w1@@0 Int)) (= w1@@0 GEN80))))
(assert (= BAV124 (forall (($IomMem@@0 (Array Int Int))(w0@@0 Int)(w1@@0 Int)) (or (= w0@@0 GEN81) (IoPageTable $IomMem@@0 (- w0@@0 GEN82))))))
(assert (= BAV125 (forall (($IomMem@@0 (Array Int Int))(w0@@0 Int)(w1@@0 Int)) (= w0@@0 GEN81))))
(assert (= BAV126 (forall (($IomMem@@1 (Array Int Int))(ptr@@7 Int)) (= (IoPageDir $IomMem@@1 ptr@@7) (and (= (q@and ptr@@7 GEN83) GEN84) (forall ((i@@6 Int)) (! (=> (and (TV i@@6) (<= GEN85 i@@6) (< i@@6 GEN86)) (IoPageDirEntry $IomMem@@1 (select $IomMem@@1 (+ ptr@@7 (* GEN87 i@@6))) (select $IomMem@@1 (+ (+ ptr@@7 (* GEN88 i@@6)) GEN89)))) :qid |Ioibpl.220:13| :skolemid |40| :pattern ((TV i@@6)))))))))
(assert (= BAV127 (forall (($IomMem@@1 (Array Int Int))(ptr@@7 Int)) (and (= (q@and ptr@@7 GEN83) GEN84) (forall ((i@@6 Int)) (! (=> (and (TV i@@6) (<= GEN85 i@@6) (< i@@6 GEN86)) (IoPageDirEntry $IomMem@@1 (select $IomMem@@1 (+ ptr@@7 (* GEN87 i@@6))) (select $IomMem@@1 (+ (+ ptr@@7 (* GEN88 i@@6)) GEN89)))) :qid |Ioibpl.220:13| :skolemid |40| :pattern ((TV i@@6))))))))
(assert (= BAV128 (forall (($IomMem@@1 (Array Int Int))(ptr@@7 Int)) (= (q@and ptr@@7 GEN83) GEN84))))
(assert (= BAV129 (forall (($IomMem@@1 (Array Int Int))(ptr@@7 Int)(i@@6 Int)) (=> (and (TV i@@6) (<= GEN85 i@@6) (< i@@6 GEN86)) (IoPageDirEntry $IomMem@@1 (select $IomMem@@1 (+ ptr@@7 (* GEN87 i@@6))) (select $IomMem@@1 (+ (+ ptr@@7 (* GEN88 i@@6)) GEN89)))))))
(assert (= BAV130 (forall (($IomMem@@1 (Array Int Int))(ptr@@7 Int)(i@@6 Int)) (and (TV i@@6) (<= GEN85 i@@6) (< i@@6 GEN86)))))
(assert (= BAV131 (forall (($IomMem@@1 (Array Int Int))(ptr@@7 Int)(i@@6 Int)) (<= GEN85 i@@6))))
(assert (= BAV132 (forall (($IomMem@@1 (Array Int Int))(ptr@@7 Int)(i@@6 Int)) (< i@@6 GEN86))))
(assert (= BAV133 (forall (($IomMem@@2 (Array Int Int))(ptr@@8 Int)) (= (IoPageDirStub $IomMem@@2 ptr@@8) (and (= (q@and ptr@@8 GEN90) GEN91) (= (select $IomMem@@2 (+ ptr@@8 GEN92)) GEN93) (forall ((i@@7 Int)) (! (=> (and (TV i@@7) (<= GEN94 i@@7) (< i@@7 GEN95)) (and (= (select $IomMem@@2 (+ ptr@@8 (* GEN96 i@@7))) GEN97) (= (select $IomMem@@2 (+ (+ ptr@@8 (* GEN98 i@@7)) GEN99)) GEN100))) :qid |Ioibpl.228:13| :skolemid |42| :pattern ((TV i@@7)))))))))
(assert (= BAV134 (forall (($IomMem@@2 (Array Int Int))(ptr@@8 Int)) (and (= (q@and ptr@@8 GEN90) GEN91) (= (select $IomMem@@2 (+ ptr@@8 GEN92)) GEN93) (forall ((i@@7 Int)) (! (=> (and (TV i@@7) (<= GEN94 i@@7) (< i@@7 GEN95)) (and (= (select $IomMem@@2 (+ ptr@@8 (* GEN96 i@@7))) GEN97) (= (select $IomMem@@2 (+ (+ ptr@@8 (* GEN98 i@@7)) GEN99)) GEN100))) :qid |Ioibpl.228:13| :skolemid |42| :pattern ((TV i@@7))))))))
(assert (= BAV135 (forall (($IomMem@@2 (Array Int Int))(ptr@@8 Int)) (= (q@and ptr@@8 GEN90) GEN91))))
(assert (= BAV136 (forall (($IomMem@@2 (Array Int Int))(ptr@@8 Int)) (= (select $IomMem@@2 (+ ptr@@8 GEN92)) GEN93))))
(assert (= BAV137 (forall (($IomMem@@2 (Array Int Int))(ptr@@8 Int)(i@@7 Int)) (=> (and (TV i@@7) (<= GEN94 i@@7) (< i@@7 GEN95)) (and (= (select $IomMem@@2 (+ ptr@@8 (* GEN96 i@@7))) GEN97) (= (select $IomMem@@2 (+ (+ ptr@@8 (* GEN98 i@@7)) GEN99)) GEN100))))))
(assert (= BAV138 (forall (($IomMem@@2 (Array Int Int))(ptr@@8 Int)(i@@7 Int)) (and (TV i@@7) (<= GEN94 i@@7) (< i@@7 GEN95)))))
(assert (= BAV139 (forall (($IomMem@@2 (Array Int Int))(ptr@@8 Int)(i@@7 Int)) (<= GEN94 i@@7))))
(assert (= BAV140 (forall (($IomMem@@2 (Array Int Int))(ptr@@8 Int)(i@@7 Int)) (< i@@7 GEN95))))
(assert (= BAV141 (forall (($IomMem@@2 (Array Int Int))(ptr@@8 Int)(i@@7 Int)) (and (= (select $IomMem@@2 (+ ptr@@8 (* GEN96 i@@7))) GEN97) (= (select $IomMem@@2 (+ (+ ptr@@8 (* GEN98 i@@7)) GEN99)) GEN100)))))
(assert (= BAV142 (forall (($IomMem@@2 (Array Int Int))(ptr@@8 Int)(i@@7 Int)) (= (select $IomMem@@2 (+ ptr@@8 (* GEN96 i@@7))) GEN97))))
(assert (= BAV143 (forall (($IomMem@@2 (Array Int Int))(ptr@@8 Int)(i@@7 Int)) (= (select $IomMem@@2 (+ (+ ptr@@8 (* GEN98 i@@7)) GEN99)) GEN100))))
(assert (= BAV144 (forall (($IomMem@@3 (Array Int Int))(w0@@1 Int)(w1@@1 Int)(w2 Int)(w3 Int)) (= (IoContextEntry $IomMem@@3 w0@@1 w1@@1 w2 w3) (and (= w3 GEN101) (= w2 GEN102) (= w1@@1 GEN103) (IoPageDirStub $IomMem@@3 (- w0@@1 GEN104)) (IoPageDirStub $IomMem@@3 (- (select $IomMem@@3 (- w0@@1 GEN105)) GEN106)) (IoPageDir $IomMem@@3 (- (select $IomMem@@3 (- (select $IomMem@@3 (- w0@@1 GEN107)) GEN108)) GEN109)))))))
(assert (= BAV145 (forall (($IomMem@@3 (Array Int Int))(w0@@1 Int)(w1@@1 Int)(w2 Int)(w3 Int)) (and (= w3 GEN101) (= w2 GEN102) (= w1@@1 GEN103) (IoPageDirStub $IomMem@@3 (- w0@@1 GEN104)) (IoPageDirStub $IomMem@@3 (- (select $IomMem@@3 (- w0@@1 GEN105)) GEN106)) (IoPageDir $IomMem@@3 (- (select $IomMem@@3 (- (select $IomMem@@3 (- w0@@1 GEN107)) GEN108)) GEN109))))))
(assert (= BAV146 (forall (($IomMem@@3 (Array Int Int))(w0@@1 Int)(w1@@1 Int)(w2 Int)(w3 Int)) (= w3 GEN101))))
(assert (= BAV147 (forall (($IomMem@@3 (Array Int Int))(w0@@1 Int)(w1@@1 Int)(w2 Int)(w3 Int)) (= w2 GEN102))))
(assert (= BAV148 (forall (($IomMem@@3 (Array Int Int))(w0@@1 Int)(w1@@1 Int)(w2 Int)(w3 Int)) (= w1@@1 GEN103))))
(assert (= BAV149 (forall (($IomMem@@4 (Array Int Int))(ptr@@9 Int)) (= (IoContextTable $IomMem@@4 ptr@@9) (and (= (q@and ptr@@9 GEN110) GEN111) (forall ((i@@8 Int)) (! (=> (and (TV i@@8) (<= GEN112 i@@8) (< i@@8 GEN113)) (IoContextEntry $IomMem@@4 (select $IomMem@@4 (+ (+ ptr@@9 (* GEN114 i@@8)) GEN115)) (select $IomMem@@4 (+ (+ ptr@@9 (* GEN116 i@@8)) GEN117)) (select $IomMem@@4 (+ (+ ptr@@9 (* GEN118 i@@8)) GEN119)) (select $IomMem@@4 (+ (+ ptr@@9 (* GEN120 i@@8)) GEN121)))) :qid |Ioibpl.243:13| :skolemid |45| :pattern ((TV i@@8)))))))))
(assert (= BAV150 (forall (($IomMem@@4 (Array Int Int))(ptr@@9 Int)) (and (= (q@and ptr@@9 GEN110) GEN111) (forall ((i@@8 Int)) (! (=> (and (TV i@@8) (<= GEN112 i@@8) (< i@@8 GEN113)) (IoContextEntry $IomMem@@4 (select $IomMem@@4 (+ (+ ptr@@9 (* GEN114 i@@8)) GEN115)) (select $IomMem@@4 (+ (+ ptr@@9 (* GEN116 i@@8)) GEN117)) (select $IomMem@@4 (+ (+ ptr@@9 (* GEN118 i@@8)) GEN119)) (select $IomMem@@4 (+ (+ ptr@@9 (* GEN120 i@@8)) GEN121)))) :qid |Ioibpl.243:13| :skolemid |45| :pattern ((TV i@@8))))))))
(assert (= BAV151 (forall (($IomMem@@4 (Array Int Int))(ptr@@9 Int)) (= (q@and ptr@@9 GEN110) GEN111))))
(assert (= BAV152 (forall (($IomMem@@4 (Array Int Int))(ptr@@9 Int)(i@@8 Int)) (=> (and (TV i@@8) (<= GEN112 i@@8) (< i@@8 GEN113)) (IoContextEntry $IomMem@@4 (select $IomMem@@4 (+ (+ ptr@@9 (* GEN114 i@@8)) GEN115)) (select $IomMem@@4 (+ (+ ptr@@9 (* GEN116 i@@8)) GEN117)) (select $IomMem@@4 (+ (+ ptr@@9 (* GEN118 i@@8)) GEN119)) (select $IomMem@@4 (+ (+ ptr@@9 (* GEN120 i@@8)) GEN121)))))))
(assert (= BAV153 (forall (($IomMem@@4 (Array Int Int))(ptr@@9 Int)(i@@8 Int)) (and (TV i@@8) (<= GEN112 i@@8) (< i@@8 GEN113)))))
(assert (= BAV154 (forall (($IomMem@@4 (Array Int Int))(ptr@@9 Int)(i@@8 Int)) (<= GEN112 i@@8))))
(assert (= BAV155 (forall (($IomMem@@4 (Array Int Int))(ptr@@9 Int)(i@@8 Int)) (< i@@8 GEN113))))
(assert (= BAV156 (forall (($IomMem@@5 (Array Int Int))(w0@@2 Int)(w1@@2 Int)(w2@@0 Int)(w3@@0 Int)) (= (IoRootEntry $IomMem@@5 w0@@2 w1@@2 w2@@0 w3@@0) (and (= w3@@0 GEN122) (= w2@@0 GEN123) (= w1@@2 GEN124) (IoContextTable $IomMem@@5 (- w0@@2 GEN125)))))))
(assert (= BAV157 (forall (($IomMem@@5 (Array Int Int))(w0@@2 Int)(w1@@2 Int)(w2@@0 Int)(w3@@0 Int)) (and (= w3@@0 GEN122) (= w2@@0 GEN123) (= w1@@2 GEN124) (IoContextTable $IomMem@@5 (- w0@@2 GEN125))))))
(assert (= BAV158 (forall (($IomMem@@5 (Array Int Int))(w0@@2 Int)(w1@@2 Int)(w2@@0 Int)(w3@@0 Int)) (= w3@@0 GEN122))))
(assert (= BAV159 (forall (($IomMem@@5 (Array Int Int))(w0@@2 Int)(w1@@2 Int)(w2@@0 Int)(w3@@0 Int)) (= w2@@0 GEN123))))
(assert (= BAV160 (forall (($IomMem@@5 (Array Int Int))(w0@@2 Int)(w1@@2 Int)(w2@@0 Int)(w3@@0 Int)) (= w1@@2 GEN124))))
(assert (= BAV161 (forall (($IomMem@@6 (Array Int Int))(ptr@@10 Int)) (= (IoRootTable $IomMem@@6 ptr@@10) (and (= (q@and ptr@@10 GEN126) GEN127) (forall ((i@@9 Int)) (! (=> (and (TV i@@9) (<= GEN128 i@@9) (< i@@9 GEN129)) (IoRootEntry $IomMem@@6 (select $IomMem@@6 (+ (+ ptr@@10 (* GEN130 i@@9)) GEN131)) (select $IomMem@@6 (+ (+ ptr@@10 (* GEN132 i@@9)) GEN133)) (select $IomMem@@6 (+ (+ ptr@@10 (* GEN134 i@@9)) GEN135)) (select $IomMem@@6 (+ (+ ptr@@10 (* GEN136 i@@9)) GEN137)))) :qid |Ioibpl.259:13| :skolemid |48| :pattern ((TV i@@9)))))))))
(assert (= BAV162 (forall (($IomMem@@6 (Array Int Int))(ptr@@10 Int)) (and (= (q@and ptr@@10 GEN126) GEN127) (forall ((i@@9 Int)) (! (=> (and (TV i@@9) (<= GEN128 i@@9) (< i@@9 GEN129)) (IoRootEntry $IomMem@@6 (select $IomMem@@6 (+ (+ ptr@@10 (* GEN130 i@@9)) GEN131)) (select $IomMem@@6 (+ (+ ptr@@10 (* GEN132 i@@9)) GEN133)) (select $IomMem@@6 (+ (+ ptr@@10 (* GEN134 i@@9)) GEN135)) (select $IomMem@@6 (+ (+ ptr@@10 (* GEN136 i@@9)) GEN137)))) :qid |Ioibpl.259:13| :skolemid |48| :pattern ((TV i@@9))))))))
(assert (= BAV163 (forall (($IomMem@@6 (Array Int Int))(ptr@@10 Int)) (= (q@and ptr@@10 GEN126) GEN127))))
(assert (= BAV164 (forall (($IomMem@@6 (Array Int Int))(ptr@@10 Int)(i@@9 Int)) (=> (and (TV i@@9) (<= GEN128 i@@9) (< i@@9 GEN129)) (IoRootEntry $IomMem@@6 (select $IomMem@@6 (+ (+ ptr@@10 (* GEN130 i@@9)) GEN131)) (select $IomMem@@6 (+ (+ ptr@@10 (* GEN132 i@@9)) GEN133)) (select $IomMem@@6 (+ (+ ptr@@10 (* GEN134 i@@9)) GEN135)) (select $IomMem@@6 (+ (+ ptr@@10 (* GEN136 i@@9)) GEN137)))))))
(assert (= BAV165 (forall (($IomMem@@6 (Array Int Int))(ptr@@10 Int)(i@@9 Int)) (and (TV i@@9) (<= GEN128 i@@9) (< i@@9 GEN129)))))
(assert (= BAV166 (forall (($IomMem@@6 (Array Int Int))(ptr@@10 Int)(i@@9 Int)) (<= GEN128 i@@9))))
(assert (= BAV167 (forall (($IomMem@@6 (Array Int Int))(ptr@@10 Int)(i@@9 Int)) (< i@@9 GEN129))))
(assert (= BAV168 (forall ((id Int)) (= (IsValidPciId id) (and (<= GEN138 id) (< id GEN139))))))
(assert (= BAV169 (forall ((id Int)) (and (<= GEN138 id) (< id GEN139)))))
(assert (= BAV170 (forall ((id Int)) (<= GEN138 id))))
(assert (= BAV171 (forall ((id Int)) (< id GEN139))))
(assert (= BAV172 (forall ((o Int)) (= (IsValidPciOffset o) (and (<= GEN140 o) (< o GEN141) (Aligned o))))))
(assert (= BAV173 (forall ((o Int)) (and (<= GEN140 o) (< o GEN141) (Aligned o)))))
(assert (= BAV174 (forall ((o Int)) (<= GEN140 o))))
(assert (= BAV175 (forall ((o Int)) (< o GEN141))))
(assert (= BAV176 (= ?FFFFFFFF (+ (+ GEN142 GEN143) GEN144))))
(assert (= BAV177 (forall ((config0 Int)) (= (PciVendorId config0) (q@and config0 GEN145)))))
(assert (= BAV178 (forall ((config12 Int)) (= (PciHeaderType config12) (q@and (shr config12 GEN146) GEN147)))))
(assert (= BAV179 (>= WORD_HI GEN148)))
(assert (= BAV180 (forall ((a@@2 Int)(b1@@0 Int)(b2@@0 Int)) (= (Mult a@@2 (+ b1@@0 b2@@0)) (* a@@2 (+ b1@@0 b2@@0))))))
(assert (= BAV181 (forall ((i@@10 Int)(j Int)) (=> (and (TV i@@10) (TO j)) (= (Aligned i@@10) (Aligned (+ i@@10 (* GEN149 j))))))))
(assert (= BAV182 (forall ((i@@10 Int)(j Int)) (and (TV i@@10) (TO j)))))
(assert (= BAV183 (forall ((i@@10 Int)(j Int)) (= (Aligned i@@10) (Aligned (+ i@@10 (* GEN149 j)))))))
(assert (= BAV184 (< NULL ?memLo)))
(assert (= BAV185 (<= ?memLo ?memHi)))
(assert (= BAV186 (< ?memHi WORD_HI)))
(assert (= BAV187 (forall (($index@@1 Int)($descriptor@@3 T@SegmentDescriptor)) (= (SegmentRegisterGetIndex (SegmentRegisterCreate $index@@1 $descriptor@@3)) $index@@1))))
(assert (= BAV188 (forall (($index@@2 Int)($descriptor@@4 T@SegmentDescriptor)) (= (SegmentRegisterGetDescriptor (SegmentRegisterCreate $index@@2 $descriptor@@4)) $descriptor@@4))))
(assert (= BAV189 (forall (($base@@1 Int)($type Int)) (= (SegmentDescriptorGetBase (SegmentDescriptorCreate $base@@1 $type)) $base@@1))))
(assert (= BAV190 (forall (($base@@2 Int)($type@@0 Int)) (= (SegmentDescriptorGetType (SegmentDescriptorCreate $base@@2 $type@@0)) $type@@0))))
(assert (= BAV191 (forall ((f Int)(x@@0 Int)(y Int)) (=> (FlagsCmp f x@@0 y) (= (Je f) (= x@@0 y))))))
(assert (= BAV192 (forall ((f Int)(x@@0 Int)(y Int)) (= (Je f) (= x@@0 y)))))
(assert (= BAV193 (forall ((f Int)(x@@0 Int)(y Int)) (= x@@0 y))))
(assert (= BAV194 (forall ((f@@0 Int)(x@@1 Int)(y@@0 Int)) (=> (FlagsCmp f@@0 x@@1 y@@0) (= (Jne f@@0) (not (= x@@1 y@@0)))))))
(assert (= BAV195 (forall ((f@@0 Int)(x@@1 Int)(y@@0 Int)) (= (Jne f@@0) (not (= x@@1 y@@0))))))
(assert (= BAV196 (forall ((f@@0 Int)(x@@1 Int)(y@@0 Int)) (= x@@1 y@@0))))
(assert (= BAV197 (forall ((f@@1 Int)(x@@2 Int)(y@@1 Int)) (=> (FlagsCmp f@@1 x@@2 y@@1) (= (Jbe f@@1) (<= x@@2 y@@1))))))
(assert (= BAV198 (forall ((f@@1 Int)(x@@2 Int)(y@@1 Int)) (= (Jbe f@@1) (<= x@@2 y@@1)))))
(assert (= BAV199 (forall ((f@@1 Int)(x@@2 Int)(y@@1 Int)) (<= x@@2 y@@1))))
(assert (= BAV200 (forall ((f@@2 Int)(x@@3 Int)(y@@2 Int)) (=> (FlagsCmp f@@2 x@@3 y@@2) (= (Jb f@@2) (< x@@3 y@@2))))))
(assert (= BAV201 (forall ((f@@2 Int)(x@@3 Int)(y@@2 Int)) (= (Jb f@@2) (< x@@3 y@@2)))))
(assert (= BAV202 (forall ((f@@2 Int)(x@@3 Int)(y@@2 Int)) (< x@@3 y@@2))))
(assert (= BAV203 (forall ((f@@3 Int)(x@@4 Int)(y@@3 Int)) (=> (FlagsCmp f@@3 x@@4 y@@3) (= (Jae f@@3) (>= x@@4 y@@3))))))
(assert (= BAV204 (forall ((f@@3 Int)(x@@4 Int)(y@@3 Int)) (= (Jae f@@3) (>= x@@4 y@@3)))))
(assert (= BAV205 (forall ((f@@3 Int)(x@@4 Int)(y@@3 Int)) (>= x@@4 y@@3))))
(assert (= BAV206 (forall ((f@@4 Int)(x@@5 Int)(y@@4 Int)) (=> (FlagsCmp f@@4 x@@5 y@@4) (= (Ja f@@4) (> x@@5 y@@4))))))
(assert (= BAV207 (forall ((f@@4 Int)(x@@5 Int)(y@@4 Int)) (= (Ja f@@4) (> x@@5 y@@4)))))
(assert (= BAV208 (forall ((f@@4 Int)(x@@5 Int)(y@@4 Int)) (> x@@5 y@@4))))
(assert (= BAV209 (forall ((Mem@@0 (Array Int Int))(ptr@@11 Int)) (=> (PtrOk ptr@@11) (OpnOk Mem@@0 (OpnMem ptr@@11))))))
(assert (= BAV210 (forall ((Mem@@1 (Array Int Int))(reg@@0 Int)) (= (EvalOpn Mem@@1 (OpnReg reg@@0)) reg@@0))))
(assert (= BAV211 (forall ((Mem@@2 (Array Int Int))(ptr@@12 Int)) (= (EvalOpn Mem@@2 (OpnMem ptr@@12)) (select Mem@@2 ptr@@12)))))
(assert (= BAV212 (forall ((Mem@@3 (Array Int Int))(reg@@1 Int)(v Int)) (= (UpdateOpn Mem@@3 (OpnReg reg@@1) v) Mem@@3))))
(assert (= BAV213 (forall ((Mem@@4 (Array Int Int))(ptr@@13 Int)(v@@0 Int)) (= (UpdateOpn Mem@@4 (OpnMem ptr@@13) v@@0) (store Mem@@4 ptr@@13 v@@0)))))
(assert (= BAV214 (forall (($Mem@@0 (Array Int Int))(s Int)(i@@11 Int)) (= (select (select (MapStacksToMem $Mem@@0) s) i@@11) (select $Mem@@0 i@@11)))))
(assert (= BAV215 (= WORD_HI (+ (+ GEN150 GEN151) GEN152))))
(assert (= BAV216 (=> (! (and %lbl%+6329 true) :lblpos GEN154) (=> (! (and %lbl%+6010 true) :lblpos GEN153) true))))
(assert (= BAV217 (and %lbl%+6329 true)))
(assert (= BAV218 (=> (! (and %lbl%+6010 true) :lblpos GEN153) true)))
(assert (= BAV219 (and %lbl%+6010 true)))
(check-sat)
(get-model)
(pop 1)