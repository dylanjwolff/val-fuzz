(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(set-option :produce-assignments true)
(declare-fun x () Int)
(declare-fun y () Int)
(assert (! (or (! (= x (+ y GEN1)) :named foo) (! (= x (- y GEN2)) :named bar)) :named baz))
(assert (and (> x GEN3) (<= y GEN4)))
(assert (= BAV1 (or (! (= x (+ y GEN1)) :named foo) (! (= x (- y GEN2)) :named bar))))
(assert (= BAV2 (= x (+ y GEN1))))
(assert (= BAV3 (= x (- y GEN2))))
(assert (= BAV4 (and (> x GEN3) (<= y GEN4))))
(assert (= BAV5 (> x GEN3)))
(assert (= BAV6 (<= y GEN4)))
(check-sat)
(get-model)
(get-assignment)