(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const BAV23 Bool)
(declare-const BAV24 Bool)
(declare-const BAV25 Bool)
(declare-const BAV26 Bool)
(declare-const BAV27 Bool)
(declare-const BAV28 Bool)
(declare-const BAV29 Bool)
(declare-const BAV30 Bool)
(declare-const BAV31 Bool)
(declare-const BAV32 Bool)
(declare-const BAV33 Bool)
(declare-const BAV34 Bool)
(declare-const BAV35 Bool)
(declare-const BAV36 Bool)
(declare-const BAV37 Bool)
(declare-const BAV38 Bool)
(declare-const BAV39 Bool)
(declare-const BAV40 Bool)
(declare-const BAV41 Bool)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-fun x1 () (_ BitVec 12))
(declare-fun x2 () (_ BitVec 12))
(declare-fun x3 () (_ BitVec 12))
(declare-fun y1 () (_ BitVec 12))
(declare-fun y2 () (_ BitVec 12))
(declare-fun y3 () (_ BitVec 12))
(declare-fun z1 () (_ BitVec 12))
(declare-fun z2 () (_ BitVec 12))
(declare-fun z3 () (_ BitVec 12))
(declare-fun a () (_ BitVec 12))
(declare-fun x01 () (_ BitVec 10))
(declare-fun x02 () (_ BitVec 10))
(declare-fun x03 () (_ BitVec 10))
(declare-fun y01 () (_ BitVec 10))
(declare-fun y02 () (_ BitVec 10))
(declare-fun y03 () (_ BitVec 10))
(declare-fun z01 () (_ BitVec 10))
(declare-fun z02 () (_ BitVec 10))
(declare-fun z03 () (_ BitVec 10))
(declare-fun a0 () (_ BitVec 10))
(assert (or (and (= a (_ bv0 12)) (or (not (= (bvudiv x1 a) (bvudiv x2 a))) (not (= (bvudiv x1 a) (bvudiv x3 a))) (not (= (bvudiv x2 a) (bvudiv x3 a)))) (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3)))) (and (= a0 (_ bv0 10)) (or (not (= (bvurem x01 a0) (bvurem x02 a0))) (not (= (bvurem x01 a0) (bvurem x03 a0))) (not (= (bvurem x02 a0) (bvurem x03 a0)))) (or (and (= x01 y01) (= y01 x02)) (and (= x01 z01) (= z01 x02))) (or (and (= x02 y02) (= y02 x03)) (and (= x02 z02) (= z02 x03))))))
(assert (= BAV1 (or (and (= a (_ bv0 12)) (or (not (= (bvudiv x1 a) (bvudiv x2 a))) (not (= (bvudiv x1 a) (bvudiv x3 a))) (not (= (bvudiv x2 a) (bvudiv x3 a)))) (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3)))) (and (= a0 (_ bv0 10)) (or (not (= (bvurem x01 a0) (bvurem x02 a0))) (not (= (bvurem x01 a0) (bvurem x03 a0))) (not (= (bvurem x02 a0) (bvurem x03 a0)))) (or (and (= x01 y01) (= y01 x02)) (and (= x01 z01) (= z01 x02))) (or (and (= x02 y02) (= y02 x03)) (and (= x02 z02) (= z02 x03)))))))
(assert (= BAV2 (and (= a (_ bv0 12)) (or (not (= (bvudiv x1 a) (bvudiv x2 a))) (not (= (bvudiv x1 a) (bvudiv x3 a))) (not (= (bvudiv x2 a) (bvudiv x3 a)))) (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))))))
(assert (= BAV3 (= a (_ bv0 12))))
(assert (= BAV4 (or (not (= (bvudiv x1 a) (bvudiv x2 a))) (not (= (bvudiv x1 a) (bvudiv x3 a))) (not (= (bvudiv x2 a) (bvudiv x3 a))))))
(assert (= BAV5 (= (bvudiv x1 a) (bvudiv x2 a))))
(assert (= BAV6 (= (bvudiv x1 a) (bvudiv x3 a))))
(assert (= BAV7 (= (bvudiv x2 a) (bvudiv x3 a))))
(assert (= BAV8 (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2)))))
(assert (= BAV9 (and (= x1 y1) (= y1 x2))))
(assert (= BAV10 (= x1 y1)))
(assert (= BAV11 (= y1 x2)))
(assert (= BAV12 (and (= x1 z1) (= z1 x2))))
(assert (= BAV13 (= x1 z1)))
(assert (= BAV14 (= z1 x2)))
(assert (= BAV15 (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3)))))
(assert (= BAV16 (and (= x2 y2) (= y2 x3))))
(assert (= BAV17 (= x2 y2)))
(assert (= BAV18 (= y2 x3)))
(assert (= BAV19 (and (= x2 z2) (= z2 x3))))
(assert (= BAV20 (= x2 z2)))
(assert (= BAV21 (= z2 x3)))
(assert (= BAV22 (and (= a0 (_ bv0 10)) (or (not (= (bvurem x01 a0) (bvurem x02 a0))) (not (= (bvurem x01 a0) (bvurem x03 a0))) (not (= (bvurem x02 a0) (bvurem x03 a0)))) (or (and (= x01 y01) (= y01 x02)) (and (= x01 z01) (= z01 x02))) (or (and (= x02 y02) (= y02 x03)) (and (= x02 z02) (= z02 x03))))))
(assert (= BAV23 (= a0 (_ bv0 10))))
(assert (= BAV24 (or (not (= (bvurem x01 a0) (bvurem x02 a0))) (not (= (bvurem x01 a0) (bvurem x03 a0))) (not (= (bvurem x02 a0) (bvurem x03 a0))))))
(assert (= BAV25 (= (bvurem x01 a0) (bvurem x02 a0))))
(assert (= BAV26 (= (bvurem x01 a0) (bvurem x03 a0))))
(assert (= BAV27 (= (bvurem x02 a0) (bvurem x03 a0))))
(assert (= BAV28 (or (and (= x01 y01) (= y01 x02)) (and (= x01 z01) (= z01 x02)))))
(assert (= BAV29 (and (= x01 y01) (= y01 x02))))
(assert (= BAV30 (= x01 y01)))
(assert (= BAV31 (= y01 x02)))
(assert (= BAV32 (and (= x01 z01) (= z01 x02))))
(assert (= BAV33 (= x01 z01)))
(assert (= BAV34 (= z01 x02)))
(assert (= BAV35 (or (and (= x02 y02) (= y02 x03)) (and (= x02 z02) (= z02 x03)))))
(assert (= BAV36 (and (= x02 y02) (= y02 x03))))
(assert (= BAV37 (= x02 y02)))
(assert (= BAV38 (= y02 x03)))
(assert (= BAV39 (and (= x02 z02) (= z02 x03))))
(assert (= BAV40 (= x02 z02)))
(assert (= BAV41 (= z02 x03)))
(check-sat)
(get-model)