(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const GEN24 Int)
(declare-const GEN23 Int)
(declare-const GEN22 Int)
(declare-const GEN21 Int)
(declare-const GEN20 Int)
(declare-const GEN19 Int)
(declare-const GEN18 Int)
(declare-const GEN17 Int)
(declare-const GEN16 String)
(declare-const GEN15 Int)
(declare-const GEN14 String)
(declare-const GEN13 Int)
(declare-const GEN12 String)
(declare-const GEN11 Int)
(declare-const GEN10 String)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 String)
(declare-const GEN6 Int)
(declare-const GEN5 String)
(declare-const GEN4 Int)
(declare-const GEN3 String)
(declare-const GEN2 Int)
(declare-const GEN1 String)
(declare-fun r1 () (Set (Tuple String Int)))
(declare-fun r2 () (Set (Tuple Int String)))
(declare-fun r () (Set (Tuple String String)))
(declare-fun s () (Set (Tuple String String)))
(declare-fun t () (Set (Tuple String Int Int String)))
(declare-fun lt1 () (Set (Tuple Int Int)))
(declare-fun lt2 () (Set (Tuple Int Int)))
(declare-fun i () Int)
(assert (= r1 (insert (mkTuple GEN1 GEN2) (mkTuple GEN3 GEN4) (mkTuple GEN5 GEN6) (singleton (mkTuple GEN7 GEN8)))))
(assert (= r2 (insert (mkTuple GEN9 GEN10) (mkTuple GEN11 GEN12) (mkTuple GEN13 GEN14) (singleton (mkTuple GEN15 GEN16)))))
(assert (= r (join r1 r2)))
(assert (= s (transpose r)))
(assert (= t (product r1 r2)))
(assert (= lt1 (insert (mkTuple GEN17 GEN18) (mkTuple GEN19 GEN20) (mkTuple GEN21 GEN22) (singleton (mkTuple GEN23 GEN24)))))
(assert (= lt2 (tclosure lt1)))
(assert (= i (card t)))
(assert (= BAV1 (= r1 (insert (mkTuple GEN1 GEN2) (mkTuple GEN3 GEN4) (mkTuple GEN5 GEN6) (singleton (mkTuple GEN7 GEN8))))))
(assert (= BAV2 (= r2 (insert (mkTuple GEN9 GEN10) (mkTuple GEN11 GEN12) (mkTuple GEN13 GEN14) (singleton (mkTuple GEN15 GEN16))))))
(assert (= BAV3 (= r (join r1 r2))))
(assert (= BAV4 (= s (transpose r))))
(assert (= BAV5 (= t (product r1 r2))))
(assert (= BAV6 (= lt1 (insert (mkTuple GEN17 GEN18) (mkTuple GEN19 GEN20) (mkTuple GEN21 GEN22) (singleton (mkTuple GEN23 GEN24))))))
(assert (= BAV7 (= lt2 (tclosure lt1))))
(assert (= BAV8 (= i (card t))))
(check-sat)
(get-model)