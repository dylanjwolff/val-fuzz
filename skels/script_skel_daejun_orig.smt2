(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-fun a () Int)
(declare-fun b () Int)
(declare-fun pow256 () Int)
(assert (= pow256 GEN1))
(define-fun b2i ((x Bool)) Int (ite x 1 0))
(assert (and (<= GEN2 a) (< a pow256)))
(assert (and (<= GEN3 b) (< b pow256)))
(define-fun chop ((x Int)) Int (mod x pow256))
(assert (not (= (< (+ a b) pow256) (not (= (chop (+ (b2i (= b GEN4)) (b2i (> (chop (+ a b)) a)))) GEN5)))))
(assert (= BAV1 (= pow256 GEN1)))
(assert (= BAV2 (and (<= GEN2 a) (< a pow256))))
(assert (= BAV3 (<= GEN2 a)))
(assert (= BAV4 (< a pow256)))
(assert (= BAV5 (and (<= GEN3 b) (< b pow256))))
(assert (= BAV6 (<= GEN3 b)))
(assert (= BAV7 (< b pow256)))
(assert (= BAV8 (= (< (+ a b) pow256) (not (= (chop (+ (b2i (= b GEN4)) (b2i (> (chop (+ a b)) a)))) GEN5)))))
(assert (= BAV9 (< (+ a b) pow256)))
(assert (= BAV10 (= (chop (+ (b2i (= b GEN4)) (b2i (> (chop (+ a b)) a)))) GEN5)))
(assert (= BAV11 (= b GEN4)))
(assert (= BAV12 (> (chop (+ a b)) a)))
(check-sat)
(get-model)