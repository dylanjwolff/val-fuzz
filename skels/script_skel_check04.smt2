(set-logic ALL)
(declare-const GEN1 Int)
(declare-const GEN2 Int)
(declare-const GEN3 Int)
(get-model)
(declare-const GEN4 Int)
(declare-const GEN5 Int)
(declare-const GEN6 Int)
(declare-const GEN7 Int)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-fun _b () Int)
(declare-fun _n () Int)
(declare-fun _x () Bool)
(assert (<= GEN1 _n))
(assert (not (= _b GEN2)))
(push 1)
(assert (or (= _n GEN3) (or _x (= _b GEN4))))
(assert (= BAV8 (<= GEN1 _n)))
(assert (= BAV9 (= _b GEN2)))
(assert (= BAV10 (or (= _n GEN3) (or _x (= _b GEN4)))))
(assert (= BAV11 (= _n GEN3)))
(assert (= BAV12 (or _x (= _b GEN4))))
(assert (= BAV13 (= _b GEN4)))
(assert (= BAV14 (or (= _n GEN5) (or _x (= _b GEN6)))))
(assert (= BAV15 (= _n GEN5)))
(assert (= BAV16 (or _x (= _b GEN6))))
(assert (= BAV17 (= _b GEN6)))
(assert (= BAV18 (or (not _x) (= _n GEN7))))
(assert (= BAV19 (= _n GEN7)))
(check-sat)
(get-model)
(pop 1)
(assert (or (= _n GEN5) (or _x (= _b GEN6))))
(assert (or (not _x) (= _n GEN7)))
(check-sat)