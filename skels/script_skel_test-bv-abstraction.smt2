(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const GEN12 Int)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-fun x0 () (_ BitVec 8))
(declare-fun x1 () (_ BitVec 8))
(declare-fun y0 () (_ BitVec 8))
(declare-fun y1 () (_ BitVec 8))
(declare-fun y2 () (_ BitVec 8))
(assert (or (= x0 (bvadd (bvmul (_ bv2 8) y0) y1)) (= x0 (bvadd (bvmul (_ bv2 8) y1) y2)) (= x0 (bvadd (bvmul (_ bv2 8) y2) y0))))
(assert (or (= x1 (bvadd (bvadd (bvmul (_ bv3 8) y0) (bvmul (_ bv2 8) x0)) (_ bv5 8))) (= x1 (bvadd (bvadd (bvmul (_ bv3 8) y1) (bvmul (_ bv2 8) x0)) (_ bv5 8))) (= x1 (bvadd (bvadd (bvmul (_ bv3 8) x0) (bvmul (_ bv2 8) y2)) (_ bv5 8)))))
(assert (= BAV1 (or (= x0 (bvadd (bvmul (_ bv2 8) y0) y1)) (= x0 (bvadd (bvmul (_ bv2 8) y1) y2)) (= x0 (bvadd (bvmul (_ bv2 8) y2) y0)))))
(assert (= BAV2 (= x0 (bvadd (bvmul (_ bv2 8) y0) y1))))
(assert (= BAV3 (= x0 (bvadd (bvmul (_ bv2 8) y1) y2))))
(assert (= BAV4 (= x0 (bvadd (bvmul (_ bv2 8) y2) y0))))
(assert (= BAV5 (or (= x1 (bvadd (bvadd (bvmul (_ bv3 8) y0) (bvmul (_ bv2 8) x0)) (_ bv5 8))) (= x1 (bvadd (bvadd (bvmul (_ bv3 8) y1) (bvmul (_ bv2 8) x0)) (_ bv5 8))) (= x1 (bvadd (bvadd (bvmul (_ bv3 8) x0) (bvmul (_ bv2 8) y2)) (_ bv5 8))))))
(assert (= BAV6 (= x1 (bvadd (bvadd (bvmul (_ bv3 8) y0) (bvmul (_ bv2 8) x0)) (_ bv5 8)))))
(assert (= BAV7 (= x1 (bvadd (bvadd (bvmul (_ bv3 8) y1) (bvmul (_ bv2 8) x0)) (_ bv5 8)))))
(assert (= BAV8 (= x1 (bvadd (bvadd (bvmul (_ bv3 8) x0) (bvmul (_ bv2 8) y2)) (_ bv5 8)))))
(check-sat)
(get-model)
(exit)