(set-option :incremental false)
(set-info :source "Hand-crafted bit-vector benchmarks.  Some are from the SVC benchmark suite.
Contributed by Vijay Ganesh (vganesh@stanford.edu).  Translated into SMT-LIB
format by Clark Barrett using CVC3.")
(set-info :difficulty "0")
(set-info :category "crafted")
(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const BAV23 Bool)
(declare-const BAV24 Bool)
(declare-const BAV25 Bool)
(declare-const BAV26 Bool)
(declare-const BAV27 Bool)
(declare-const BAV28 Bool)
(declare-const BAV29 Bool)
(declare-const BAV30 Bool)
(declare-const BAV31 Bool)
(declare-const BAV32 Bool)
(declare-const BAV33 Bool)
(declare-const BAV34 Bool)
(declare-const BAV35 Bool)
(declare-const BAV36 Bool)
(declare-const GEN75 Int)
(declare-const GEN74 Int)
(declare-const GEN73 Int)
(declare-const GEN72 Int)
(declare-const GEN71 Int)
(declare-const GEN70 Int)
(declare-const GEN69 Int)
(declare-const GEN68 Int)
(declare-const GEN67 Int)
(declare-const GEN66 Int)
(declare-const GEN65 Int)
(declare-const GEN64 Int)
(declare-const GEN63 Int)
(declare-const GEN62 Int)
(declare-const GEN61 Int)
(declare-const GEN60 Int)
(declare-const GEN59 Int)
(declare-const GEN58 Int)
(declare-const GEN57 Int)
(declare-const GEN56 Int)
(declare-const GEN55 Int)
(declare-const GEN54 Int)
(declare-const GEN53 Int)
(declare-const GEN52 Int)
(declare-const GEN51 Int)
(declare-const GEN50 Int)
(declare-const GEN49 Int)
(declare-const GEN48 Int)
(declare-const GEN47 Int)
(declare-const GEN46 Int)
(declare-const GEN45 Int)
(declare-const GEN44 Int)
(declare-const GEN43 Int)
(declare-const GEN42 Int)
(declare-const GEN41 Int)
(declare-const GEN40 Int)
(declare-const GEN39 Int)
(declare-const GEN38 Int)
(declare-const GEN37 Int)
(declare-const GEN36 Int)
(declare-const GEN35 Int)
(declare-const GEN34 Int)
(declare-const GEN33 Int)
(declare-const GEN32 Int)
(declare-const GEN31 Int)
(declare-const GEN30 Int)
(declare-const GEN29 Int)
(declare-const GEN28 Int)
(declare-const GEN27 Int)
(declare-const GEN26 Int)
(declare-const GEN25 Int)
(declare-const GEN24 Int)
(declare-const GEN23 Int)
(declare-const GEN22 Int)
(declare-const GEN21 Int)
(declare-const GEN20 Int)
(declare-const GEN19 Int)
(declare-const GEN18 Int)
(declare-const GEN17 Int)
(declare-const GEN16 Int)
(declare-const GEN15 Int)
(declare-const GEN14 Int)
(declare-const GEN13 Int)
(declare-const GEN12 Int)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-fun a () (_ BitVec 32))
(declare-fun t () (_ BitVec 32))
(declare-fun b () (_ BitVec 32))
(declare-fun aa () (_ BitVec 32))
(declare-fun c () (_ BitVec 32))
(declare-fun d () (_ BitVec 32))
(declare-fun aaaa () (_ BitVec 32))
(declare-fun bbb () (_ BitVec 32))
(declare-fun aaa () (_ BitVec 32))
(declare-fun z () (_ BitVec 32))
(assert (= BAV1 (and (and (and (ite (= (concat (concat (_ bv0 1) ((_ extract 3 2) a)) ((_ extract 6 5) a)) ((_ extract 6 2) a)) (= ((_ extract 6 2) a) (_ bv0 5)) (ite (or (or (= (_ bv2 3) (_ bv6 3)) (= (_ bv0 3) (_ bv6 3))) (= (_ bv7 3) (_ bv6 3))) false true)) (and (ite (= (concat ((_ extract 3 2) t) ((_ extract 6 5) t)) ((_ extract 5 2) t)) (= ((_ extract 2 2) t) ((_ extract 6 6) t)) true) (ite (= ((_ extract 4 0) t) ((_ extract 6 2) t)) (and (and (= ((_ extract 2 2) t) ((_ extract 4 4) t)) (= ((_ extract 0 0) t) ((_ extract 6 6) t))) (= ((_ extract 1 1) t) ((_ extract 5 5) t))) true))) (=> (and (and (= ((_ extract 2 0) b) ((_ extract 2 0) aa)) (= ((_ extract 2 0) c) ((_ extract 2 0) b))) (= ((_ extract 2 0) c) ((_ extract 2 0) d))) (= ((_ extract 1 1) d) ((_ extract 1 1) aa)))) (and (and (and (ite (= (_ bv7 3) ((_ extract 2 0) aaaa)) (= (_ bv1 1) ((_ extract 1 1) aaaa)) true) (ite (= ((_ extract 2 0) bbb) ((_ extract 2 0) aaa)) (= ((_ extract 1 1) bbb) ((_ extract 1 1) aaa)) true)) (= (concat (concat (concat (_ bv4 3) (_ bv1 1)) (_ bv1 1)) (_ bv2 2)) (concat (concat (_ bv1 1) (_ bv7 5)) (_ bv0 1)))) (ite (= (_ bv3 2) ((_ extract 1 0) z)) (= (_ bv1 1) ((_ extract 0 0) z)) true)))))
(assert (= BAV2 (and (and (ite (= (concat (concat (_ bv0 1) ((_ extract 3 2) a)) ((_ extract 6 5) a)) ((_ extract 6 2) a)) (= ((_ extract 6 2) a) (_ bv0 5)) (ite (or (or (= (_ bv2 3) (_ bv6 3)) (= (_ bv0 3) (_ bv6 3))) (= (_ bv7 3) (_ bv6 3))) false true)) (and (ite (= (concat ((_ extract 3 2) t) ((_ extract 6 5) t)) ((_ extract 5 2) t)) (= ((_ extract 2 2) t) ((_ extract 6 6) t)) true) (ite (= ((_ extract 4 0) t) ((_ extract 6 2) t)) (and (and (= ((_ extract 2 2) t) ((_ extract 4 4) t)) (= ((_ extract 0 0) t) ((_ extract 6 6) t))) (= ((_ extract 1 1) t) ((_ extract 5 5) t))) true))) (=> (and (and (= ((_ extract 2 0) b) ((_ extract 2 0) aa)) (= ((_ extract 2 0) c) ((_ extract 2 0) b))) (= ((_ extract 2 0) c) ((_ extract 2 0) d))) (= ((_ extract 1 1) d) ((_ extract 1 1) aa))))))
(assert (= BAV3 (and (ite (= (concat (concat (_ bv0 1) ((_ extract 3 2) a)) ((_ extract 6 5) a)) ((_ extract 6 2) a)) (= ((_ extract 6 2) a) (_ bv0 5)) (ite (or (or (= (_ bv2 3) (_ bv6 3)) (= (_ bv0 3) (_ bv6 3))) (= (_ bv7 3) (_ bv6 3))) false true)) (and (ite (= (concat ((_ extract 3 2) t) ((_ extract 6 5) t)) ((_ extract 5 2) t)) (= ((_ extract 2 2) t) ((_ extract 6 6) t)) true) (ite (= ((_ extract 4 0) t) ((_ extract 6 2) t)) (and (and (= ((_ extract 2 2) t) ((_ extract 4 4) t)) (= ((_ extract 0 0) t) ((_ extract 6 6) t))) (= ((_ extract 1 1) t) ((_ extract 5 5) t))) true)))))
(assert (= BAV4 (= (concat (concat (_ bv0 1) ((_ extract 3 2) a)) ((_ extract 6 5) a)) ((_ extract 6 2) a))))
(assert (= BAV5 (= ((_ extract 6 2) a) (_ bv0 5))))
(assert (= BAV6 (or (or (= (_ bv2 3) (_ bv6 3)) (= (_ bv0 3) (_ bv6 3))) (= (_ bv7 3) (_ bv6 3)))))
(assert (= BAV7 (or (= (_ bv2 3) (_ bv6 3)) (= (_ bv0 3) (_ bv6 3)))))
(assert (= BAV8 (= (_ bv2 3) (_ bv6 3))))
(assert (= BAV9 (= (_ bv0 3) (_ bv6 3))))
(assert (= BAV10 (= (_ bv7 3) (_ bv6 3))))
(assert (= BAV11 (and (ite (= (concat ((_ extract 3 2) t) ((_ extract 6 5) t)) ((_ extract 5 2) t)) (= ((_ extract 2 2) t) ((_ extract 6 6) t)) true) (ite (= ((_ extract 4 0) t) ((_ extract 6 2) t)) (and (and (= ((_ extract 2 2) t) ((_ extract 4 4) t)) (= ((_ extract 0 0) t) ((_ extract 6 6) t))) (= ((_ extract 1 1) t) ((_ extract 5 5) t))) true))))
(assert (= BAV12 (= (concat ((_ extract 3 2) t) ((_ extract 6 5) t)) ((_ extract 5 2) t))))
(assert (= BAV13 (= ((_ extract 2 2) t) ((_ extract 6 6) t))))
(assert (= BAV14 (= ((_ extract 4 0) t) ((_ extract 6 2) t))))
(assert (= BAV15 (and (and (= ((_ extract 2 2) t) ((_ extract 4 4) t)) (= ((_ extract 0 0) t) ((_ extract 6 6) t))) (= ((_ extract 1 1) t) ((_ extract 5 5) t)))))
(assert (= BAV16 (and (= ((_ extract 2 2) t) ((_ extract 4 4) t)) (= ((_ extract 0 0) t) ((_ extract 6 6) t)))))
(assert (= BAV17 (= ((_ extract 2 2) t) ((_ extract 4 4) t))))
(assert (= BAV18 (= ((_ extract 0 0) t) ((_ extract 6 6) t))))
(assert (= BAV19 (= ((_ extract 1 1) t) ((_ extract 5 5) t))))
(assert (= BAV20 (=> (and (and (= ((_ extract 2 0) b) ((_ extract 2 0) aa)) (= ((_ extract 2 0) c) ((_ extract 2 0) b))) (= ((_ extract 2 0) c) ((_ extract 2 0) d))) (= ((_ extract 1 1) d) ((_ extract 1 1) aa)))))
(assert (= BAV21 (and (and (= ((_ extract 2 0) b) ((_ extract 2 0) aa)) (= ((_ extract 2 0) c) ((_ extract 2 0) b))) (= ((_ extract 2 0) c) ((_ extract 2 0) d)))))
(assert (= BAV22 (and (= ((_ extract 2 0) b) ((_ extract 2 0) aa)) (= ((_ extract 2 0) c) ((_ extract 2 0) b)))))
(assert (= BAV23 (= ((_ extract 2 0) b) ((_ extract 2 0) aa))))
(assert (= BAV24 (= ((_ extract 2 0) c) ((_ extract 2 0) b))))
(assert (= BAV25 (= ((_ extract 2 0) c) ((_ extract 2 0) d))))
(assert (= BAV26 (= ((_ extract 1 1) d) ((_ extract 1 1) aa))))
(assert (= BAV27 (and (and (and (ite (= (_ bv7 3) ((_ extract 2 0) aaaa)) (= (_ bv1 1) ((_ extract 1 1) aaaa)) true) (ite (= ((_ extract 2 0) bbb) ((_ extract 2 0) aaa)) (= ((_ extract 1 1) bbb) ((_ extract 1 1) aaa)) true)) (= (concat (concat (concat (_ bv4 3) (_ bv1 1)) (_ bv1 1)) (_ bv2 2)) (concat (concat (_ bv1 1) (_ bv7 5)) (_ bv0 1)))) (ite (= (_ bv3 2) ((_ extract 1 0) z)) (= (_ bv1 1) ((_ extract 0 0) z)) true))))
(assert (= BAV28 (and (and (ite (= (_ bv7 3) ((_ extract 2 0) aaaa)) (= (_ bv1 1) ((_ extract 1 1) aaaa)) true) (ite (= ((_ extract 2 0) bbb) ((_ extract 2 0) aaa)) (= ((_ extract 1 1) bbb) ((_ extract 1 1) aaa)) true)) (= (concat (concat (concat (_ bv4 3) (_ bv1 1)) (_ bv1 1)) (_ bv2 2)) (concat (concat (_ bv1 1) (_ bv7 5)) (_ bv0 1))))))
(assert (= BAV29 (and (ite (= (_ bv7 3) ((_ extract 2 0) aaaa)) (= (_ bv1 1) ((_ extract 1 1) aaaa)) true) (ite (= ((_ extract 2 0) bbb) ((_ extract 2 0) aaa)) (= ((_ extract 1 1) bbb) ((_ extract 1 1) aaa)) true))))
(assert (= BAV30 (= (_ bv7 3) ((_ extract 2 0) aaaa))))
(assert (= BAV31 (= (_ bv1 1) ((_ extract 1 1) aaaa))))
(assert (= BAV32 (= ((_ extract 2 0) bbb) ((_ extract 2 0) aaa))))
(assert (= BAV33 (= ((_ extract 1 1) bbb) ((_ extract 1 1) aaa))))
(assert (= BAV34 (= (concat (concat (concat (_ bv4 3) (_ bv1 1)) (_ bv1 1)) (_ bv2 2)) (concat (concat (_ bv1 1) (_ bv7 5)) (_ bv0 1)))))
(assert (= BAV35 (= (_ bv3 2) ((_ extract 1 0) z))))
(assert (= BAV36 (= (_ bv1 1) ((_ extract 0 0) z))))
(check-sat-assuming ((not (and (and (and (ite (= (concat (concat (_ bv0 1) ((_ extract 3 2) a)) ((_ extract 6 5) a)) ((_ extract 6 2) a)) (= ((_ extract 6 2) a) (_ bv0 5)) (ite (or (or (= (_ bv2 3) (_ bv6 3)) (= (_ bv0 3) (_ bv6 3))) (= (_ bv7 3) (_ bv6 3))) false true)) (and (ite (= (concat ((_ extract 3 2) t) ((_ extract 6 5) t)) ((_ extract 5 2) t)) (= ((_ extract 2 2) t) ((_ extract 6 6) t)) true) (ite (= ((_ extract 4 0) t) ((_ extract 6 2) t)) (and (and (= ((_ extract 2 2) t) ((_ extract 4 4) t)) (= ((_ extract 0 0) t) ((_ extract 6 6) t))) (= ((_ extract 1 1) t) ((_ extract 5 5) t))) true))) (=> (and (and (= ((_ extract 2 0) b) ((_ extract 2 0) aa)) (= ((_ extract 2 0) c) ((_ extract 2 0) b))) (= ((_ extract 2 0) c) ((_ extract 2 0) d))) (= ((_ extract 1 1) d) ((_ extract 1 1) aa)))) (and (and (and (ite (= (_ bv7 3) ((_ extract 2 0) aaaa)) (= (_ bv1 1) ((_ extract 1 1) aaaa)) true) (ite (= ((_ extract 2 0) bbb) ((_ extract 2 0) aaa)) (= ((_ extract 1 1) bbb) ((_ extract 1 1) aaa)) true)) (= (concat (concat (concat (_ bv4 3) (_ bv1 1)) (_ bv1 1)) (_ bv2 2)) (concat (concat (_ bv1 1) (_ bv7 5)) (_ bv0 1)))) (ite (= (_ bv3 2) ((_ extract 1 0) z)) (= (_ bv1 1) ((_ extract 0 0) z)) true))))))
(get-model)