(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-sort U 0)
(declare-fun P (Int Int U) Bool)
(declare-fun S () (Set Int))
(declare-fun f (Int) U)
(declare-fun g (Int) U)
(declare-fun h (U) Int)
(assert (member GEN1 S))
(assert (>= (h (f GEN2)) GEN3))
(assert (>= (h (g GEN4)) GEN5))
(assert (not (= (g GEN6) (f GEN7))))
(assert (forall ((x Int)(y Int)(z U)) (=> (or (= z (f x)) (= z (g x))) (=> (member x S) (=> (and (<= GEN8 y) (<= y (h z))) (P x y z))))))
(declare-fun Q (U Int) Bool)
(declare-const a U)
(declare-const b U)
(declare-const c U)
(assert (distinct a b c))
(assert (forall ((x U)(y Int)) (=> (and (<= GEN9 y) (<= y GEN10) (or (= x c) (= x (f y)))) (Q x y))))
(assert (not (Q b GEN11)))
(assert (= BAV1 (>= (h (f GEN2)) GEN3)))
(assert (= BAV2 (>= (h (g GEN4)) GEN5)))
(assert (= BAV3 (= (g GEN6) (f GEN7))))
(assert (= BAV4 (forall ((x Int)(y Int)(z U)) (=> (or (= z (f x)) (= z (g x))) (=> (member x S) (=> (and (<= GEN8 y) (<= y (h z))) (P x y z)))))))
(assert (= BAV5 (forall ((x Int)(y Int)(z U)) (or (= z (f x)) (= z (g x))))))
(assert (= BAV6 (forall ((x Int)(y Int)(z U)) (= z (f x)))))
(assert (= BAV7 (forall ((x Int)(y Int)(z U)) (= z (g x)))))
(assert (= BAV8 (forall ((x Int)(y Int)(z U)) (=> (member x S) (=> (and (<= GEN8 y) (<= y (h z))) (P x y z))))))
(assert (= BAV9 (forall ((x Int)(y Int)(z U)) (=> (and (<= GEN8 y) (<= y (h z))) (P x y z)))))
(assert (= BAV10 (forall ((x Int)(y Int)(z U)) (and (<= GEN8 y) (<= y (h z))))))
(assert (= BAV11 (forall ((x Int)(y Int)(z U)) (<= GEN8 y))))
(assert (= BAV12 (forall ((x Int)(y Int)(z U)) (<= y (h z)))))
(assert (= BAV13 (distinct a b c)))
(assert (= BAV14 (forall ((x U)(y Int)) (=> (and (<= GEN9 y) (<= y GEN10) (or (= x c) (= x (f y)))) (Q x y)))))
(assert (= BAV15 (forall ((x U)(y Int)) (and (<= GEN9 y) (<= y GEN10) (or (= x c) (= x (f y)))))))
(assert (= BAV16 (forall ((x U)(y Int)) (<= GEN9 y))))
(assert (= BAV17 (forall ((x U)(y Int)) (<= y GEN10))))
(assert (= BAV18 (forall ((x U)(y Int)) (or (= x c) (= x (f y))))))
(assert (= BAV19 (forall ((x U)(y Int)) (= x c))))
(assert (= BAV20 (forall ((x U)(y Int)) (= x (f y)))))
(check-sat)
(get-model)