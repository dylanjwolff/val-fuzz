(set-option :auto-config true)
(declare-const GEN1 Int)
(declare-const GEN2 Int)
(declare-const GEN3 Int)
(declare-const GEN4 Int)
(declare-const GEN5 Int)
(declare-const GEN6 Int)
(declare-const GEN7 Int)
(declare-const GEN8 Int)
(declare-const GEN9 Int)
(declare-const GEN10 Int)
(declare-const GEN11 Int)
(declare-const GEN12 Int)
(declare-const GEN13 Int)
(declare-const GEN14 Int)
(declare-const GEN15 Int)
(declare-const GEN16 Int)
(declare-const GEN17 Int)
(declare-const GEN18 Int)
(declare-const GEN19 Int)
(declare-const GEN20 Int)
(declare-const GEN21 Int)
(declare-const GEN22 Int)
(declare-const GEN23 Int)
(declare-const GEN24 Int)
(declare-const GEN25 Int)
(declare-const GEN26 Int)
(declare-const GEN27 Int)
(declare-const GEN28 Int)
(declare-const GEN29 Int)
(declare-const GEN30 Int)
(declare-const GEN31 Int)
(declare-const GEN32 Int)
(declare-const GEN33 Int)
(declare-const BAV34 Bool)
(declare-const BAV35 Bool)
(declare-const BAV36 Bool)
(declare-const BAV37 Bool)
(declare-const BAV38 Bool)
(declare-const BAV39 Bool)
(declare-const BAV40 Bool)
(declare-const BAV41 Bool)
(declare-const BAV42 Bool)
(declare-const BAV43 Bool)
(declare-const BAV44 Bool)
(declare-const BAV45 Bool)
(declare-const BAV46 Bool)
(declare-const BAV47 Bool)
(declare-const BAV48 Bool)
(declare-const BAV49 Bool)
(declare-const BAV50 Bool)
(declare-const BAV51 Bool)
(declare-const BAV52 Bool)
(declare-const BAV53 Bool)
(declare-const BAV54 Bool)
(declare-const BAV55 Bool)
(declare-const BAV56 Bool)
(declare-const BAV57 Bool)
(declare-const BAV58 Bool)
(declare-const BAV59 Bool)
(declare-const BAV60 Bool)
(declare-const BAV61 Bool)
(declare-const BAV62 Bool)
(declare-const BAV63 Bool)
(declare-const BAV64 Bool)
(declare-const BAV65 Bool)
(declare-const BAV66 Bool)
(declare-const BAV67 Bool)
(declare-const BAV68 Bool)
(declare-const BAV69 Bool)
(declare-const BAV70 Bool)
(declare-const BAV71 Bool)
(declare-const BAV72 Bool)
(declare-const BAV73 Bool)
(declare-const BAV74 Bool)
(declare-const BAV75 Bool)
(set-option :produce-models true)
(set-option :smt.mbqi true)
(declare-fun n () Int)
(declare-fun a_1 () Int)
(declare-fun f (Int) Int)
(declare-fun g_1 (Int) Int)
(assert (> n GEN1))
(assert (forall ((i Int)) (=> (and (<= GEN2 i) (<= i n)) (and (= (f GEN3) GEN4) (= (f GEN5) GEN6) (<= GEN7 (f i)) (<= (f i) GEN8) (=> (= (f i) GEN9) (= i n)) (=> (= (f i) GEN10) (or (= (f (+ i GEN11)) GEN12) (= (f (+ i GEN13)) GEN14))) (=> (= (f i) GEN15) (or (= (f (+ i GEN16)) GEN17) (= (f (+ i GEN18)) GEN19))) (= (g_1 GEN20) GEN21) (=> (= (f i) GEN22) (= (g_1 (+ i GEN23)) GEN24)) (=> (= (f i) GEN25) (= (g_1 (+ i GEN26)) (+ (g_1 i) GEN27))) (=> (= (f i) GEN28) (= (g_1 (+ i GEN29)) (g_1 i))) (=> (= (f i) GEN30) (< (g_1 i) a_1)) (=> (= (f i) GEN31) (and (>= (g_1 i) a_1) (> (g_1 i) GEN32)))))))
(assert (= BAV34 (> n GEN1)))
(assert (= BAV35 (forall ((i Int)) (=> (and (<= GEN2 i) (<= i n)) (and (= (f GEN3) GEN4) (= (f GEN5) GEN6) (<= GEN7 (f i)) (<= (f i) GEN8) (=> (= (f i) GEN9) (= i n)) (=> (= (f i) GEN10) (or (= (f (+ i GEN11)) GEN12) (= (f (+ i GEN13)) GEN14))) (=> (= (f i) GEN15) (or (= (f (+ i GEN16)) GEN17) (= (f (+ i GEN18)) GEN19))) (= (g_1 GEN20) GEN21) (=> (= (f i) GEN22) (= (g_1 (+ i GEN23)) GEN24)) (=> (= (f i) GEN25) (= (g_1 (+ i GEN26)) (+ (g_1 i) GEN27))) (=> (= (f i) GEN28) (= (g_1 (+ i GEN29)) (g_1 i))) (=> (= (f i) GEN30) (< (g_1 i) a_1)) (=> (= (f i) GEN31) (and (>= (g_1 i) a_1) (> (g_1 i) GEN32))))))))
(assert (= BAV36 (forall ((i Int)) (and (<= GEN2 i) (<= i n)))))
(assert (= BAV37 (forall ((i Int)) (<= GEN2 i))))
(assert (= BAV38 (forall ((i Int)) (<= i n))))
(assert (= BAV39 (forall ((i Int)) (and (= (f GEN3) GEN4) (= (f GEN5) GEN6) (<= GEN7 (f i)) (<= (f i) GEN8) (=> (= (f i) GEN9) (= i n)) (=> (= (f i) GEN10) (or (= (f (+ i GEN11)) GEN12) (= (f (+ i GEN13)) GEN14))) (=> (= (f i) GEN15) (or (= (f (+ i GEN16)) GEN17) (= (f (+ i GEN18)) GEN19))) (= (g_1 GEN20) GEN21) (=> (= (f i) GEN22) (= (g_1 (+ i GEN23)) GEN24)) (=> (= (f i) GEN25) (= (g_1 (+ i GEN26)) (+ (g_1 i) GEN27))) (=> (= (f i) GEN28) (= (g_1 (+ i GEN29)) (g_1 i))) (=> (= (f i) GEN30) (< (g_1 i) a_1)) (=> (= (f i) GEN31) (and (>= (g_1 i) a_1) (> (g_1 i) GEN32)))))))
(assert (= BAV40 (forall ((i Int)) (= (f GEN3) GEN4))))
(assert (= BAV41 (forall ((i Int)) (= (f GEN5) GEN6))))
(assert (= BAV42 (forall ((i Int)) (<= GEN7 (f i)))))
(assert (= BAV43 (forall ((i Int)) (<= (f i) GEN8))))
(assert (= BAV44 (forall ((i Int)) (=> (= (f i) GEN9) (= i n)))))
(assert (= BAV45 (forall ((i Int)) (= (f i) GEN9))))
(assert (= BAV46 (forall ((i Int)) (= i n))))
(assert (= BAV47 (forall ((i Int)) (=> (= (f i) GEN10) (or (= (f (+ i GEN11)) GEN12) (= (f (+ i GEN13)) GEN14))))))
(assert (= BAV48 (forall ((i Int)) (= (f i) GEN10))))
(assert (= BAV49 (forall ((i Int)) (or (= (f (+ i GEN11)) GEN12) (= (f (+ i GEN13)) GEN14)))))
(assert (= BAV50 (forall ((i Int)) (= (f (+ i GEN11)) GEN12))))
(assert (= BAV51 (forall ((i Int)) (= (f (+ i GEN13)) GEN14))))
(assert (= BAV52 (forall ((i Int)) (=> (= (f i) GEN15) (or (= (f (+ i GEN16)) GEN17) (= (f (+ i GEN18)) GEN19))))))
(assert (= BAV53 (forall ((i Int)) (= (f i) GEN15))))
(assert (= BAV54 (forall ((i Int)) (or (= (f (+ i GEN16)) GEN17) (= (f (+ i GEN18)) GEN19)))))
(assert (= BAV55 (forall ((i Int)) (= (f (+ i GEN16)) GEN17))))
(assert (= BAV56 (forall ((i Int)) (= (f (+ i GEN18)) GEN19))))
(assert (= BAV57 (forall ((i Int)) (= (g_1 GEN20) GEN21))))
(assert (= BAV58 (forall ((i Int)) (=> (= (f i) GEN22) (= (g_1 (+ i GEN23)) GEN24)))))
(assert (= BAV59 (forall ((i Int)) (= (f i) GEN22))))
(assert (= BAV60 (forall ((i Int)) (= (g_1 (+ i GEN23)) GEN24))))
(assert (= BAV61 (forall ((i Int)) (=> (= (f i) GEN25) (= (g_1 (+ i GEN26)) (+ (g_1 i) GEN27))))))
(assert (= BAV62 (forall ((i Int)) (= (f i) GEN25))))
(assert (= BAV63 (forall ((i Int)) (= (g_1 (+ i GEN26)) (+ (g_1 i) GEN27)))))
(assert (= BAV64 (forall ((i Int)) (=> (= (f i) GEN28) (= (g_1 (+ i GEN29)) (g_1 i))))))
(assert (= BAV65 (forall ((i Int)) (= (f i) GEN28))))
(assert (= BAV66 (forall ((i Int)) (= (g_1 (+ i GEN29)) (g_1 i)))))
(assert (= BAV67 (forall ((i Int)) (=> (= (f i) GEN30) (< (g_1 i) a_1)))))
(assert (= BAV68 (forall ((i Int)) (= (f i) GEN30))))
(assert (= BAV69 (forall ((i Int)) (< (g_1 i) a_1))))
(assert (= BAV70 (forall ((i Int)) (=> (= (f i) GEN31) (and (>= (g_1 i) a_1) (> (g_1 i) GEN32))))))
(assert (= BAV71 (forall ((i Int)) (= (f i) GEN31))))
(assert (= BAV72 (forall ((i Int)) (and (>= (g_1 i) a_1) (> (g_1 i) GEN32)))))
(assert (= BAV73 (forall ((i Int)) (>= (g_1 i) a_1))))
(assert (= BAV74 (forall ((i Int)) (> (g_1 i) GEN32))))
(assert (= BAV75 (> n GEN33)))
(check-sat)
(get-model)
(echo "Property does not hold for n > 1")
(assert (> n GEN33))
(check-sat)