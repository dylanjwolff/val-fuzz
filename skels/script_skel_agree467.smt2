(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const BAV23 Bool)
(declare-const BAV24 Bool)
(declare-const BAV25 Bool)
(declare-const BAV26 Bool)
(declare-const BAV27 Bool)
(declare-const BAV28 Bool)
(declare-const BAV29 Bool)
(declare-const BAV30 Bool)
(declare-const BAV31 Bool)
(declare-const BAV32 Bool)
(declare-const BAV33 Bool)
(declare-const BAV34 Bool)
(declare-const BAV35 Bool)
(declare-const BAV36 Bool)
(declare-const BAV37 Bool)
(declare-const BAV38 Bool)
(declare-const BAV39 Bool)
(declare-const BAV40 Bool)
(declare-const BAV41 Bool)
(declare-const BAV42 Bool)
(declare-const BAV43 Bool)
(declare-const BAV44 Bool)
(declare-const BAV45 Bool)
(declare-const BAV46 Bool)
(declare-const BAV47 Bool)
(declare-const BAV48 Bool)
(declare-const BAV49 Bool)
(declare-const BAV50 Bool)
(declare-const BAV51 Bool)
(declare-const BAV52 Bool)
(declare-const BAV53 Bool)
(declare-const BAV54 Bool)
(declare-const BAV55 Bool)
(declare-const BAV56 Bool)
(declare-const BAV57 Bool)
(declare-const BAV58 Bool)
(declare-const BAV59 Bool)
(declare-const BAV60 Bool)
(declare-const BAV61 Bool)
(declare-const BAV62 Bool)
(declare-const BAV63 Bool)
(declare-const BAV64 Bool)
(declare-const BAV65 Bool)
(declare-const BAV66 Bool)
(declare-const BAV67 Bool)
(declare-const BAV68 Bool)
(declare-const BAV69 Bool)
(declare-const BAV70 Bool)
(declare-const BAV71 Bool)
(declare-const BAV72 Bool)
(declare-const BAV73 Bool)
(declare-const BAV74 Bool)
(declare-const BAV75 Bool)
(declare-const BAV76 Bool)
(declare-const BAV77 Bool)
(declare-const BAV78 Bool)
(declare-const BAV79 Bool)
(declare-const BAV80 Bool)
(declare-const BAV81 Bool)
(declare-const BAV82 Bool)
(declare-const BAV83 Bool)
(declare-const BAV84 Bool)
(declare-const BAV85 Bool)
(declare-const BAV86 Bool)
(declare-const BAV87 Bool)
(declare-const BAV88 Bool)
(declare-const BAV89 Bool)
(declare-const BAV90 Bool)
(declare-const BAV91 Bool)
(declare-const BAV92 Bool)
(declare-const BAV93 Bool)
(declare-const BAV94 Bool)
(declare-const BAV95 Bool)
(declare-const BAV96 Bool)
(declare-const BAV97 Bool)
(declare-const BAV98 Bool)
(declare-const BAV99 Bool)
(declare-const BAV100 Bool)
(declare-const BAV101 Bool)
(declare-const BAV102 Bool)
(declare-const BAV103 Bool)
(declare-const BAV104 Bool)
(declare-const BAV105 Bool)
(declare-const BAV106 Bool)
(declare-const BAV107 Bool)
(declare-const BAV108 Bool)
(declare-const BAV109 Bool)
(declare-const BAV110 Bool)
(declare-const BAV111 Bool)
(declare-const BAV112 Bool)
(declare-const BAV113 Bool)
(declare-const BAV114 Bool)
(declare-const BAV115 Bool)
(declare-const BAV116 Bool)
(declare-const BAV117 Bool)
(declare-const BAV118 Bool)
(declare-const BAV119 Bool)
(declare-const BAV120 Bool)
(declare-const BAV121 Bool)
(declare-const BAV122 Bool)
(declare-const BAV123 Bool)
(declare-const BAV124 Bool)
(declare-const BAV125 Bool)
(declare-const BAV126 Bool)
(declare-const BAV127 Bool)
(declare-const BAV128 Bool)
(declare-const BAV129 Bool)
(declare-const BAV130 Bool)
(declare-const GEN13 Int)
(declare-const GEN12 Int)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-datatypes () ((UNIT (Unit))))
(declare-datatypes () ((BOOL (Truth) (Falsity))))
(declare-sort node$type 0)
(declare-sort value$type 0)
(define-sort Nodes$elem$type () node$type)
(declare-sort Nodes$t$type 0)
(declare-fun Nodes$empty () Nodes$t$type)
(declare-fun Nodes$mem (Nodes$elem$type Nodes$t$type) BOOL)
(declare-fun Nodes$add (Nodes$elem$type Nodes$t$type) Nodes$t$type)
(declare-fun Nodes$remove (Nodes$elem$type Nodes$t$type) Nodes$t$type)
(declare-fun Nodes$cardinality (Nodes$t$type) Int)
(declare-fun Nodes$union (Nodes$t$type Nodes$t$type) Nodes$t$type)
(declare-fun Nodes$disjoint (Nodes$t$type Nodes$t$type) BOOL)
(assert (forall ((a Nodes$t$type)) (= (Nodes$disjoint a Nodes$empty) Truth)))
(assert (forall ((a Nodes$t$type)(b Nodes$t$type)) (= (Nodes$disjoint a b) (Nodes$disjoint b a))))
(assert (forall ((e Nodes$elem$type)) (not (= (Nodes$mem e Nodes$empty) Truth))))
(assert (forall ((x Nodes$elem$type)(y Nodes$elem$type)(s Nodes$t$type)) (= (Nodes$mem x (Nodes$add y s)) (ite (or (= x y) (= (Nodes$mem x s) Truth)) Truth Falsity))))
(assert (forall ((x Nodes$elem$type)(y Nodes$elem$type)(s Nodes$t$type)) (= (Nodes$mem x (Nodes$remove y s)) (ite (and (not (= x y)) (= (Nodes$mem x s) Truth)) Truth Falsity))))
(assert (forall ((x Nodes$elem$type)(a Nodes$t$type)) (=> (= (Nodes$mem x a) Truth) (forall ((b Nodes$t$type)) (= (Nodes$mem x (Nodes$union a b)) Truth)))))
(assert (forall ((a Nodes$t$type)(b Nodes$t$type)) (= (Nodes$union a b) (Nodes$union b a))))
(assert (forall ((x Nodes$elem$type)(a Nodes$t$type)(b Nodes$t$type)) (=> (= (Nodes$mem x (Nodes$union a b)) Truth) (or (= (Nodes$mem x a) Truth) (= (Nodes$mem x b) Truth)))))
(assert (forall ((a Nodes$t$type)) (= (Nodes$union a a) a)))
(assert (forall ((a Nodes$t$type)) (= (Nodes$union a Nodes$empty) a)))
(assert (forall ((a Nodes$t$type)(b Nodes$t$type)) (=> (= (Nodes$union a b) Nodes$empty) (= a Nodes$empty))))
(assert (= (Nodes$cardinality Nodes$empty) GEN1))
(assert (forall ((s Nodes$t$type)) (=> (= (Nodes$cardinality s) GEN2) (= s Nodes$empty))))
(assert (forall ((s Nodes$t$type)) (>= (Nodes$cardinality s) GEN3)))
(assert (forall ((x Nodes$elem$type)(s Nodes$t$type)) (= (Nodes$cardinality (Nodes$add x s)) (ite (= (Nodes$mem x s) Truth) (Nodes$cardinality s) (+ (Nodes$cardinality s) GEN4)))))
(assert (forall ((x Nodes$elem$type)(s Nodes$t$type)) (= (Nodes$cardinality (Nodes$remove x s)) (ite (= (Nodes$mem x s) Truth) (- (Nodes$cardinality s) GEN5) (Nodes$cardinality s)))))
(assert (forall ((a Nodes$t$type)(b Nodes$t$type)) (=> (= (Nodes$disjoint a b) Truth) (= (Nodes$cardinality (Nodes$union a b)) (+ (Nodes$cardinality a) (Nodes$cardinality b))))))
(declare-fun Nodes$eq (Nodes$t$type Nodes$t$type) BOOL)
(assert (forall ((a Nodes$t$type)(b Nodes$t$type)) (= (Nodes$eq a b) (ite (= a b) Truth Falsity))))
(assert (forall ((a Nodes$t$type)(b Nodes$t$type)) (=> (forall ((x Nodes$elem$type)) (= (Nodes$mem x a) (Nodes$mem x b))) (= (Nodes$eq a b) Truth))))
(define-sort Values$elem$type () value$type)
(declare-sort Values$t$type 0)
(declare-fun Values$empty () Values$t$type)
(declare-fun Values$mem (Values$elem$type Values$t$type) BOOL)
(declare-fun Values$add (Values$elem$type Values$t$type) Values$t$type)
(declare-fun Values$remove (Values$elem$type Values$t$type) Values$t$type)
(declare-fun Values$cardinality (Values$t$type) Int)
(declare-fun Values$union (Values$t$type Values$t$type) Values$t$type)
(declare-fun Values$disjoint (Values$t$type Values$t$type) BOOL)
(assert (forall ((a Values$t$type)) (= (Values$disjoint a Values$empty) Truth)))
(assert (forall ((a Values$t$type)(b Values$t$type)) (= (Values$disjoint a b) (Values$disjoint b a))))
(assert (forall ((e Values$elem$type)) (not (= (Values$mem e Values$empty) Truth))))
(assert (forall ((x Values$elem$type)(y Values$elem$type)(s Values$t$type)) (= (Values$mem x (Values$add y s)) (ite (or (= x y) (= (Values$mem x s) Truth)) Truth Falsity))))
(assert (forall ((x Values$elem$type)(y Values$elem$type)(s Values$t$type)) (= (Values$mem x (Values$remove y s)) (ite (and (not (= x y)) (= (Values$mem x s) Truth)) Truth Falsity))))
(assert (forall ((x Values$elem$type)(a Values$t$type)) (=> (= (Values$mem x a) Truth) (forall ((b Values$t$type)) (= (Values$mem x (Values$union a b)) Truth)))))
(assert (forall ((a Values$t$type)(b Values$t$type)) (= (Values$union a b) (Values$union b a))))
(assert (forall ((x Values$elem$type)(a Values$t$type)(b Values$t$type)) (=> (= (Values$mem x (Values$union a b)) Truth) (or (= (Values$mem x a) Truth) (= (Values$mem x b) Truth)))))
(assert (forall ((a Values$t$type)) (= (Values$union a a) a)))
(assert (forall ((a Values$t$type)) (= (Values$union a Values$empty) a)))
(assert (forall ((a Values$t$type)(b Values$t$type)) (=> (= (Values$union a b) Values$empty) (= a Values$empty))))
(assert (= (Values$cardinality Values$empty) GEN6))
(assert (forall ((s Values$t$type)) (=> (= (Values$cardinality s) GEN7) (= s Values$empty))))
(assert (forall ((s Values$t$type)) (>= (Values$cardinality s) GEN8)))
(assert (forall ((x Values$elem$type)(s Values$t$type)) (= (Values$cardinality (Values$add x s)) (ite (= (Values$mem x s) Truth) (Values$cardinality s) (+ (Values$cardinality s) GEN9)))))
(assert (forall ((x Values$elem$type)(s Values$t$type)) (= (Values$cardinality (Values$remove x s)) (ite (= (Values$mem x s) Truth) (- (Values$cardinality s) GEN10) (Values$cardinality s)))))
(assert (forall ((a Values$t$type)(b Values$t$type)) (=> (= (Values$disjoint a b) Truth) (= (Values$cardinality (Values$union a b)) (+ (Values$cardinality a) (Values$cardinality b))))))
(declare-fun Values$eq (Values$t$type Values$t$type) BOOL)
(assert (forall ((a Values$t$type)(b Values$t$type)) (= (Values$eq a b) (ite (= a b) Truth Falsity))))
(assert (forall ((a Values$t$type)(b Values$t$type)) (=> (forall ((x Values$elem$type)) (= (Values$mem x a) (Values$mem x b))) (= (Values$eq a b) Truth))))
(define-sort node_set$type () (Array node$type BOOL))
(declare-fun mk_array_1 () (Array node$type BOOL))
(assert (forall ((mk_array_1_index node$type)) (= (select mk_array_1 mk_array_1_index) Falsity)))
(define-fun empty_node_set () node_set$type mk_array_1)
(define-sort node_pair_set$type () (Array node$type (Array node$type BOOL)))
(declare-fun mk_array_2 () (Array node$type BOOL))
(assert (forall ((mk_array_2_index node$type)) (= (select mk_array_2 mk_array_2_index) Falsity)))
(declare-fun mk_array_3 () (Array node$type (Array node$type BOOL)))
(assert (forall ((mk_array_3_index node$type)) (= (select mk_array_3 mk_array_3_index) mk_array_2)))
(define-fun empty_node_pair_set () node_pair_set$type mk_array_3)
(declare-fun mk_array_4 () (Array node$type BOOL))
(assert (forall ((mk_array_4_index node$type)) (= (select mk_array_4 mk_array_4_index) Truth)))
(declare-fun mk_array_5 () (Array node$type (Array node$type BOOL)))
(assert (forall ((mk_array_5_index node$type)) (= (select mk_array_5 mk_array_5_index) mk_array_4)))
(define-fun full_node_pair_set () node_pair_set$type mk_array_5)
(declare-fun input () (Array node$type value$type))
(declare-fun t () Int)
(assert (> t GEN11))
(define-sort message$type () Values$t$type)
(define-sort message_set$type () (Array node$type message$type))
(define-sort state$type () Values$t$type)
(define-sort state_set$type () (Array node$type state$type))
(define-fun null_message () message$type Values$empty)
(declare-fun mk_array_6 () (Array node$type message$type))
(assert (forall ((mk_array_6_index node$type)) (= (select mk_array_6 mk_array_6_index) null_message)))
(define-fun null_message_set () message_set$type mk_array_6)
(define-fun null_state () state$type Values$empty)
(declare-fun mk_array_7 () (Array node$type state$type))
(assert (forall ((mk_array_7_index node$type)) (= (select mk_array_7 mk_array_7_index) null_state)))
(define-fun null_state_set () state_set$type mk_array_7)
(declare-fun choose (Values$t$type) value$type)
(assert (forall ((vals Values$t$type)) (or (= vals Values$empty) (= (Values$mem (choose vals) vals) Truth))))
(define-sort failure_pattern$type () node_pair_set$type)
(define-fun is_faulty ((p node$type) (deliver failure_pattern$type)) BOOL 
(ite (exists ((q node$type)) (not (= (select (select deliver p) q) Truth))) 
Truth Falsity))
(define-fun is_silent ((p node$type) (deliver failure_pattern$type)) BOOL 
(ite (forall ((q node$type)) (not (= (select (select deliver p) q) Truth))) 
Truth Falsity))
(declare-datatypes () ((phase_state$type (init_phase) (send_phase) (recv_phase) (comp_phase))))
(declare-datatypes () ((clean_state$type (before) (active) (after))))
(declare-fun init_done () node_set$type)
(declare-fun crashed () Nodes$t$type)
(declare-fun comp_done () node_set$type)
(declare-fun chosen () (Array node$type BOOL))
(declare-fun recv_done () node_pair_set$type)
(declare-fun phase () phase_state$type)
(declare-fun clean () clean_state$type)
(declare-fun global_state () state_set$type)
(declare-fun messages () (Array node$type message_set$type))
(declare-fun deliver_message () failure_pattern$type)
(declare-fun crashing () Nodes$t$type)
(declare-fun round () Int)
(declare-fun send_done () node_pair_set$type)
(declare-fun mk_array_8 () (Array node$type BOOL))
(assert (forall ((mk_array_8_index node$type)) (= (select mk_array_8 mk_array_8_index) Falsity)))
(declare-fun mk_array_9 () (Array node$type message_set$type))
(assert (forall ((mk_array_9_index node$type)) (= (select mk_array_9 mk_array_9_index) null_message_set)))
(assert (not (=> (and (and (and (and (and (and (and (and (and (and (and (and (= clean before) (= global_state null_state_set)) (= messages mk_array_9)) (= deliver_message full_node_pair_set)) (= comp_done empty_node_set)) (= recv_done empty_node_pair_set)) (= send_done empty_node_pair_set)) (= init_done empty_node_set)) (= phase init_phase)) (= crashing Nodes$empty)) (= crashed Nodes$empty)) (= round GEN12)) (= chosen mk_array_8)) (forall ((n node$type)) (=> (and (= (select chosen n) Truth) (= round (+ t GEN13))) (and (forall ((n node$type)(m node$type)) (= (select (select send_done n) m) Truth)) (forall ((n node$type)(m node$type)) (= (select (select recv_done n) m) Truth))))))))
(assert (= BAV1 (forall ((a Nodes$t$type)) (= (Nodes$disjoint a Nodes$empty) Truth))))
(assert (= BAV2 (forall ((a Nodes$t$type)(b Nodes$t$type)) (= (Nodes$disjoint a b) (Nodes$disjoint b a)))))
(assert (= BAV3 (forall ((e Nodes$elem$type)) (= (Nodes$mem e Nodes$empty) Truth))))
(assert (= BAV4 (forall ((x Nodes$elem$type)(y Nodes$elem$type)(s Nodes$t$type)) (= (Nodes$mem x (Nodes$add y s)) (ite (or (= x y) (= (Nodes$mem x s) Truth)) Truth Falsity)))))
(assert (= BAV5 (forall ((x Nodes$elem$type)(y Nodes$elem$type)(s Nodes$t$type)) (or (= x y) (= (Nodes$mem x s) Truth)))))
(assert (= BAV6 (forall ((x Nodes$elem$type)(y Nodes$elem$type)(s Nodes$t$type)) (= x y))))
(assert (= BAV7 (forall ((x Nodes$elem$type)(y Nodes$elem$type)(s Nodes$t$type)) (= (Nodes$mem x s) Truth))))
(assert (= BAV8 (forall ((x Nodes$elem$type)(y Nodes$elem$type)(s Nodes$t$type)) (= (Nodes$mem x (Nodes$remove y s)) (ite (and (not (= x y)) (= (Nodes$mem x s) Truth)) Truth Falsity)))))
(assert (= BAV9 (forall ((x Nodes$elem$type)(y Nodes$elem$type)(s Nodes$t$type)) (and (not (= x y)) (= (Nodes$mem x s) Truth)))))
(assert (= BAV10 (forall ((x Nodes$elem$type)(y Nodes$elem$type)(s Nodes$t$type)) (= x y))))
(assert (= BAV11 (forall ((x Nodes$elem$type)(y Nodes$elem$type)(s Nodes$t$type)) (= (Nodes$mem x s) Truth))))
(assert (= BAV12 (forall ((x Nodes$elem$type)(a Nodes$t$type)) (=> (= (Nodes$mem x a) Truth) (forall ((b Nodes$t$type)) (= (Nodes$mem x (Nodes$union a b)) Truth))))))
(assert (= BAV13 (forall ((x Nodes$elem$type)(a Nodes$t$type)) (= (Nodes$mem x a) Truth))))
(assert (= BAV14 (forall ((x Nodes$elem$type)(a Nodes$t$type)(b Nodes$t$type)) (= (Nodes$mem x (Nodes$union a b)) Truth))))
(assert (= BAV15 (forall ((a Nodes$t$type)(b Nodes$t$type)) (= (Nodes$union a b) (Nodes$union b a)))))
(assert (= BAV16 (forall ((x Nodes$elem$type)(a Nodes$t$type)(b Nodes$t$type)) (=> (= (Nodes$mem x (Nodes$union a b)) Truth) (or (= (Nodes$mem x a) Truth) (= (Nodes$mem x b) Truth))))))
(assert (= BAV17 (forall ((x Nodes$elem$type)(a Nodes$t$type)(b Nodes$t$type)) (= (Nodes$mem x (Nodes$union a b)) Truth))))
(assert (= BAV18 (forall ((x Nodes$elem$type)(a Nodes$t$type)(b Nodes$t$type)) (or (= (Nodes$mem x a) Truth) (= (Nodes$mem x b) Truth)))))
(assert (= BAV19 (forall ((x Nodes$elem$type)(a Nodes$t$type)(b Nodes$t$type)) (= (Nodes$mem x a) Truth))))
(assert (= BAV20 (forall ((x Nodes$elem$type)(a Nodes$t$type)(b Nodes$t$type)) (= (Nodes$mem x b) Truth))))
(assert (= BAV21 (forall ((a Nodes$t$type)) (= (Nodes$union a a) a))))
(assert (= BAV22 (forall ((a Nodes$t$type)) (= (Nodes$union a Nodes$empty) a))))
(assert (= BAV23 (forall ((a Nodes$t$type)(b Nodes$t$type)) (=> (= (Nodes$union a b) Nodes$empty) (= a Nodes$empty)))))
(assert (= BAV24 (forall ((a Nodes$t$type)(b Nodes$t$type)) (= (Nodes$union a b) Nodes$empty))))
(assert (= BAV25 (forall ((a Nodes$t$type)(b Nodes$t$type)) (= a Nodes$empty))))
(assert (= BAV26 (= (Nodes$cardinality Nodes$empty) GEN1)))
(assert (= BAV27 (forall ((s Nodes$t$type)) (=> (= (Nodes$cardinality s) GEN2) (= s Nodes$empty)))))
(assert (= BAV28 (forall ((s Nodes$t$type)) (= (Nodes$cardinality s) GEN2))))
(assert (= BAV29 (forall ((s Nodes$t$type)) (= s Nodes$empty))))
(assert (= BAV30 (forall ((s Nodes$t$type)) (>= (Nodes$cardinality s) GEN3))))
(assert (= BAV31 (forall ((x Nodes$elem$type)(s Nodes$t$type)) (= (Nodes$cardinality (Nodes$add x s)) (ite (= (Nodes$mem x s) Truth) (Nodes$cardinality s) (+ (Nodes$cardinality s) GEN4))))))
(assert (= BAV32 (forall ((x Nodes$elem$type)(s Nodes$t$type)) (= (Nodes$mem x s) Truth))))
(assert (= BAV33 (forall ((x Nodes$elem$type)(s Nodes$t$type)) (= (Nodes$cardinality (Nodes$remove x s)) (ite (= (Nodes$mem x s) Truth) (- (Nodes$cardinality s) GEN5) (Nodes$cardinality s))))))
(assert (= BAV34 (forall ((x Nodes$elem$type)(s Nodes$t$type)) (= (Nodes$mem x s) Truth))))
(assert (= BAV35 (forall ((a Nodes$t$type)(b Nodes$t$type)) (=> (= (Nodes$disjoint a b) Truth) (= (Nodes$cardinality (Nodes$union a b)) (+ (Nodes$cardinality a) (Nodes$cardinality b)))))))
(assert (= BAV36 (forall ((a Nodes$t$type)(b Nodes$t$type)) (= (Nodes$disjoint a b) Truth))))
(assert (= BAV37 (forall ((a Nodes$t$type)(b Nodes$t$type)) (= (Nodes$cardinality (Nodes$union a b)) (+ (Nodes$cardinality a) (Nodes$cardinality b))))))
(assert (= BAV38 (forall ((a Nodes$t$type)(b Nodes$t$type)) (= (Nodes$eq a b) (ite (= a b) Truth Falsity)))))
(assert (= BAV39 (forall ((a Nodes$t$type)(b Nodes$t$type)) (= a b))))
(assert (= BAV40 (forall ((a Nodes$t$type)(b Nodes$t$type)) (=> (forall ((x Nodes$elem$type)) (= (Nodes$mem x a) (Nodes$mem x b))) (= (Nodes$eq a b) Truth)))))
(assert (= BAV41 (forall ((a Nodes$t$type)(b Nodes$t$type)(x Nodes$elem$type)) (= (Nodes$mem x a) (Nodes$mem x b)))))
(assert (= BAV42 (forall ((a Nodes$t$type)(b Nodes$t$type)) (= (Nodes$eq a b) Truth))))
(assert (= BAV43 (forall ((a Values$t$type)) (= (Values$disjoint a Values$empty) Truth))))
(assert (= BAV44 (forall ((a Values$t$type)(b Values$t$type)) (= (Values$disjoint a b) (Values$disjoint b a)))))
(assert (= BAV45 (forall ((e Values$elem$type)) (= (Values$mem e Values$empty) Truth))))
(assert (= BAV46 (forall ((x Values$elem$type)(y Values$elem$type)(s Values$t$type)) (= (Values$mem x (Values$add y s)) (ite (or (= x y) (= (Values$mem x s) Truth)) Truth Falsity)))))
(assert (= BAV47 (forall ((x Values$elem$type)(y Values$elem$type)(s Values$t$type)) (or (= x y) (= (Values$mem x s) Truth)))))
(assert (= BAV48 (forall ((x Values$elem$type)(y Values$elem$type)(s Values$t$type)) (= x y))))
(assert (= BAV49 (forall ((x Values$elem$type)(y Values$elem$type)(s Values$t$type)) (= (Values$mem x s) Truth))))
(assert (= BAV50 (forall ((x Values$elem$type)(y Values$elem$type)(s Values$t$type)) (= (Values$mem x (Values$remove y s)) (ite (and (not (= x y)) (= (Values$mem x s) Truth)) Truth Falsity)))))
(assert (= BAV51 (forall ((x Values$elem$type)(y Values$elem$type)(s Values$t$type)) (and (not (= x y)) (= (Values$mem x s) Truth)))))
(assert (= BAV52 (forall ((x Values$elem$type)(y Values$elem$type)(s Values$t$type)) (= x y))))
(assert (= BAV53 (forall ((x Values$elem$type)(y Values$elem$type)(s Values$t$type)) (= (Values$mem x s) Truth))))
(assert (= BAV54 (forall ((x Values$elem$type)(a Values$t$type)) (=> (= (Values$mem x a) Truth) (forall ((b Values$t$type)) (= (Values$mem x (Values$union a b)) Truth))))))
(assert (= BAV55 (forall ((x Values$elem$type)(a Values$t$type)) (= (Values$mem x a) Truth))))
(assert (= BAV56 (forall ((x Values$elem$type)(a Values$t$type)(b Values$t$type)) (= (Values$mem x (Values$union a b)) Truth))))
(assert (= BAV57 (forall ((a Values$t$type)(b Values$t$type)) (= (Values$union a b) (Values$union b a)))))
(assert (= BAV58 (forall ((x Values$elem$type)(a Values$t$type)(b Values$t$type)) (=> (= (Values$mem x (Values$union a b)) Truth) (or (= (Values$mem x a) Truth) (= (Values$mem x b) Truth))))))
(assert (= BAV59 (forall ((x Values$elem$type)(a Values$t$type)(b Values$t$type)) (= (Values$mem x (Values$union a b)) Truth))))
(assert (= BAV60 (forall ((x Values$elem$type)(a Values$t$type)(b Values$t$type)) (or (= (Values$mem x a) Truth) (= (Values$mem x b) Truth)))))
(assert (= BAV61 (forall ((x Values$elem$type)(a Values$t$type)(b Values$t$type)) (= (Values$mem x a) Truth))))
(assert (= BAV62 (forall ((x Values$elem$type)(a Values$t$type)(b Values$t$type)) (= (Values$mem x b) Truth))))
(assert (= BAV63 (forall ((a Values$t$type)) (= (Values$union a a) a))))
(assert (= BAV64 (forall ((a Values$t$type)) (= (Values$union a Values$empty) a))))
(assert (= BAV65 (forall ((a Values$t$type)(b Values$t$type)) (=> (= (Values$union a b) Values$empty) (= a Values$empty)))))
(assert (= BAV66 (forall ((a Values$t$type)(b Values$t$type)) (= (Values$union a b) Values$empty))))
(assert (= BAV67 (forall ((a Values$t$type)(b Values$t$type)) (= a Values$empty))))
(assert (= BAV68 (= (Values$cardinality Values$empty) GEN6)))
(assert (= BAV69 (forall ((s Values$t$type)) (=> (= (Values$cardinality s) GEN7) (= s Values$empty)))))
(assert (= BAV70 (forall ((s Values$t$type)) (= (Values$cardinality s) GEN7))))
(assert (= BAV71 (forall ((s Values$t$type)) (= s Values$empty))))
(assert (= BAV72 (forall ((s Values$t$type)) (>= (Values$cardinality s) GEN8))))
(assert (= BAV73 (forall ((x Values$elem$type)(s Values$t$type)) (= (Values$cardinality (Values$add x s)) (ite (= (Values$mem x s) Truth) (Values$cardinality s) (+ (Values$cardinality s) GEN9))))))
(assert (= BAV74 (forall ((x Values$elem$type)(s Values$t$type)) (= (Values$mem x s) Truth))))
(assert (= BAV75 (forall ((x Values$elem$type)(s Values$t$type)) (= (Values$cardinality (Values$remove x s)) (ite (= (Values$mem x s) Truth) (- (Values$cardinality s) GEN10) (Values$cardinality s))))))
(assert (= BAV76 (forall ((x Values$elem$type)(s Values$t$type)) (= (Values$mem x s) Truth))))
(assert (= BAV77 (forall ((a Values$t$type)(b Values$t$type)) (=> (= (Values$disjoint a b) Truth) (= (Values$cardinality (Values$union a b)) (+ (Values$cardinality a) (Values$cardinality b)))))))
(assert (= BAV78 (forall ((a Values$t$type)(b Values$t$type)) (= (Values$disjoint a b) Truth))))
(assert (= BAV79 (forall ((a Values$t$type)(b Values$t$type)) (= (Values$cardinality (Values$union a b)) (+ (Values$cardinality a) (Values$cardinality b))))))
(assert (= BAV80 (forall ((a Values$t$type)(b Values$t$type)) (= (Values$eq a b) (ite (= a b) Truth Falsity)))))
(assert (= BAV81 (forall ((a Values$t$type)(b Values$t$type)) (= a b))))
(assert (= BAV82 (forall ((a Values$t$type)(b Values$t$type)) (=> (forall ((x Values$elem$type)) (= (Values$mem x a) (Values$mem x b))) (= (Values$eq a b) Truth)))))
(assert (= BAV83 (forall ((a Values$t$type)(b Values$t$type)(x Values$elem$type)) (= (Values$mem x a) (Values$mem x b)))))
(assert (= BAV84 (forall ((a Values$t$type)(b Values$t$type)) (= (Values$eq a b) Truth))))
(assert (= BAV85 (forall ((mk_array_1_index node$type)) (= (select mk_array_1 mk_array_1_index) Falsity))))
(assert (= BAV86 (forall ((mk_array_2_index node$type)) (= (select mk_array_2 mk_array_2_index) Falsity))))
(assert (= BAV87 (forall ((mk_array_3_index node$type)) (= (select mk_array_3 mk_array_3_index) mk_array_2))))
(assert (= BAV88 (forall ((mk_array_4_index node$type)) (= (select mk_array_4 mk_array_4_index) Truth))))
(assert (= BAV89 (forall ((mk_array_5_index node$type)) (= (select mk_array_5 mk_array_5_index) mk_array_4))))
(assert (= BAV90 (> t GEN11)))
(assert (= BAV91 (forall ((mk_array_6_index node$type)) (= (select mk_array_6 mk_array_6_index) null_message))))
(assert (= BAV92 (forall ((mk_array_7_index node$type)) (= (select mk_array_7 mk_array_7_index) null_state))))
(assert (= BAV93 (forall ((vals Values$t$type)) (or (= vals Values$empty) (= (Values$mem (choose vals) vals) Truth)))))
(assert (= BAV94 (forall ((vals Values$t$type)) (= vals Values$empty))))
(assert (= BAV95 (forall ((vals Values$t$type)) (= (Values$mem (choose vals) vals) Truth))))
(assert (= BAV96 (forall ((mk_array_8_index node$type)) (= (select mk_array_8 mk_array_8_index) Falsity))))
(assert (= BAV97 (forall ((mk_array_9_index node$type)) (= (select mk_array_9 mk_array_9_index) null_message_set))))
(assert (= BAV98 (=> (and (and (and (and (and (and (and (and (and (and (and (and (= clean before) (= global_state null_state_set)) (= messages mk_array_9)) (= deliver_message full_node_pair_set)) (= comp_done empty_node_set)) (= recv_done empty_node_pair_set)) (= send_done empty_node_pair_set)) (= init_done empty_node_set)) (= phase init_phase)) (= crashing Nodes$empty)) (= crashed Nodes$empty)) (= round GEN12)) (= chosen mk_array_8)) (forall ((n node$type)) (=> (and (= (select chosen n) Truth) (= round (+ t GEN13))) (and (forall ((n node$type)(m node$type)) (= (select (select send_done n) m) Truth)) (forall ((n node$type)(m node$type)) (= (select (select recv_done n) m) Truth))))))))
(assert (= BAV99 (and (and (and (and (and (and (and (and (and (and (and (and (= clean before) (= global_state null_state_set)) (= messages mk_array_9)) (= deliver_message full_node_pair_set)) (= comp_done empty_node_set)) (= recv_done empty_node_pair_set)) (= send_done empty_node_pair_set)) (= init_done empty_node_set)) (= phase init_phase)) (= crashing Nodes$empty)) (= crashed Nodes$empty)) (= round GEN12)) (= chosen mk_array_8))))
(assert (= BAV100 (and (and (and (and (and (and (and (and (and (and (and (= clean before) (= global_state null_state_set)) (= messages mk_array_9)) (= deliver_message full_node_pair_set)) (= comp_done empty_node_set)) (= recv_done empty_node_pair_set)) (= send_done empty_node_pair_set)) (= init_done empty_node_set)) (= phase init_phase)) (= crashing Nodes$empty)) (= crashed Nodes$empty)) (= round GEN12))))
(assert (= BAV101 (and (and (and (and (and (and (and (and (and (and (= clean before) (= global_state null_state_set)) (= messages mk_array_9)) (= deliver_message full_node_pair_set)) (= comp_done empty_node_set)) (= recv_done empty_node_pair_set)) (= send_done empty_node_pair_set)) (= init_done empty_node_set)) (= phase init_phase)) (= crashing Nodes$empty)) (= crashed Nodes$empty))))
(assert (= BAV102 (and (and (and (and (and (and (and (and (and (= clean before) (= global_state null_state_set)) (= messages mk_array_9)) (= deliver_message full_node_pair_set)) (= comp_done empty_node_set)) (= recv_done empty_node_pair_set)) (= send_done empty_node_pair_set)) (= init_done empty_node_set)) (= phase init_phase)) (= crashing Nodes$empty))))
(assert (= BAV103 (and (and (and (and (and (and (and (and (= clean before) (= global_state null_state_set)) (= messages mk_array_9)) (= deliver_message full_node_pair_set)) (= comp_done empty_node_set)) (= recv_done empty_node_pair_set)) (= send_done empty_node_pair_set)) (= init_done empty_node_set)) (= phase init_phase))))
(assert (= BAV104 (and (and (and (and (and (and (and (= clean before) (= global_state null_state_set)) (= messages mk_array_9)) (= deliver_message full_node_pair_set)) (= comp_done empty_node_set)) (= recv_done empty_node_pair_set)) (= send_done empty_node_pair_set)) (= init_done empty_node_set))))
(assert (= BAV105 (and (and (and (and (and (and (= clean before) (= global_state null_state_set)) (= messages mk_array_9)) (= deliver_message full_node_pair_set)) (= comp_done empty_node_set)) (= recv_done empty_node_pair_set)) (= send_done empty_node_pair_set))))
(assert (= BAV106 (and (and (and (and (and (= clean before) (= global_state null_state_set)) (= messages mk_array_9)) (= deliver_message full_node_pair_set)) (= comp_done empty_node_set)) (= recv_done empty_node_pair_set))))
(assert (= BAV107 (and (and (and (and (= clean before) (= global_state null_state_set)) (= messages mk_array_9)) (= deliver_message full_node_pair_set)) (= comp_done empty_node_set))))
(assert (= BAV108 (and (and (and (= clean before) (= global_state null_state_set)) (= messages mk_array_9)) (= deliver_message full_node_pair_set))))
(assert (= BAV109 (and (and (= clean before) (= global_state null_state_set)) (= messages mk_array_9))))
(assert (= BAV110 (and (= clean before) (= global_state null_state_set))))
(assert (= BAV111 (= clean before)))
(assert (= BAV112 (= global_state null_state_set)))
(assert (= BAV113 (= messages mk_array_9)))
(assert (= BAV114 (= deliver_message full_node_pair_set)))
(assert (= BAV115 (= comp_done empty_node_set)))
(assert (= BAV116 (= recv_done empty_node_pair_set)))
(assert (= BAV117 (= send_done empty_node_pair_set)))
(assert (= BAV118 (= init_done empty_node_set)))
(assert (= BAV119 (= phase init_phase)))
(assert (= BAV120 (= crashing Nodes$empty)))
(assert (= BAV121 (= crashed Nodes$empty)))
(assert (= BAV122 (= round GEN12)))
(assert (= BAV123 (= chosen mk_array_8)))
(assert (= BAV124 (forall ((n node$type)) (=> (and (= (select chosen n) Truth) (= round (+ t GEN13))) (and (forall ((n node$type)(m node$type)) (= (select (select send_done n) m) Truth)) (forall ((n node$type)(m node$type)) (= (select (select recv_done n) m) Truth)))))))
(assert (= BAV125 (forall ((n node$type)) (and (= (select chosen n) Truth) (= round (+ t GEN13))))))
(assert (= BAV126 (forall ((n node$type)) (= (select chosen n) Truth))))
(assert (= BAV127 (forall ((n node$type)) (= round (+ t GEN13)))))
(assert (= BAV128 (forall ((n node$type)) (and (forall ((n node$type)(m node$type)) (= (select (select send_done n) m) Truth)) (forall ((n node$type)(m node$type)) (= (select (select recv_done n) m) Truth))))))
(assert (= BAV129 (forall ((n node$type)(n node$type)(m node$type)) (= (select (select send_done n) m) Truth))))
(assert (= BAV130 (forall ((n node$type)(n node$type)(m node$type)) (= (select (select recv_done n) m) Truth))))
(check-sat)
(get-model)