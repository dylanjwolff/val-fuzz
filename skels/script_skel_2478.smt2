(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const BAV23 Bool)
(declare-const BAV24 Bool)
(declare-const BAV25 Bool)
(declare-const BAV26 Bool)
(declare-const BAV27 Bool)
(declare-const BAV28 Bool)
(declare-const BAV29 Bool)
(declare-const BAV30 Bool)
(declare-const BAV31 Bool)
(declare-const BAV32 Bool)
(declare-const BAV33 Bool)
(declare-const BAV34 Bool)
(declare-const BAV35 Bool)
(declare-const BAV36 Bool)
(declare-const BAV37 Bool)
(declare-const BAV38 Bool)
(declare-const BAV39 Bool)
(declare-const BAV40 Bool)
(declare-const BAV41 Bool)
(declare-const BAV42 Bool)
(declare-const BAV43 Bool)
(declare-const BAV44 Bool)
(declare-const BAV45 Bool)
(declare-const BAV46 Bool)
(declare-const BAV47 Bool)
(declare-const BAV48 Bool)
(declare-const GEN47 Int)
(declare-const GEN46 Int)
(declare-const GEN45 String)
(declare-const GEN44 String)
(declare-const GEN43 Int)
(declare-const GEN42 String)
(declare-const GEN41 Int)
(declare-const GEN40 String)
(declare-const GEN39 Int)
(declare-const GEN38 Int)
(declare-const GEN37 String)
(declare-const GEN36 Int)
(declare-const GEN35 Int)
(declare-const GEN34 String)
(declare-const GEN33 Int)
(declare-const GEN32 Int)
(declare-const GEN31 String)
(declare-const GEN30 Int)
(declare-const GEN29 Int)
(declare-const GEN28 String)
(declare-const GEN27 Int)
(declare-const GEN26 String)
(declare-const GEN25 Int)
(declare-const GEN24 Int)
(declare-const GEN23 String)
(declare-const GEN22 Int)
(declare-const GEN21 Int)
(declare-const GEN20 String)
(declare-const GEN19 Int)
(declare-const GEN18 Int)
(declare-const GEN17 Int)
(declare-const GEN16 String)
(declare-const GEN15 Int)
(declare-const GEN14 String)
(declare-const GEN13 Int)
(declare-const GEN12 Int)
(declare-const GEN11 String)
(declare-const GEN10 Int)
(declare-const GEN9 String)
(declare-const GEN8 String)
(declare-const GEN7 String)
(declare-const GEN6 String)
(declare-const GEN5 String)
(declare-const GEN4 String)
(declare-const GEN3 Int)
(declare-const GEN2 String)
(declare-const GEN1 Int)
(declare-fun a () String)
(declare-fun b () String)
(declare-fun c () String)
(declare-fun d () String)
(declare-fun shifted1_value1 () String)
(declare-fun f () String)
(declare-fun g () String)
(assert (and (not (str.contains (str.substr c GEN1 (str.len f)) GEN2)) (not (str.contains (str.substr c GEN3 (str.len f)) GEN4))))
(assert (not (str.contains f GEN5)))
(assert (= d GEN6))
(assert (and (not (str.contains f GEN7)) (not (str.contains f GEN8)) (not (str.contains f GEN9))))
(assert (and (not (str.contains (str.substr c GEN10 (str.len f)) GEN11)) (not (= (str.at (str.substr c GEN12 (str.len f)) (- (str.len f) GEN13)) GEN14))))
(assert (not (= (str.at f (- (str.len f) GEN15)) GEN16)))
(assert (and (not (= (str.at (str.substr c GEN17 (str.len f)) (- (str.len (str.substr c GEN18 (str.len f))) GEN19)) GEN20)) (not (= (str.at (str.substr c GEN21 (str.len f)) (- (str.len f) GEN22)) GEN23)) (not (= (str.at (str.substr c GEN24 (str.len f)) (- (str.len f) GEN25)) GEN26))))
(assert (not (= (str.at f GEN27) GEN28)))
(assert (and (not (= (str.at (str.substr c GEN29 (str.len f)) GEN30) GEN31)) (not (= (str.at (str.substr c GEN32 (str.len f)) GEN33) GEN34))))
(assert (and (not (= (str.at (str.substr c GEN35 (str.len f)) GEN36) GEN37)) (not (= (str.at (str.substr c GEN38 (str.len f)) GEN39) GEN40))))
(assert (and (not (= (str.at f GEN41) GEN42)) (not (= (str.at f GEN43) GEN44)) (= (str.indexof f GEN45 GEN46) (- GEN47)) (not (= (str.len f) 0))))
(assert (and (not (= (str.at (str.substr c 0 (str.len f)) 0) " ")) (= (str.indexof (str.substr c 0 (str.len f)) "=" 0) (- 1))))
(assert (not (str.contains f ",")))
(assert (<= 0 (+ (str.indexof (str.substr shifted1_value1 0 (str.indexof (str.substr b 0 (str.len shifted1_value1)) "=" 0)) "N" 0) 1)))
(assert (<= 0 (- (str.len (str.substr (str.substr b 0 (str.len shifted1_value1)) 0 (- (str.indexof shifted1_value1 "=" 0) 0))) (+ (str.indexof (str.substr (str.substr b 0 (str.len shifted1_value1)) 0 (- (str.indexof shifted1_value1 "=" 0) 0)) "N" 0) 1))))
(assert (<= 0 (- (+ (str.indexof (str.substr (str.substr b 0 (str.len shifted1_value1)) 0 (str.indexof (str.substr b 0 (str.len shifted1_value1)) "=" 0)) "N" 0) 1))))
(assert (<= 0 (+ (str.indexof (str.substr (str.substr b 0 (str.len shifted1_value1)) 0 (- (str.indexof shifted1_value1 "=" 0) 0)) "N" 0) 1)))
(assert (<= 0 (- (str.len (str.substr shifted1_value1 0 (- (str.indexof (str.substr b 0 (str.len shifted1_value1)) "=" 0) 0))) (+ (str.indexof (str.substr shifted1_value1 0 (- (str.indexof (str.substr b 0 (str.len shifted1_value1)) "=" 0) 0)) "N" 0) 1))))
(assert (<= 0 (- (str.len (str.substr shifted1_value1 0 (- (str.indexof (str.substr b 0 (str.len shifted1_value1)) "=" 0) 0))) (+ (str.indexof (str.substr shifted1_value1 0 (- (str.indexof (str.substr b 0 (str.len shifted1_value1)) "=" 0) 0)) "N" 0) 1))))
(assert (<= 0 (- (str.len (str.substr shifted1_value1 0 (- (str.indexof shifted1_value1 "=" 0) 0))) (+ (str.indexof (str.substr shifted1_value1 0 (- (str.indexof shifted1_value1 "=" 0) 0)) "N" 0) 1))))
(assert (<= 0 (str.indexof (str.substr b 0 (str.len shifted1_value1)) "=" 0)))
(assert (<= 0 (- (str.indexof shifted1_value1 "=" 0))))
(assert (<= 0 (+ (str.indexof (str.substr b 0 (str.len shifted1_value1)) "=" 0) 1)))
(assert (<= 0 (- (str.len (str.substr b 0 (str.len shifted1_value1))) (+ (str.indexof shifted1_value1 "=" 0) 1))))
(assert (<= 0 (- (+ (str.indexof (str.substr c 0 (str.len f)) "S" 0) 1))))
(assert (<= 0 (- (str.len f) (+ (str.indexof f "S" 0) 1))))
(assert (<= 0 (- (str.len (str.substr c 0 (str.len f))) (+ (str.indexof (str.substr c 0 (str.len f)) "S" 0) 1))))
(assert (<= 0 (+ (str.indexof f "S" 0) 1)))
(assert (<= 0 (+ (str.indexof (str.substr c 0 (str.len f)) "S" 0) 1)))
(assert (<= 0 (- (str.len (str.substr c 0 (str.len f))) (+ (str.indexof f "S" 0) 1))))
(assert (= (not (= "" g)) true (= (str.replace (str.replace a d "") "Pkgwt" "") "Example:")))
(assert (= a (str.++ (str.++ d "Pkgwt") g)))
(assert (= b (str.++ shifted1_value1 g)))
(assert (= c (str.++ f g)))
(assert (= BAV1 (and (not (str.contains (str.substr c GEN1 (str.len f)) GEN2)) (not (str.contains (str.substr c GEN3 (str.len f)) GEN4)))))
(assert (= BAV2 (= d GEN6)))
(assert (= BAV3 (and (not (str.contains f GEN7)) (not (str.contains f GEN8)) (not (str.contains f GEN9)))))
(assert (= BAV4 (and (not (str.contains (str.substr c GEN10 (str.len f)) GEN11)) (not (= (str.at (str.substr c GEN12 (str.len f)) (- (str.len f) GEN13)) GEN14)))))
(assert (= BAV5 (= (str.at (str.substr c GEN12 (str.len f)) (- (str.len f) GEN13)) GEN14)))
(assert (= BAV6 (= (str.at f (- (str.len f) GEN15)) GEN16)))
(assert (= BAV7 (and (not (= (str.at (str.substr c GEN17 (str.len f)) (- (str.len (str.substr c GEN18 (str.len f))) GEN19)) GEN20)) (not (= (str.at (str.substr c GEN21 (str.len f)) (- (str.len f) GEN22)) GEN23)) (not (= (str.at (str.substr c GEN24 (str.len f)) (- (str.len f) GEN25)) GEN26)))))
(assert (= BAV8 (= (str.at (str.substr c GEN17 (str.len f)) (- (str.len (str.substr c GEN18 (str.len f))) GEN19)) GEN20)))
(assert (= BAV9 (= (str.at (str.substr c GEN21 (str.len f)) (- (str.len f) GEN22)) GEN23)))
(assert (= BAV10 (= (str.at (str.substr c GEN24 (str.len f)) (- (str.len f) GEN25)) GEN26)))
(assert (= BAV11 (= (str.at f GEN27) GEN28)))
(assert (= BAV12 (and (not (= (str.at (str.substr c GEN29 (str.len f)) GEN30) GEN31)) (not (= (str.at (str.substr c GEN32 (str.len f)) GEN33) GEN34)))))
(assert (= BAV13 (= (str.at (str.substr c GEN29 (str.len f)) GEN30) GEN31)))
(assert (= BAV14 (= (str.at (str.substr c GEN32 (str.len f)) GEN33) GEN34)))
(assert (= BAV15 (and (not (= (str.at (str.substr c GEN35 (str.len f)) GEN36) GEN37)) (not (= (str.at (str.substr c GEN38 (str.len f)) GEN39) GEN40)))))
(assert (= BAV16 (= (str.at (str.substr c GEN35 (str.len f)) GEN36) GEN37)))
(assert (= BAV17 (= (str.at (str.substr c GEN38 (str.len f)) GEN39) GEN40)))
(assert (= BAV18 (and (not (= (str.at f GEN41) GEN42)) (not (= (str.at f GEN43) GEN44)) (= (str.indexof f GEN45 GEN46) (- GEN47)) (not (= (str.len f) 0)))))
(assert (= BAV19 (= (str.at f GEN41) GEN42)))
(assert (= BAV20 (= (str.at f GEN43) GEN44)))
(assert (= BAV21 (= (str.indexof f GEN45 GEN46) (- GEN47))))
(assert (= BAV22 (= (str.len f) 0)))
(assert (= BAV23 (and (not (= (str.at (str.substr c 0 (str.len f)) 0) " ")) (= (str.indexof (str.substr c 0 (str.len f)) "=" 0) (- 1)))))
(assert (= BAV24 (= (str.at (str.substr c 0 (str.len f)) 0) " ")))
(assert (= BAV25 (= (str.indexof (str.substr c 0 (str.len f)) "=" 0) (- 1))))
(assert (= BAV26 (<= 0 (+ (str.indexof (str.substr shifted1_value1 0 (str.indexof (str.substr b 0 (str.len shifted1_value1)) "=" 0)) "N" 0) 1))))
(assert (= BAV27 (<= 0 (- (str.len (str.substr (str.substr b 0 (str.len shifted1_value1)) 0 (- (str.indexof shifted1_value1 "=" 0) 0))) (+ (str.indexof (str.substr (str.substr b 0 (str.len shifted1_value1)) 0 (- (str.indexof shifted1_value1 "=" 0) 0)) "N" 0) 1)))))
(assert (= BAV28 (<= 0 (- (+ (str.indexof (str.substr (str.substr b 0 (str.len shifted1_value1)) 0 (str.indexof (str.substr b 0 (str.len shifted1_value1)) "=" 0)) "N" 0) 1)))))
(assert (= BAV29 (<= 0 (+ (str.indexof (str.substr (str.substr b 0 (str.len shifted1_value1)) 0 (- (str.indexof shifted1_value1 "=" 0) 0)) "N" 0) 1))))
(assert (= BAV30 (<= 0 (- (str.len (str.substr shifted1_value1 0 (- (str.indexof (str.substr b 0 (str.len shifted1_value1)) "=" 0) 0))) (+ (str.indexof (str.substr shifted1_value1 0 (- (str.indexof (str.substr b 0 (str.len shifted1_value1)) "=" 0) 0)) "N" 0) 1)))))
(assert (= BAV31 (<= 0 (- (str.len (str.substr shifted1_value1 0 (- (str.indexof (str.substr b 0 (str.len shifted1_value1)) "=" 0) 0))) (+ (str.indexof (str.substr shifted1_value1 0 (- (str.indexof (str.substr b 0 (str.len shifted1_value1)) "=" 0) 0)) "N" 0) 1)))))
(assert (= BAV32 (<= 0 (- (str.len (str.substr shifted1_value1 0 (- (str.indexof shifted1_value1 "=" 0) 0))) (+ (str.indexof (str.substr shifted1_value1 0 (- (str.indexof shifted1_value1 "=" 0) 0)) "N" 0) 1)))))
(assert (= BAV33 (<= 0 (str.indexof (str.substr b 0 (str.len shifted1_value1)) "=" 0))))
(assert (= BAV34 (<= 0 (- (str.indexof shifted1_value1 "=" 0)))))
(assert (= BAV35 (<= 0 (+ (str.indexof (str.substr b 0 (str.len shifted1_value1)) "=" 0) 1))))
(assert (= BAV36 (<= 0 (- (str.len (str.substr b 0 (str.len shifted1_value1))) (+ (str.indexof shifted1_value1 "=" 0) 1)))))
(assert (= BAV37 (<= 0 (- (+ (str.indexof (str.substr c 0 (str.len f)) "S" 0) 1)))))
(assert (= BAV38 (<= 0 (- (str.len f) (+ (str.indexof f "S" 0) 1)))))
(assert (= BAV39 (<= 0 (- (str.len (str.substr c 0 (str.len f))) (+ (str.indexof (str.substr c 0 (str.len f)) "S" 0) 1)))))
(assert (= BAV40 (<= 0 (+ (str.indexof f "S" 0) 1))))
(assert (= BAV41 (<= 0 (+ (str.indexof (str.substr c 0 (str.len f)) "S" 0) 1))))
(assert (= BAV42 (<= 0 (- (str.len (str.substr c 0 (str.len f))) (+ (str.indexof f "S" 0) 1)))))
(assert (= BAV43 (= (not (= "" g)) true (= (str.replace (str.replace a d "") "Pkgwt" "") "Example:"))))
(assert (= BAV44 (= "" g)))
(assert (= BAV45 (= (str.replace (str.replace a d "") "Pkgwt" "") "Example:")))
(assert (= BAV46 (= a (str.++ (str.++ d "Pkgwt") g))))
(assert (= BAV47 (= b (str.++ shifted1_value1 g))))
(assert (= BAV48 (= c (str.++ f g))))
(check-sat)
(get-model)