(set-logic ALL)
(declare-const GEN1 Int)
(declare-const GEN2 Int)
(declare-const GEN3 Int)
(declare-const GEN4 Int)
(declare-const GEN5 Int)
(declare-const GEN6 Int)
(declare-const GEN7 Int)
(declare-const GEN8 Int)
(declare-const GEN9 Int)
(declare-const GEN10 Int)
(declare-const GEN11 Int)
(declare-const GEN12 Int)
(declare-const GEN13 Int)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(assert (forall ((X Real)(Y Real)) (or (not (is_int X)) (not (>= (+ X (* (- (/ GEN1 GEN2)) Y)) (- (/ GEN3 GEN4)))) (not (>= (+ (* (- GEN5) X) (* (- (/ GEN6 GEN7)) Y)) (- (/ GEN8 GEN9)))) (not (>= (+ (* (- GEN10) X) (* (/ GEN11 GEN12) Y)) GEN13)))))
(assert (= BAV14 (forall ((X Real)(Y Real)) (or (not (is_int X)) (not (>= (+ X (* (- (/ GEN1 GEN2)) Y)) (- (/ GEN3 GEN4)))) (not (>= (+ (* (- GEN5) X) (* (- (/ GEN6 GEN7)) Y)) (- (/ GEN8 GEN9)))) (not (>= (+ (* (- GEN10) X) (* (/ GEN11 GEN12) Y)) GEN13))))))
(assert (= BAV15 (forall ((X Real)(Y Real)) (>= (+ X (* (- (/ GEN1 GEN2)) Y)) (- (/ GEN3 GEN4))))))
(assert (= BAV16 (forall ((X Real)(Y Real)) (>= (+ (* (- GEN5) X) (* (- (/ GEN6 GEN7)) Y)) (- (/ GEN8 GEN9))))))
(assert (= BAV17 (forall ((X Real)(Y Real)) (>= (+ (* (- GEN10) X) (* (/ GEN11 GEN12) Y)) GEN13))))
(check-sat)