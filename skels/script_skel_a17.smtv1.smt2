(set-option :incremental false)
(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-fun a () (Array Int Int))
(declare-fun x1 () Int)
(declare-fun y1 () Int)
(declare-fun z0 () Int)
(declare-fun p ((Array Int Int)) Bool)
(assert (= BAV1 (and (>= (select (store a (+ x1 z0) GEN1) x1) GEN2) (p a) (p (store a (+ x1 z0) GEN1)) (p (store (store a (+ x1 z0) GEN1) y1 GEN3)) (>= x1 GEN4) (>= z0 GEN5) (<= z0 GEN6) (<= y1 GEN7) (>= y1 GEN8))))
(assert (= BAV2 (>= (select (store a (+ x1 z0) GEN1) x1) GEN2)))
(assert (= BAV3 (>= x1 GEN4)))
(assert (= BAV4 (>= z0 GEN5)))
(assert (= BAV5 (<= z0 GEN6)))
(assert (= BAV6 (<= y1 GEN7)))
(assert (= BAV7 (>= y1 GEN8)))
(check-sat-assuming ((and (>= (select (store a (+ x1 z0) GEN1) x1) GEN2) (p a) (p (store a (+ x1 z0) GEN1)) (p (store (store a (+ x1 z0) GEN1) y1 GEN3)) (>= x1 GEN4) (>= z0 GEN5) (<= z0 GEN6) (<= y1 GEN7) (>= y1 GEN8))))
(get-model)