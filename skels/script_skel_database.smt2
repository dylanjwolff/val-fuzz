(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const BAV23 Bool)
(declare-const BAV24 Bool)
(declare-const BAV25 Bool)
(declare-const BAV26 Bool)
(declare-const BAV27 Bool)
(declare-const BAV28 Bool)
(declare-const BAV29 Bool)
(declare-const BAV30 Bool)
(declare-const BAV31 Bool)
(declare-const BAV32 Bool)
(declare-const BAV33 Bool)
(declare-const BAV34 Bool)
(declare-const BAV35 Bool)
(declare-const BAV36 Bool)
(declare-const BAV37 Bool)
(declare-const BAV38 Bool)
(declare-const BAV39 Bool)
(declare-const BAV40 Bool)
(declare-const BAV41 Bool)
(declare-const BAV42 Bool)
(declare-const BAV43 Bool)
(declare-const BAV44 Bool)
(declare-const BAV45 Bool)
(declare-const BAV46 Bool)
(declare-const BAV47 Bool)
(declare-const BAV48 Bool)
(declare-const BAV49 Bool)
(declare-const BAV50 Bool)
(declare-const BAV51 Bool)
(declare-const BAV52 Bool)
(declare-const BAV53 Bool)
(declare-const BAV54 Bool)
(declare-const BAV55 Bool)
(declare-const BAV56 Bool)
(declare-const BAV57 Bool)
(declare-const BAV58 Bool)
(declare-const BAV59 Bool)
(declare-const BAV60 Bool)
(declare-const BAV61 Bool)
(declare-const BAV62 Bool)
(declare-const BAV63 Bool)
(declare-const BAV64 Bool)
(declare-const BAV65 Bool)
(declare-const BAV66 Bool)
(declare-const BAV67 Bool)
(declare-const BAV68 Bool)
(declare-const BAV69 Bool)
(declare-const BAV70 Bool)
(declare-const BAV71 Bool)
(declare-const BAV72 Bool)
(declare-const BAV73 Bool)
(declare-const BAV74 Bool)
(declare-const BAV75 Bool)
(declare-const BAV76 Bool)
(declare-const BAV77 Bool)
(declare-const BAV78 Bool)
(declare-const BAV79 Bool)
(declare-const BAV80 Bool)
(declare-const BAV81 Bool)
(declare-const BAV82 Bool)
(declare-const BAV83 Bool)
(declare-const BAV84 Bool)
(declare-const BAV85 Bool)
(declare-const BAV86 Bool)
(declare-const BAV87 Bool)
(declare-const BAV88 Bool)
(declare-const BAV89 Bool)
(declare-const BAV90 Bool)
(declare-const BAV91 Bool)
(declare-const BAV92 Bool)
(declare-const BAV93 Bool)
(declare-const BAV94 Bool)
(declare-const BAV95 Bool)
(declare-const BAV96 Bool)
(declare-const BAV97 Bool)
(declare-const BAV98 Bool)
(declare-const BAV99 Bool)
(declare-const BAV100 Bool)
(declare-const BAV101 Bool)
(declare-const BAV102 Bool)
(declare-const BAV103 Bool)
(declare-const BAV104 Bool)
(declare-const BAV105 Bool)
(declare-const BAV106 Bool)
(declare-const BAV107 Bool)
(declare-const BAV108 Bool)
(declare-const BAV109 Bool)
(declare-const BAV110 Bool)
(declare-const BAV111 Bool)
(declare-const BAV112 Bool)
(declare-const BAV113 Bool)
(declare-const BAV114 Bool)
(declare-const BAV115 Bool)
(declare-const BAV116 Bool)
(declare-const BAV117 Bool)
(declare-const BAV118 Bool)
(declare-const BAV119 Bool)
(declare-const BAV120 Bool)
(declare-const BAV121 Bool)
(declare-const BAV122 Bool)
(declare-const BAV123 Bool)
(declare-const BAV124 Bool)
(declare-const BAV125 Bool)
(declare-const BAV126 Bool)
(declare-const BAV127 Bool)
(declare-const BAV128 Bool)
(declare-const BAV129 Bool)
(declare-const BAV130 Bool)
(declare-const BAV131 Bool)
(declare-const BAV132 Bool)
(declare-const BAV133 Bool)
(declare-const BAV134 Bool)
(declare-const BAV135 Bool)
(declare-const BAV136 Bool)
(declare-const BAV137 Bool)
(declare-const GEN36 Int)
(declare-const GEN35 Int)
(declare-const GEN34 Int)
(declare-const GEN33 Int)
(declare-const GEN32 Int)
(declare-const GEN31 Int)
(declare-const GEN30 Int)
(declare-const GEN29 Int)
(declare-const GEN28 Int)
(declare-const GEN27 Int)
(declare-const GEN26 Int)
(declare-const GEN25 Int)
(declare-const GEN24 Int)
(declare-const GEN23 Int)
(declare-const GEN22 Int)
(declare-const GEN21 Int)
(declare-const GEN20 Int)
(declare-const GEN19 Int)
(declare-const GEN18 Int)
(declare-const GEN17 Int)
(declare-const GEN16 Int)
(declare-const GEN15 Int)
(declare-const GEN14 Int)
(declare-const GEN13 Int)
(declare-const GEN12 Int)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-fun ?store (Int Int Int) Int)
(declare-fun ?select (Int Int) Int)
(declare-fun ?PO (Int Int) Int)
(declare-fun ?asChild (Int Int) Int)
(declare-fun ?classDown (Int Int) Int)
(declare-fun ?array (Int) Int)
(declare-fun ?elemtype (Int) Int)
(declare-fun ?is (Int Int) Int)
(declare-fun ?cast (Int Int) Int)
(declare-fun ?Object () Int)
(declare-fun ?null () Int)
(declare-fun ?typeof (Int) Int)
(declare-fun ?asElems (Int) Int)
(declare-fun ?isAllocated (Int Int) Int)
(declare-fun ?fClosedTime (Int) Int)
(declare-fun ?eClosedTime (Int) Int)
(declare-fun ?max (Int) Int)
(declare-fun ?asLockSet (Int) Int)
(declare-fun ?isNewArray (Int) Int)
(declare-fun ?classLiteral (Int) Int)
(declare-fun ?Class () Int)
(declare-fun ?alloc () Int)
(declare-fun ?arrayType () Int)
(declare-fun ?f (Int) Int)
(declare-fun ?finv (Int) Int)
(declare-fun ?select2 (Int Int Int) Int)
(declare-fun ?store2 (Int Int Int Int) Int)
(declare-fun ?subtypes (Int Int) Bool)
(declare-fun ?Unbox (Int) Int)
(declare-fun ?UnboxedType (Int) Int)
(declare-fun ?Box (Int Int) Int)
(declare-fun ?System.Object () Int)
(declare-fun ?Smt.true () Int)
(declare-fun ?AsRepField (Int Int) Int)
(declare-fun ?AsPeerField (Int) Int)
(declare-fun ?nullObject () Int)
(declare-fun ?ownerRef_ () Int)
(declare-fun ?ownerFrame_ () Int)
(declare-fun IntsHeap (Int) Int)
(declare-fun ?localinv_ () Int)
(declare-fun ?inv_ () Int)
(declare-fun ?BaseClass_ (Int) Int)
(declare-fun ?typeof_ (Int) Int)
(declare-fun ?PeerGroupPlaceholder_ () Int)
(declare-fun ?ClassRepr (Int) Int)
(declare-fun ?RefArray (Int Int) Int)
(declare-fun Ints_ (Int Int) Int)
(declare-fun ?RefArrayGet (Int Int) Int)
(declare-fun ?elements_ () Int)
(declare-fun ?NonNullRefArray (Int Int) Int)
(declare-fun IntsNotNull_ (Int Int) Int)
(declare-fun ?Rank_ (Int) Int)
(declare-fun ?ValueArray (Int Int) Int)
(declare-fun ?ArrayCategory_ (Int) Int)
(declare-fun ?ArrayCategoryValue_ () Int)
(declare-fun ?ElementType_ (Int) Int)
(declare-fun ?System.Array () Int)
(declare-fun ?allocated_ () Int)
(declare-fun ?StructGet_ (Int Int) Int)
(declare-fun ?AsRangeField (Int Int) Int)
(declare-fun IntsAllocated (Int Int) Int)
(declare-fun IntnRange (Int Int) Bool)
(declare-fun ?isAllocated_ (Int Int) Bool)
(declare-fun ?AsDirectSubClass (Int Int) Int)
(declare-fun ?OneClassDown (Int Int) Int)
(assert (forall ((a Int)(i Int)(e Int)) (! (= (?select (?store a i e) i) e) :pattern (?store a i e) :weight 0)))
(assert (forall ((a Int)(i Int)(j Int)(e Int)) (! (or (= i j) (= (?select (?store a i e) j) (?select a j))) :pattern (?select (?store a i e) j) :weight 0)))
(assert (forall ((t0 Int)(t1 Int)(t2 Int)) (! (or (not (= (?PO t0 t1) GEN3)) (not (= (?PO t1 t2) GEN4)) (= (?PO t0 t2) GEN5)) :pattern ((?PO t0 t1) (?PO t1 t2)))))
(assert (forall ((t0 Int)(t1 Int)) (! (or (not (= (?PO t0 t1) GEN6)) (not (= (?PO t1 t0) GEN7)) (= t0 t1)) :pattern ((?PO t0 t1) (?PO t1 t0)))))
(assert (forall ((t0 Int)(t1 Int)(t2 Int)) (! (or (not (= (?PO t0 (?asChild t1 t2)) GEN8)) (= (?classDown t2 t0) (?asChild t1 t2))) :pattern (?PO t0 (?asChild t1 t2)))))
(assert (forall ((t Int)) (! (= (?finv (?f t)) t) :pattern (?f t))))
(assert (forall ((t0 Int)(t1 Int)) (! (iff (= (?PO t0 (?array t1)) GEN9) (not (or (not (= t0 (?array (?elemtype t0)))) (not (= (?PO (?elemtype t0) t1) GEN10))))) :pattern (?PO t0 (?array t1)))))
(assert (forall ((x Int)(t Int)) (! (or (not (= (?is x t) GEN11)) (= (?cast x t) x)) :pattern (?cast x t))))
(assert (forall ((x Int)(t Int)) (! (or (not (= (?PO t ?Object) GEN12)) (iff (= (?is x t) GEN13) (or (= x ?null) (= (?PO (?typeof x) t) GEN14)))) :pattern ((?PO t ?Object) (?is x t)))))
(assert (forall ((e Int)(a Int)(i Int)) (! (= (?is (?select (?select (?asElems e) a) i) (?elemtype (?typeof a))) GEN15) :pattern (?select (?select (?asElems e) a) i))))
(assert (forall ((x Int)(f Int)(a0 Int)) (! (or (<= (+ a0 (* (- GEN16) (?fClosedTime f))) GEN17) (not (= (?isAllocated x a0) GEN18)) (= (?isAllocated (?select f x) a0) GEN19)) :pattern (?isAllocated (?select f x) a0))))
(assert (forall ((a Int)(e Int)(i Int)(a0 Int)) (! (or (<= (+ a0 (* (- GEN20) (?eClosedTime e))) GEN21) (not (= (?isAllocated a a0) GEN22)) (= (?isAllocated (?select (?select e a) i) a0) GEN23)) :pattern (?isAllocated (?select (?select e a) i) a0))))
(assert (forall ((S Int)) (! (= (?select (?asLockSet S) (?max (?asLockSet S))) GEN24) :pattern (?select (?asLockSet S) (?max (?asLockSet S))))))
(assert (forall ((s Int)) (! (or (not (= GEN25 (?isNewArray s))) (= (?PO (?typeof s) ?arrayType) GEN26)) :pattern (?isNewArray s))))
(assert (forall ((t Int)) (! (not (or (= (?classLiteral t) ?null) (not (= (?is (?classLiteral t) ?Class) GEN27)) (not (= (?isAllocated (?classLiteral t) ?alloc) GEN28)))) :pattern (?classLiteral t))))
(assert (forall ((A Int)(o Int)(f Int)(v Int)) (! (= (?select2 (?store2 A o f v) o f) v) :pattern (?store2 A o f v) :weight 0)))
(assert (forall ((A Int)(o Int)(f Int)(p Int)(g Int)(v Int)) (! (or (= o p) (= (?select2 (?store2 A o f v) p g) (?select2 A p g))) :pattern (?select2 (?store2 A o f v) p g) :weight 0)))
(assert (forall ((A Int)(o Int)(f Int)(p Int)(g Int)(v Int)) (! (or (= f g) (= (?select2 (?store2 A o f v) p g) (?select2 A p g))) :pattern (?select2 (?store2 A o f v) p g) :weight 0)))
(assert (forall ((t Int)(u Int)(v Int)) (! (or (not (?subtypes t u)) (not (?subtypes u v)) (?subtypes t v)) :pattern ((?subtypes t u) (?subtypes u v)))))
(assert (forall ((t Int)(u Int)) (! (or (not (?subtypes t u)) (not (?subtypes u t)) (= t u)) :pattern ((?subtypes t u) (?subtypes u t)))))
(assert (forall ((x Int)(p Int)) (! (or (not (?subtypes (?UnboxedType (?Box x p)) ?System.Object)) (not (= (?Box x p) p)) (= x p)) :pattern (?subtypes (?UnboxedType (?Box x p)) ?System.Object))))
(assert (forall ((h Int)(o Int)(f Int)(T Int)) (! (or (not (= (IntsHeap h) ?Smt.true)) (= (?select2 h o (?AsRepField f T)) ?nullObject) (not (or (not (= (?select2 h (?select2 h o (?AsRepField f T)) ?ownerRef_) o)) (not (= (?select2 h (?select2 h o (?AsRepField f T)) ?ownerFrame_) T))))) :pattern (?select2 h o (?AsRepField f T)))))
(assert (forall ((h Int)(o Int)(f Int)) (! (or (not (= (IntsHeap h) ?Smt.true)) (= (?select2 h o (?AsPeerField f)) ?nullObject) (not (or (not (= (?select2 h (?select2 h o (?AsPeerField f)) ?ownerRef_) (?select2 h o ?ownerRef_))) (not (= (?select2 h (?select2 h o (?AsPeerField f)) ?ownerFrame_) (?select2 h o ?ownerFrame_)))))) :pattern (?select2 h o (?AsPeerField f)))))
(assert (forall ((h Int)(o Int)) (! (or (not (= (IntsHeap h) ?Smt.true)) (= (?select2 h o ?ownerFrame_) ?PeerGroupPlaceholder_) (not (?subtypes (?select2 h (?select2 h o ?ownerRef_) ?inv_) (?select2 h o ?ownerFrame_))) (= (?select2 h (?select2 h o ?ownerRef_) ?localinv_) (?BaseClass_ (?select2 h o ?ownerFrame_))) (not (or (not (= (?select2 h o ?inv_) (?typeof_ o))) (not (= (?select2 h o ?localinv_) (?typeof_ o)))))) :pattern (?subtypes (?select2 h (?select2 h o ?ownerRef_) ?inv_) (?select2 h o ?ownerFrame_)))))
(assert (forall ((T Int)(h Int)) (! (or (not (= (IntsHeap h) ?Smt.true)) (= (?select2 h (?ClassRepr T) ?ownerFrame_) ?PeerGroupPlaceholder_)) :pattern (?select2 h (?ClassRepr T) ?ownerFrame_))))
(assert (forall ((a Int)(T Int)(i Int)(r Int)(heap Int)) (! (or (not (= (IntsHeap heap) ?Smt.true)) (not (?subtypes (?typeof_ a) (?RefArray T r))) (= (Ints_ (?RefArrayGet (?select2 heap a ?elements_) i) T) ?Smt.true)) :pattern ((?subtypes (?typeof_ a) (?RefArray T r)) (?RefArrayGet (?select2 heap a ?elements_) i)))))
(assert (forall ((a Int)(T Int)(r Int)) (! (or (= a ?nullObject) (not (?subtypes (?typeof_ a) (?RefArray T r))) (= (?Rank_ a) r)) :pattern (?subtypes (?typeof_ a) (?RefArray T r)))))
(assert (forall ((T Int)(ET Int)(r Int)) (! (or (not (?subtypes T (?ValueArray ET r))) (= (?ArrayCategory_ T) ?ArrayCategoryValue_)) :pattern (?subtypes T (?ValueArray ET r)))))
(assert (forall ((A Int)(r Int)(T Int)) (! (or (not (?subtypes T (?RefArray A r))) (not (or (not (= T (?RefArray (?ElementType_ T) r))) (not (?subtypes (?ElementType_ T) A))))) :pattern (?subtypes T (?RefArray A r)))))
(assert (forall ((A Int)(r Int)(T Int)) (! (or (not (?subtypes T (?ValueArray A r))) (= T (?ValueArray A r))) :pattern (?subtypes T (?ValueArray A r)))))
(assert (forall ((A Int)(B Int)(C Int)) (! (or (not (?subtypes C (?AsDirectSubClass B A))) (= (?OneClassDown C A) B)) :pattern (?subtypes C (?AsDirectSubClass B A)))))
(assert (forall ((o Int)(T Int)) (! (iff (= (Ints_ o T) ?Smt.true) (or (= o ?nullObject) (?subtypes (?typeof_ o) T))) :pattern (Ints_ o T))))
(assert (forall ((o Int)(T Int)) (! (iff (= (IntsNotNull_ o T) ?Smt.true) (or (= o ?nullObject) (not (= (Ints_ o T) ?Smt.true)))) :pattern (IntsNotNull_ o T))))
(assert (forall ((h Int)(o Int)) (! (or (not (= (IntsHeap h) ?Smt.true)) (= o ?nullObject) (not (?subtypes (?typeof_ o) ?System.Array)) (not (or (not (= (?select2 h o ?inv_) (?typeof_ o))) (not (= (?select2 h o ?localinv_) (?typeof_ o)))))) :pattern ((?subtypes (?typeof_ o) ?System.Array) (?select2 h o ?inv_)))))
(assert (forall ((h Int)(o Int)(f Int)(T Int)) (! (or (not (= (IntsHeap h) ?Smt.true)) (IntnRange (?select2 h o (?AsRangeField f T)) T)) :pattern (?select2 h o (?AsRangeField f T)))))
(assert (forall ((h Int)(o Int)(f Int)) (! (or (not (= (IntsHeap h) ?Smt.true)) (not (= (?select2 h o ?allocated_) ?Smt.true)) (= (IntsAllocated h (?select2 h o f)) ?Smt.true)) :pattern (IntsAllocated h (?select2 h o f)))))
(assert (forall ((h Int)(s Int)(f Int)) (! (or (not (= (IntsAllocated h s) ?Smt.true)) (= (IntsAllocated h (?StructGet_ s f)) ?Smt.true)) :pattern (IntsAllocated h (?StructGet_ s f)))))
(assert (forall ((x Int)(f Int)(a0 Int)) (! (or (<= (+ a0 (* (- GEN32) (?fClosedTime f))) GEN33) (not (?isAllocated_ x a0)) (?isAllocated_ (?select f x) a0)) :pattern (?isAllocated_ (?select f x) a0))))
(assert (forall ((a Int)(e Int)(i Int)(a0 Int)) (! (or (<= (+ a0 (* (- GEN34) (?eClosedTime e))) GEN35) (not (?isAllocated_ a a0)) (?isAllocated_ (?select (?select e a) i) a0)) :pattern (?isAllocated_ (?select (?select e a) i) a0))))
(assert (forall ((e Int)(a Int)(i Int)) (! (= (?is (?select (?select (?asElems e) a) i) (?elemtype (?typeof a))) ?Smt.true) :pattern (?select (?select (?asElems e) a) i))))
(assert (forall ((t0 Int)(t1 Int)) (! (iff (?subtypes t0 (?array t1)) (not (or (not (= t0 (?array (?elemtype t0)))) (not (?subtypes (?elemtype t0) t1))))) :pattern (?subtypes t0 (?array t1)))))
(assert (forall ((t0 Int)(t1 Int)(t2 Int)) (! (or (not (?subtypes t0 (?asChild t1 t2))) (= (?classDown t2 t0) (?asChild t1 t2))) :pattern (?subtypes t0 (?asChild t1 t2)))))
(assert (forall ((t0 Int)(t1 Int)) (! (iff (?subtypes t0 (?array t1)) (not (or (not (= t0 (?array (?elemtype t0)))) (not (?subtypes (?elemtype t0) t1))))) :pattern (?subtypes t0 (?array t1)))))
(assert (forall ((x Int)(t Int)) (! (or (not (= (?is x t) ?Smt.true)) (= (?cast x t) x)) :pattern (?cast x t))))
(assert (forall ((x Int)(t Int)) (! (or (not (?subtypes t ?Object)) (iff (= (?is x t) ?Smt.true) (or (= x ?null) (?subtypes (?typeof x) t)))) :pattern ((?subtypes t ?Object) (?is x t)))))
(assert (forall ((e Int)(a Int)(i Int)) (! (= (?is (?select (?select (?asElems e) a) i) (?elemtype (?typeof a))) GEN36) :pattern (?select (?select (?asElems e) a) i))))
(assert (= BAV1 (forall ((a Int)(i Int)(e Int)) (= (?select (?store a i e) i) e))))
(assert (= BAV2 (forall ((a Int)(i Int)(j Int)(e Int)) (or (= i j) (= (?select (?store a i e) j) (?select a j))))))
(assert (= BAV3 (forall ((a Int)(i Int)(j Int)(e Int)) (= i j))))
(assert (= BAV4 (forall ((a Int)(i Int)(j Int)(e Int)) (= (?select (?store a i e) j) (?select a j)))))
(assert (= BAV5 (forall ((t0 Int)(t1 Int)(t2 Int)) (or (not (= (?PO t0 t1) GEN3)) (not (= (?PO t1 t2) GEN4)) (= (?PO t0 t2) GEN5)))))
(assert (= BAV6 (forall ((t0 Int)(t1 Int)(t2 Int)) (= (?PO t0 t1) GEN3))))
(assert (= BAV7 (forall ((t0 Int)(t1 Int)(t2 Int)) (= (?PO t1 t2) GEN4))))
(assert (= BAV8 (forall ((t0 Int)(t1 Int)(t2 Int)) (= (?PO t0 t2) GEN5))))
(assert (= BAV9 (forall ((t0 Int)(t1 Int)) (or (not (= (?PO t0 t1) GEN6)) (not (= (?PO t1 t0) GEN7)) (= t0 t1)))))
(assert (= BAV10 (forall ((t0 Int)(t1 Int)) (= (?PO t0 t1) GEN6))))
(assert (= BAV11 (forall ((t0 Int)(t1 Int)) (= (?PO t1 t0) GEN7))))
(assert (= BAV12 (forall ((t0 Int)(t1 Int)) (= t0 t1))))
(assert (= BAV13 (forall ((t0 Int)(t1 Int)(t2 Int)) (or (not (= (?PO t0 (?asChild t1 t2)) GEN8)) (= (?classDown t2 t0) (?asChild t1 t2))))))
(assert (= BAV14 (forall ((t0 Int)(t1 Int)(t2 Int)) (= (?PO t0 (?asChild t1 t2)) GEN8))))
(assert (= BAV15 (forall ((t0 Int)(t1 Int)(t2 Int)) (= (?classDown t2 t0) (?asChild t1 t2)))))
(assert (= BAV16 (forall ((t Int)) (= (?finv (?f t)) t))))
(assert (= BAV17 (forall ((t0 Int)(t1 Int)) (= (?PO t0 (?array t1)) GEN9))))
(assert (= BAV18 (forall ((t0 Int)(t1 Int)) (or (not (= t0 (?array (?elemtype t0)))) (not (= (?PO (?elemtype t0) t1) GEN10))))))
(assert (= BAV19 (forall ((t0 Int)(t1 Int)) (= t0 (?array (?elemtype t0))))))
(assert (= BAV20 (forall ((t0 Int)(t1 Int)) (= (?PO (?elemtype t0) t1) GEN10))))
(assert (= BAV21 (forall ((x Int)(t Int)) (or (not (= (?is x t) GEN11)) (= (?cast x t) x)))))
(assert (= BAV22 (forall ((x Int)(t Int)) (= (?is x t) GEN11))))
(assert (= BAV23 (forall ((x Int)(t Int)) (= (?cast x t) x))))
(assert (= BAV24 (forall ((x Int)(t Int)) (or (not (= (?PO t ?Object) GEN12)) (iff (= (?is x t) GEN13) (or (= x ?null) (= (?PO (?typeof x) t) GEN14)))))))
(assert (= BAV25 (forall ((x Int)(t Int)) (= (?PO t ?Object) GEN12))))
(assert (= BAV26 (forall ((x Int)(t Int)) (= (?is x t) GEN13))))
(assert (= BAV27 (forall ((x Int)(t Int)) (or (= x ?null) (= (?PO (?typeof x) t) GEN14)))))
(assert (= BAV28 (forall ((x Int)(t Int)) (= x ?null))))
(assert (= BAV29 (forall ((x Int)(t Int)) (= (?PO (?typeof x) t) GEN14))))
(assert (= BAV30 (forall ((e Int)(a Int)(i Int)) (= (?is (?select (?select (?asElems e) a) i) (?elemtype (?typeof a))) GEN15))))
(assert (= BAV31 (forall ((x Int)(f Int)(a0 Int)) (or (<= (+ a0 (* (- GEN16) (?fClosedTime f))) GEN17) (not (= (?isAllocated x a0) GEN18)) (= (?isAllocated (?select f x) a0) GEN19)))))
(assert (= BAV32 (forall ((x Int)(f Int)(a0 Int)) (<= (+ a0 (* (- GEN16) (?fClosedTime f))) GEN17))))
(assert (= BAV33 (forall ((x Int)(f Int)(a0 Int)) (= (?isAllocated x a0) GEN18))))
(assert (= BAV34 (forall ((x Int)(f Int)(a0 Int)) (= (?isAllocated (?select f x) a0) GEN19))))
(assert (= BAV35 (forall ((a Int)(e Int)(i Int)(a0 Int)) (or (<= (+ a0 (* (- GEN20) (?eClosedTime e))) GEN21) (not (= (?isAllocated a a0) GEN22)) (= (?isAllocated (?select (?select e a) i) a0) GEN23)))))
(assert (= BAV36 (forall ((a Int)(e Int)(i Int)(a0 Int)) (<= (+ a0 (* (- GEN20) (?eClosedTime e))) GEN21))))
(assert (= BAV37 (forall ((a Int)(e Int)(i Int)(a0 Int)) (= (?isAllocated a a0) GEN22))))
(assert (= BAV38 (forall ((a Int)(e Int)(i Int)(a0 Int)) (= (?isAllocated (?select (?select e a) i) a0) GEN23))))
(assert (= BAV39 (forall ((S Int)) (= (?select (?asLockSet S) (?max (?asLockSet S))) GEN24))))
(assert (= BAV40 (forall ((s Int)) (or (not (= GEN25 (?isNewArray s))) (= (?PO (?typeof s) ?arrayType) GEN26)))))
(assert (= BAV41 (forall ((s Int)) (= GEN25 (?isNewArray s)))))
(assert (= BAV42 (forall ((s Int)) (= (?PO (?typeof s) ?arrayType) GEN26))))
(assert (= BAV43 (forall ((t Int)) (or (= (?classLiteral t) ?null) (not (= (?is (?classLiteral t) ?Class) GEN27)) (not (= (?isAllocated (?classLiteral t) ?alloc) GEN28))))))
(assert (= BAV44 (forall ((t Int)) (= (?classLiteral t) ?null))))
(assert (= BAV45 (forall ((t Int)) (= (?is (?classLiteral t) ?Class) GEN27))))
(assert (= BAV46 (forall ((t Int)) (= (?isAllocated (?classLiteral t) ?alloc) GEN28))))
(assert (= BAV47 (forall ((A Int)(o Int)(f Int)(v Int)) (= (?select2 (?store2 A o f v) o f) v))))
(assert (= BAV48 (forall ((A Int)(o Int)(f Int)(p Int)(g Int)(v Int)) (or (= o p) (= (?select2 (?store2 A o f v) p g) (?select2 A p g))))))
(assert (= BAV49 (forall ((A Int)(o Int)(f Int)(p Int)(g Int)(v Int)) (= o p))))
(assert (= BAV50 (forall ((A Int)(o Int)(f Int)(p Int)(g Int)(v Int)) (= (?select2 (?store2 A o f v) p g) (?select2 A p g)))))
(assert (= BAV51 (forall ((A Int)(o Int)(f Int)(p Int)(g Int)(v Int)) (or (= f g) (= (?select2 (?store2 A o f v) p g) (?select2 A p g))))))
(assert (= BAV52 (forall ((A Int)(o Int)(f Int)(p Int)(g Int)(v Int)) (= f g))))
(assert (= BAV53 (forall ((A Int)(o Int)(f Int)(p Int)(g Int)(v Int)) (= (?select2 (?store2 A o f v) p g) (?select2 A p g)))))
(assert (= BAV54 (forall ((t Int)(u Int)(v Int)) (or (not (?subtypes t u)) (not (?subtypes u v)) (?subtypes t v)))))
(assert (= BAV55 (forall ((t Int)(u Int)) (or (not (?subtypes t u)) (not (?subtypes u t)) (= t u)))))
(assert (= BAV56 (forall ((t Int)(u Int)) (= t u))))
(assert (= BAV57 (forall ((x Int)(p Int)) (or (not (?subtypes (?UnboxedType (?Box x p)) ?System.Object)) (not (= (?Box x p) p)) (= x p)))))
(assert (= BAV58 (forall ((x Int)(p Int)) (= (?Box x p) p))))
(assert (= BAV59 (forall ((x Int)(p Int)) (= x p))))
(assert (= BAV60 (forall ((h Int)(o Int)(f Int)(T Int)) (or (not (= (IntsHeap h) ?Smt.true)) (= (?select2 h o (?AsRepField f T)) ?nullObject) (not (or (not (= (?select2 h (?select2 h o (?AsRepField f T)) ?ownerRef_) o)) (not (= (?select2 h (?select2 h o (?AsRepField f T)) ?ownerFrame_) T))))))))
(assert (= BAV61 (forall ((h Int)(o Int)(f Int)(T Int)) (= (IntsHeap h) ?Smt.true))))
(assert (= BAV62 (forall ((h Int)(o Int)(f Int)(T Int)) (= (?select2 h o (?AsRepField f T)) ?nullObject))))
(assert (= BAV63 (forall ((h Int)(o Int)(f Int)(T Int)) (or (not (= (?select2 h (?select2 h o (?AsRepField f T)) ?ownerRef_) o)) (not (= (?select2 h (?select2 h o (?AsRepField f T)) ?ownerFrame_) T))))))
(assert (= BAV64 (forall ((h Int)(o Int)(f Int)(T Int)) (= (?select2 h (?select2 h o (?AsRepField f T)) ?ownerRef_) o))))
(assert (= BAV65 (forall ((h Int)(o Int)(f Int)(T Int)) (= (?select2 h (?select2 h o (?AsRepField f T)) ?ownerFrame_) T))))
(assert (= BAV66 (forall ((h Int)(o Int)(f Int)) (or (not (= (IntsHeap h) ?Smt.true)) (= (?select2 h o (?AsPeerField f)) ?nullObject) (not (or (not (= (?select2 h (?select2 h o (?AsPeerField f)) ?ownerRef_) (?select2 h o ?ownerRef_))) (not (= (?select2 h (?select2 h o (?AsPeerField f)) ?ownerFrame_) (?select2 h o ?ownerFrame_)))))))))
(assert (= BAV67 (forall ((h Int)(o Int)(f Int)) (= (IntsHeap h) ?Smt.true))))
(assert (= BAV68 (forall ((h Int)(o Int)(f Int)) (= (?select2 h o (?AsPeerField f)) ?nullObject))))
(assert (= BAV69 (forall ((h Int)(o Int)(f Int)) (or (not (= (?select2 h (?select2 h o (?AsPeerField f)) ?ownerRef_) (?select2 h o ?ownerRef_))) (not (= (?select2 h (?select2 h o (?AsPeerField f)) ?ownerFrame_) (?select2 h o ?ownerFrame_)))))))
(assert (= BAV70 (forall ((h Int)(o Int)(f Int)) (= (?select2 h (?select2 h o (?AsPeerField f)) ?ownerRef_) (?select2 h o ?ownerRef_)))))
(assert (= BAV71 (forall ((h Int)(o Int)(f Int)) (= (?select2 h (?select2 h o (?AsPeerField f)) ?ownerFrame_) (?select2 h o ?ownerFrame_)))))
(assert (= BAV72 (forall ((h Int)(o Int)) (or (not (= (IntsHeap h) ?Smt.true)) (= (?select2 h o ?ownerFrame_) ?PeerGroupPlaceholder_) (not (?subtypes (?select2 h (?select2 h o ?ownerRef_) ?inv_) (?select2 h o ?ownerFrame_))) (= (?select2 h (?select2 h o ?ownerRef_) ?localinv_) (?BaseClass_ (?select2 h o ?ownerFrame_))) (not (or (not (= (?select2 h o ?inv_) (?typeof_ o))) (not (= (?select2 h o ?localinv_) (?typeof_ o)))))))))
(assert (= BAV73 (forall ((h Int)(o Int)) (= (IntsHeap h) ?Smt.true))))
(assert (= BAV74 (forall ((h Int)(o Int)) (= (?select2 h o ?ownerFrame_) ?PeerGroupPlaceholder_))))
(assert (= BAV75 (forall ((h Int)(o Int)) (= (?select2 h (?select2 h o ?ownerRef_) ?localinv_) (?BaseClass_ (?select2 h o ?ownerFrame_))))))
(assert (= BAV76 (forall ((h Int)(o Int)) (or (not (= (?select2 h o ?inv_) (?typeof_ o))) (not (= (?select2 h o ?localinv_) (?typeof_ o)))))))
(assert (= BAV77 (forall ((h Int)(o Int)) (= (?select2 h o ?inv_) (?typeof_ o)))))
(assert (= BAV78 (forall ((h Int)(o Int)) (= (?select2 h o ?localinv_) (?typeof_ o)))))
(assert (= BAV79 (forall ((T Int)(h Int)) (or (not (= (IntsHeap h) ?Smt.true)) (= (?select2 h (?ClassRepr T) ?ownerFrame_) ?PeerGroupPlaceholder_)))))
(assert (= BAV80 (forall ((T Int)(h Int)) (= (IntsHeap h) ?Smt.true))))
(assert (= BAV81 (forall ((T Int)(h Int)) (= (?select2 h (?ClassRepr T) ?ownerFrame_) ?PeerGroupPlaceholder_))))
(assert (= BAV82 (forall ((a Int)(T Int)(i Int)(r Int)(heap Int)) (or (not (= (IntsHeap heap) ?Smt.true)) (not (?subtypes (?typeof_ a) (?RefArray T r))) (= (Ints_ (?RefArrayGet (?select2 heap a ?elements_) i) T) ?Smt.true)))))
(assert (= BAV83 (forall ((a Int)(T Int)(i Int)(r Int)(heap Int)) (= (IntsHeap heap) ?Smt.true))))
(assert (= BAV84 (forall ((a Int)(T Int)(i Int)(r Int)(heap Int)) (= (Ints_ (?RefArrayGet (?select2 heap a ?elements_) i) T) ?Smt.true))))
(assert (= BAV85 (forall ((a Int)(T Int)(r Int)) (or (= a ?nullObject) (not (?subtypes (?typeof_ a) (?RefArray T r))) (= (?Rank_ a) r)))))
(assert (= BAV86 (forall ((a Int)(T Int)(r Int)) (= a ?nullObject))))
(assert (= BAV87 (forall ((a Int)(T Int)(r Int)) (= (?Rank_ a) r))))
(assert (= BAV88 (forall ((T Int)(ET Int)(r Int)) (or (not (?subtypes T (?ValueArray ET r))) (= (?ArrayCategory_ T) ?ArrayCategoryValue_)))))
(assert (= BAV89 (forall ((T Int)(ET Int)(r Int)) (= (?ArrayCategory_ T) ?ArrayCategoryValue_))))
(assert (= BAV90 (forall ((A Int)(r Int)(T Int)) (or (not (?subtypes T (?RefArray A r))) (not (or (not (= T (?RefArray (?ElementType_ T) r))) (not (?subtypes (?ElementType_ T) A))))))))
(assert (= BAV91 (forall ((A Int)(r Int)(T Int)) (or (not (= T (?RefArray (?ElementType_ T) r))) (not (?subtypes (?ElementType_ T) A))))))
(assert (= BAV92 (forall ((A Int)(r Int)(T Int)) (= T (?RefArray (?ElementType_ T) r)))))
(assert (= BAV93 (forall ((A Int)(r Int)(T Int)) (or (not (?subtypes T (?ValueArray A r))) (= T (?ValueArray A r))))))
(assert (= BAV94 (forall ((A Int)(r Int)(T Int)) (= T (?ValueArray A r)))))
(assert (= BAV95 (forall ((A Int)(B Int)(C Int)) (or (not (?subtypes C (?AsDirectSubClass B A))) (= (?OneClassDown C A) B)))))
(assert (= BAV96 (forall ((A Int)(B Int)(C Int)) (= (?OneClassDown C A) B))))
(assert (= BAV97 (forall ((o Int)(T Int)) (= (Ints_ o T) ?Smt.true))))
(assert (= BAV98 (forall ((o Int)(T Int)) (or (= o ?nullObject) (?subtypes (?typeof_ o) T)))))
(assert (= BAV99 (forall ((o Int)(T Int)) (= o ?nullObject))))
(assert (= BAV100 (forall ((o Int)(T Int)) (= (IntsNotNull_ o T) ?Smt.true))))
(assert (= BAV101 (forall ((o Int)(T Int)) (or (= o ?nullObject) (not (= (Ints_ o T) ?Smt.true))))))
(assert (= BAV102 (forall ((o Int)(T Int)) (= o ?nullObject))))
(assert (= BAV103 (forall ((o Int)(T Int)) (= (Ints_ o T) ?Smt.true))))
(assert (= BAV104 (forall ((h Int)(o Int)) (or (not (= (IntsHeap h) ?Smt.true)) (= o ?nullObject) (not (?subtypes (?typeof_ o) ?System.Array)) (not (or (not (= (?select2 h o ?inv_) (?typeof_ o))) (not (= (?select2 h o ?localinv_) (?typeof_ o)))))))))
(assert (= BAV105 (forall ((h Int)(o Int)) (= (IntsHeap h) ?Smt.true))))
(assert (= BAV106 (forall ((h Int)(o Int)) (= o ?nullObject))))
(assert (= BAV107 (forall ((h Int)(o Int)) (or (not (= (?select2 h o ?inv_) (?typeof_ o))) (not (= (?select2 h o ?localinv_) (?typeof_ o)))))))
(assert (= BAV108 (forall ((h Int)(o Int)) (= (?select2 h o ?inv_) (?typeof_ o)))))
(assert (= BAV109 (forall ((h Int)(o Int)) (= (?select2 h o ?localinv_) (?typeof_ o)))))
(assert (= BAV110 (forall ((h Int)(o Int)(f Int)(T Int)) (or (not (= (IntsHeap h) ?Smt.true)) (IntnRange (?select2 h o (?AsRangeField f T)) T)))))
(assert (= BAV111 (forall ((h Int)(o Int)(f Int)(T Int)) (= (IntsHeap h) ?Smt.true))))
(assert (= BAV112 (forall ((h Int)(o Int)(f Int)) (or (not (= (IntsHeap h) ?Smt.true)) (not (= (?select2 h o ?allocated_) ?Smt.true)) (= (IntsAllocated h (?select2 h o f)) ?Smt.true)))))
(assert (= BAV113 (forall ((h Int)(o Int)(f Int)) (= (IntsHeap h) ?Smt.true))))
(assert (= BAV114 (forall ((h Int)(o Int)(f Int)) (= (?select2 h o ?allocated_) ?Smt.true))))
(assert (= BAV115 (forall ((h Int)(o Int)(f Int)) (= (IntsAllocated h (?select2 h o f)) ?Smt.true))))
(assert (= BAV116 (forall ((h Int)(s Int)(f Int)) (or (not (= (IntsAllocated h s) ?Smt.true)) (= (IntsAllocated h (?StructGet_ s f)) ?Smt.true)))))
(assert (= BAV117 (forall ((h Int)(s Int)(f Int)) (= (IntsAllocated h s) ?Smt.true))))
(assert (= BAV118 (forall ((h Int)(s Int)(f Int)) (= (IntsAllocated h (?StructGet_ s f)) ?Smt.true))))
(assert (= BAV119 (forall ((x Int)(f Int)(a0 Int)) (or (<= (+ a0 (* (- GEN32) (?fClosedTime f))) GEN33) (not (?isAllocated_ x a0)) (?isAllocated_ (?select f x) a0)))))
(assert (= BAV120 (forall ((x Int)(f Int)(a0 Int)) (<= (+ a0 (* (- GEN32) (?fClosedTime f))) GEN33))))
(assert (= BAV121 (forall ((a Int)(e Int)(i Int)(a0 Int)) (or (<= (+ a0 (* (- GEN34) (?eClosedTime e))) GEN35) (not (?isAllocated_ a a0)) (?isAllocated_ (?select (?select e a) i) a0)))))
(assert (= BAV122 (forall ((a Int)(e Int)(i Int)(a0 Int)) (<= (+ a0 (* (- GEN34) (?eClosedTime e))) GEN35))))
(assert (= BAV123 (forall ((e Int)(a Int)(i Int)) (= (?is (?select (?select (?asElems e) a) i) (?elemtype (?typeof a))) ?Smt.true))))
(assert (= BAV124 (forall ((t0 Int)(t1 Int)) (or (not (= t0 (?array (?elemtype t0)))) (not (?subtypes (?elemtype t0) t1))))))
(assert (= BAV125 (forall ((t0 Int)(t1 Int)) (= t0 (?array (?elemtype t0))))))
(assert (= BAV126 (forall ((t0 Int)(t1 Int)(t2 Int)) (or (not (?subtypes t0 (?asChild t1 t2))) (= (?classDown t2 t0) (?asChild t1 t2))))))
(assert (= BAV127 (forall ((t0 Int)(t1 Int)(t2 Int)) (= (?classDown t2 t0) (?asChild t1 t2)))))
(assert (= BAV128 (forall ((t0 Int)(t1 Int)) (or (not (= t0 (?array (?elemtype t0)))) (not (?subtypes (?elemtype t0) t1))))))
(assert (= BAV129 (forall ((t0 Int)(t1 Int)) (= t0 (?array (?elemtype t0))))))
(assert (= BAV130 (forall ((x Int)(t Int)) (or (not (= (?is x t) ?Smt.true)) (= (?cast x t) x)))))
(assert (= BAV131 (forall ((x Int)(t Int)) (= (?is x t) ?Smt.true))))
(assert (= BAV132 (forall ((x Int)(t Int)) (= (?cast x t) x))))
(assert (= BAV133 (forall ((x Int)(t Int)) (or (not (?subtypes t ?Object)) (iff (= (?is x t) ?Smt.true) (or (= x ?null) (?subtypes (?typeof x) t)))))))
(assert (= BAV134 (forall ((x Int)(t Int)) (= (?is x t) ?Smt.true))))
(assert (= BAV135 (forall ((x Int)(t Int)) (or (= x ?null) (?subtypes (?typeof x) t)))))
(assert (= BAV136 (forall ((x Int)(t Int)) (= x ?null))))
(assert (= BAV137 (forall ((e Int)(a Int)(i Int)) (= (?is (?select (?select (?asElems e) a) i) (?elemtype (?typeof a))) GEN36))))