(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const BAV23 Bool)
(declare-const BAV24 Bool)
(declare-const BAV25 Bool)
(declare-const BAV26 Bool)
(declare-const BAV27 Bool)
(declare-const BAV28 Bool)
(declare-const BAV29 Bool)
(declare-const BAV30 Bool)
(declare-const BAV31 Bool)
(declare-const BAV32 Bool)
(declare-const BAV33 Bool)
(declare-const BAV34 Bool)
(declare-const BAV35 Bool)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(define-sort Elt () Int)
(define-sort mySet () (Set Elt ))
(define-fun smt_set_emp () mySet (as emptyset mySet))
(define-fun smt_set_mem ((x Elt) (s mySet)) Bool (member x s))
(define-fun smt_set_add ((s mySet) (x Elt)) mySet (union s (singleton x)))
(define-fun smt_set_cup ((s1 mySet) (s2 mySet)) mySet (union s1 s2))
(define-fun smt_set_cap ((s1 mySet) (s2 mySet)) mySet (intersection s1 s2))
(define-fun smt_set_dif ((s1 mySet) (s2 mySet)) mySet (setminus s1 s2))
(define-fun smt_set_sub ((s1 mySet) (s2 mySet)) Bool (subset s1 s2))
(declare-fun z3v58 () Int)
(declare-fun z3v59 () Int)
(assert (distinct z3v58 z3v59))
(declare-fun z3f60 (Int) Bool)
(declare-fun z3v61 () Int)
(declare-fun z3f62 (Int) Int)
(declare-fun z3v63 () Int)
(declare-fun z3v64 () Int)
(declare-fun z3v67 () Int)
(declare-fun z3f68 (Int) Int)
(declare-fun z3f69 (Int) mySet)
(declare-fun z3f70 (Int) mySet)
(declare-fun z3f71 (Int) Bool)
(declare-fun z3v73 () Int)
(declare-fun z3v76 () Int)
(declare-fun z3v79 () Int)
(declare-fun z3v82 () Int)
(declare-fun z3v84 () Int)
(declare-fun z3v85 () Int)
(declare-fun z3v86 () Int)
(declare-fun z3v89 () Int)
(declare-fun z3v90 () Int)
(declare-fun z3v91 () Int)
(declare-fun z3f92 (Int Int) Int)
(declare-fun z3v93 () Int)
(declare-fun z3v94 () Int)
(declare-fun z3f96 () Int)
(declare-fun z3v97 () Int)
(declare-fun z3v98 () Int)
(declare-fun z3v99 () Int)
(declare-fun z3v100 () Int)
(declare-fun z3v101 () Int)
(declare-fun z3v102 () Int)
(declare-fun z3v104 () Int)
(declare-fun z3v107 () Int)
(declare-fun z3v110 () Int)
(declare-fun z3v113 () Int)
(declare-fun z3v116 () Int)
(declare-fun z3v117 () Int)
(declare-fun z3v118 () Int)
(declare-fun z3v119 () Int)
(declare-fun z3v120 () Int)
(declare-fun z3v121 () Int)
(declare-fun z3v122 () Int)
(declare-fun z3v123 () Int)
(declare-fun z3v124 () Int)
(declare-fun z3v125 () Int)
(declare-fun z3v127 () Int)
(declare-fun z3v130 () Int)
(declare-fun z3v133 () Int)
(declare-fun z3v134 () Int)
(declare-fun z3v135 () Int)
(declare-fun z3v136 () Int)
(declare-fun z3v137 () Int)
(declare-fun z3v140 () Int)
(declare-fun z3v141 () Int)
(declare-fun z3v142 () Int)
(declare-fun z3v143 () Int)
(declare-fun z3v144 () Int)
(declare-fun z3v145 () Int)
(declare-fun z3v147 () Int)
(declare-fun z3v150 () Int)
(declare-fun z3v151 () Int)
(declare-fun z3v152 () Int)
(assert (= (z3f69 z3v152) (smt_set_cup (smt_set_add smt_set_emp z3v143) (z3f69 z3v151))))
(assert (= (z3f70 z3v152) (smt_set_cup (smt_set_add smt_set_emp z3v143) (z3f70 z3v151))))
(assert (= (z3f68 z3v152) (+ GEN1 (z3f68 z3v151))))
(assert (= (z3f71 z3v152) false))
(assert (and (>= (z3f68 z3v140) GEN2) (>= (z3f68 z3v141) GEN3) (>= (z3f68 z3v151) GEN4) (>= (z3f68 z3v142) GEN5) (= (z3f69 z3v142) (smt_set_cup (smt_set_add smt_set_emp z3v143) (z3f69 z3v141))) (= (z3f70 z3v142) (smt_set_cup (smt_set_add smt_set_emp z3v143) (z3f70 z3v141))) (= (z3f68 z3v142) (+ GEN6 (z3f68 z3v141))) (= (z3f71 z3v142) false) (= z3v142 (z3f92 z3v143 z3v141)) (>= (z3f68 z3v142) GEN7) (= z3v142 z3v144) (>= (z3f68 z3v142) GEN8) (>= (z3f68 z3v144) GEN9) (z3f60 z3v58) (= (z3f62 z3v61) z3v61) (= (z3f62 z3v63) z3v63) (not (z3f60 z3v59)) (= (z3f62 z3v64) z3v64)))
(assert (= (z3f69 z3v151) (smt_set_cup (z3f69 z3v140) (z3f69 z3v141))))
(assert (= (z3f69 z3v151) (smt_set_cup (z3f69 z3v140) (z3f69 z3v140))))
(assert (= (z3f69 z3v151) (smt_set_cup (z3f69 z3v141) (z3f69 z3v140))))
(assert (smt_set_sub (z3f69 z3v151) (z3f69 z3v140)))
(assert (= (z3f69 z3v151) (z3f69 z3v140)))
(assert (<= z3v151 z3v140))
(assert (>= z3v151 z3v140))
(assert (<= (z3f68 z3v151) (z3f68 z3v140)))
(assert (>= (z3f68 z3v151) (z3f68 z3v141)))
(assert (>= (z3f68 z3v151) (z3f68 z3v140)))
(assert (= (z3f68 z3v151) (z3f68 z3v140)))
(assert (= z3v151 z3v140))
(assert (>= (z3f68 z3v151) GEN10))
(assert (not (= (z3f69 z3v152) (smt_set_cup (z3f69 z3v140) (z3f69 z3v140)))))
(assert (= BAV1 (distinct z3v58 z3v59)))
(assert (= BAV2 (= (z3f69 z3v152) (smt_set_cup (smt_set_add smt_set_emp z3v143) (z3f69 z3v151)))))
(assert (= BAV3 (= (z3f70 z3v152) (smt_set_cup (smt_set_add smt_set_emp z3v143) (z3f70 z3v151)))))
(assert (= BAV4 (= (z3f68 z3v152) (+ GEN1 (z3f68 z3v151)))))
(assert (= BAV5 (= (z3f71 z3v152) false)))
(assert (= BAV6 (and (>= (z3f68 z3v140) GEN2) (>= (z3f68 z3v141) GEN3) (>= (z3f68 z3v151) GEN4) (>= (z3f68 z3v142) GEN5) (= (z3f69 z3v142) (smt_set_cup (smt_set_add smt_set_emp z3v143) (z3f69 z3v141))) (= (z3f70 z3v142) (smt_set_cup (smt_set_add smt_set_emp z3v143) (z3f70 z3v141))) (= (z3f68 z3v142) (+ GEN6 (z3f68 z3v141))) (= (z3f71 z3v142) false) (= z3v142 (z3f92 z3v143 z3v141)) (>= (z3f68 z3v142) GEN7) (= z3v142 z3v144) (>= (z3f68 z3v142) GEN8) (>= (z3f68 z3v144) GEN9) (z3f60 z3v58) (= (z3f62 z3v61) z3v61) (= (z3f62 z3v63) z3v63) (not (z3f60 z3v59)) (= (z3f62 z3v64) z3v64))))
(assert (= BAV7 (>= (z3f68 z3v140) GEN2)))
(assert (= BAV8 (>= (z3f68 z3v141) GEN3)))
(assert (= BAV9 (>= (z3f68 z3v151) GEN4)))
(assert (= BAV10 (>= (z3f68 z3v142) GEN5)))
(assert (= BAV11 (= (z3f69 z3v142) (smt_set_cup (smt_set_add smt_set_emp z3v143) (z3f69 z3v141)))))
(assert (= BAV12 (= (z3f70 z3v142) (smt_set_cup (smt_set_add smt_set_emp z3v143) (z3f70 z3v141)))))
(assert (= BAV13 (= (z3f68 z3v142) (+ GEN6 (z3f68 z3v141)))))
(assert (= BAV14 (= (z3f71 z3v142) false)))
(assert (= BAV15 (= z3v142 (z3f92 z3v143 z3v141))))
(assert (= BAV16 (>= (z3f68 z3v142) GEN7)))
(assert (= BAV17 (= z3v142 z3v144)))
(assert (= BAV18 (>= (z3f68 z3v142) GEN8)))
(assert (= BAV19 (>= (z3f68 z3v144) GEN9)))
(assert (= BAV20 (= (z3f62 z3v61) z3v61)))
(assert (= BAV21 (= (z3f62 z3v63) z3v63)))
(assert (= BAV22 (= (z3f62 z3v64) z3v64)))
(assert (= BAV23 (= (z3f69 z3v151) (smt_set_cup (z3f69 z3v140) (z3f69 z3v141)))))
(assert (= BAV24 (= (z3f69 z3v151) (smt_set_cup (z3f69 z3v140) (z3f69 z3v140)))))
(assert (= BAV25 (= (z3f69 z3v151) (smt_set_cup (z3f69 z3v141) (z3f69 z3v140)))))
(assert (= BAV26 (= (z3f69 z3v151) (z3f69 z3v140))))
(assert (= BAV27 (<= z3v151 z3v140)))
(assert (= BAV28 (>= z3v151 z3v140)))
(assert (= BAV29 (<= (z3f68 z3v151) (z3f68 z3v140))))
(assert (= BAV30 (>= (z3f68 z3v151) (z3f68 z3v141))))
(assert (= BAV31 (>= (z3f68 z3v151) (z3f68 z3v140))))
(assert (= BAV32 (= (z3f68 z3v151) (z3f68 z3v140))))
(assert (= BAV33 (= z3v151 z3v140)))
(assert (= BAV34 (>= (z3f68 z3v151) GEN10)))
(assert (= BAV35 (= (z3f69 z3v152) (smt_set_cup (z3f69 z3v140) (z3f69 z3v140)))))
(check-sat)
(get-model)