(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(set-option :produce-models true)
(declare-const a Int)
(declare-const b Int)
(assert (<= GEN1 a))
(assert (<= a GEN2))
(assert (<= GEN3 b))
(assert (<= b GEN4))
(assert (not (= (- a b) GEN5)))
(assert (not (= a b)))
(assert (not (= a (+ b GEN6))))
(assert (not (= a (- b GEN7))))
(check-sat-using (and-then (! simplify :arith-lhs true) diff-neq))
(get-model)
(assert (>= a b))
(check-sat-using (and-then (! simplify :arith-lhs true) diff-neq))
(assert (= BAV1 (<= GEN1 a)))
(assert (= BAV2 (<= a GEN2)))
(assert (= BAV3 (<= GEN3 b)))
(assert (= BAV4 (<= b GEN4)))
(assert (= BAV5 (= (- a b) GEN5)))
(assert (= BAV6 (= a b)))
(assert (= BAV7 (= a (+ b GEN6))))
(assert (= BAV8 (= a (- b GEN7))))
(assert (= BAV9 (>= a b)))