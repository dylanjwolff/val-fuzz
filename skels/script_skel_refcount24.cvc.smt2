(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const BAV23 Bool)
(declare-const BAV24 Bool)
(declare-const BAV25 Bool)
(declare-const BAV26 Bool)
(declare-const BAV27 Bool)
(declare-const BAV28 Bool)
(declare-const BAV29 Bool)
(declare-const BAV30 Bool)
(declare-const BAV31 Bool)
(declare-const BAV32 Bool)
(declare-const BAV33 Bool)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(set-info :smt-lib-version 2.0)
(set-info :category "unknown")
(declare-datatypes () 
((UNIT  (Unit))
))
(declare-datatypes () 
((BOOL  (Truth)  (Falsity))
))
(declare-sort resource$type 0)
(declare-sort process$type 0)
(declare-fun null () resource$type)
(declare-sort S$t$type 0)
(declare-fun S$empty () S$t$type)
(declare-fun S$mem (process$type S$t$type) BOOL)
(declare-fun S$add (process$type S$t$type) S$t$type)
(declare-fun S$remove (process$type S$t$type) S$t$type)
(declare-fun S$cardinality (S$t$type) Int)
(assert (forall ((e process$type)) (not (= (S$mem e S$empty) Truth))))
(assert (forall ((x process$type)(y process$type)(s S$t$type)) (= (S$mem x (S$add y s)) (ite (or (= x y) (= (S$mem x s) Truth)) Truth Falsity))))
(assert (forall ((x process$type)(y process$type)(s S$t$type)) (= (S$mem x (S$remove y s)) (ite (and (not (= x y)) (= (S$mem x s) Truth)) Truth Falsity))))
(assert (= (S$cardinality S$empty) GEN1))
(assert (forall ((s S$t$type)) (=> (= (S$cardinality s) GEN2) (= s S$empty))))
(assert (forall ((s S$t$type)) (>= (S$cardinality s) GEN3)))
(assert (forall ((x process$type)(s S$t$type)) (= (S$cardinality (S$add x s)) (ite (= (S$mem x s) Truth) (S$cardinality s) (+ (S$cardinality s) GEN4)))))
(assert (forall ((x process$type)(s S$t$type)) (= (S$cardinality (S$remove x s)) (ite (= (S$mem x s) Truth) (- (S$cardinality s) GEN5) (S$cardinality s)))))
(declare-fun count () (Array resource$type Int))
(declare-fun ref () (Array process$type resource$type))
(declare-fun valid () (Array resource$type BOOL))
(declare-fun destroy$r () resource$type)
(declare-fun valid$1 () (Array resource$type BOOL))
(assert (not (=> (forall ((p process$type)) (=> (not (= (select ref p) null)) (= (select valid (select ref p)) Truth))) (=> (not (= destroy$r null)) (=> (= (select valid destroy$r) Truth) (=> (= (select count destroy$r) GEN6) (=> (= valid$1 (store valid destroy$r Falsity)) (forall ((p process$type)) (=> (not (= (select ref p) null)) (= (select valid$1 (select ref p)) Truth))))))))))
(assert (= BAV1 (forall ((e process$type)) (= (S$mem e S$empty) Truth))))
(assert (= BAV2 (forall ((x process$type)(y process$type)(s S$t$type)) (= (S$mem x (S$add y s)) (ite (or (= x y) (= (S$mem x s) Truth)) Truth Falsity)))))
(assert (= BAV3 (forall ((x process$type)(y process$type)(s S$t$type)) (or (= x y) (= (S$mem x s) Truth)))))
(assert (= BAV4 (forall ((x process$type)(y process$type)(s S$t$type)) (= x y))))
(assert (= BAV5 (forall ((x process$type)(y process$type)(s S$t$type)) (= (S$mem x s) Truth))))
(assert (= BAV6 (forall ((x process$type)(y process$type)(s S$t$type)) (= (S$mem x (S$remove y s)) (ite (and (not (= x y)) (= (S$mem x s) Truth)) Truth Falsity)))))
(assert (= BAV7 (forall ((x process$type)(y process$type)(s S$t$type)) (and (not (= x y)) (= (S$mem x s) Truth)))))
(assert (= BAV8 (forall ((x process$type)(y process$type)(s S$t$type)) (= x y))))
(assert (= BAV9 (forall ((x process$type)(y process$type)(s S$t$type)) (= (S$mem x s) Truth))))
(assert (= BAV10 (= (S$cardinality S$empty) GEN1)))
(assert (= BAV11 (forall ((s S$t$type)) (=> (= (S$cardinality s) GEN2) (= s S$empty)))))
(assert (= BAV12 (forall ((s S$t$type)) (= (S$cardinality s) GEN2))))
(assert (= BAV13 (forall ((s S$t$type)) (= s S$empty))))
(assert (= BAV14 (forall ((s S$t$type)) (>= (S$cardinality s) GEN3))))
(assert (= BAV15 (forall ((x process$type)(s S$t$type)) (= (S$cardinality (S$add x s)) (ite (= (S$mem x s) Truth) (S$cardinality s) (+ (S$cardinality s) GEN4))))))
(assert (= BAV16 (forall ((x process$type)(s S$t$type)) (= (S$mem x s) Truth))))
(assert (= BAV17 (forall ((x process$type)(s S$t$type)) (= (S$cardinality (S$remove x s)) (ite (= (S$mem x s) Truth) (- (S$cardinality s) GEN5) (S$cardinality s))))))
(assert (= BAV18 (forall ((x process$type)(s S$t$type)) (= (S$mem x s) Truth))))
(assert (= BAV19 (=> (forall ((p process$type)) (=> (not (= (select ref p) null)) (= (select valid (select ref p)) Truth))) (=> (not (= destroy$r null)) (=> (= (select valid destroy$r) Truth) (=> (= (select count destroy$r) GEN6) (=> (= valid$1 (store valid destroy$r Falsity)) (forall ((p process$type)) (=> (not (= (select ref p) null)) (= (select valid$1 (select ref p)) Truth))))))))))
(assert (= BAV20 (forall ((p process$type)) (=> (not (= (select ref p) null)) (= (select valid (select ref p)) Truth)))))
(assert (= BAV21 (forall ((p process$type)) (= (select ref p) null))))
(assert (= BAV22 (forall ((p process$type)) (= (select valid (select ref p)) Truth))))
(assert (= BAV23 (=> (not (= destroy$r null)) (=> (= (select valid destroy$r) Truth) (=> (= (select count destroy$r) GEN6) (=> (= valid$1 (store valid destroy$r Falsity)) (forall ((p process$type)) (=> (not (= (select ref p) null)) (= (select valid$1 (select ref p)) Truth)))))))))
(assert (= BAV24 (= destroy$r null)))
(assert (= BAV25 (=> (= (select valid destroy$r) Truth) (=> (= (select count destroy$r) GEN6) (=> (= valid$1 (store valid destroy$r Falsity)) (forall ((p process$type)) (=> (not (= (select ref p) null)) (= (select valid$1 (select ref p)) Truth))))))))
(assert (= BAV26 (= (select valid destroy$r) Truth)))
(assert (= BAV27 (=> (= (select count destroy$r) GEN6) (=> (= valid$1 (store valid destroy$r Falsity)) (forall ((p process$type)) (=> (not (= (select ref p) null)) (= (select valid$1 (select ref p)) Truth)))))))
(assert (= BAV28 (= (select count destroy$r) GEN6)))
(assert (= BAV29 (=> (= valid$1 (store valid destroy$r Falsity)) (forall ((p process$type)) (=> (not (= (select ref p) null)) (= (select valid$1 (select ref p)) Truth))))))
(assert (= BAV30 (= valid$1 (store valid destroy$r Falsity))))
(assert (= BAV31 (forall ((p process$type)) (=> (not (= (select ref p) null)) (= (select valid$1 (select ref p)) Truth)))))
(assert (= BAV32 (forall ((p process$type)) (= (select ref p) null))))
(assert (= BAV33 (forall ((p process$type)) (= (select valid$1 (select ref p)) Truth))))
(check-sat)
(get-model)
(exit)