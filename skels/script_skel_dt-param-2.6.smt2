(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-datatypes ( (Tree 1) (TreeList 1) ) (
(par ( X ) ( ( node ( value X ) ( children ( TreeList X )) )))
(par ( Y ) ( ( empty ) ( insert ( head ( Tree Y )) ( tail ( TreeList Y ))) ))
))
(declare-fun x () (Tree Int))
(declare-fun y () (Tree Int))
(declare-fun z () (Tree Int))
(assert (distinct x y z))
(assert (= (value x) GEN1))
(assert ((_ is insert) (children y)))
(assert (= (value (head (children y))) GEN2))
(declare-sort U 0)
(declare-fun a () (Tree U))
(declare-fun b () (Tree U))
(declare-fun c () (Tree U))
(assert (distinct a b c))
(assert ((_ is insert) (children a)))
(declare-fun d () (Tree (Tree Int)))
(declare-fun e () (Tree (Tree Int)))
(declare-fun f () (Tree (Tree Int)))
(assert (distinct d e f))
(assert (= BAV1 (distinct x y z)))
(assert (= BAV2 (= (value x) GEN1)))
(assert (= BAV3 (= (value (head (children y))) GEN2)))
(assert (= BAV4 (distinct a b c)))
(assert (= BAV5 (distinct d e f)))
(check-sat)
(get-model)