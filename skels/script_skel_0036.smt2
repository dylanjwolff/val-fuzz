(set-option :produce-models true)
(set-logic ALL)
(declare-const GEN1 Int)
(declare-const GEN2 Int)
(declare-const GEN3 Int)
(declare-const GEN4 Int)
(declare-const GEN5 Int)
(declare-const GEN6 Int)
(declare-const GEN7 Int)
(declare-const GEN8 Int)
(declare-const GEN9 Int)
(declare-const GEN10 Int)
(declare-const GEN11 Int)
(declare-const GEN12 Int)
(declare-const GEN13 Int)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const BAV23 Bool)
(declare-const BAV24 Bool)
(declare-fun S0 () (Array Int Int))
(declare-fun S1 () (Array Int Int))
(declare-fun z () Int)
(assert (>= z GEN1))
(assert (< z GEN2))
(assert (and (= (select S0 GEN3) GEN4) (and (= (select S0 GEN5) GEN6) (and (= (select S0 GEN7) GEN8) (= (select S0 GEN9) GEN10)))))
(assert (= S1 (store S0 GEN11 GEN12)))
(assert (= z (select S1 GEN13)))
(assert (= BAV14 (>= z GEN1)))
(assert (= BAV15 (< z GEN2)))
(assert (= BAV16 (and (= (select S0 GEN3) GEN4) (and (= (select S0 GEN5) GEN6) (and (= (select S0 GEN7) GEN8) (= (select S0 GEN9) GEN10))))))
(assert (= BAV17 (= (select S0 GEN3) GEN4)))
(assert (= BAV18 (and (= (select S0 GEN5) GEN6) (and (= (select S0 GEN7) GEN8) (= (select S0 GEN9) GEN10)))))
(assert (= BAV19 (= (select S0 GEN5) GEN6)))
(assert (= BAV20 (and (= (select S0 GEN7) GEN8) (= (select S0 GEN9) GEN10))))
(assert (= BAV21 (= (select S0 GEN7) GEN8)))
(assert (= BAV22 (= (select S0 GEN9) GEN10)))
(assert (= BAV23 (= S1 (store S0 GEN11 GEN12))))
(assert (= BAV24 (= z (select S1 GEN13))))
(check-sat)
(get-model)
(get-value (z))
(exit)