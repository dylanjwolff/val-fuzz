(set-option :produce-models true)
(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const GEN13 Int)
(declare-const GEN12 Int)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-fun S0 () (Array Int Int))
(declare-fun S1 () (Array Int Int))
(declare-fun z () Int)
(assert (>= z GEN1))
(assert (< z GEN2))
(assert (and (= (select S0 GEN3) GEN4) (and (= (select S0 GEN5) GEN6) (and (= (select S0 GEN7) GEN8) (= (select S0 GEN9) GEN10)))))
(assert (= S1 (store S0 GEN11 GEN12)))
(assert (= z (select S1 GEN13)))
(assert (= BAV1 (>= z GEN1)))
(assert (= BAV2 (< z GEN2)))
(assert (= BAV3 (and (= (select S0 GEN3) GEN4) (and (= (select S0 GEN5) GEN6) (and (= (select S0 GEN7) GEN8) (= (select S0 GEN9) GEN10))))))
(assert (= BAV4 (= (select S0 GEN3) GEN4)))
(assert (= BAV5 (and (= (select S0 GEN5) GEN6) (and (= (select S0 GEN7) GEN8) (= (select S0 GEN9) GEN10)))))
(assert (= BAV6 (= (select S0 GEN5) GEN6)))
(assert (= BAV7 (and (= (select S0 GEN7) GEN8) (= (select S0 GEN9) GEN10))))
(assert (= BAV8 (= (select S0 GEN7) GEN8)))
(assert (= BAV9 (= (select S0 GEN9) GEN10)))
(assert (= BAV10 (= S1 (store S0 GEN11 GEN12))))
(assert (= BAV11 (= z (select S1 GEN13))))
(check-sat)
(get-model)
(get-value (z))
(exit)