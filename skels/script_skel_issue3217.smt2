(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const GEN10 String)
(declare-const GEN9 String)
(declare-const GEN8 String)
(declare-const GEN7 String)
(declare-const GEN6 String)
(declare-const GEN5 String)
(declare-const GEN4 Int)
(declare-const GEN3 String)
(declare-const GEN2 String)
(declare-const GEN1 String)
(set-option :strings-exp true)
(declare-fun a () String)
(declare-fun b () String)
(declare-fun c () String)
(declare-fun d () String)
(assert (or (not (= (str.suffixof GEN1 (str.replace GEN2 b GEN3)) (= (str.substr a GEN4 (str.len b)) GEN5))) (not (= (not (= c GEN6)) (str.suffixof GEN7 (str.replace GEN8 c GEN9))))))
(assert (= a (str.++ (str.++ b GEN10) d)))
(assert (= BAV1 (or (not (= (str.suffixof GEN1 (str.replace GEN2 b GEN3)) (= (str.substr a GEN4 (str.len b)) GEN5))) (not (= (not (= c GEN6)) (str.suffixof GEN7 (str.replace GEN8 c GEN9)))))))
(assert (= BAV2 (= (str.suffixof GEN1 (str.replace GEN2 b GEN3)) (= (str.substr a GEN4 (str.len b)) GEN5))))
(assert (= BAV3 (= (str.substr a GEN4 (str.len b)) GEN5)))
(assert (= BAV4 (= (not (= c GEN6)) (str.suffixof GEN7 (str.replace GEN8 c GEN9)))))
(assert (= BAV5 (= c GEN6)))
(assert (= BAV6 (= a (str.++ (str.++ b GEN10) d))))
(check-sat)
(get-model)