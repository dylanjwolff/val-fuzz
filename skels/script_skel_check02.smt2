(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(get-model)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const GEN13 Int)
(declare-const GEN12 Int)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-fun b () Int)
(declare-fun n () Int)
(declare-fun f (Int) Bool)
(declare-fun g (Int) Bool)
(assert (<= GEN1 n))
(push 1)
(assert (or (g (- GEN2)) (= b GEN3)))
(assert (or (= (- n b) GEN4) (not (or (= (- n b) GEN5) (f (- n GEN6))))))
(assert (= BAV1 (<= GEN1 n)))
(assert (= BAV2 (or (g (- GEN2)) (= b GEN3))))
(assert (= BAV3 (= b GEN3)))
(assert (= BAV4 (or (= (- n b) GEN4) (not (or (= (- n b) GEN5) (f (- n GEN6)))))))
(assert (= BAV5 (= (- n b) GEN4)))
(assert (= BAV6 (or (= (- n b) GEN5) (f (- n GEN6)))))
(assert (= BAV7 (= (- n b) GEN5)))
(assert (= BAV8 (or (g (- n GEN7)) (= n b))))
(assert (= BAV9 (= n b)))
(assert (= BAV10 (or (not (f n)) (not (= n b)))))
(assert (= BAV11 (= n b)))
(assert (= BAV12 (or (not (g (- n GEN9))) (not (= (- n b) GEN10)))))
(assert (= BAV13 (= (- n b) GEN10)))
(assert (= BAV14 (or (not (g (- n GEN11))) (or (= (- n b) GEN12) (f (- n GEN13))))))
(assert (= BAV15 (or (= (- n b) GEN12) (f (- n GEN13)))))
(assert (= BAV16 (= (- n b) GEN12)))
(assert (= BAV17 (or (f n) (and (not (f n)) (f n)))))
(assert (= BAV18 (and (not (f n)) (f n))))
(check-sat)
(get-model)
(pop 1)
(push 1)
(assert (or (g (- n GEN7)) (= n b)))
(assert (or (not (f n)) (not (= n b))))
(assert (not (f (- n GEN8))))
(assert (or (not (g (- n GEN9))) (not (= (- n b) GEN10))))
(assert (or (not (g (- n GEN11))) (or (= (- n b) GEN12) (f (- n GEN13)))))
(assert (or (f n) (and (not (f n)) (f n))))
(check-sat)
(pop 1)