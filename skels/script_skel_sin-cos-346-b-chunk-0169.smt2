(set-info :smt-lib-version 2.6)
(set-logic ALL)
(declare-const GEN1 Int)
(declare-const GEN2 Int)
(declare-const GEN3 Int)
(declare-const GEN4 Int)
(declare-const GEN5 Int)
(declare-const GEN6 Int)
(declare-const GEN7 Int)
(declare-const GEN8 Int)
(declare-const GEN9 Int)
(declare-const GEN10 Int)
(declare-const GEN11 Int)
(declare-const GEN12 Int)
(declare-const GEN13 Int)
(declare-const GEN14 Int)
(declare-const GEN15 Int)
(declare-const GEN16 Int)
(declare-const GEN17 Int)
(declare-const GEN18 Int)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const BAV23 Bool)
(declare-const BAV24 Bool)
(declare-const BAV25 Bool)
(declare-const BAV26 Bool)
(declare-const BAV27 Bool)
(declare-const BAV28 Bool)
(declare-const BAV29 Bool)
(declare-const BAV30 Bool)
(declare-const BAV31 Bool)
(set-info :category "industrial")
(declare-fun skoX () Real)
(declare-fun skoSQ3 () Real)
(declare-fun pi () Real)
(assert (and (not (<= (* skoX (* skoX (* skoX (* skoX (+ (/ GEN1 GEN2) (* skoX (* skoX (+ (/ (- GEN3) GEN4) (* skoX (* skoX (/ GEN5 GEN6))))))))))) (+ (- GEN7) (* skoSQ3 skoSQ3)))) (and (= (* skoSQ3 skoSQ3) GEN8) (and (not (<= (+ (/ (- GEN9) GEN10) (* pi (/ GEN11 GEN12))) skoX)) (and (not (<= pi (/ GEN13 GEN14))) (and (not (<= (/ GEN15 GEN16) pi)) (and (not (<= skoX GEN17)) (not (<= skoSQ3 GEN18)))))))))
(assert (= BAV19 (and (not (<= (* skoX (* skoX (* skoX (* skoX (+ (/ GEN1 GEN2) (* skoX (* skoX (+ (/ (- GEN3) GEN4) (* skoX (* skoX (/ GEN5 GEN6))))))))))) (+ (- GEN7) (* skoSQ3 skoSQ3)))) (and (= (* skoSQ3 skoSQ3) GEN8) (and (not (<= (+ (/ (- GEN9) GEN10) (* pi (/ GEN11 GEN12))) skoX)) (and (not (<= pi (/ GEN13 GEN14))) (and (not (<= (/ GEN15 GEN16) pi)) (and (not (<= skoX GEN17)) (not (<= skoSQ3 GEN18))))))))))
(assert (= BAV20 (<= (* skoX (* skoX (* skoX (* skoX (+ (/ GEN1 GEN2) (* skoX (* skoX (+ (/ (- GEN3) GEN4) (* skoX (* skoX (/ GEN5 GEN6))))))))))) (+ (- GEN7) (* skoSQ3 skoSQ3)))))
(assert (= BAV21 (and (= (* skoSQ3 skoSQ3) GEN8) (and (not (<= (+ (/ (- GEN9) GEN10) (* pi (/ GEN11 GEN12))) skoX)) (and (not (<= pi (/ GEN13 GEN14))) (and (not (<= (/ GEN15 GEN16) pi)) (and (not (<= skoX GEN17)) (not (<= skoSQ3 GEN18)))))))))
(assert (= BAV22 (= (* skoSQ3 skoSQ3) GEN8)))
(assert (= BAV23 (and (not (<= (+ (/ (- GEN9) GEN10) (* pi (/ GEN11 GEN12))) skoX)) (and (not (<= pi (/ GEN13 GEN14))) (and (not (<= (/ GEN15 GEN16) pi)) (and (not (<= skoX GEN17)) (not (<= skoSQ3 GEN18))))))))
(assert (= BAV24 (<= (+ (/ (- GEN9) GEN10) (* pi (/ GEN11 GEN12))) skoX)))
(assert (= BAV25 (and (not (<= pi (/ GEN13 GEN14))) (and (not (<= (/ GEN15 GEN16) pi)) (and (not (<= skoX GEN17)) (not (<= skoSQ3 GEN18)))))))
(assert (= BAV26 (<= pi (/ GEN13 GEN14))))
(assert (= BAV27 (and (not (<= (/ GEN15 GEN16) pi)) (and (not (<= skoX GEN17)) (not (<= skoSQ3 GEN18))))))
(assert (= BAV28 (<= (/ GEN15 GEN16) pi)))
(assert (= BAV29 (and (not (<= skoX GEN17)) (not (<= skoSQ3 GEN18)))))
(assert (= BAV30 (<= skoX GEN17)))
(assert (= BAV31 (<= skoSQ3 GEN18)))
(check-sat)
(exit)