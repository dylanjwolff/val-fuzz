(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const GEN13 Int)
(declare-const GEN12 Int)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-fun start!1 () Bool)
(assert start!1)
(declare-fun lt!2 () Bool)
(assert (=> start!1 (not lt!2)))
(declare-datatypes () ( (Option!3 (None!1) (Some!1 (v!18 Int))) ))
(declare-datatypes () ( (Method!1 (Method!2 (initials!1 (Array Option!3 Int)))) ))
(declare-fun lambda!2 () (Array Int Method!1))
(declare-fun isValidStep!1 ((Array Int Method!1) (Array Int Option!3) (Array Int Option!3) Int Int Option!3) Bool)
(declare-fun control!1 () (Array Int Option!3))
(declare-fun next_control!0 () (Array Int Option!3))
(assert (=> start!1 (= lt!2 (not (isValidStep!1 lambda!2 control!1 next_control!0 GEN1 GEN2 (Some!1 GEN3))))))
(declare-fun d!1 () Bool)
(assert (=> d!1 (= (isValidStep!1 lambda!2 control!1 next_control!0 GEN4 GEN5 (Some!1 GEN6)) (= next_control!0 (store control!1 GEN7 (Some!1 (select (initials!1 (select lambda!2 GEN8)) (Some!1 GEN9))))))))
(declare-fun methods!1 (Int) Method!1)
(assert (=> d!1 (= (select lambda!2 GEN10) (methods!1 GEN11))))
(declare-fun b_lambda!1 () Bool)
(assert (=> (not b_lambda!1) (not d!1)))
(assert (=> start!1 d!1))
(declare-fun d!3 () Bool)
(assert (=> d!3 (= control!1 ((as const (Array Int Option!3)) None!1))))
(assert (=> start!1 d!3))
(declare-fun d!5 () Bool)
(assert (=> d!5 (= next_control!0 (store ((as const (Array Int Option!3)) None!1) GEN12 (Some!1 GEN13)))))
(assert (=> start!1 d!5))
(assert true)
(assert (= BAV1 (=> start!1 (not lt!2))))
(assert (= BAV2 (=> start!1 (= lt!2 (not (isValidStep!1 lambda!2 control!1 next_control!0 GEN1 GEN2 (Some!1 GEN3)))))))
(assert (= BAV3 (= lt!2 (not (isValidStep!1 lambda!2 control!1 next_control!0 GEN1 GEN2 (Some!1 GEN3))))))
(assert (= BAV4 (=> d!1 (= (isValidStep!1 lambda!2 control!1 next_control!0 GEN4 GEN5 (Some!1 GEN6)) (= next_control!0 (store control!1 GEN7 (Some!1 (select (initials!1 (select lambda!2 GEN8)) (Some!1 GEN9)))))))))
(assert (= BAV5 (= (isValidStep!1 lambda!2 control!1 next_control!0 GEN4 GEN5 (Some!1 GEN6)) (= next_control!0 (store control!1 GEN7 (Some!1 (select (initials!1 (select lambda!2 GEN8)) (Some!1 GEN9))))))))
(assert (= BAV6 (= next_control!0 (store control!1 GEN7 (Some!1 (select (initials!1 (select lambda!2 GEN8)) (Some!1 GEN9)))))))
(assert (= BAV7 (=> d!1 (= (select lambda!2 GEN10) (methods!1 GEN11)))))
(assert (= BAV8 (= (select lambda!2 GEN10) (methods!1 GEN11))))
(assert (= BAV9 (=> (not b_lambda!1) (not d!1))))
(assert (= BAV10 (=> start!1 d!1)))
(assert (= BAV11 (=> d!3 (= control!1 ((as const (Array Int Option!3)) None!1)))))
(assert (= BAV12 (= control!1 ((as const (Array Int Option!3)) None!1))))
(assert (= BAV13 (=> start!1 d!3)))
(assert (= BAV14 (=> d!5 (= next_control!0 (store ((as const (Array Int Option!3)) None!1) GEN12 (Some!1 GEN13))))))
(assert (= BAV15 (= next_control!0 (store ((as const (Array Int Option!3)) None!1) GEN12 (Some!1 GEN13)))))
(assert (= BAV16 (=> start!1 d!5)))
(check-sat)
(get-model)