(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(set-option :produce-models true)
(declare-const a (Array Int Int))
(declare-const b (Array Int Int))
(declare-const c (Array Int Int))
(assert (and (= a (store ((as const (Array Int Int)) GEN1) GEN2 GEN3)) (= b (store (store ((as const (Array Int Int)) GEN1) GEN2 GEN3) GEN4 GEN5))))
(assert (= BAV1 (and (= a (store ((as const (Array Int Int)) GEN1) GEN2 GEN3)) (= b (store (store ((as const (Array Int Int)) GEN1) GEN2 GEN3) GEN4 GEN5)))))
(assert (= BAV2 (= a (store ((as const (Array Int Int)) GEN1) GEN2 GEN3))))
(assert (= BAV3 (= b (store (store ((as const (Array Int Int)) GEN1) GEN2 GEN3) GEN4 GEN5))))
(check-sat)
(get-model)
(eval (= (store (store a 6 7) 5 8) (store (store b 6 7) 5 8)))
(eval (= (store (store (store a 5 2) 6 7) 5 3) (store b 6 7) ))
(eval (= (store a 6 7) (store (store b 6 7) 5 0)))