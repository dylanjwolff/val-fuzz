(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const GEN8 Int)
(declare-const GEN7 Real)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Real)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(set-option :produce-models true)
(declare-const x (_ FloatingPoint 11 53))
(declare-const y (_ FloatingPoint 11 53))
(declare-const r (_ FloatingPoint 11 53))
(declare-const x_bv (_ BitVec 64))
(declare-const a (_ BitVec 64))
(declare-const b (_ BitVec 64))
(assert (and (= x ((_ to_fp 11 53) roundTowardZero GEN3 GEN4)) (= y ((_ to_fp 11 53) roundTowardZero GEN7 GEN8)) (= r (fp.add roundTowardZero x y)) (= x_bv (to_ieee_bv x)) (= a (bvxor b x_bv))))
(assert (= BAV1 (and (= x ((_ to_fp 11 53) roundTowardZero GEN3 GEN4)) (= y ((_ to_fp 11 53) roundTowardZero GEN7 GEN8)) (= r (fp.add roundTowardZero x y)) (= x_bv (to_ieee_bv x)) (= a (bvxor b x_bv)))))
(assert (= BAV2 (= x ((_ to_fp 11 53) roundTowardZero GEN3 GEN4))))
(assert (= BAV3 (= y ((_ to_fp 11 53) roundTowardZero GEN7 GEN8))))
(assert (= BAV4 (= r (fp.add roundTowardZero x y))))
(assert (= BAV5 (= x_bv (to_ieee_bv x))))
(assert (= BAV6 (= a (bvxor b x_bv))))
(check-sat)
(get-model)
(check-sat-using smt)
(exit)