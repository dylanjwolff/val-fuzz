(set-option :incremental false)
(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const GEN22 Int)
(declare-const GEN21 Int)
(declare-const GEN20 Int)
(declare-const GEN19 Int)
(declare-const GEN18 Int)
(declare-const GEN17 Int)
(declare-const GEN16 Int)
(declare-const GEN15 Int)
(declare-const GEN14 Int)
(declare-const GEN13 Int)
(declare-const GEN12 Int)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-fun v4 () (_ BitVec 4))
(declare-fun v2 () (_ BitVec 4))
(declare-fun v6 () (_ BitVec 4))
(assert (= BAV1 (and (bvult ((_ sign_extend 3) (ite (bvugt ((_ zero_extend 3) (ite (bvuge v6 ((_ sign_extend 3) (_ bv1 1))) (_ bv1 1) (_ bv0 1))) (_ bv1 4)) (_ bv1 1) (_ bv0 1))) (bvashr (bvlshr v2 v4) v6)) (distinct v4 (_ bv0 4)) (bvsle (_ bv0 1) (ite (bvslt (_ bv0 4) ((_ sign_extend 3) (ite (bvugt (_ bv1 4) ((_ zero_extend 3) (ite (bvslt (_ bv0 4) (bvlshr v2 v4)) (_ bv1 1) (_ bv0 1)))) (_ bv1 1) (_ bv0 1)))) (_ bv1 1) (_ bv0 1))))))
(assert (= BAV2 (distinct v4 (_ bv0 4))))
(check-sat-assuming ((and (bvult ((_ sign_extend 3) (ite (bvugt ((_ zero_extend 3) (ite (bvuge v6 ((_ sign_extend 3) (_ bv1 1))) (_ bv1 1) (_ bv0 1))) (_ bv1 4)) (_ bv1 1) (_ bv0 1))) (bvashr (bvlshr v2 v4) v6)) (distinct v4 (_ bv0 4)) (bvsle (_ bv0 1) (ite (bvslt (_ bv0 4) ((_ sign_extend 3) (ite (bvugt (_ bv1 4) ((_ zero_extend 3) (ite (bvslt (_ bv0 4) (bvlshr v2 v4)) (_ bv1 1) (_ bv0 1)))) (_ bv1 1) (_ bv0 1)))) (_ bv1 1) (_ bv0 1))))))
(get-model)