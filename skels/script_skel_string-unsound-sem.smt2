(set-info :smt-lib-version 2.5)
(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const GEN9 Int)
(declare-const GEN8 String)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 String)
(declare-const GEN3 String)
(declare-const GEN2 String)
(declare-const GEN1 String)
(set-option :strings-exp true)
(declare-fun x () String)
(declare-fun y () String)
(declare-fun z () Int)
(assert (and (not (= (str.replace GEN1 (int.to.str z) x) (str.++ GEN2 (str.replace GEN3 (int.to.str z) x)))) (not (= (str.replace x (str.at x z) GEN4) (str.++ (str.replace (str.++ (str.substr x GEN5 z) (str.substr x z GEN6)) (str.substr x z GEN7) GEN8) (str.substr x (+ GEN9 z) (str.len x)))))))
(assert (= BAV1 (and (not (= (str.replace GEN1 (int.to.str z) x) (str.++ GEN2 (str.replace GEN3 (int.to.str z) x)))) (not (= (str.replace x (str.at x z) GEN4) (str.++ (str.replace (str.++ (str.substr x GEN5 z) (str.substr x z GEN6)) (str.substr x z GEN7) GEN8) (str.substr x (+ GEN9 z) (str.len x))))))))
(assert (= BAV2 (= (str.replace GEN1 (int.to.str z) x) (str.++ GEN2 (str.replace GEN3 (int.to.str z) x)))))
(assert (= BAV3 (= (str.replace x (str.at x z) GEN4) (str.++ (str.replace (str.++ (str.substr x GEN5 z) (str.substr x z GEN6)) (str.substr x z GEN7) GEN8) (str.substr x (+ GEN9 z) (str.len x))))))
(check-sat)
(get-model)