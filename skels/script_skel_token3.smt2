(set-option :print-success false )
(set-option :produce-unsat-cores true )
(set-logic ALL)
(declare-const GEN1 Int)
(declare-const GEN2 Int)
(declare-const GEN3 Int)
(declare-const GEN4 Int)
(declare-const GEN5 Int)
(declare-const GEN6 Int)
(declare-const GEN7 Int)
(declare-const GEN8 Int)
(declare-const GEN9 Int)
(declare-const GEN10 Int)
(declare-const GEN11 Int)
(declare-const GEN12 Int)
(declare-const GEN13 Int)
(declare-const GEN14 Int)
(declare-const GEN15 Int)
(declare-const GEN16 Int)
(declare-const GEN17 Int)
(declare-const GEN18 Int)
(declare-const GEN19 Int)
(declare-const GEN20 Int)
(declare-const GEN21 Int)
(declare-const GEN22 Int)
(declare-const GEN23 Int)
(declare-const GEN24 Int)
(declare-const GEN25 Int)
(declare-const GEN26 Int)
(declare-const GEN27 Int)
(declare-const GEN28 Int)
(declare-const GEN29 Int)
(declare-const GEN30 Int)
(declare-const GEN31 Int)
(declare-const GEN32 Int)
(declare-const GEN33 Int)
(declare-const GEN34 Int)
(declare-const GEN35 Int)
(declare-const GEN36 Int)
(declare-const GEN37 Int)
(declare-const GEN38 Int)
(declare-const GEN39 Int)
(declare-const GEN40 Int)
(declare-const GEN41 Int)
(declare-const GEN42 Int)
(declare-const GEN43 Int)
(declare-const GEN44 Int)
(declare-const GEN45 Int)
(declare-const GEN46 Int)
(declare-const GEN47 Int)
(declare-const GEN48 Int)
(declare-const GEN49 Int)
(declare-const GEN50 Int)
(declare-const GEN51 Int)
(declare-const GEN52 Int)
(declare-const GEN53 Int)
(declare-const GEN54 Int)
(declare-const GEN55 Int)
(declare-const GEN56 Int)
(declare-const GEN57 Int)
(declare-const GEN58 Int)
(declare-const GEN59 Int)
(declare-const GEN60 Int)
(declare-const GEN61 Int)
(declare-const GEN62 Int)
(declare-const GEN63 Int)
(declare-const GEN64 Int)
(declare-const GEN65 Int)
(declare-const GEN66 Int)
(declare-const GEN67 Int)
(declare-const GEN68 Int)
(declare-const GEN69 Int)
(declare-const GEN70 Int)
(declare-const GEN71 Int)
(declare-const GEN72 Int)
(declare-const GEN73 Int)
(declare-const GEN74 Int)
(declare-const GEN75 Int)
(declare-const GEN76 Int)
(declare-const GEN77 Int)
(declare-const GEN78 Int)
(declare-const GEN79 Int)
(declare-const GEN80 Int)
(declare-const GEN81 Int)
(declare-const GEN82 Int)
(declare-const GEN83 Int)
(declare-const GEN84 Int)
(declare-const GEN85 Int)
(declare-const GEN86 Int)
(declare-const GEN87 Int)
(declare-const GEN88 Int)
(declare-const GEN89 Int)
(declare-const GEN90 Int)
(declare-const GEN91 Int)
(declare-const GEN92 Int)
(declare-const GEN93 Int)
(declare-const GEN94 Int)
(declare-const GEN95 Int)
(declare-const GEN96 Int)
(declare-const GEN97 Int)
(declare-const GEN98 Int)
(declare-const GEN99 Int)
(declare-const GEN100 Int)
(declare-const GEN101 Int)
(declare-const GEN102 Int)
(declare-const GEN103 Int)
(declare-const GEN104 Int)
(declare-const GEN105 Int)
(declare-const GEN106 Int)
(declare-const GEN107 Int)
(declare-const GEN108 Int)
(declare-const GEN109 Int)
(declare-const GEN110 Int)
(declare-const GEN111 Int)
(declare-const GEN112 Int)
(declare-const GEN113 Int)
(declare-const GEN114 Int)
(declare-const GEN115 Int)
(declare-const GEN116 Int)
(declare-const GEN117 Int)
(declare-const GEN118 Int)
(declare-const GEN119 Int)
(declare-const GEN120 Int)
(declare-const GEN121 Int)
(declare-const GEN122 Int)
(declare-const GEN123 Int)
(declare-const GEN124 Int)
(declare-const BAV125 Bool)
(declare-const BAV126 Bool)
(declare-const BAV127 Bool)
(declare-const BAV128 Bool)
(declare-const BAV129 Bool)
(declare-const BAV130 Bool)
(declare-const BAV131 Bool)
(declare-const BAV132 Bool)
(declare-const BAV133 Bool)
(declare-const BAV134 Bool)
(declare-const BAV135 Bool)
(declare-const BAV136 Bool)
(declare-const BAV137 Bool)
(declare-const BAV138 Bool)
(declare-const BAV139 Bool)
(declare-const BAV140 Bool)
(declare-const BAV141 Bool)
(declare-const BAV142 Bool)
(declare-const BAV143 Bool)
(declare-const BAV144 Bool)
(declare-const BAV145 Bool)
(declare-const BAV146 Bool)
(declare-const BAV147 Bool)
(declare-const BAV148 Bool)
(declare-const BAV149 Bool)
(declare-const BAV150 Bool)
(declare-const BAV151 Bool)
(declare-const BAV152 Bool)
(declare-const BAV153 Bool)
(declare-const BAV154 Bool)
(declare-const BAV155 Bool)
(declare-const BAV156 Bool)
(declare-const BAV157 Bool)
(declare-const BAV158 Bool)
(declare-const BAV159 Bool)
(declare-const BAV160 Bool)
(declare-const BAV161 Bool)
(declare-const BAV162 Bool)
(declare-const BAV163 Bool)
(declare-const BAV164 Bool)
(declare-const BAV165 Bool)
(declare-const BAV166 Bool)
(declare-const BAV167 Bool)
(declare-const BAV168 Bool)
(declare-const BAV169 Bool)
(declare-const BAV170 Bool)
(declare-const BAV171 Bool)
(declare-const BAV172 Bool)
(declare-const BAV173 Bool)
(declare-const BAV174 Bool)
(declare-const BAV175 Bool)
(declare-const BAV176 Bool)
(declare-const BAV177 Bool)
(declare-const BAV178 Bool)
(declare-const BAV179 Bool)
(declare-const BAV180 Bool)
(declare-const BAV181 Bool)
(declare-const BAV182 Bool)
(declare-const BAV183 Bool)
(declare-const BAV184 Bool)
(declare-const BAV185 Bool)
(declare-const BAV186 Bool)
(declare-const BAV187 Bool)
(declare-const BAV188 Bool)
(declare-const BAV189 Bool)
(declare-const BAV190 Bool)
(declare-const BAV191 Bool)
(declare-const BAV192 Bool)
(declare-const BAV193 Bool)
(declare-const BAV194 Bool)
(declare-const BAV195 Bool)
(declare-const BAV196 Bool)
(declare-const BAV197 Bool)
(declare-const BAV198 Bool)
(declare-const BAV199 Bool)
(declare-const BAV200 Bool)
(declare-const BAV201 Bool)
(declare-const BAV202 Bool)
(declare-const BAV203 Bool)
(declare-const BAV204 Bool)
(declare-const BAV205 Bool)
(declare-const BAV206 Bool)
(declare-const BAV207 Bool)
(declare-const BAV208 Bool)
(declare-const BAV209 Bool)
(declare-const BAV210 Bool)
(declare-const BAV211 Bool)
(declare-const BAV212 Bool)
(declare-const BAV213 Bool)
(declare-const BAV214 Bool)
(declare-const BAV215 Bool)
(declare-const BAV216 Bool)
(declare-const BAV217 Bool)
(declare-const BAV218 Bool)
(declare-const BAV219 Bool)
(declare-const BAV220 Bool)
(declare-const BAV221 Bool)
(declare-const BAV222 Bool)
(declare-const BAV223 Bool)
(declare-const BAV224 Bool)
(declare-const BAV225 Bool)
(declare-const BAV226 Bool)
(declare-const BAV227 Bool)
(declare-const BAV228 Bool)
(declare-const BAV229 Bool)
(declare-const BAV230 Bool)
(declare-const BAV231 Bool)
(declare-const BAV232 Bool)
(declare-const BAV233 Bool)
(declare-const BAV234 Bool)
(declare-const BAV235 Bool)
(declare-const BAV236 Bool)
(declare-const BAV237 Bool)
(declare-const BAV238 Bool)
(declare-const BAV239 Bool)
(declare-const BAV240 Bool)
(declare-const BAV241 Bool)
(declare-const BAV242 Bool)
(declare-const BAV243 Bool)
(declare-const BAV244 Bool)
(declare-const BAV245 Bool)
(declare-const BAV246 Bool)
(declare-const BAV247 Bool)
(declare-const BAV248 Bool)
(declare-const BAV249 Bool)
(declare-const BAV250 Bool)
(declare-const BAV251 Bool)
(declare-const BAV252 Bool)
(declare-const BAV253 Bool)
(declare-const BAV254 Bool)
(declare-const BAV255 Bool)
(declare-const BAV256 Bool)
(declare-const BAV257 Bool)
(declare-const BAV258 Bool)
(declare-const BAV259 Bool)
(declare-const BAV260 Bool)
(declare-const BAV261 Bool)
(declare-const BAV262 Bool)
(declare-const BAV263 Bool)
(declare-const BAV264 Bool)
(declare-const BAV265 Bool)
(declare-const BAV266 Bool)
(declare-const BAV267 Bool)
(declare-const BAV268 Bool)
(declare-const BAV269 Bool)
(declare-const BAV270 Bool)
(declare-const BAV271 Bool)
(declare-const BAV272 Bool)
(declare-const BAV273 Bool)
(declare-const BAV274 Bool)
(declare-const BAV275 Bool)
(declare-const BAV276 Bool)
(declare-const BAV277 Bool)
(declare-const BAV278 Bool)
(declare-const BAV279 Bool)
(declare-const BAV280 Bool)
(declare-const BAV281 Bool)
(declare-const BAV282 Bool)
(declare-const BAV283 Bool)
(declare-const BAV284 Bool)
(declare-const BAV285 Bool)
(declare-const BAV286 Bool)
(declare-const BAV287 Bool)
(declare-const BAV288 Bool)
(declare-const BAV289 Bool)
(declare-const BAV290 Bool)
(declare-const BAV291 Bool)
(declare-const BAV292 Bool)
(declare-const BAV293 Bool)
(declare-const BAV294 Bool)
(declare-const BAV295 Bool)
(declare-const BAV296 Bool)
(declare-const BAV297 Bool)
(declare-const BAV298 Bool)
(declare-const BAV299 Bool)
(declare-const BAV300 Bool)
(declare-const BAV301 Bool)
(declare-const BAV302 Bool)
(declare-const BAV303 Bool)
(declare-const BAV304 Bool)
(declare-const BAV305 Bool)
(declare-const BAV306 Bool)
(declare-const BAV307 Bool)
(declare-const BAV308 Bool)
(declare-const BAV309 Bool)
(declare-const BAV310 Bool)
(declare-const BAV311 Bool)
(declare-const BAV312 Bool)
(declare-const BAV313 Bool)
(declare-const BAV314 Bool)
(declare-const BAV315 Bool)
(declare-const BAV316 Bool)
(declare-const BAV317 Bool)
(declare-const BAV318 Bool)
(declare-const BAV319 Bool)
(declare-const BAV320 Bool)
(declare-const BAV321 Bool)
(declare-const BAV322 Bool)
(declare-const BAV323 Bool)
(declare-const BAV324 Bool)
(declare-const BAV325 Bool)
(declare-const BAV326 Bool)
(declare-const BAV327 Bool)
(declare-const BAV328 Bool)
(declare-const BAV329 Bool)
(declare-const BAV330 Bool)
(declare-const BAV331 Bool)
(declare-const BAV332 Bool)
(declare-const BAV333 Bool)
(declare-const BAV334 Bool)
(declare-const BAV335 Bool)
(declare-const BAV336 Bool)
(declare-const BAV337 Bool)
(declare-const BAV338 Bool)
(declare-const BAV339 Bool)
(declare-const BAV340 Bool)
(declare-const BAV341 Bool)
(declare-const BAV342 Bool)
(declare-const BAV343 Bool)
(declare-const BAV344 Bool)
(declare-const BAV345 Bool)
(declare-const BAV346 Bool)
(declare-const BAV347 Bool)
(declare-const BAV348 Bool)
(declare-const BAV349 Bool)
(declare-const BAV350 Bool)
(declare-const BAV351 Bool)
(declare-const BAV352 Bool)
(declare-const BAV353 Bool)
(declare-const BAV354 Bool)
(declare-const BAV355 Bool)
(declare-const BAV356 Bool)
(declare-const BAV357 Bool)
(declare-const BAV358 Bool)
(declare-const BAV359 Bool)
(declare-const BAV360 Bool)
(declare-const BAV361 Bool)
(declare-const BAV362 Bool)
(declare-const BAV363 Bool)
(declare-const BAV364 Bool)
(declare-const BAV365 Bool)
(declare-const BAV366 Bool)
(declare-const BAV367 Bool)
(declare-sort admin__t 0)
(declare-sort admintoken__statetype 0)
(define-sort statust () Int )
(declare-fun admintoken__state () admintoken__statetype )
(declare-fun admintoken__state___init ()
  admintoken__statetype
)
(declare-fun admintoken__state___loopinit ()
  admintoken__statetype
)
(declare-fun enclavequiescent () statust )
(declare-fun gotadmintoken () statust )
(declare-fun notenrolled () statust )
(declare-fun shutdown () statust )
(declare-fun status () statust )
(declare-fun status___init () statust )
(declare-fun status___loopinit () statust )
(declare-fun statust__base__first () statust )
(declare-fun statust__base__last () statust )
(declare-fun statust__first () statust )
(declare-fun statust__last () statust )
(declare-fun statust__size () Int )
(declare-fun theadmin () admin__t )
(declare-fun theadmin___init () admin__t )
(declare-fun theadmin___loopinit () admin__t )
(declare-fun waitingendenrol () statust )
(declare-fun waitingenrol () statust )
(declare-fun waitingfinishadminop () statust )
(declare-fun waitingremoveadmintokenfail () statust )
(declare-fun waitingstartadminop () statust )
(declare-fun admin__ispresent ( admin__t ) Bool )
(declare-fun admintoken__ispresent
  ( admintoken__statetype )
  Bool
)
(declare-fun bit__and ( Int Int ) Int )
(declare-fun bit__not ( Int Int ) Int )
(declare-fun bit__or ( Int Int ) Int )
(declare-fun bit__xor ( Int Int ) Int )
(declare-fun boolean__pos ( Bool ) Int )
(declare-fun boolean__val ( Int ) Bool )
(declare-fun character__pos ( Int ) Int )
(declare-fun character__val ( Int ) Int )
(declare-fun int___abs ( Int ) Int )
(declare-fun int___div ( Int Int ) Int )
(declare-fun int___exp ( Int Int ) Int )
(declare-fun int___mod ( Int Int ) Int )
(declare-fun int___odd ( Int ) Bool )
(declare-fun int___rem ( Int Int ) Int )
(declare-fun int___times ( Int Int ) Int )
(declare-fun int___to_real ( Int ) Real )
(declare-fun real___abs ( Real ) Real )
(declare-fun real___div ( Real Real ) Real )
(declare-fun real___exp ( Real Int ) Real )
(declare-fun real___minus ( Real Real ) Real )
(declare-fun real___plus ( Real Real ) Real )
(declare-fun real___times ( Real Real ) Real )
(declare-fun real___uminus ( Real ) Real )
(declare-fun round__ ( Real ) Int )
(declare-fun statust__LE ( statust statust ) Bool )
(declare-fun statust__LT ( statust statust ) Bool )
(declare-fun statust___member ( statust ) Bool )
(declare-fun statust__pos ( statust ) Int )
(declare-fun statust__pred ( statust ) statust )
(declare-fun statust__succ ( statust ) statust )
(declare-fun statust__val ( Int ) statust )
(assert (! (<= GEN1 statust__size) :named adminopcanst_rules<1>))
(assert (! (= statust__first notenrolled) :named adminopcanst_rules<2>))
(assert (! (= statust__last shutdown) :named adminopcanst_rules<3>))
(assert (! (= statust__base__first notenrolled) :named adminopcanst_rules<4>))
(assert (! (= statust__base__last shutdown) :named adminopcanst_rules<5>))
(assert (! (forall ((X Int)(Y Int)) (=> (< GEN2 Y) (<= GEN3 (int___mod X Y)))) :named divmod<1>))
(assert (! (forall ((X Int)(Y Int)) (=> (< GEN4 Y) (< (int___mod X Y) Y))) :named divmod<2>))
(assert (! (forall ((X Int)(Y Int)) (=> (< Y GEN5) (<= (int___mod X Y) GEN6))) :named divmod<3>))
(assert (! (forall ((X Int)(Y Int)) (=> (< Y GEN7) (< Y (int___mod X Y)))) :named divmod<4>))
(assert (! (forall ((X Int)(Y Int)) (=> (and (<= GEN8 X) (< GEN9 Y)) (< (- X Y) (* Y (int___div X Y))))) :named divmod<5>))
(assert (! (forall ((X Int)(Y Int)) (=> (and (<= GEN10 X) (< GEN11 Y)) (<= (* Y (int___div X Y)) X))) :named divmod<6>))
(assert (! (forall ((X Int)(Y Int)) (=> (and (<= X GEN12) (< GEN13 Y)) (<= X (* Y (int___div X Y))))) :named divmod<7>))
(assert (! (forall ((X Int)(Y Int)) (=> (and (<= X GEN14) (< GEN15 Y)) (< (* Y (int___div X Y)) (+ X Y)))) :named divmod<8>))
(assert (! (forall ((X Int)(Y Int)) (=> (and (<= GEN16 X) (< Y GEN17)) (<= (* Y (int___div X Y)) X))) :named divmod<9>))
(assert (! (forall ((X Int)(Y Int)) (=> (and (<= GEN18 X) (< Y GEN19)) (< (+ X Y) (* Y (int___div X Y))))) :named divmod<10>))
(assert (! (forall ((X Int)(Y Int)) (=> (and (<= X GEN20) (< Y GEN21)) (< (* Y (int___div X Y)) (- X Y)))) :named divmod<11>))
(assert (! (forall ((X Int)(Y Int)) (=> (and (<= X GEN22) (< Y GEN23)) (<= X (* Y (int___div X Y))))) :named divmod<12>))
(assert (! (forall ((X Int)(Y Int)) (= (+ (* Y (int___div X Y)) (int___rem X Y)) X)) :named divmod<13>))
(assert (! (forall ((X Int)(Y Int)) (=> (= (int___rem X Y) GEN24) (= (int___mod X Y) GEN25))) :named divmod<14>))
(assert (! (forall ((X Int)(Y Int)) (=> (and (<= GEN26 X) (< GEN27 Y)) (= (int___mod X Y) (int___rem X Y)))) :named divmod<15>))
(assert (! (forall ((X Int)(Y Int)) (=> (and (<= X GEN28) (< GEN29 Y) (not (= (int___rem X Y) GEN30))) (= (int___mod X Y) (+ (int___rem X Y) Y)))) :named divmod<16>))
(assert (! (forall ((X Int)(Y Int)) (=> (and (<= GEN31 X) (< Y GEN32) (not (= (int___rem X Y) GEN33))) (= (int___mod X Y) (+ (int___rem X Y) Y)))) :named divmod<17>))
(assert (! (forall ((X Int)(Y Int)) (=> (and (<= X GEN34) (< Y GEN35)) (= (int___mod X Y) (int___rem X Y)))) :named divmod<18>))
(assert (! (forall ((X Int)(Y Int)) (=> (and (<= GEN36 X) (< X Y)) (= (int___mod X Y) X))) :named divmod<20>))
(assert (! (forall ((X Int)) (=> (<= GEN37 X) (= (bit__and X X) X))) :named bitwise<1>))
(assert (! (forall ((X Int)) (=> (<= GEN38 X) (= (bit__or X X) X))) :named bitwise<2>))
(assert (! (forall ((X Int)) (=> (<= GEN39 X) (= (bit__xor X X) GEN40))) :named bitwise<3>))
(assert (! (forall ((X Int)) (=> (<= GEN41 X) (= (bit__and X GEN42) GEN43))) :named bitwise<11>))
(assert (! (forall ((X Int)) (=> (<= GEN44 X) (= (bit__or X GEN45) X))) :named bitwise<12>))
(assert (! (forall ((X Int)) (=> (<= GEN46 X) (= (bit__xor X GEN47) X))) :named bitwise<13>))
(assert (! (forall ((X Int)(Y Int)) (=> (and (<= GEN48 X) (<= GEN49 Y)) (<= GEN50 (bit__and X Y)))) :named bitwise<51>))
(assert (! (forall ((X Int)(Y Int)) (=> (and (<= GEN51 X) (<= GEN52 Y)) (<= GEN53 (bit__or X Y)))) :named bitwise<52>))
(assert (! (forall ((X Int)(Y Int)) (=> (and (<= GEN54 X) (<= GEN55 Y)) (<= GEN56 (bit__xor X Y)))) :named bitwise<53>))
(assert (! (forall ((X Int)(Y Int)) (=> (and (<= GEN57 X) (<= GEN58 Y)) (<= X (bit__or X Y)))) :named bitwise<54>))
(assert (! (forall ((X Int)(Y Int)) (=> (and (<= GEN59 X) (<= GEN60 Y)) (<= Y (bit__or X Y)))) :named bitwise<55>))
(assert (! (forall ((X Int)(Y Int)) (=> (and (<= GEN61 X) (<= GEN62 Y)) (<= (- X Y) (bit__xor X Y)))) :named bitwise<56>))
(assert (! (forall ((X Int)(Y Int)) (=> (and (<= GEN63 X) (<= GEN64 Y)) (<= (- Y X) (bit__xor X Y)))) :named bitwise<57>))
(assert (! (forall ((X Int)(Y Int)) (=> (and (<= GEN65 X) (<= GEN66 Y)) (<= (bit__and X Y) X))) :named bitwise<61>))
(assert (! (forall ((X Int)(Y Int)) (=> (and (<= GEN67 X) (<= GEN68 Y)) (<= (bit__and X Y) Y))) :named bitwise<62>))
(assert (! (forall ((X Int)(Y Int)) (=> (and (<= GEN69 X) (<= GEN70 Y)) (<= (bit__or X Y) (+ X Y)))) :named bitwise<63>))
(assert (! (forall ((X Int)(Y Int)) (=> (and (<= GEN71 X) (<= GEN72 Y)) (<= (bit__xor X Y) (+ X Y)))) :named bitwise<64>))
(assert (! (forall ((N Int)(X Int)(Y Int)) (=> (and (<= GEN73 X) (<= GEN74 Y) (<= GEN75 N) (<= X (- (int___exp GEN76 N) GEN77)) (<= Y (- (int___exp GEN78 N) GEN79))) (<= (bit__or X Y) (- (int___exp GEN80 N) GEN81)))) :named bitwise<66>))
(assert (! (forall ((N Int)(X Int)(Y Int)) (=> (and (<= GEN82 X) (<= GEN83 Y) (<= GEN84 N) (<= X (- (int___exp GEN85 N) GEN86)) (<= Y (- (int___exp GEN87 N) GEN88))) (<= (bit__xor X Y) (- (int___exp GEN89 N) GEN90)))) :named bitwise<67>))
(assert (! (forall ((X Int)(Y Int)) (=> (and (<= GEN91 X) (<= GEN92 Y)) (<= (bit__and X Y) (bit__or X Y)))) :named bitwise<81>))
(assert (! (forall ((X Int)(Y Int)) (=> (and (<= GEN93 X) (<= GEN94 Y)) (<= (bit__xor X Y) (bit__or X Y)))) :named bitwise<82>))
(assert (! (forall ((X Int)) (=> (<= GEN95 X) (= (int___abs X) X))) :named arith<10>))
(assert (! (forall ((X Int)) (=> (< X GEN96) (= (int___abs X) (- X)))) :named arith<11>))
(assert (! (forall ((U Real)) (=> (<= (to_real GEN97) U) (= (real___abs U) U))) :named arith<12>))
(assert (! (forall ((U Real)) (=> (< U (to_real GEN98)) (= (real___abs U) (- U)))) :named arith<13>))
(assert (! (forall ((X Int)) (= (int___odd X) (= (int___mod (int___abs X) GEN99) GEN100))) :named arith<20>))
(assert (! (forall ((i statust)) (=> (statust___member i) (= (statust__pos i) i))) :named enum-int-pos-id-<statust>))
(assert (! (forall ((i statust)) (=> (statust___member i) (= (statust__val i) i))) :named enum-int-val-id-<statust>))
(assert (! (forall ((i statust)) (=> (statust___member i) (=> (< i GEN101) (= (statust__succ i) (+ i GEN102))))) :named enum-int-succ-<statust>))
(assert (! (forall ((i statust)) (=> (statust___member i) (=> (< GEN103 i) (= (statust__pred i) (- i GEN104))))) :named enum-int-pred-<statust>))
(assert (! (= notenrolled GEN105) :named enum-int-const-<notenrolled>))
(assert (! (= waitingenrol GEN106) :named enum-int-const-<waitingenrol>))
(assert (! (= waitingendenrol GEN107) :named enum-int-const-<waitingendenrol>))
(assert (! (= enclavequiescent GEN108) :named enum-int-const-<enclavequiescent>))
(assert (! (= waitingremoveadmintokenfail GEN109) :named enum-int-const-<waitingremoveadmintokenfail>))
(assert (! (= gotadmintoken GEN110) :named enum-int-const-<gotadmintoken>))
(assert (! (= waitingstartadminop GEN111) :named enum-int-const-<waitingstartadminop>))
(assert (! (= waitingfinishadminop GEN112) :named enum-int-const-<waitingfinishadminop>))
(assert (! (= shutdown GEN113) :named enum-int-const-<shutdown>))
(assert (! (statust___member enclavequiescent) :named typeref-mem-const-<enclavequiescent>))
(assert (! (statust___member gotadmintoken) :named typeref-mem-const-<gotadmintoken>))
(assert (! (statust___member notenrolled) :named typeref-mem-const-<notenrolled>))
(assert (! (statust___member shutdown) :named typeref-mem-const-<shutdown>))
(assert (! (statust___member status) :named typeref-mem-const-<status>))
(assert (! (statust___member status___init) :named typeref-mem-const-<status___init>))
(assert (! (statust___member status___loopinit) :named typeref-mem-const-<status___loopinit>))
(assert (! (statust___member statust__base__first) :named typeref-mem-const-<statust__base__first>))
(assert (! (statust___member statust__base__last) :named typeref-mem-const-<statust__base__last>))
(assert (! (statust___member statust__first) :named typeref-mem-const-<statust__first>))
(assert (! (statust___member statust__last) :named typeref-mem-const-<statust__last>))
(assert (! (statust___member waitingendenrol) :named typeref-mem-const-<waitingendenrol>))
(assert (! (statust___member waitingenrol) :named typeref-mem-const-<waitingenrol>))
(assert (! (statust___member waitingfinishadminop) :named typeref-mem-const-<waitingfinishadminop>))
(assert (! (statust___member waitingremoveadmintokenfail) :named typeref-mem-const-<waitingremoveadmintokenfail>))
(assert (! (statust___member waitingstartadminop) :named typeref-mem-const-<waitingstartadminop>))
(assert (! (forall ((x0 statust)) (=> (statust___member x0) (statust___member (statust__pred x0)))) :named typeref-mem-fun-<statust__pred>))
(assert (! (forall ((x0 statust)) (=> (statust___member x0) (statust___member (statust__succ x0)))) :named typeref-mem-fun-<statust__succ>))
(assert (! (forall ((x0 Int)) (statust___member (statust__val x0))) :named typeref-mem-fun-<statust__val>))
(assert (! (forall ((x statust)) (= (statust___member x) (and (<= GEN114 x) (<= x GEN115)))) :named typeref-mem-def-<statust>))
(assert (! (= (int___exp GEN116 GEN117) GEN118) :named iexp-eval-2-1))
(assert (! (= (int___exp GEN119 GEN120) GEN121) :named iexp-eval-2-2))
(assert (! (= (int___exp GEN122 GEN123) GEN124) :named iexp-eval-2-3))
(assert (! true :named H1))
(assert (! (<= statust__first status) :named H2))
(assert (! (<= status statust__last) :named H3))
(assert (! true :named H4))
(assert (! true :named H5))
(assert (! (not (and (=> (and (admin__ispresent theadmin) (and (= status enclavequiescent) (admintoken__ispresent admintoken__state))) (= status enclavequiescent)) (=> (and (admin__ispresent theadmin) (and (= status enclavequiescent) (admintoken__ispresent admintoken__state))) (admin__ispresent theadmin)))) :named C))
(assert (= BAV125 (<= GEN1 statust__size)))
(assert (= BAV126 (= statust__first notenrolled)))
(assert (= BAV127 (= statust__last shutdown)))
(assert (= BAV128 (= statust__base__first notenrolled)))
(assert (= BAV129 (= statust__base__last shutdown)))
(assert (= BAV130 (forall ((X Int)(Y Int)) (=> (< GEN2 Y) (<= GEN3 (int___mod X Y))))))
(assert (= BAV131 (forall ((X Int)(Y Int)) (< GEN2 Y))))
(assert (= BAV132 (forall ((X Int)(Y Int)) (<= GEN3 (int___mod X Y)))))
(assert (= BAV133 (forall ((X Int)(Y Int)) (=> (< GEN4 Y) (< (int___mod X Y) Y)))))
(assert (= BAV134 (forall ((X Int)(Y Int)) (< GEN4 Y))))
(assert (= BAV135 (forall ((X Int)(Y Int)) (< (int___mod X Y) Y))))
(assert (= BAV136 (forall ((X Int)(Y Int)) (=> (< Y GEN5) (<= (int___mod X Y) GEN6)))))
(assert (= BAV137 (forall ((X Int)(Y Int)) (< Y GEN5))))
(assert (= BAV138 (forall ((X Int)(Y Int)) (<= (int___mod X Y) GEN6))))
(assert (= BAV139 (forall ((X Int)(Y Int)) (=> (< Y GEN7) (< Y (int___mod X Y))))))
(assert (= BAV140 (forall ((X Int)(Y Int)) (< Y GEN7))))
(assert (= BAV141 (forall ((X Int)(Y Int)) (< Y (int___mod X Y)))))
(assert (= BAV142 (forall ((X Int)(Y Int)) (=> (and (<= GEN8 X) (< GEN9 Y)) (< (- X Y) (* Y (int___div X Y)))))))
(assert (= BAV143 (forall ((X Int)(Y Int)) (and (<= GEN8 X) (< GEN9 Y)))))
(assert (= BAV144 (forall ((X Int)(Y Int)) (<= GEN8 X))))
(assert (= BAV145 (forall ((X Int)(Y Int)) (< GEN9 Y))))
(assert (= BAV146 (forall ((X Int)(Y Int)) (< (- X Y) (* Y (int___div X Y))))))
(assert (= BAV147 (forall ((X Int)(Y Int)) (=> (and (<= GEN10 X) (< GEN11 Y)) (<= (* Y (int___div X Y)) X)))))
(assert (= BAV148 (forall ((X Int)(Y Int)) (and (<= GEN10 X) (< GEN11 Y)))))
(assert (= BAV149 (forall ((X Int)(Y Int)) (<= GEN10 X))))
(assert (= BAV150 (forall ((X Int)(Y Int)) (< GEN11 Y))))
(assert (= BAV151 (forall ((X Int)(Y Int)) (<= (* Y (int___div X Y)) X))))
(assert (= BAV152 (forall ((X Int)(Y Int)) (=> (and (<= X GEN12) (< GEN13 Y)) (<= X (* Y (int___div X Y)))))))
(assert (= BAV153 (forall ((X Int)(Y Int)) (and (<= X GEN12) (< GEN13 Y)))))
(assert (= BAV154 (forall ((X Int)(Y Int)) (<= X GEN12))))
(assert (= BAV155 (forall ((X Int)(Y Int)) (< GEN13 Y))))
(assert (= BAV156 (forall ((X Int)(Y Int)) (<= X (* Y (int___div X Y))))))
(assert (= BAV157 (forall ((X Int)(Y Int)) (=> (and (<= X GEN14) (< GEN15 Y)) (< (* Y (int___div X Y)) (+ X Y))))))
(assert (= BAV158 (forall ((X Int)(Y Int)) (and (<= X GEN14) (< GEN15 Y)))))
(assert (= BAV159 (forall ((X Int)(Y Int)) (<= X GEN14))))
(assert (= BAV160 (forall ((X Int)(Y Int)) (< GEN15 Y))))
(assert (= BAV161 (forall ((X Int)(Y Int)) (< (* Y (int___div X Y)) (+ X Y)))))
(assert (= BAV162 (forall ((X Int)(Y Int)) (=> (and (<= GEN16 X) (< Y GEN17)) (<= (* Y (int___div X Y)) X)))))
(assert (= BAV163 (forall ((X Int)(Y Int)) (and (<= GEN16 X) (< Y GEN17)))))
(assert (= BAV164 (forall ((X Int)(Y Int)) (<= GEN16 X))))
(assert (= BAV165 (forall ((X Int)(Y Int)) (< Y GEN17))))
(assert (= BAV166 (forall ((X Int)(Y Int)) (<= (* Y (int___div X Y)) X))))
(assert (= BAV167 (forall ((X Int)(Y Int)) (=> (and (<= GEN18 X) (< Y GEN19)) (< (+ X Y) (* Y (int___div X Y)))))))
(assert (= BAV168 (forall ((X Int)(Y Int)) (and (<= GEN18 X) (< Y GEN19)))))
(assert (= BAV169 (forall ((X Int)(Y Int)) (<= GEN18 X))))
(assert (= BAV170 (forall ((X Int)(Y Int)) (< Y GEN19))))
(assert (= BAV171 (forall ((X Int)(Y Int)) (< (+ X Y) (* Y (int___div X Y))))))
(assert (= BAV172 (forall ((X Int)(Y Int)) (=> (and (<= X GEN20) (< Y GEN21)) (< (* Y (int___div X Y)) (- X Y))))))
(assert (= BAV173 (forall ((X Int)(Y Int)) (and (<= X GEN20) (< Y GEN21)))))
(assert (= BAV174 (forall ((X Int)(Y Int)) (<= X GEN20))))
(assert (= BAV175 (forall ((X Int)(Y Int)) (< Y GEN21))))
(assert (= BAV176 (forall ((X Int)(Y Int)) (< (* Y (int___div X Y)) (- X Y)))))
(assert (= BAV177 (forall ((X Int)(Y Int)) (=> (and (<= X GEN22) (< Y GEN23)) (<= X (* Y (int___div X Y)))))))
(assert (= BAV178 (forall ((X Int)(Y Int)) (and (<= X GEN22) (< Y GEN23)))))
(assert (= BAV179 (forall ((X Int)(Y Int)) (<= X GEN22))))
(assert (= BAV180 (forall ((X Int)(Y Int)) (< Y GEN23))))
(assert (= BAV181 (forall ((X Int)(Y Int)) (<= X (* Y (int___div X Y))))))
(assert (= BAV182 (forall ((X Int)(Y Int)) (= (+ (* Y (int___div X Y)) (int___rem X Y)) X))))
(assert (= BAV183 (forall ((X Int)(Y Int)) (=> (= (int___rem X Y) GEN24) (= (int___mod X Y) GEN25)))))
(assert (= BAV184 (forall ((X Int)(Y Int)) (= (int___rem X Y) GEN24))))
(assert (= BAV185 (forall ((X Int)(Y Int)) (= (int___mod X Y) GEN25))))
(assert (= BAV186 (forall ((X Int)(Y Int)) (=> (and (<= GEN26 X) (< GEN27 Y)) (= (int___mod X Y) (int___rem X Y))))))
(assert (= BAV187 (forall ((X Int)(Y Int)) (and (<= GEN26 X) (< GEN27 Y)))))
(assert (= BAV188 (forall ((X Int)(Y Int)) (<= GEN26 X))))
(assert (= BAV189 (forall ((X Int)(Y Int)) (< GEN27 Y))))
(assert (= BAV190 (forall ((X Int)(Y Int)) (= (int___mod X Y) (int___rem X Y)))))
(assert (= BAV191 (forall ((X Int)(Y Int)) (=> (and (<= X GEN28) (< GEN29 Y) (not (= (int___rem X Y) GEN30))) (= (int___mod X Y) (+ (int___rem X Y) Y))))))
(assert (= BAV192 (forall ((X Int)(Y Int)) (and (<= X GEN28) (< GEN29 Y) (not (= (int___rem X Y) GEN30))))))
(assert (= BAV193 (forall ((X Int)(Y Int)) (<= X GEN28))))
(assert (= BAV194 (forall ((X Int)(Y Int)) (< GEN29 Y))))
(assert (= BAV195 (forall ((X Int)(Y Int)) (= (int___rem X Y) GEN30))))
(assert (= BAV196 (forall ((X Int)(Y Int)) (= (int___mod X Y) (+ (int___rem X Y) Y)))))
(assert (= BAV197 (forall ((X Int)(Y Int)) (=> (and (<= GEN31 X) (< Y GEN32) (not (= (int___rem X Y) GEN33))) (= (int___mod X Y) (+ (int___rem X Y) Y))))))
(assert (= BAV198 (forall ((X Int)(Y Int)) (and (<= GEN31 X) (< Y GEN32) (not (= (int___rem X Y) GEN33))))))
(assert (= BAV199 (forall ((X Int)(Y Int)) (<= GEN31 X))))
(assert (= BAV200 (forall ((X Int)(Y Int)) (< Y GEN32))))
(assert (= BAV201 (forall ((X Int)(Y Int)) (= (int___rem X Y) GEN33))))
(assert (= BAV202 (forall ((X Int)(Y Int)) (= (int___mod X Y) (+ (int___rem X Y) Y)))))
(assert (= BAV203 (forall ((X Int)(Y Int)) (=> (and (<= X GEN34) (< Y GEN35)) (= (int___mod X Y) (int___rem X Y))))))
(assert (= BAV204 (forall ((X Int)(Y Int)) (and (<= X GEN34) (< Y GEN35)))))
(assert (= BAV205 (forall ((X Int)(Y Int)) (<= X GEN34))))
(assert (= BAV206 (forall ((X Int)(Y Int)) (< Y GEN35))))
(assert (= BAV207 (forall ((X Int)(Y Int)) (= (int___mod X Y) (int___rem X Y)))))
(assert (= BAV208 (forall ((X Int)(Y Int)) (=> (and (<= GEN36 X) (< X Y)) (= (int___mod X Y) X)))))
(assert (= BAV209 (forall ((X Int)(Y Int)) (and (<= GEN36 X) (< X Y)))))
(assert (= BAV210 (forall ((X Int)(Y Int)) (<= GEN36 X))))
(assert (= BAV211 (forall ((X Int)(Y Int)) (< X Y))))
(assert (= BAV212 (forall ((X Int)(Y Int)) (= (int___mod X Y) X))))
(assert (= BAV213 (forall ((X Int)) (=> (<= GEN37 X) (= (bit__and X X) X)))))
(assert (= BAV214 (forall ((X Int)) (<= GEN37 X))))
(assert (= BAV215 (forall ((X Int)) (= (bit__and X X) X))))
(assert (= BAV216 (forall ((X Int)) (=> (<= GEN38 X) (= (bit__or X X) X)))))
(assert (= BAV217 (forall ((X Int)) (<= GEN38 X))))
(assert (= BAV218 (forall ((X Int)) (= (bit__or X X) X))))
(assert (= BAV219 (forall ((X Int)) (=> (<= GEN39 X) (= (bit__xor X X) GEN40)))))
(assert (= BAV220 (forall ((X Int)) (<= GEN39 X))))
(assert (= BAV221 (forall ((X Int)) (= (bit__xor X X) GEN40))))
(assert (= BAV222 (forall ((X Int)) (=> (<= GEN41 X) (= (bit__and X GEN42) GEN43)))))
(assert (= BAV223 (forall ((X Int)) (<= GEN41 X))))
(assert (= BAV224 (forall ((X Int)) (= (bit__and X GEN42) GEN43))))
(assert (= BAV225 (forall ((X Int)) (=> (<= GEN44 X) (= (bit__or X GEN45) X)))))
(assert (= BAV226 (forall ((X Int)) (<= GEN44 X))))
(assert (= BAV227 (forall ((X Int)) (= (bit__or X GEN45) X))))
(assert (= BAV228 (forall ((X Int)) (=> (<= GEN46 X) (= (bit__xor X GEN47) X)))))
(assert (= BAV229 (forall ((X Int)) (<= GEN46 X))))
(assert (= BAV230 (forall ((X Int)) (= (bit__xor X GEN47) X))))
(assert (= BAV231 (forall ((X Int)(Y Int)) (=> (and (<= GEN48 X) (<= GEN49 Y)) (<= GEN50 (bit__and X Y))))))
(assert (= BAV232 (forall ((X Int)(Y Int)) (and (<= GEN48 X) (<= GEN49 Y)))))
(assert (= BAV233 (forall ((X Int)(Y Int)) (<= GEN48 X))))
(assert (= BAV234 (forall ((X Int)(Y Int)) (<= GEN49 Y))))
(assert (= BAV235 (forall ((X Int)(Y Int)) (<= GEN50 (bit__and X Y)))))
(assert (= BAV236 (forall ((X Int)(Y Int)) (=> (and (<= GEN51 X) (<= GEN52 Y)) (<= GEN53 (bit__or X Y))))))
(assert (= BAV237 (forall ((X Int)(Y Int)) (and (<= GEN51 X) (<= GEN52 Y)))))
(assert (= BAV238 (forall ((X Int)(Y Int)) (<= GEN51 X))))
(assert (= BAV239 (forall ((X Int)(Y Int)) (<= GEN52 Y))))
(assert (= BAV240 (forall ((X Int)(Y Int)) (<= GEN53 (bit__or X Y)))))
(assert (= BAV241 (forall ((X Int)(Y Int)) (=> (and (<= GEN54 X) (<= GEN55 Y)) (<= GEN56 (bit__xor X Y))))))
(assert (= BAV242 (forall ((X Int)(Y Int)) (and (<= GEN54 X) (<= GEN55 Y)))))
(assert (= BAV243 (forall ((X Int)(Y Int)) (<= GEN54 X))))
(assert (= BAV244 (forall ((X Int)(Y Int)) (<= GEN55 Y))))
(assert (= BAV245 (forall ((X Int)(Y Int)) (<= GEN56 (bit__xor X Y)))))
(assert (= BAV246 (forall ((X Int)(Y Int)) (=> (and (<= GEN57 X) (<= GEN58 Y)) (<= X (bit__or X Y))))))
(assert (= BAV247 (forall ((X Int)(Y Int)) (and (<= GEN57 X) (<= GEN58 Y)))))
(assert (= BAV248 (forall ((X Int)(Y Int)) (<= GEN57 X))))
(assert (= BAV249 (forall ((X Int)(Y Int)) (<= GEN58 Y))))
(assert (= BAV250 (forall ((X Int)(Y Int)) (<= X (bit__or X Y)))))
(assert (= BAV251 (forall ((X Int)(Y Int)) (=> (and (<= GEN59 X) (<= GEN60 Y)) (<= Y (bit__or X Y))))))
(assert (= BAV252 (forall ((X Int)(Y Int)) (and (<= GEN59 X) (<= GEN60 Y)))))
(assert (= BAV253 (forall ((X Int)(Y Int)) (<= GEN59 X))))
(assert (= BAV254 (forall ((X Int)(Y Int)) (<= GEN60 Y))))
(assert (= BAV255 (forall ((X Int)(Y Int)) (<= Y (bit__or X Y)))))
(assert (= BAV256 (forall ((X Int)(Y Int)) (=> (and (<= GEN61 X) (<= GEN62 Y)) (<= (- X Y) (bit__xor X Y))))))
(assert (= BAV257 (forall ((X Int)(Y Int)) (and (<= GEN61 X) (<= GEN62 Y)))))
(assert (= BAV258 (forall ((X Int)(Y Int)) (<= GEN61 X))))
(assert (= BAV259 (forall ((X Int)(Y Int)) (<= GEN62 Y))))
(assert (= BAV260 (forall ((X Int)(Y Int)) (<= (- X Y) (bit__xor X Y)))))
(assert (= BAV261 (forall ((X Int)(Y Int)) (=> (and (<= GEN63 X) (<= GEN64 Y)) (<= (- Y X) (bit__xor X Y))))))
(assert (= BAV262 (forall ((X Int)(Y Int)) (and (<= GEN63 X) (<= GEN64 Y)))))
(assert (= BAV263 (forall ((X Int)(Y Int)) (<= GEN63 X))))
(assert (= BAV264 (forall ((X Int)(Y Int)) (<= GEN64 Y))))
(assert (= BAV265 (forall ((X Int)(Y Int)) (<= (- Y X) (bit__xor X Y)))))
(assert (= BAV266 (forall ((X Int)(Y Int)) (=> (and (<= GEN65 X) (<= GEN66 Y)) (<= (bit__and X Y) X)))))
(assert (= BAV267 (forall ((X Int)(Y Int)) (and (<= GEN65 X) (<= GEN66 Y)))))
(assert (= BAV268 (forall ((X Int)(Y Int)) (<= GEN65 X))))
(assert (= BAV269 (forall ((X Int)(Y Int)) (<= GEN66 Y))))
(assert (= BAV270 (forall ((X Int)(Y Int)) (<= (bit__and X Y) X))))
(assert (= BAV271 (forall ((X Int)(Y Int)) (=> (and (<= GEN67 X) (<= GEN68 Y)) (<= (bit__and X Y) Y)))))
(assert (= BAV272 (forall ((X Int)(Y Int)) (and (<= GEN67 X) (<= GEN68 Y)))))
(assert (= BAV273 (forall ((X Int)(Y Int)) (<= GEN67 X))))
(assert (= BAV274 (forall ((X Int)(Y Int)) (<= GEN68 Y))))
(assert (= BAV275 (forall ((X Int)(Y Int)) (<= (bit__and X Y) Y))))
(assert (= BAV276 (forall ((X Int)(Y Int)) (=> (and (<= GEN69 X) (<= GEN70 Y)) (<= (bit__or X Y) (+ X Y))))))
(assert (= BAV277 (forall ((X Int)(Y Int)) (and (<= GEN69 X) (<= GEN70 Y)))))
(assert (= BAV278 (forall ((X Int)(Y Int)) (<= GEN69 X))))
(assert (= BAV279 (forall ((X Int)(Y Int)) (<= GEN70 Y))))
(assert (= BAV280 (forall ((X Int)(Y Int)) (<= (bit__or X Y) (+ X Y)))))
(assert (= BAV281 (forall ((X Int)(Y Int)) (=> (and (<= GEN71 X) (<= GEN72 Y)) (<= (bit__xor X Y) (+ X Y))))))
(assert (= BAV282 (forall ((X Int)(Y Int)) (and (<= GEN71 X) (<= GEN72 Y)))))
(assert (= BAV283 (forall ((X Int)(Y Int)) (<= GEN71 X))))
(assert (= BAV284 (forall ((X Int)(Y Int)) (<= GEN72 Y))))
(assert (= BAV285 (forall ((X Int)(Y Int)) (<= (bit__xor X Y) (+ X Y)))))
(assert (= BAV286 (forall ((N Int)(X Int)(Y Int)) (=> (and (<= GEN73 X) (<= GEN74 Y) (<= GEN75 N) (<= X (- (int___exp GEN76 N) GEN77)) (<= Y (- (int___exp GEN78 N) GEN79))) (<= (bit__or X Y) (- (int___exp GEN80 N) GEN81))))))
(assert (= BAV287 (forall ((N Int)(X Int)(Y Int)) (and (<= GEN73 X) (<= GEN74 Y) (<= GEN75 N) (<= X (- (int___exp GEN76 N) GEN77)) (<= Y (- (int___exp GEN78 N) GEN79))))))
(assert (= BAV288 (forall ((N Int)(X Int)(Y Int)) (<= GEN73 X))))
(assert (= BAV289 (forall ((N Int)(X Int)(Y Int)) (<= GEN74 Y))))
(assert (= BAV290 (forall ((N Int)(X Int)(Y Int)) (<= GEN75 N))))
(assert (= BAV291 (forall ((N Int)(X Int)(Y Int)) (<= X (- (int___exp GEN76 N) GEN77)))))
(assert (= BAV292 (forall ((N Int)(X Int)(Y Int)) (<= Y (- (int___exp GEN78 N) GEN79)))))
(assert (= BAV293 (forall ((N Int)(X Int)(Y Int)) (<= (bit__or X Y) (- (int___exp GEN80 N) GEN81)))))
(assert (= BAV294 (forall ((N Int)(X Int)(Y Int)) (=> (and (<= GEN82 X) (<= GEN83 Y) (<= GEN84 N) (<= X (- (int___exp GEN85 N) GEN86)) (<= Y (- (int___exp GEN87 N) GEN88))) (<= (bit__xor X Y) (- (int___exp GEN89 N) GEN90))))))
(assert (= BAV295 (forall ((N Int)(X Int)(Y Int)) (and (<= GEN82 X) (<= GEN83 Y) (<= GEN84 N) (<= X (- (int___exp GEN85 N) GEN86)) (<= Y (- (int___exp GEN87 N) GEN88))))))
(assert (= BAV296 (forall ((N Int)(X Int)(Y Int)) (<= GEN82 X))))
(assert (= BAV297 (forall ((N Int)(X Int)(Y Int)) (<= GEN83 Y))))
(assert (= BAV298 (forall ((N Int)(X Int)(Y Int)) (<= GEN84 N))))
(assert (= BAV299 (forall ((N Int)(X Int)(Y Int)) (<= X (- (int___exp GEN85 N) GEN86)))))
(assert (= BAV300 (forall ((N Int)(X Int)(Y Int)) (<= Y (- (int___exp GEN87 N) GEN88)))))
(assert (= BAV301 (forall ((N Int)(X Int)(Y Int)) (<= (bit__xor X Y) (- (int___exp GEN89 N) GEN90)))))
(assert (= BAV302 (forall ((X Int)(Y Int)) (=> (and (<= GEN91 X) (<= GEN92 Y)) (<= (bit__and X Y) (bit__or X Y))))))
(assert (= BAV303 (forall ((X Int)(Y Int)) (and (<= GEN91 X) (<= GEN92 Y)))))
(assert (= BAV304 (forall ((X Int)(Y Int)) (<= GEN91 X))))
(assert (= BAV305 (forall ((X Int)(Y Int)) (<= GEN92 Y))))
(assert (= BAV306 (forall ((X Int)(Y Int)) (<= (bit__and X Y) (bit__or X Y)))))
(assert (= BAV307 (forall ((X Int)(Y Int)) (=> (and (<= GEN93 X) (<= GEN94 Y)) (<= (bit__xor X Y) (bit__or X Y))))))
(assert (= BAV308 (forall ((X Int)(Y Int)) (and (<= GEN93 X) (<= GEN94 Y)))))
(assert (= BAV309 (forall ((X Int)(Y Int)) (<= GEN93 X))))
(assert (= BAV310 (forall ((X Int)(Y Int)) (<= GEN94 Y))))
(assert (= BAV311 (forall ((X Int)(Y Int)) (<= (bit__xor X Y) (bit__or X Y)))))
(assert (= BAV312 (forall ((X Int)) (=> (<= GEN95 X) (= (int___abs X) X)))))
(assert (= BAV313 (forall ((X Int)) (<= GEN95 X))))
(assert (= BAV314 (forall ((X Int)) (= (int___abs X) X))))
(assert (= BAV315 (forall ((X Int)) (=> (< X GEN96) (= (int___abs X) (- X))))))
(assert (= BAV316 (forall ((X Int)) (< X GEN96))))
(assert (= BAV317 (forall ((X Int)) (= (int___abs X) (- X)))))
(assert (= BAV318 (forall ((U Real)) (=> (<= (to_real GEN97) U) (= (real___abs U) U)))))
(assert (= BAV319 (forall ((U Real)) (<= (to_real GEN97) U))))
(assert (= BAV320 (forall ((U Real)) (= (real___abs U) U))))
(assert (= BAV321 (forall ((U Real)) (=> (< U (to_real GEN98)) (= (real___abs U) (- U))))))
(assert (= BAV322 (forall ((U Real)) (< U (to_real GEN98)))))
(assert (= BAV323 (forall ((U Real)) (= (real___abs U) (- U)))))
(assert (= BAV324 (forall ((X Int)) (= (int___odd X) (= (int___mod (int___abs X) GEN99) GEN100)))))
(assert (= BAV325 (forall ((X Int)) (= (int___mod (int___abs X) GEN99) GEN100))))
(assert (= BAV326 (forall ((i statust)) (=> (statust___member i) (= (statust__pos i) i)))))
(assert (= BAV327 (forall ((i statust)) (= (statust__pos i) i))))
(assert (= BAV328 (forall ((i statust)) (=> (statust___member i) (= (statust__val i) i)))))
(assert (= BAV329 (forall ((i statust)) (= (statust__val i) i))))
(assert (= BAV330 (forall ((i statust)) (=> (statust___member i) (=> (< i GEN101) (= (statust__succ i) (+ i GEN102)))))))
(assert (= BAV331 (forall ((i statust)) (=> (< i GEN101) (= (statust__succ i) (+ i GEN102))))))
(assert (= BAV332 (forall ((i statust)) (< i GEN101))))
(assert (= BAV333 (forall ((i statust)) (= (statust__succ i) (+ i GEN102)))))
(assert (= BAV334 (forall ((i statust)) (=> (statust___member i) (=> (< GEN103 i) (= (statust__pred i) (- i GEN104)))))))
(assert (= BAV335 (forall ((i statust)) (=> (< GEN103 i) (= (statust__pred i) (- i GEN104))))))
(assert (= BAV336 (forall ((i statust)) (< GEN103 i))))
(assert (= BAV337 (forall ((i statust)) (= (statust__pred i) (- i GEN104)))))
(assert (= BAV338 (= notenrolled GEN105)))
(assert (= BAV339 (= waitingenrol GEN106)))
(assert (= BAV340 (= waitingendenrol GEN107)))
(assert (= BAV341 (= enclavequiescent GEN108)))
(assert (= BAV342 (= waitingremoveadmintokenfail GEN109)))
(assert (= BAV343 (= gotadmintoken GEN110)))
(assert (= BAV344 (= waitingstartadminop GEN111)))
(assert (= BAV345 (= waitingfinishadminop GEN112)))
(assert (= BAV346 (= shutdown GEN113)))
(assert (= BAV347 (forall ((x0 statust)) (=> (statust___member x0) (statust___member (statust__pred x0))))))
(assert (= BAV348 (forall ((x0 statust)) (=> (statust___member x0) (statust___member (statust__succ x0))))))
(assert (= BAV349 (forall ((x statust)) (= (statust___member x) (and (<= GEN114 x) (<= x GEN115))))))
(assert (= BAV350 (forall ((x statust)) (and (<= GEN114 x) (<= x GEN115)))))
(assert (= BAV351 (forall ((x statust)) (<= GEN114 x))))
(assert (= BAV352 (forall ((x statust)) (<= x GEN115))))
(assert (= BAV353 (= (int___exp GEN116 GEN117) GEN118)))
(assert (= BAV354 (= (int___exp GEN119 GEN120) GEN121)))
(assert (= BAV355 (= (int___exp GEN122 GEN123) GEN124)))
(assert (= BAV356 (<= statust__first status)))
(assert (= BAV357 (<= status statust__last)))
(assert (= BAV358 (and (=> (and (admin__ispresent theadmin) (and (= status enclavequiescent) (admintoken__ispresent admintoken__state))) (= status enclavequiescent)) (=> (and (admin__ispresent theadmin) (and (= status enclavequiescent) (admintoken__ispresent admintoken__state))) (admin__ispresent theadmin)))))
(assert (= BAV359 (=> (and (admin__ispresent theadmin) (and (= status enclavequiescent) (admintoken__ispresent admintoken__state))) (= status enclavequiescent))))
(assert (= BAV360 (and (admin__ispresent theadmin) (and (= status enclavequiescent) (admintoken__ispresent admintoken__state)))))
(assert (= BAV361 (and (= status enclavequiescent) (admintoken__ispresent admintoken__state))))
(assert (= BAV362 (= status enclavequiescent)))
(assert (= BAV363 (= status enclavequiescent)))
(assert (= BAV364 (=> (and (admin__ispresent theadmin) (and (= status enclavequiescent) (admintoken__ispresent admintoken__state))) (admin__ispresent theadmin))))
(assert (= BAV365 (and (admin__ispresent theadmin) (and (= status enclavequiescent) (admintoken__ispresent admintoken__state)))))
(assert (= BAV366 (and (= status enclavequiescent) (admintoken__ispresent admintoken__state))))
(assert (= BAV367 (= status enclavequiescent)))
(check-sat)
(get-model)
(get-unsat-core)