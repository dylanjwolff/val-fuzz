(set-info :source |fuzzsmt|)
(set-info :smt-lib-version 2.0)
(set-info :category "random")
(set-info :status unknown)
(set-logic ALL)
(declare-const GEN1 Int)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const BAV23 Bool)
(declare-const BAV24 Bool)
(declare-const BAV25 Bool)
(declare-const BAV26 Bool)
(declare-const BAV27 Bool)
(declare-const BAV28 Bool)
(declare-const BAV29 Bool)
(declare-const BAV30 Bool)
(declare-fun v0 () Real)
(assert (and (or (xor (<= (/ GEN1 GEN1) (/ GEN1 GEN1)) (=> (not (= (< v0 (/ GEN1 GEN1)) (or (<= (+ v0 v0) (+ v0 v0)) (<= (ite (< v0 (/ GEN1 GEN1)) (+ v0 v0) v0) v0)))) (xor (> v0 (+ v0 v0)) (<= v0 (/ GEN1 GEN1))))) (xor (<= (/ GEN1 GEN1) (/ GEN1 GEN1)) (=> (not (= (< v0 (/ GEN1 GEN1)) (or (<= (+ v0 v0) (+ v0 v0)) (<= (ite (< v0 (/ GEN1 GEN1)) (+ v0 v0) v0) v0)))) (xor (> v0 (+ v0 v0)) (<= v0 (/ GEN1 GEN1)))))) (>= (ite (> v0 (+ v0 v0)) (/ GEN1 GEN1) (ite (< v0 (/ GEN1 GEN1)) (+ v0 v0) v0)) (/ GEN1 GEN1))))
(assert (= BAV2 (and (or (xor (<= (/ GEN1 GEN1) (/ GEN1 GEN1)) (=> (not (= (< v0 (/ GEN1 GEN1)) (or (<= (+ v0 v0) (+ v0 v0)) (<= (ite (< v0 (/ GEN1 GEN1)) (+ v0 v0) v0) v0)))) (xor (> v0 (+ v0 v0)) (<= v0 (/ GEN1 GEN1))))) (xor (<= (/ GEN1 GEN1) (/ GEN1 GEN1)) (=> (not (= (< v0 (/ GEN1 GEN1)) (or (<= (+ v0 v0) (+ v0 v0)) (<= (ite (< v0 (/ GEN1 GEN1)) (+ v0 v0) v0) v0)))) (xor (> v0 (+ v0 v0)) (<= v0 (/ GEN1 GEN1)))))) (>= (ite (> v0 (+ v0 v0)) (/ GEN1 GEN1) (ite (< v0 (/ GEN1 GEN1)) (+ v0 v0) v0)) (/ GEN1 GEN1)))))
(assert (= BAV3 (or (xor (<= (/ GEN1 GEN1) (/ GEN1 GEN1)) (=> (not (= (< v0 (/ GEN1 GEN1)) (or (<= (+ v0 v0) (+ v0 v0)) (<= (ite (< v0 (/ GEN1 GEN1)) (+ v0 v0) v0) v0)))) (xor (> v0 (+ v0 v0)) (<= v0 (/ GEN1 GEN1))))) (xor (<= (/ GEN1 GEN1) (/ GEN1 GEN1)) (=> (not (= (< v0 (/ GEN1 GEN1)) (or (<= (+ v0 v0) (+ v0 v0)) (<= (ite (< v0 (/ GEN1 GEN1)) (+ v0 v0) v0) v0)))) (xor (> v0 (+ v0 v0)) (<= v0 (/ GEN1 GEN1))))))))
(assert (= BAV4 (xor (<= (/ GEN1 GEN1) (/ GEN1 GEN1)) (=> (not (= (< v0 (/ GEN1 GEN1)) (or (<= (+ v0 v0) (+ v0 v0)) (<= (ite (< v0 (/ GEN1 GEN1)) (+ v0 v0) v0) v0)))) (xor (> v0 (+ v0 v0)) (<= v0 (/ GEN1 GEN1)))))))
(assert (= BAV5 (<= (/ GEN1 GEN1) (/ GEN1 GEN1))))
(assert (= BAV6 (=> (not (= (< v0 (/ GEN1 GEN1)) (or (<= (+ v0 v0) (+ v0 v0)) (<= (ite (< v0 (/ GEN1 GEN1)) (+ v0 v0) v0) v0)))) (xor (> v0 (+ v0 v0)) (<= v0 (/ GEN1 GEN1))))))
(assert (= BAV7 (= (< v0 (/ GEN1 GEN1)) (or (<= (+ v0 v0) (+ v0 v0)) (<= (ite (< v0 (/ GEN1 GEN1)) (+ v0 v0) v0) v0)))))
(assert (= BAV8 (< v0 (/ GEN1 GEN1))))
(assert (= BAV9 (or (<= (+ v0 v0) (+ v0 v0)) (<= (ite (< v0 (/ GEN1 GEN1)) (+ v0 v0) v0) v0))))
(assert (= BAV10 (<= (+ v0 v0) (+ v0 v0))))
(assert (= BAV11 (<= (ite (< v0 (/ GEN1 GEN1)) (+ v0 v0) v0) v0)))
(assert (= BAV12 (< v0 (/ GEN1 GEN1))))
(assert (= BAV13 (xor (> v0 (+ v0 v0)) (<= v0 (/ GEN1 GEN1)))))
(assert (= BAV14 (> v0 (+ v0 v0))))
(assert (= BAV15 (<= v0 (/ GEN1 GEN1))))
(assert (= BAV16 (xor (<= (/ GEN1 GEN1) (/ GEN1 GEN1)) (=> (not (= (< v0 (/ GEN1 GEN1)) (or (<= (+ v0 v0) (+ v0 v0)) (<= (ite (< v0 (/ GEN1 GEN1)) (+ v0 v0) v0) v0)))) (xor (> v0 (+ v0 v0)) (<= v0 (/ GEN1 GEN1)))))))
(assert (= BAV17 (<= (/ GEN1 GEN1) (/ GEN1 GEN1))))
(assert (= BAV18 (=> (not (= (< v0 (/ GEN1 GEN1)) (or (<= (+ v0 v0) (+ v0 v0)) (<= (ite (< v0 (/ GEN1 GEN1)) (+ v0 v0) v0) v0)))) (xor (> v0 (+ v0 v0)) (<= v0 (/ GEN1 GEN1))))))
(assert (= BAV19 (= (< v0 (/ GEN1 GEN1)) (or (<= (+ v0 v0) (+ v0 v0)) (<= (ite (< v0 (/ GEN1 GEN1)) (+ v0 v0) v0) v0)))))
(assert (= BAV20 (< v0 (/ GEN1 GEN1))))
(assert (= BAV21 (or (<= (+ v0 v0) (+ v0 v0)) (<= (ite (< v0 (/ GEN1 GEN1)) (+ v0 v0) v0) v0))))
(assert (= BAV22 (<= (+ v0 v0) (+ v0 v0))))
(assert (= BAV23 (<= (ite (< v0 (/ GEN1 GEN1)) (+ v0 v0) v0) v0)))
(assert (= BAV24 (< v0 (/ GEN1 GEN1))))
(assert (= BAV25 (xor (> v0 (+ v0 v0)) (<= v0 (/ GEN1 GEN1)))))
(assert (= BAV26 (> v0 (+ v0 v0))))
(assert (= BAV27 (<= v0 (/ GEN1 GEN1))))
(assert (= BAV28 (>= (ite (> v0 (+ v0 v0)) (/ GEN1 GEN1) (ite (< v0 (/ GEN1 GEN1)) (+ v0 v0) v0)) (/ GEN1 GEN1))))
(assert (= BAV29 (> v0 (+ v0 v0))))
(assert (= BAV30 (< v0 (/ GEN1 GEN1))))
(check-sat)
(get-model)