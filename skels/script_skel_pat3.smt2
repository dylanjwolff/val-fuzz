(declare-const GEN16 Int)
(declare-const GEN15 Int)
(get-model)
(declare-const GEN14 Int)
(get-model)
(declare-const GEN13 Int)
(declare-const GEN12 Int)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(get-model)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(set-option :auto-config false)
(set-option :smt.mbqi false)
(declare-fun p (Int) Bool)
(declare-const a Int)
(declare-const b Int)
(assert (forall ((x Int)(y Int)) (! (p (+ x y GEN1)) :pattern (p (+ x y GEN2)))))
(assert (forall ((x Int)) (! (p (+ x GEN3)) :pattern (p (+ x GEN4)))))
(assert (forall ((x Int)) (! (p (+ x GEN5)) :pattern (p (+ x GEN6)))))
(assert (p (+ a GEN7)))
(check-sat)
(get-model)
(push)
(assert (not (p (+ a GEN8))))
(check-sat)
(pop)
(check-sat)
(assert (not (p (+ a b GEN9))))
(check-sat)
(reset)
(set-option :auto-config true)
(declare-fun p (Int) Bool)
(declare-const a Int)
(declare-const b Int)
(assert (forall ((x Int)(y Int)) (! (p (+ x y 2)) :pattern (p (+ x y 2)))))
(assert (forall ((x Int)) (! (p (+ x 2)) :pattern (p (+ x 2)))))
(assert (forall ((x Int)) (! (p (+ x 3)) :pattern (p (+ x 3)))))
(assert (p (+ a 2)))
(check-sat)