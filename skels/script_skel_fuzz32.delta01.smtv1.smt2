(set-option :incremental false)
(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const GEN15 Int)
(declare-const GEN14 Int)
(declare-const GEN13 Int)
(declare-const GEN12 Int)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-fun v2 () (_ BitVec 4))
(declare-fun v1 () (_ BitVec 4))
(assert (= BAV1 (= (_ bv1 1) (bvsub (_ bv1 1) (bvand (ite (bvsgt (_ bv0 4) ((_ sign_extend 3) (ite (bvslt (_ bv0 4) v1) (_ bv1 1) (_ bv0 1)))) (_ bv1 1) (_ bv0 1)) (ite (bvsle (_ bv0 1) (ite (= v2 (_ bv0 4)) (_ bv1 1) (_ bv0 1))) (_ bv1 1) (_ bv0 1)))))))
(assert (= BAV2 (= v2 (_ bv0 4))))
(check-sat-assuming ((= (_ bv1 1) (bvsub (_ bv1 1) (bvand (ite (bvsgt (_ bv0 4) ((_ sign_extend 3) (ite (bvslt (_ bv0 4) v1) (_ bv1 1) (_ bv0 1)))) (_ bv1 1) (_ bv0 1)) (ite (bvsle (_ bv0 1) (ite (= v2 (_ bv0 4)) (_ bv1 1) (_ bv0 1))) (_ bv1 1) (_ bv0 1)))))))
(get-model)