(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const GEN22 Real)
(declare-const GEN21 Int)
(declare-const GEN20 Int)
(declare-const GEN19 Int)
(declare-const GEN18 Int)
(declare-const GEN17 Real)
(declare-const GEN16 Int)
(declare-const GEN15 Int)
(declare-const GEN14 Int)
(declare-const GEN13 Int)
(declare-const GEN12 Int)
(declare-const GEN11 Real)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Real)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Real)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-const x FPN)
(declare-const y FPN)
(declare-const z FPN)
(declare-const r FPN)
(declare-const q FPN)
(declare-const mpfx FPN)
(assert (= mpfx ((_ to_fp 11 53) roundNearestTiesToEven GEN3 (- GEN4))))
(assert (= x ((_ to_fp 11 53) roundNearestTiesToEven (- GEN7) (- GEN8))))
(assert (= y ((_ to_fp 11 53) roundNearestTiesToEven (- GEN11) (- GEN12))))
(assert (= z (fp.neg ((_ to_fp 11 53) roundNearestTiesToEven ((_ to_fp 11 53) roundNearestTiesToEven GEN17)))))
(assert (= r ((_ to_fp 11 53) roundNearestTiesToEven ((_ to_fp 11 53) roundNearestTiesToEven GEN22))))
(assert (= q (fp.fma roundNearestTiesToEven x y z)))
(assert (not (= q r)))
(assert (= BAV1 (= mpfx ((_ to_fp 11 53) roundNearestTiesToEven GEN3 (- GEN4)))))
(assert (= BAV2 (= x ((_ to_fp 11 53) roundNearestTiesToEven (- GEN7) (- GEN8)))))
(assert (= BAV3 (= y ((_ to_fp 11 53) roundNearestTiesToEven (- GEN11) (- GEN12)))))
(assert (= BAV4 (= z (fp.neg ((_ to_fp 11 53) roundNearestTiesToEven ((_ to_fp 11 53) roundNearestTiesToEven GEN17))))))
(assert (= BAV5 (= r ((_ to_fp 11 53) roundNearestTiesToEven ((_ to_fp 11 53) roundNearestTiesToEven GEN22)))))
(assert (= BAV6 (= q (fp.fma roundNearestTiesToEven x y z))))
(assert (= BAV7 (= q r)))
(check-sat)
(get-model)
(check-sat-using smt)