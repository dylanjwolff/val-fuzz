(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(get-model)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(set-option :smt.string_solver z3str3)
(declare-fun c0 () String)
(declare-fun c1 () Int)
(declare-fun c2 () Int)
(assert (not (str.contains c0 (str.substr c0 c1 (- c2 c1)))))
(assert (and (<= GEN1 c1) (<= c1 c2) (<= c2 (str.len c0))))
(assert (= BAV1 (and (<= GEN1 c1) (<= c1 c2) (<= c2 (str.len c0)))))
(assert (= BAV2 (<= GEN1 c1)))
(assert (= BAV3 (<= c1 c2)))
(assert (= BAV4 (<= c2 (str.len c0))))
(assert (= BAV5 (and (<= 0 c1) (<= c1 c2) (<= c2 (str.len c0)))))
(assert (= BAV6 (<= 0 c1)))
(assert (= BAV7 (<= c1 c2)))
(assert (= BAV8 (<= c2 (str.len c0))))
(check-sat)
(get-model)
(reset)
(set-option :smt.string_solver seq)
(declare-fun c0 () String)
(declare-fun c1 () Int)
(declare-fun c2 () Int)
(assert (not (str.contains c0 (str.substr c0 c1 (- c2 c1)))))
(assert (and (<= 0 c1) (<= c1 c2) (<= c2 (str.len c0))))
(check-sat)