(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const BAV23 Bool)
(declare-const BAV24 Bool)
(declare-const BAV25 Bool)
(declare-const BAV26 Bool)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(define-sort Elt () Int)
(define-sort mySet () (Set Elt ))
(define-fun smt_set_emp () mySet (as emptyset mySet))
(define-fun smt_set_mem ((x Elt) (s mySet)) Bool (member x s))
(define-fun smt_set_add ((s mySet) (x Elt)) mySet (union s (singleton x)))
(define-fun smt_set_cup ((s1 mySet) (s2 mySet)) mySet (union s1 s2))
(define-fun smt_set_cap ((s1 mySet) (s2 mySet)) mySet (intersection s1 s2))
(define-fun smt_set_dif ((s1 mySet) (s2 mySet)) mySet (setminus s1 s2))
(define-fun smt_set_sub ((s1 mySet) (s2 mySet)) Bool (subset s1 s2))
(declare-fun z3v54 () Int)
(declare-fun z3f55 (Int) Int)
(declare-fun z3v56 () Int)
(declare-fun z3v57 () Int)
(declare-fun z3v58 () Int)
(declare-fun z3v59 () Int)
(declare-fun z3f60 (Int) mySet)
(declare-fun z3f61 (Int) Bool)
(declare-fun z3f62 (Int Int) Int)
(declare-fun z3v63 () Int)
(declare-fun z3v64 () Int)
(declare-fun z3f65 (Int) mySet)
(declare-fun z3v66 () Int)
(declare-fun z3v67 () Int)
(declare-fun z3v68 () Int)
(declare-fun z3v69 () Int)
(declare-fun z3f70 (Int) Int)
(declare-fun z3v71 () Int)
(declare-fun z3v72 () Int)
(declare-fun z3v74 () Int)
(declare-fun z3v76 () Int)
(declare-fun z3v77 () Int)
(declare-fun z3v78 () Int)
(declare-fun z3v82 () Int)
(declare-fun z3v85 () Int)
(declare-fun z3v86 () Int)
(declare-fun z3v87 () Int)
(declare-fun z3f90 () Int)
(declare-fun z3v91 () Int)
(declare-fun z3v92 () Int)
(declare-fun z3v93 () Int)
(declare-fun z3v94 () Int)
(assert (= (z3f60 z3v94) (z3f65 z3v56)))
(assert (and (>= (z3f55 z3v56) GEN1) (>= (z3f55 z3v58) GEN2) (= (z3f60 z3v58) smt_set_emp) (= (z3f55 z3v58) GEN3) (= (z3f61 z3v58) true) (= z3v58 z3f90) (>= (z3f55 z3v58) GEN4) (= z3v58 z3v63) (>= (z3f55 z3v58) GEN5) (>= (z3f55 z3v64) GEN6) (= (z3f65 z3v64) (smt_set_cup (z3f60 z3v63) (z3f65 z3v56))) (= (z3f60 z3v64) (smt_set_cup (smt_set_add smt_set_emp z3v63) (z3f60 z3v56))) (= (z3f55 z3v64) (+ GEN7 (z3f55 z3v56))) (= (z3f61 z3v64) false) (= z3v64 (z3f62 z3v63 z3v56)) (>= (z3f55 z3v64) GEN8) (= z3v64 z3v66) (>= (z3f55 z3v64) GEN9) (>= (z3f55 z3v63) GEN10) (>= (z3f55 z3v66) GEN11) (= (z3f70 z3v69) z3v69) (= (z3f70 z3v71) z3v71) (= (z3f70 z3v72) z3v72)))
(assert (not (= (z3f60 z3v94) (z3f65 z3v66))))
(assert (= BAV1 (= (z3f60 z3v94) (z3f65 z3v56))))
(assert (= BAV2 (and (>= (z3f55 z3v56) GEN1) (>= (z3f55 z3v58) GEN2) (= (z3f60 z3v58) smt_set_emp) (= (z3f55 z3v58) GEN3) (= (z3f61 z3v58) true) (= z3v58 z3f90) (>= (z3f55 z3v58) GEN4) (= z3v58 z3v63) (>= (z3f55 z3v58) GEN5) (>= (z3f55 z3v64) GEN6) (= (z3f65 z3v64) (smt_set_cup (z3f60 z3v63) (z3f65 z3v56))) (= (z3f60 z3v64) (smt_set_cup (smt_set_add smt_set_emp z3v63) (z3f60 z3v56))) (= (z3f55 z3v64) (+ GEN7 (z3f55 z3v56))) (= (z3f61 z3v64) false) (= z3v64 (z3f62 z3v63 z3v56)) (>= (z3f55 z3v64) GEN8) (= z3v64 z3v66) (>= (z3f55 z3v64) GEN9) (>= (z3f55 z3v63) GEN10) (>= (z3f55 z3v66) GEN11) (= (z3f70 z3v69) z3v69) (= (z3f70 z3v71) z3v71) (= (z3f70 z3v72) z3v72))))
(assert (= BAV3 (>= (z3f55 z3v56) GEN1)))
(assert (= BAV4 (>= (z3f55 z3v58) GEN2)))
(assert (= BAV5 (= (z3f60 z3v58) smt_set_emp)))
(assert (= BAV6 (= (z3f55 z3v58) GEN3)))
(assert (= BAV7 (= (z3f61 z3v58) true)))
(assert (= BAV8 (= z3v58 z3f90)))
(assert (= BAV9 (>= (z3f55 z3v58) GEN4)))
(assert (= BAV10 (= z3v58 z3v63)))
(assert (= BAV11 (>= (z3f55 z3v58) GEN5)))
(assert (= BAV12 (>= (z3f55 z3v64) GEN6)))
(assert (= BAV13 (= (z3f65 z3v64) (smt_set_cup (z3f60 z3v63) (z3f65 z3v56)))))
(assert (= BAV14 (= (z3f60 z3v64) (smt_set_cup (smt_set_add smt_set_emp z3v63) (z3f60 z3v56)))))
(assert (= BAV15 (= (z3f55 z3v64) (+ GEN7 (z3f55 z3v56)))))
(assert (= BAV16 (= (z3f61 z3v64) false)))
(assert (= BAV17 (= z3v64 (z3f62 z3v63 z3v56))))
(assert (= BAV18 (>= (z3f55 z3v64) GEN8)))
(assert (= BAV19 (= z3v64 z3v66)))
(assert (= BAV20 (>= (z3f55 z3v64) GEN9)))
(assert (= BAV21 (>= (z3f55 z3v63) GEN10)))
(assert (= BAV22 (>= (z3f55 z3v66) GEN11)))
(assert (= BAV23 (= (z3f70 z3v69) z3v69)))
(assert (= BAV24 (= (z3f70 z3v71) z3v71)))
(assert (= BAV25 (= (z3f70 z3v72) z3v72)))
(assert (= BAV26 (= (z3f60 z3v94) (z3f65 z3v66))))
(check-sat)
(get-model)