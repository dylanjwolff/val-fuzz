(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const BAV23 Bool)
(declare-const BAV24 Bool)
(declare-const BAV25 Bool)
(declare-const BAV26 Bool)
(declare-const BAV27 Bool)
(declare-const BAV28 Bool)
(declare-const BAV29 Bool)
(declare-const BAV30 Bool)
(declare-const BAV31 Bool)
(declare-const BAV32 Bool)
(declare-const BAV33 Bool)
(declare-const BAV34 Bool)
(declare-const BAV35 Bool)
(declare-const BAV36 Bool)
(declare-const BAV37 Bool)
(declare-const BAV38 Bool)
(declare-const BAV39 Bool)
(declare-const BAV40 Bool)
(declare-const BAV41 Bool)
(declare-const BAV42 Bool)
(declare-const BAV43 Bool)
(declare-const BAV44 Bool)
(declare-const BAV45 Bool)
(declare-const BAV46 Bool)
(declare-const BAV47 Bool)
(declare-const BAV48 Bool)
(declare-const BAV49 Bool)
(declare-const BAV50 Bool)
(declare-const BAV51 Bool)
(declare-const GEN31 Int)
(declare-const GEN30 Int)
(declare-const GEN29 Int)
(declare-const GEN28 Int)
(declare-const GEN27 Int)
(declare-const GEN26 Int)
(declare-const GEN25 Int)
(declare-const GEN24 Int)
(declare-const GEN23 Int)
(declare-const GEN22 Int)
(declare-const GEN21 (_ BitVec 8))
(declare-const GEN20 (_ BitVec 8))
(declare-const GEN19 (_ BitVec 8))
(declare-const GEN18 (_ BitVec 8))
(declare-const GEN17 (_ BitVec 8))
(declare-const GEN16 (_ BitVec 8))
(declare-const GEN15 (_ BitVec 8))
(declare-const GEN14 (_ BitVec 8))
(declare-const GEN13 Int)
(declare-const GEN12 (_ BitVec 8))
(declare-const GEN11 (_ BitVec 8))
(declare-const GEN10 (_ BitVec 8))
(declare-const GEN9 (_ BitVec 8))
(declare-const GEN8 (_ BitVec 8))
(declare-const GEN7 (_ BitVec 8))
(declare-const GEN6 (_ BitVec 4))
(declare-const GEN5 (_ BitVec 4))
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 (_ BitVec 4))
(declare-const GEN1 (_ BitVec 4))
(set-option :model_validate true)
(declare-const x (_ BitVec 4))
(declare-const y (_ BitVec 4))
(declare-const z (_ BitVec 4))
(assert (= (bvadd x y) (bvadd y z z)))
(assert (= z GEN1))
(assert (= y GEN2))
(apply reduce-invertible)
(check-sat-using (then reduce-invertible smt))
(reset)
(assert (forall ((b (_ BitVec 8))) (exists ((a (_ BitVec 8))) (= a b))))
(apply reduce-invertible)
(apply (then reduce-invertible simplify))
(reset)
(assert (exists ((b (_ BitVec 8))) (forall ((a (_ BitVec 8))) (= a b))))
(apply reduce-invertible)
(apply (then reduce-invertible simplify))
(reset)
(declare-const x (_ BitVec 4))
(declare-const y (_ BitVec 4))
(declare-const z (_ BitVec 4))
(assert (= (bvmul x y) (bvmul y z z)))
(assert (= z #x3))
(assert (= y #x5))
(apply reduce-invertible)
(reset)
(declare-const x (_ BitVec 4))
(declare-const y (_ BitVec 4))
(declare-const z (_ BitVec 4))
(assert (= (bvxor x y) (bvmul y z z)))
(apply reduce-invertible)
(check-sat-using (then reduce-invertible smt))
(reset)
(declare-const x (_ BitVec 8))
(declare-const y (_ BitVec 8))
(assert (= (bvshl x y) #x42))
(apply reduce-invertible)
(check-sat-using (then reduce-invertible smt))
(get-model)
(reset)
(declare-const x (_ BitVec 8))
(declare-const y (_ BitVec 8))
(assert (= (bvshl x y) #x42))
(assert (not (= x #x42)))
(apply reduce-invertible)
(reset)
(declare-const x (_ BitVec 8))
(declare-const y (_ BitVec 8))
(assert (= (bvashr x y) #x42))
(apply reduce-invertible)
(reset)
(declare-const x (_ BitVec 8))
(assert (forall ((y (_ BitVec 8))) (= (bvashr x y) #x42)))
(apply reduce-invertible)
(reset)
(assert (forall ((x (_ BitVec 8))(y (_ BitVec 8))) (= (bvashr x y) #x42)))
(apply reduce-invertible)
(reset)
(assert (forall ((x (_ BitVec 8))(y (_ BitVec 8))) (exists ((z (_ BitVec 8))) (= (bvashr x y) z))))
(apply reduce-invertible)
(reset)
(declare-const x (_ BitVec 8))
(declare-const y (_ BitVec 8))
(assert (= (bvnot x) (bvneg y)))
(apply reduce-invertible)
(check-sat-using (then reduce-invertible smt))
(get-model)
(reset)
(declare-const x (_ BitVec 8))
(declare-const y (_ BitVec 8))
(assert (= (bvand x y) #x33))
(apply reduce-invertible)
(check-sat-using (then reduce-invertible smt))
(get-model)
(reset)
(declare-const x (_ BitVec 8))
(declare-const y (_ BitVec 8))
(assert (= (bvor x y) #x33))
(apply reduce-invertible)
(check-sat-using (then reduce-invertible smt))
(get-model)
(reset)
(declare-const x (_ BitVec 8))
(assert (= (bvand x #x03) #x33))
(apply reduce-invertible)
(reset)
(declare-const x (_ BitVec 8))
(assert (= (bvand x #xff) #x33))
(apply reduce-invertible)
(reset)
(declare-const x (_ BitVec 8))
(declare-const y (_ BitVec 8))
(declare-const z (_ BitVec 8))
(assert (= (bvmul x y z) #x42))
(apply reduce-invertible)
(check-sat-using (then reduce-invertible smt))
(get-model)
(reset)
(assert (forall ((x (_ BitVec 8))(y (_ BitVec 8))) (= (bvsdiv x y) #x42)))
(apply reduce-invertible)
(reset)
(declare-const x Real)
(declare-const y Real)
(declare-const z Real)
(assert (= y 3))
(assert (= z 5))
(assert (= (* x y) (* y z z)))
(apply reduce-invertible)
(check-sat-using (then reduce-invertible smt))
(reset)
(declare-const x Real)
(declare-const y Real)
(declare-const z Real)
(assert (= (/ y x) (* y z z)))
(assert (= y 3))
(assert (= z 5))
(apply reduce-invertible)
(check-sat-using (then reduce-invertible smt))
(reset)
(exit)
(declare-const x Int)
(declare-const y Int)
(declare-const z Int)
(assert (= (* x y) (* y z z)))
(apply reduce-invertible)
(check-sat-using (then reduce-invertible smt))
(reset)
(declare-const x Int)
(declare-const y Int)
(declare-const z Int)
(assert (= y GEN26))
(assert (= z GEN27))
(assert (= (+ x y) (* y z z)))
(apply reduce-invertible)
(check-sat-using (then reduce-invertible smt))
(reset)
(declare-const x Int)
(declare-const y Int)
(declare-const z Int)
(assert (= y GEN28))
(assert (= z GEN29))
(assert (= (div x y) (* y z z)))
(apply reduce-invertible)
(check-sat-using (then reduce-invertible smt))
(reset)
(declare-const x Int)
(declare-const y Int)
(declare-const z Int)
(assert (= y GEN30))
(assert (= z GEN31))
(assert (= (div y x) (* y z z)))
(apply reduce-invertible)
(check-sat-using (then reduce-invertible smt))
(reset)
(declare-const x Real)
(declare-const y Real)
(declare-const z Real)
(assert (= (+ x y) (* y z z)))
(apply reduce-invertible)
(check-sat-using (then reduce-invertible smt))
(reset)
(declare-const x Real)
(declare-const y Real)
(declare-const z Real)
(assert (= (/ x y) (* y z z)))
(apply reduce-invertible)
(check-sat-using (then reduce-invertible smt))
(reset)
(declare-const x (_ BitVec 4))
(declare-const y (_ BitVec 4))
(declare-const z (_ BitVec 4))
(assert (= (bvsub x y) (bvmul y z z)))
(apply reduce-invertible)
(check-sat-using (then reduce-invertible smt))
(reset)
(declare-const x (_ BitVec 4))
(declare-const y (_ BitVec 4))
(declare-const z (_ BitVec 4))
(assert (= (bvsub y x) (bvmul y z z)))
(apply reduce-invertible)
(check-sat-using (then reduce-invertible smt))
(reset)
(declare-const x (_ BitVec 4))
(declare-const y (_ BitVec 4))
(declare-const z (_ BitVec 4))
(assert (= (bvudiv x y) (bvmul y z z)))
(apply reduce-invertible)
(check-sat-using (then reduce-invertible smt))
(reset)
(declare-const x (_ BitVec 4))
(declare-const y (_ BitVec 4))
(declare-const z (_ BitVec 4))
(assert (= (bvudiv y x) (bvmul y z z)))
(apply reduce-invertible)
(check-sat-using (then reduce-invertible smt))
(reset)
(declare-const x (_ BitVec 4))
(declare-const y (_ BitVec 4))
(declare-const z (_ BitVec 4))
(assert (= (bvsdiv x y) (bvmul y z z)))
(apply reduce-invertible)
(check-sat-using (then reduce-invertible smt))
(reset)
(declare-const x (_ BitVec 4))
(declare-const y (_ BitVec 4))
(declare-const z (_ BitVec 4))
(assert (= (bvsdiv y x) (bvmul y z z)))
(apply reduce-invertible)
(check-sat-using (then reduce-invertible smt))
(reset)
(declare-const x (_ BitVec 4))
(declare-const y (_ BitVec 4))
(declare-const z (_ BitVec 4))
(assert (= (bvsrem x y) (bvmul y z z)))
(apply reduce-invertible)
(check-sat-using (then reduce-invertible smt))
(reset)
(declare-const x (_ BitVec 4))
(declare-const y (_ BitVec 4))
(declare-const z (_ BitVec 4))
(assert (= (bvsrem y x) (bvmul y z z)))
(apply reduce-invertible)
(check-sat-using (then reduce-invertible smt))
(reset)
(declare-const x (_ BitVec 4))
(declare-const y (_ BitVec 4))
(declare-const z (_ BitVec 4))
(assert (= (bvurem x y) (bvmul y z z)))
(apply reduce-invertible)
(check-sat-using (then reduce-invertible smt))
(reset)
(declare-const x (_ BitVec 4))
(declare-const y (_ BitVec 4))
(declare-const z (_ BitVec 4))
(assert (= (bvurem y x) (bvmul y z z)))
(apply reduce-invertible)
(check-sat-using (then reduce-invertible smt))
(reset)
(assert (= BAV1 (= (bvadd x y) (bvadd y z z))))
(assert (= BAV2 (= z GEN1)))
(assert (= BAV3 (= y GEN2)))
(assert (= BAV4 (forall ((b (_ BitVec 8))) (= a b))))
(assert (= BAV5 (forall ((a (_ BitVec 8))) (= a b))))
(assert (= BAV6 (= (bvmul x y) (bvmul y z z))))
(assert (= BAV7 (= z #x3)))
(assert (= BAV8 (= y #x5)))
(assert (= BAV9 (= (bvxor x y) (bvmul y z z))))
(assert (= BAV10 (= (bvshl x y) #x42)))
(assert (= BAV11 (= (bvshl x y) #x42)))
(assert (= BAV12 (= x #x42)))
(assert (= BAV13 (= (bvashr x y) #x42)))
(assert (= BAV14 (forall ((y (_ BitVec 8))) (= (bvashr x y) #x42))))
(assert (= BAV15 (forall ((x (_ BitVec 8))(y (_ BitVec 8))) (= (bvashr x y) #x42))))
(assert (= BAV16 (forall ((x (_ BitVec 8))(y (_ BitVec 8))) (= (bvashr x y) z))))
(assert (= BAV17 (= (bvnot x) (bvneg y))))
(assert (= BAV18 (= (bvand x y) #x33)))
(assert (= BAV19 (= (bvor x y) #x33)))
(assert (= BAV20 (= (bvand x #x03) #x33)))
(assert (= BAV21 (= (bvand x #xff) #x33)))
(assert (= BAV22 (= (bvmul x y z) #x42)))
(assert (= BAV23 (forall ((x (_ BitVec 8))(y (_ BitVec 8))) (= (bvsdiv x y) #x42))))
(assert (= BAV24 (= y 3)))
(assert (= BAV25 (= z 5)))
(assert (= BAV26 (= (* x y) (* y z z))))
(assert (= BAV27 (= (/ y x) (* y z z))))
(assert (= BAV28 (= y 3)))
(assert (= BAV29 (= z 5)))
(assert (= BAV30 (= (* x y) (* y z z))))
(assert (= BAV31 (= y GEN26)))
(assert (= BAV32 (= z GEN27)))
(assert (= BAV33 (= (+ x y) (* y z z))))
(assert (= BAV34 (= y GEN28)))
(assert (= BAV35 (= z GEN29)))
(assert (= BAV36 (= (div x y) (* y z z))))
(assert (= BAV37 (= y GEN30)))
(assert (= BAV38 (= z GEN31)))
(assert (= BAV39 (= (div y x) (* y z z))))
(assert (= BAV40 (= (+ x y) (* y z z))))
(assert (= BAV41 (= (/ x y) (* y z z))))
(assert (= BAV42 (= (bvsub x y) (bvmul y z z))))
(assert (= BAV43 (= (bvsub y x) (bvmul y z z))))
(assert (= BAV44 (= (bvudiv x y) (bvmul y z z))))
(assert (= BAV45 (= (bvudiv y x) (bvmul y z z))))
(assert (= BAV46 (= (bvsdiv x y) (bvmul y z z))))
(assert (= BAV47 (= (bvsdiv y x) (bvmul y z z))))
(assert (= BAV48 (= (bvsrem x y) (bvmul y z z))))
(assert (= BAV49 (= (bvsrem y x) (bvmul y z z))))
(assert (= BAV50 (= (bvurem x y) (bvmul y z z))))
(assert (= BAV51 (= (bvurem y x) (bvmul y z z))))