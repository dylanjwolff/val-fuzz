(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-fun f (Int Int) Int)
(declare-fun p (Int) Bool)
(set-option :pp.max-depth 100)
(push)
(assert (forall ((x Int)(y Int)) (=> (and (= x (f x y)) (= y (f x y))) (= x y))))
(apply (and-then (! simplify :elim-and true) der))
(pop)
(push)
(assert (forall ((x1 Int)(x2 Int)(x3 Int)(x4 Int)) (=> (and (= x1 GEN1) (= x2 (ite (> x1 GEN2) (f x2 x2) GEN3)) (= x3 (ite (= x2 GEN4) GEN5 (f x3 x3)))) (p x3))))
(apply (and-then (! simplify :elim-and true) der))
(apply (repeat (and-then (! simplify :elim-and true) der) 1))
(apply (repeat (and-then (! simplify :elim-and true) der)))
(pop)
(assert (= BAV1 (forall ((x Int)(y Int)) (=> (and (= x (f x y)) (= y (f x y))) (= x y)))))
(assert (= BAV2 (forall ((x Int)(y Int)) (and (= x (f x y)) (= y (f x y))))))
(assert (= BAV3 (forall ((x Int)(y Int)) (= x (f x y)))))
(assert (= BAV4 (forall ((x Int)(y Int)) (= y (f x y)))))
(assert (= BAV5 (forall ((x Int)(y Int)) (= x y))))
(assert (= BAV6 (forall ((x1 Int)(x2 Int)(x3 Int)(x4 Int)) (=> (and (= x1 GEN1) (= x2 (ite (> x1 GEN2) (f x2 x2) GEN3)) (= x3 (ite (= x2 GEN4) GEN5 (f x3 x3)))) (p x3)))))
(assert (= BAV7 (forall ((x1 Int)(x2 Int)(x3 Int)(x4 Int)) (and (= x1 GEN1) (= x2 (ite (> x1 GEN2) (f x2 x2) GEN3)) (= x3 (ite (= x2 GEN4) GEN5 (f x3 x3)))))))
(assert (= BAV8 (forall ((x1 Int)(x2 Int)(x3 Int)(x4 Int)) (= x1 GEN1))))
(assert (= BAV9 (forall ((x1 Int)(x2 Int)(x3 Int)(x4 Int)) (= x2 (ite (> x1 GEN2) (f x2 x2) GEN3)))))
(assert (= BAV10 (forall ((x1 Int)(x2 Int)(x3 Int)(x4 Int)) (> x1 GEN2))))
(assert (= BAV11 (forall ((x1 Int)(x2 Int)(x3 Int)(x4 Int)) (= x3 (ite (= x2 GEN4) GEN5 (f x3 x3))))))
(assert (= BAV12 (forall ((x1 Int)(x2 Int)(x3 Int)(x4 Int)) (= x2 GEN4))))