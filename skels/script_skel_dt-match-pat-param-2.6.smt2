(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-datatypes ( ( Tree 0) ( TreeList 0) ) (
 ( ( node ( value Int ) ( children TreeList) ))
( ( empty ) ( insert ( head Tree) ( tail TreeList)) )
))
(declare-fun t () TreeList)
(assert (<= GEN1 (match t ((empty (- GEN2)) ((insert x1 x2) (value x1))))))
(declare-datatypes ( ( PTree 1) ( PTreeList 1) ) (
(par ( X ) ( ( pnode ( pvalue X ) ( pchildren ( PTreeList X )) )))
(par ( Y ) ( ( pempty ) ( pinsert ( phead ( PTree Y )) ( ptail ( PTreeList Y ))) ))
))
(declare-fun pt () (PTreeList Int))
(assert (<= GEN3 (match pt ((pempty (- GEN4)) ((pinsert x1 x2) (pvalue x1))))))
(assert (= BAV1 (<= GEN1 (match t ((empty (- GEN2)) ((insert x1 x2) (value x1)))))))
(assert (= BAV2 (<= GEN3 (match pt ((pempty (- GEN4)) ((pinsert x1 x2) (pvalue x1)))))))
(check-sat)
(get-model)