(set-info :smt-lib-version 2.5)
(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const GEN10 String)
(declare-const GEN9 String)
(declare-const GEN8 String)
(declare-const GEN7 String)
(declare-const GEN6 String)
(declare-const GEN5 String)
(declare-const GEN4 String)
(declare-const GEN3 String)
(declare-const GEN2 String)
(declare-const GEN1 String)
(set-option :strings-exp true)
(declare-const x String)
(declare-const y String)
(assert (and (= y GEN1) (str.in.re x (re.++ (str.to.re GEN2) (re.* re.allchar) (str.to.re GEN3) (re.* re.allchar) (str.to.re GEN4) (re.* re.allchar) (str.to.re GEN5)))))
(assert (not (and (= y GEN6) (str.in.re x (re.++ (str.to.re GEN7) (re.* re.allchar) (str.to.re GEN8) (re.* re.allchar) (str.to.re GEN9) (re.* re.allchar) (str.to.re GEN10))))))
(assert (= BAV1 (and (= y GEN1) (str.in.re x (re.++ (str.to.re GEN2) (re.* re.allchar) (str.to.re GEN3) (re.* re.allchar) (str.to.re GEN4) (re.* re.allchar) (str.to.re GEN5))))))
(assert (= BAV2 (= y GEN1)))
(assert (= BAV3 (and (= y GEN6) (str.in.re x (re.++ (str.to.re GEN7) (re.* re.allchar) (str.to.re GEN8) (re.* re.allchar) (str.to.re GEN9) (re.* re.allchar) (str.to.re GEN10))))))
(assert (= BAV4 (= y GEN6)))
(check-sat)
(get-model)