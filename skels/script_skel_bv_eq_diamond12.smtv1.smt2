(set-option :incremental false)
(set-info :source "Generating minimum transitivity constraints in P-time for deciding Equality Logic,
Ofer Strichman and Mirron Rozanov,
SMT Workshop 2005.

Translator: Leonardo de Moura.")
(set-info :category "crafted")
(set-info :difficulty "0")
(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const BAV23 Bool)
(declare-const BAV24 Bool)
(declare-const BAV25 Bool)
(declare-const BAV26 Bool)
(declare-const BAV27 Bool)
(declare-const BAV28 Bool)
(declare-const BAV29 Bool)
(declare-const BAV30 Bool)
(declare-const BAV31 Bool)
(declare-const BAV32 Bool)
(declare-const BAV33 Bool)
(declare-const BAV34 Bool)
(declare-const BAV35 Bool)
(declare-const BAV36 Bool)
(declare-const BAV37 Bool)
(declare-const BAV38 Bool)
(declare-const BAV39 Bool)
(declare-const BAV40 Bool)
(declare-const BAV41 Bool)
(declare-const BAV42 Bool)
(declare-const BAV43 Bool)
(declare-const BAV44 Bool)
(declare-const BAV45 Bool)
(declare-const BAV46 Bool)
(declare-const BAV47 Bool)
(declare-const BAV48 Bool)
(declare-const BAV49 Bool)
(declare-const BAV50 Bool)
(declare-const BAV51 Bool)
(declare-const BAV52 Bool)
(declare-const BAV53 Bool)
(declare-const BAV54 Bool)
(declare-const BAV55 Bool)
(declare-const BAV56 Bool)
(declare-const BAV57 Bool)
(declare-const BAV58 Bool)
(declare-const BAV59 Bool)
(declare-const BAV60 Bool)
(declare-const BAV61 Bool)
(declare-const BAV62 Bool)
(declare-const BAV63 Bool)
(declare-const BAV64 Bool)
(declare-const BAV65 Bool)
(declare-const BAV66 Bool)
(declare-const BAV67 Bool)
(declare-const BAV68 Bool)
(declare-const BAV69 Bool)
(declare-const BAV70 Bool)
(declare-const BAV71 Bool)
(declare-const BAV72 Bool)
(declare-const BAV73 Bool)
(declare-const BAV74 Bool)
(declare-const BAV75 Bool)
(declare-const BAV76 Bool)
(declare-const BAV77 Bool)
(declare-const BAV78 Bool)
(declare-const BAV79 Bool)
(declare-fun x0 () (_ BitVec 32))
(declare-fun y0 () (_ BitVec 32))
(declare-fun z0 () (_ BitVec 32))
(declare-fun x1 () (_ BitVec 32))
(declare-fun y1 () (_ BitVec 32))
(declare-fun z1 () (_ BitVec 32))
(declare-fun x2 () (_ BitVec 32))
(declare-fun y2 () (_ BitVec 32))
(declare-fun z2 () (_ BitVec 32))
(declare-fun x3 () (_ BitVec 32))
(declare-fun y3 () (_ BitVec 32))
(declare-fun z3 () (_ BitVec 32))
(declare-fun x4 () (_ BitVec 32))
(declare-fun y4 () (_ BitVec 32))
(declare-fun z4 () (_ BitVec 32))
(declare-fun x5 () (_ BitVec 32))
(declare-fun y5 () (_ BitVec 32))
(declare-fun z5 () (_ BitVec 32))
(declare-fun x6 () (_ BitVec 32))
(declare-fun y6 () (_ BitVec 32))
(declare-fun z6 () (_ BitVec 32))
(declare-fun x7 () (_ BitVec 32))
(declare-fun y7 () (_ BitVec 32))
(declare-fun z7 () (_ BitVec 32))
(declare-fun x8 () (_ BitVec 32))
(declare-fun y8 () (_ BitVec 32))
(declare-fun z8 () (_ BitVec 32))
(declare-fun x9 () (_ BitVec 32))
(declare-fun y9 () (_ BitVec 32))
(declare-fun z9 () (_ BitVec 32))
(declare-fun x10 () (_ BitVec 32))
(declare-fun y10 () (_ BitVec 32))
(declare-fun z10 () (_ BitVec 32))
(declare-fun x11 () (_ BitVec 32))
(declare-fun y11 () (_ BitVec 32))
(declare-fun z11 () (_ BitVec 32))
(assert (= BAV1 (and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (not (= x0 x11)))))
(assert (= BAV2 (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1)))))
(assert (= BAV3 (and (= x0 y0) (= y0 x1))))
(assert (= BAV4 (= x0 y0)))
(assert (= BAV5 (= y0 x1)))
(assert (= BAV6 (and (= x0 z0) (= z0 x1))))
(assert (= BAV7 (= x0 z0)))
(assert (= BAV8 (= z0 x1)))
(assert (= BAV9 (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2)))))
(assert (= BAV10 (and (= x1 y1) (= y1 x2))))
(assert (= BAV11 (= x1 y1)))
(assert (= BAV12 (= y1 x2)))
(assert (= BAV13 (and (= x1 z1) (= z1 x2))))
(assert (= BAV14 (= x1 z1)))
(assert (= BAV15 (= z1 x2)))
(assert (= BAV16 (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3)))))
(assert (= BAV17 (and (= x2 y2) (= y2 x3))))
(assert (= BAV18 (= x2 y2)))
(assert (= BAV19 (= y2 x3)))
(assert (= BAV20 (and (= x2 z2) (= z2 x3))))
(assert (= BAV21 (= x2 z2)))
(assert (= BAV22 (= z2 x3)))
(assert (= BAV23 (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4)))))
(assert (= BAV24 (and (= x3 y3) (= y3 x4))))
(assert (= BAV25 (= x3 y3)))
(assert (= BAV26 (= y3 x4)))
(assert (= BAV27 (and (= x3 z3) (= z3 x4))))
(assert (= BAV28 (= x3 z3)))
(assert (= BAV29 (= z3 x4)))
(assert (= BAV30 (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5)))))
(assert (= BAV31 (and (= x4 y4) (= y4 x5))))
(assert (= BAV32 (= x4 y4)))
(assert (= BAV33 (= y4 x5)))
(assert (= BAV34 (and (= x4 z4) (= z4 x5))))
(assert (= BAV35 (= x4 z4)))
(assert (= BAV36 (= z4 x5)))
(assert (= BAV37 (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6)))))
(assert (= BAV38 (and (= x5 y5) (= y5 x6))))
(assert (= BAV39 (= x5 y5)))
(assert (= BAV40 (= y5 x6)))
(assert (= BAV41 (and (= x5 z5) (= z5 x6))))
(assert (= BAV42 (= x5 z5)))
(assert (= BAV43 (= z5 x6)))
(assert (= BAV44 (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7)))))
(assert (= BAV45 (and (= x6 y6) (= y6 x7))))
(assert (= BAV46 (= x6 y6)))
(assert (= BAV47 (= y6 x7)))
(assert (= BAV48 (and (= x6 z6) (= z6 x7))))
(assert (= BAV49 (= x6 z6)))
(assert (= BAV50 (= z6 x7)))
(assert (= BAV51 (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8)))))
(assert (= BAV52 (and (= x7 y7) (= y7 x8))))
(assert (= BAV53 (= x7 y7)))
(assert (= BAV54 (= y7 x8)))
(assert (= BAV55 (and (= x7 z7) (= z7 x8))))
(assert (= BAV56 (= x7 z7)))
(assert (= BAV57 (= z7 x8)))
(assert (= BAV58 (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9)))))
(assert (= BAV59 (and (= x8 y8) (= y8 x9))))
(assert (= BAV60 (= x8 y8)))
(assert (= BAV61 (= y8 x9)))
(assert (= BAV62 (and (= x8 z8) (= z8 x9))))
(assert (= BAV63 (= x8 z8)))
(assert (= BAV64 (= z8 x9)))
(assert (= BAV65 (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10)))))
(assert (= BAV66 (and (= x9 y9) (= y9 x10))))
(assert (= BAV67 (= x9 y9)))
(assert (= BAV68 (= y9 x10)))
(assert (= BAV69 (and (= x9 z9) (= z9 x10))))
(assert (= BAV70 (= x9 z9)))
(assert (= BAV71 (= z9 x10)))
(assert (= BAV72 (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11)))))
(assert (= BAV73 (and (= x10 y10) (= y10 x11))))
(assert (= BAV74 (= x10 y10)))
(assert (= BAV75 (= y10 x11)))
(assert (= BAV76 (and (= x10 z10) (= z10 x11))))
(assert (= BAV77 (= x10 z10)))
(assert (= BAV78 (= z10 x11)))
(assert (= BAV79 (= x0 x11)))
(check-sat-assuming ((and (or (and (= x0 y0) (= y0 x1)) (and (= x0 z0) (= z0 x1))) (or (and (= x1 y1) (= y1 x2)) (and (= x1 z1) (= z1 x2))) (or (and (= x2 y2) (= y2 x3)) (and (= x2 z2) (= z2 x3))) (or (and (= x3 y3) (= y3 x4)) (and (= x3 z3) (= z3 x4))) (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (or (and (= x5 y5) (= y5 x6)) (and (= x5 z5) (= z5 x6))) (or (and (= x6 y6) (= y6 x7)) (and (= x6 z6) (= z6 x7))) (or (and (= x7 y7) (= y7 x8)) (and (= x7 z7) (= z7 x8))) (or (and (= x8 y8) (= y8 x9)) (and (= x8 z8) (= z8 x9))) (or (and (= x9 y9) (= y9 x10)) (and (= x9 z9) (= z9 x10))) (or (and (= x10 y10) (= y10 x11)) (and (= x10 z10) (= z10 x11))) (not (= x0 x11)))))
(get-model)