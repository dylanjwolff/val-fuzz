(set-option :incremental false)
(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-sort U 0)
(declare-sort S1 0)
(declare-sort S0 0)
(declare-fun v0 () S0)
(declare-fun v1 () S0)
(declare-fun f4 (S1) S1)
(declare-fun v2 () S1)
(declare-fun v3 () S1)
(declare-fun p3 (S0 S0 S1) Bool)
(declare-fun f0 (S0 S0 S1) S0)
(declare-fun p1 (S0 S1 S1) Bool)
(declare-fun p4 (S1) Bool)
(assert (= BAV1 (= (p4 (f4 v2)) (p3 (ite (p1 v0 (f4 v2) (f4 v2)) (f0 v1 v1 v2) v0) v0 (f4 v2)))))
(assert (= BAV2 (=> (=> (distinct (ite (= v3 (f4 v2)) v1 v0) (ite (= v3 (f4 v2)) v1 v0)) false) false)))
(assert (= BAV3 (=> (distinct (ite (= v3 (f4 v2)) v1 v0) (ite (= v3 (f4 v2)) v1 v0)) false)))
(assert (= BAV4 (distinct (ite (= v3 (f4 v2)) v1 v0) (ite (= v3 (f4 v2)) v1 v0))))
(assert (= BAV5 (= v3 (f4 v2))))
(assert (= BAV6 (= v3 (f4 v2))))
(check-sat-assuming ((ite (p4 v3) (= (p4 (f4 v2)) (p3 (ite (p1 v0 (f4 v2) (f4 v2)) (f0 v1 v1 v2) v0) v0 (f4 v2))) (=> (=> (distinct (ite (= v3 (f4 v2)) v1 v0) (ite (= v3 (f4 v2)) v1 v0)) false) false))))
(get-model)