(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const GEN1 Int)
(declare-sort Obj)
(set-option :produce-models true)
(define-sort ObjSet () (Array Obj Bool))
(declare-const emptyObjSet ObjSet)
(define-fun member-of ((e Obj) (x ObjSet)) Bool (select x e))
(declare-fun card (ObjSet) Int)
(assert (forall ((x ObjSet)) (! (iff (= x emptyObjSet) (= (card x) GEN1)) :pattern (card x))))
(declare-const Object_alloc ObjSet)
(declare-const Thread_t Obj)
(assert (forall ((x Obj)) (implies (not (member-of x Object_alloc)) (and (not (= Thread_t x))))))
(assert (= BAV1 (forall ((x ObjSet)) (= x emptyObjSet))))
(assert (= BAV2 (forall ((x ObjSet)) (= (card x) GEN1))))
(assert (= BAV3 (forall ((x Obj)) (and (not (= Thread_t x))))))
(assert (= BAV4 (forall ((x Obj)) (= Thread_t x))))
(check-sat)
(get-model)
(get-info :reason-unknown)
(get-model)