(set-option :incremental true)
(set-logic ALL)
(declare-const GEN1 Real)
(declare-const GEN2 Real)
(get-model)
(get-model)
(get-model)
(declare-const GEN3 Real)
(declare-const GEN4 Real)
(declare-const GEN5 Real)
(declare-const GEN6 Real)
(declare-const GEN7 Int)
(declare-const GEN8 Real)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-fun x () Real)
(declare-fun y () Real)
(declare-fun z () Real)
(push)
(assert (= (sqrt GEN1) GEN2))
(assert (= BAV9 (= (sqrt GEN1) GEN2)))
(assert (= BAV10 (= (sqrt GEN3) (- GEN4))))
(assert (= BAV11 (= x GEN5)))
(assert (= BAV12 (= (sqrt GEN6) (sqrt x))))
(assert (= BAV13 (< x GEN7)))
(assert (= BAV14 (= (sqrt GEN8) (sqrt x))))
(assert (= BAV15 (= (sqrt y) z)))
(assert (= BAV16 (= (sqrt x) (sqrt y))))
(assert (= BAV17 (= (sqrt x) z)))
(check-sat)
(get-model)
(pop)
(push)
(assert (= (sqrt GEN3) (- GEN4)))
(check-sat)
(pop)
(push)
(assert (= x GEN5))
(assert (not (= (sqrt GEN6) (sqrt x))))
(check-sat)
(pop)
(push)
(assert (< x GEN7))
(assert (= (sqrt GEN8) (sqrt x)))
(check-sat)
(pop)
(push)
(assert (= (sqrt y) z))
(assert (= (sqrt x) (sqrt y)))
(assert (not (= (sqrt x) z)))
(check-sat)
(pop)