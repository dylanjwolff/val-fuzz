(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(set-option :produce-models true)
(declare-const x Int)
(declare-const y Int)
(declare-const z Int)
(declare-fun f (Int Int) Int)
(assert (and (= x (f (+ y GEN1) (+ y GEN2))) (= z GEN3) (= (+ y z) GEN4) (>= (f (+ y GEN5) GEN6) GEN7)))
(apply (and-then simplify solve-eqs) :print-model-converter true)
(assert (= BAV1 (and (= x (f (+ y GEN1) (+ y GEN2))) (= z GEN3) (= (+ y z) GEN4) (>= (f (+ y GEN5) GEN6) GEN7))))
(assert (= BAV2 (= x (f (+ y GEN1) (+ y GEN2)))))
(assert (= BAV3 (= z GEN3)))
(assert (= BAV4 (= (+ y z) GEN4)))
(assert (= BAV5 (>= (f (+ y GEN5) GEN6) GEN7)))