(set-info :source |fuzzsmt|)
(set-info :smt-lib-version 2.0)
(set-info :category "random")
(set-info :status unknown)
(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const BAV23 Bool)
(declare-const BAV24 Bool)
(declare-const BAV25 Bool)
(declare-const BAV26 Bool)
(declare-const BAV27 Bool)
(declare-const BAV28 Bool)
(declare-const BAV29 Bool)
(declare-const BAV30 Bool)
(declare-const BAV31 Bool)
(declare-const BAV32 Bool)
(declare-const BAV33 Bool)
(declare-const BAV34 Bool)
(declare-const BAV35 Bool)
(declare-const BAV36 Bool)
(declare-const BAV37 Bool)
(declare-const BAV38 Bool)
(declare-const BAV39 Bool)
(declare-const BAV40 Bool)
(declare-const BAV41 Bool)
(declare-const BAV42 Bool)
(declare-const BAV43 Bool)
(declare-const BAV44 Bool)
(declare-const BAV45 Bool)
(declare-const BAV46 Bool)
(declare-const BAV47 Bool)
(declare-const BAV48 Bool)
(declare-const BAV49 Bool)
(declare-const BAV50 Bool)
(declare-const BAV51 Bool)
(declare-const BAV52 Bool)
(declare-const BAV53 Bool)
(declare-const BAV54 Bool)
(declare-const BAV55 Bool)
(declare-const BAV56 Bool)
(declare-const BAV57 Bool)
(declare-const BAV58 Bool)
(declare-const BAV59 Bool)
(declare-const BAV60 Bool)
(declare-const BAV61 Bool)
(declare-const BAV62 Bool)
(declare-const BAV63 Bool)
(declare-const BAV64 Bool)
(declare-const BAV65 Bool)
(declare-const BAV66 Bool)
(declare-const BAV67 Bool)
(declare-const BAV68 Bool)
(declare-const BAV69 Bool)
(declare-const BAV70 Bool)
(declare-const BAV71 Bool)
(declare-const BAV72 Bool)
(declare-const BAV73 Bool)
(declare-const BAV74 Bool)
(declare-const BAV75 Bool)
(declare-const BAV76 Bool)
(declare-const BAV77 Bool)
(declare-const BAV78 Bool)
(declare-const BAV79 Bool)
(declare-const BAV80 Bool)
(declare-const BAV81 Bool)
(declare-const BAV82 Bool)
(declare-const BAV83 Bool)
(declare-const BAV84 Bool)
(declare-const BAV85 Bool)
(declare-const BAV86 Bool)
(declare-const BAV87 Bool)
(declare-const BAV88 Bool)
(declare-const BAV89 Bool)
(declare-const BAV90 Bool)
(declare-const BAV91 Bool)
(declare-const BAV92 Bool)
(declare-const BAV93 Bool)
(declare-const BAV94 Bool)
(declare-const BAV95 Bool)
(declare-const BAV96 Bool)
(declare-const BAV97 Bool)
(declare-const BAV98 Bool)
(declare-const BAV99 Bool)
(declare-const BAV100 Bool)
(declare-const BAV101 Bool)
(declare-const BAV102 Bool)
(declare-const BAV103 Bool)
(declare-const BAV104 Bool)
(declare-const BAV105 Bool)
(declare-const BAV106 Bool)
(declare-const BAV107 Bool)
(declare-const BAV108 Bool)
(declare-const BAV109 Bool)
(declare-const BAV110 Bool)
(declare-const BAV111 Bool)
(declare-const BAV112 Bool)
(declare-const BAV113 Bool)
(declare-const BAV114 Bool)
(declare-const BAV115 Bool)
(declare-const BAV116 Bool)
(declare-const BAV117 Bool)
(declare-const BAV118 Bool)
(declare-const BAV119 Bool)
(declare-const BAV120 Bool)
(declare-const BAV121 Bool)
(declare-const BAV122 Bool)
(declare-const BAV123 Bool)
(declare-const BAV124 Bool)
(declare-const BAV125 Bool)
(declare-const BAV126 Bool)
(declare-const BAV127 Bool)
(declare-const BAV128 Bool)
(declare-const BAV129 Bool)
(declare-const BAV130 Bool)
(declare-const BAV131 Bool)
(declare-const BAV132 Bool)
(declare-const BAV133 Bool)
(declare-const BAV134 Bool)
(declare-const BAV135 Bool)
(declare-const BAV136 Bool)
(declare-const BAV137 Bool)
(declare-const BAV138 Bool)
(declare-const BAV139 Bool)
(declare-const BAV140 Bool)
(declare-const BAV141 Bool)
(declare-const BAV142 Bool)
(declare-const BAV143 Bool)
(declare-const BAV144 Bool)
(declare-const BAV145 Bool)
(declare-const BAV146 Bool)
(declare-const BAV147 Bool)
(declare-const BAV148 Bool)
(declare-const BAV149 Bool)
(declare-const BAV150 Bool)
(declare-const BAV151 Bool)
(declare-const BAV152 Bool)
(declare-const BAV153 Bool)
(declare-const BAV154 Bool)
(declare-const BAV155 Bool)
(declare-const BAV156 Bool)
(declare-const BAV157 Bool)
(declare-const BAV158 Bool)
(declare-const BAV159 Bool)
(declare-const BAV160 Bool)
(declare-const BAV161 Bool)
(declare-const BAV162 Bool)
(declare-const BAV163 Bool)
(declare-const BAV164 Bool)
(declare-const BAV165 Bool)
(declare-const BAV166 Bool)
(declare-const BAV167 Bool)
(declare-const BAV168 Bool)
(declare-const BAV169 Bool)
(declare-const BAV170 Bool)
(declare-const BAV171 Bool)
(declare-const BAV172 Bool)
(declare-const BAV173 Bool)
(declare-const BAV174 Bool)
(declare-const BAV175 Bool)
(declare-const BAV176 Bool)
(declare-const BAV177 Bool)
(declare-const BAV178 Bool)
(declare-const BAV179 Bool)
(declare-const BAV180 Bool)
(declare-const BAV181 Bool)
(declare-const BAV182 Bool)
(declare-const BAV183 Bool)
(declare-const BAV184 Bool)
(declare-const BAV185 Bool)
(declare-const BAV186 Bool)
(declare-const BAV187 Bool)
(declare-const BAV188 Bool)
(declare-const BAV189 Bool)
(declare-const BAV190 Bool)
(declare-const BAV191 Bool)
(declare-const BAV192 Bool)
(declare-const BAV193 Bool)
(declare-const BAV194 Bool)
(declare-const BAV195 Bool)
(declare-const BAV196 Bool)
(declare-const BAV197 Bool)
(declare-const BAV198 Bool)
(declare-const BAV199 Bool)
(declare-const BAV200 Bool)
(declare-const BAV201 Bool)
(declare-const BAV202 Bool)
(declare-const BAV203 Bool)
(declare-const BAV204 Bool)
(declare-const BAV205 Bool)
(declare-const BAV206 Bool)
(declare-const BAV207 Bool)
(declare-const BAV208 Bool)
(declare-const BAV209 Bool)
(declare-const BAV210 Bool)
(declare-const BAV211 Bool)
(declare-const BAV212 Bool)
(declare-const BAV213 Bool)
(declare-const BAV214 Bool)
(declare-const BAV215 Bool)
(declare-const BAV216 Bool)
(declare-const BAV217 Bool)
(declare-const BAV218 Bool)
(declare-const BAV219 Bool)
(declare-const BAV220 Bool)
(declare-const BAV221 Bool)
(declare-const BAV222 Bool)
(declare-const BAV223 Bool)
(declare-const BAV224 Bool)
(declare-const BAV225 Bool)
(declare-const BAV226 Bool)
(declare-const BAV227 Bool)
(declare-const BAV228 Bool)
(declare-const BAV229 Bool)
(declare-const BAV230 Bool)
(declare-const BAV231 Bool)
(declare-const BAV232 Bool)
(declare-const BAV233 Bool)
(declare-const BAV234 Bool)
(declare-const BAV235 Bool)
(declare-const BAV236 Bool)
(declare-const BAV237 Bool)
(declare-const BAV238 Bool)
(declare-const BAV239 Bool)
(declare-const BAV240 Bool)
(declare-const BAV241 Bool)
(declare-const BAV242 Bool)
(declare-const BAV243 Bool)
(declare-const BAV244 Bool)
(declare-const BAV245 Bool)
(declare-const BAV246 Bool)
(declare-const BAV247 Bool)
(declare-const BAV248 Bool)
(declare-const BAV249 Bool)
(declare-const BAV250 Bool)
(declare-const BAV251 Bool)
(declare-const BAV252 Bool)
(declare-const BAV253 Bool)
(declare-const BAV254 Bool)
(declare-const BAV255 Bool)
(declare-const BAV256 Bool)
(declare-const BAV257 Bool)
(declare-const BAV258 Bool)
(declare-const BAV259 Bool)
(declare-const BAV260 Bool)
(declare-const BAV261 Bool)
(declare-const BAV262 Bool)
(declare-const BAV263 Bool)
(declare-const BAV264 Bool)
(declare-const BAV265 Bool)
(declare-const BAV266 Bool)
(declare-const BAV267 Bool)
(declare-const BAV268 Bool)
(declare-const BAV269 Bool)
(declare-const BAV270 Bool)
(declare-const BAV271 Bool)
(declare-const BAV272 Bool)
(declare-const BAV273 Bool)
(declare-const BAV274 Bool)
(declare-const BAV275 Bool)
(declare-const BAV276 Bool)
(declare-const BAV277 Bool)
(declare-const BAV278 Bool)
(declare-const BAV279 Bool)
(declare-const BAV280 Bool)
(declare-const BAV281 Bool)
(declare-const BAV282 Bool)
(declare-const BAV283 Bool)
(declare-const BAV284 Bool)
(declare-const BAV285 Bool)
(declare-const BAV286 Bool)
(declare-const BAV287 Bool)
(declare-const BAV288 Bool)
(declare-const BAV289 Bool)
(declare-const BAV290 Bool)
(declare-const BAV291 Bool)
(declare-const BAV292 Bool)
(declare-const BAV293 Bool)
(declare-const BAV294 Bool)
(declare-const BAV295 Bool)
(declare-const BAV296 Bool)
(declare-const BAV297 Bool)
(declare-const BAV298 Bool)
(declare-const BAV299 Bool)
(declare-const BAV300 Bool)
(declare-const BAV301 Bool)
(declare-const BAV302 Bool)
(declare-const BAV303 Bool)
(declare-const BAV304 Bool)
(declare-const BAV305 Bool)
(declare-const BAV306 Bool)
(declare-const BAV307 Bool)
(declare-const BAV308 Bool)
(declare-const BAV309 Bool)
(declare-const BAV310 Bool)
(declare-const BAV311 Bool)
(declare-const BAV312 Bool)
(declare-const BAV313 Bool)
(declare-const BAV314 Bool)
(declare-const BAV315 Bool)
(declare-const BAV316 Bool)
(declare-const BAV317 Bool)
(declare-const BAV318 Bool)
(declare-const BAV319 Bool)
(declare-const BAV320 Bool)
(declare-const BAV321 Bool)
(declare-const BAV322 Bool)
(declare-const BAV323 Bool)
(declare-const BAV324 Bool)
(declare-const BAV325 Bool)
(declare-const BAV326 Bool)
(declare-const BAV327 Bool)
(declare-const BAV328 Bool)
(declare-const BAV329 Bool)
(declare-const BAV330 Bool)
(declare-const BAV331 Bool)
(declare-const BAV332 Bool)
(declare-sort S0 0)
(declare-sort S1 0)
(declare-sort S2 0)
(declare-fun v0 () S0)
(declare-fun v1 () S1)
(declare-fun v2 () S2)
(declare-fun f0 ( S1 S1 S2) S1)
(declare-fun f1 ( S2 S1) S2)
(declare-fun f2 ( S2 S2) S1)
(declare-fun f3 ( S1) S1)
(declare-fun f4 ( S0 S1) S1)
(declare-fun f5 ( S2 S0) S1)
(declare-fun f6 ( S0) S0)
(declare-fun p0 ( S1 S2) Bool)
(declare-fun p1 ( S2) Bool)
(declare-fun p2 ( S1 S0 S2) Bool)
(declare-fun p3 ( S1 S0) Bool)
(declare-fun p4 ( S2 S1) Bool)
(assert (=> (and (=> (not (xor (=> (ite (= (xor (or (or (= (p3 (f2 v2 v2) (f6 v0)) (p1 (f1 v2 (f2 v2 v2)))) (= (distinct (ite (distinct (f6 v0) (f6 v0)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (p2 (f3 v1) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (not (distinct (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)) (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))))))) (xor (=> (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0))))) (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)))) (=> (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0))))) (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)))))) (p3 v1 (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0)))))) (= (or (p0 (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (xor (not (p4 (ite (p3 (f3 v1) (f6 v0)) (f1 v2 (f2 v2 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2)))) (f2 v2 v2))) (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))))) (distinct (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2)) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))))) (not (not (= (f0 (f2 v2 v2) v1 v2) (ite (p1 (f1 v2 (f2 v2 v2))) v1 (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))))))) (= (or (and (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f2 v2 v2)) (distinct (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f6 v0) v0) (f6 (f6 v0)))) (and (=> (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1))) (not (= (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0))))))) (or (and (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f2 v2 v2)) (distinct (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f6 v0) v0) (f6 (f6 v0)))) (and (=> (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1))) (not (= (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0))))))))) (=> (= (not (xor (= (not (= (f6 v0) (f6 v0))) (p1 v2)) (ite (p0 (f2 v2 v2) v2) (= (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2)) (f0 (f2 v2 v2) v1 v2)) (xor (p3 (f3 v1) (f6 v0)) (distinct (f6 v0) (f6 v0)))))) (p2 (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))))) (xor (not (= (and (not (= (ite (p3 (f2 v2 v2) (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2))) (= (ite (p2 (ite (distinct v0 (f6 v0)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2))) (f6 v0) (f1 v2 (f2 v2 v2))) (= (f6 (f6 v0)) (f6 v0)) (= (f6 (f6 v0)) (f6 v0))) (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))))) (p1 (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))))) (p4 v2 (f2 v2 v2)))))) (or (not (xor (and (xor (=> (=> (distinct (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) (f3 v1))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f3 v1)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))))) (p1 (f1 v2 (f2 v2 v2)))) (not (p3 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (= (not (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (or (ite (and (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)) (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (and (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)) (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (p3 (f2 v2 v2) (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)))) (p2 (ite (distinct v0 (f6 v0)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2))) v0 (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2))))))) (or (xor (p4 (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (p3 v1 (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0))) (p4 (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)))))) (= (and (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (p1 (f1 v2 (f2 v2 v2)))) (and (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (p1 (f1 v2 (f2 v2 v2))))))) (=> (not (xor (=> (ite (= (xor (or (or (= (p3 (f2 v2 v2) (f6 v0)) (p1 (f1 v2 (f2 v2 v2)))) (= (distinct (ite (distinct (f6 v0) (f6 v0)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (p2 (f3 v1) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (not (distinct (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)) (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))))))) (xor (=> (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0))))) (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)))) (=> (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0))))) (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)))))) (p3 v1 (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0)))))) (= (or (p0 (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (xor (not (p4 (ite (p3 (f3 v1) (f6 v0)) (f1 v2 (f2 v2 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2)))) (f2 v2 v2))) (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))))) (distinct (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2)) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))))) (not (not (= (f0 (f2 v2 v2) v1 v2) (ite (p1 (f1 v2 (f2 v2 v2))) v1 (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))))))) (= (or (and (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f2 v2 v2)) (distinct (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f6 v0) v0) (f6 (f6 v0)))) (and (=> (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1))) (not (= (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0))))))) (or (and (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f2 v2 v2)) (distinct (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f6 v0) v0) (f6 (f6 v0)))) (and (=> (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1))) (not (= (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0))))))))) (=> (= (not (xor (= (not (= (f6 v0) (f6 v0))) (p1 v2)) (ite (p0 (f2 v2 v2) v2) (= (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2)) (f0 (f2 v2 v2) v1 v2)) (xor (p3 (f3 v1) (f6 v0)) (distinct (f6 v0) (f6 v0)))))) (p2 (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))))) (xor (not (= (and (not (= (ite (p3 (f2 v2 v2) (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2))) (= (ite (p2 (ite (distinct v0 (f6 v0)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2))) (f6 v0) (f1 v2 (f2 v2 v2))) (= (f6 (f6 v0)) (f6 v0)) (= (f6 (f6 v0)) (f6 v0))) (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))))) (p1 (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))))) (p4 v2 (f2 v2 v2)))))) (or (not (xor (and (xor (=> (=> (distinct (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) (f3 v1))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f3 v1)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))))) (p1 (f1 v2 (f2 v2 v2)))) (not (p3 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (= (not (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (or (ite (and (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)) (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (and (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)) (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (p3 (f2 v2 v2) (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)))) (p2 (ite (distinct v0 (f6 v0)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2))) v0 (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2))))))) (or (xor (p4 (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (p3 v1 (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0))) (p4 (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)))))) (= (and (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (p1 (f1 v2 (f2 v2 v2)))) (and (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (p1 (f1 v2 (f2 v2 v2)))))))) (not (or (p1 (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2)))) (xor (not (ite (and (distinct (f6 v0) (f6 v0)) (= v0 (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0)))))) (xor (not (p1 (ite (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) v2 (f1 v2 (f2 v2 v2))))) (p0 (ite (distinct (f6 v0) (f6 v0)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (ite (p3 (f3 v1) (f6 v0)) (f1 v2 (f2 v2 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2)))))) (and (distinct (f6 v0) (f6 v0)) (= v0 (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0)))))))) (not (xor (= (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (p1 (f1 v2 (f2 v2 v2))) (= (f0 (f2 v2 v2) v1 v2) v1)))))))))
(assert (= BAV1 (=> (and (=> (not (xor (=> (ite (= (xor (or (or (= (p3 (f2 v2 v2) (f6 v0)) (p1 (f1 v2 (f2 v2 v2)))) (= (distinct (ite (distinct (f6 v0) (f6 v0)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (p2 (f3 v1) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (not (distinct (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)) (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))))))) (xor (=> (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0))))) (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)))) (=> (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0))))) (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)))))) (p3 v1 (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0)))))) (= (or (p0 (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (xor (not (p4 (ite (p3 (f3 v1) (f6 v0)) (f1 v2 (f2 v2 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2)))) (f2 v2 v2))) (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))))) (distinct (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2)) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))))) (not (not (= (f0 (f2 v2 v2) v1 v2) (ite (p1 (f1 v2 (f2 v2 v2))) v1 (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))))))) (= (or (and (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f2 v2 v2)) (distinct (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f6 v0) v0) (f6 (f6 v0)))) (and (=> (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1))) (not (= (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0))))))) (or (and (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f2 v2 v2)) (distinct (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f6 v0) v0) (f6 (f6 v0)))) (and (=> (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1))) (not (= (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0))))))))) (=> (= (not (xor (= (not (= (f6 v0) (f6 v0))) (p1 v2)) (ite (p0 (f2 v2 v2) v2) (= (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2)) (f0 (f2 v2 v2) v1 v2)) (xor (p3 (f3 v1) (f6 v0)) (distinct (f6 v0) (f6 v0)))))) (p2 (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))))) (xor (not (= (and (not (= (ite (p3 (f2 v2 v2) (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2))) (= (ite (p2 (ite (distinct v0 (f6 v0)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2))) (f6 v0) (f1 v2 (f2 v2 v2))) (= (f6 (f6 v0)) (f6 v0)) (= (f6 (f6 v0)) (f6 v0))) (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))))) (p1 (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))))) (p4 v2 (f2 v2 v2)))))) (or (not (xor (and (xor (=> (=> (distinct (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) (f3 v1))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f3 v1)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))))) (p1 (f1 v2 (f2 v2 v2)))) (not (p3 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (= (not (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (or (ite (and (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)) (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (and (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)) (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (p3 (f2 v2 v2) (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)))) (p2 (ite (distinct v0 (f6 v0)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2))) v0 (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2))))))) (or (xor (p4 (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (p3 v1 (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0))) (p4 (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)))))) (= (and (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (p1 (f1 v2 (f2 v2 v2)))) (and (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (p1 (f1 v2 (f2 v2 v2))))))) (=> (not (xor (=> (ite (= (xor (or (or (= (p3 (f2 v2 v2) (f6 v0)) (p1 (f1 v2 (f2 v2 v2)))) (= (distinct (ite (distinct (f6 v0) (f6 v0)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (p2 (f3 v1) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (not (distinct (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)) (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))))))) (xor (=> (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0))))) (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)))) (=> (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0))))) (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)))))) (p3 v1 (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0)))))) (= (or (p0 (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (xor (not (p4 (ite (p3 (f3 v1) (f6 v0)) (f1 v2 (f2 v2 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2)))) (f2 v2 v2))) (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))))) (distinct (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2)) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))))) (not (not (= (f0 (f2 v2 v2) v1 v2) (ite (p1 (f1 v2 (f2 v2 v2))) v1 (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))))))) (= (or (and (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f2 v2 v2)) (distinct (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f6 v0) v0) (f6 (f6 v0)))) (and (=> (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1))) (not (= (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0))))))) (or (and (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f2 v2 v2)) (distinct (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f6 v0) v0) (f6 (f6 v0)))) (and (=> (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1))) (not (= (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0))))))))) (=> (= (not (xor (= (not (= (f6 v0) (f6 v0))) (p1 v2)) (ite (p0 (f2 v2 v2) v2) (= (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2)) (f0 (f2 v2 v2) v1 v2)) (xor (p3 (f3 v1) (f6 v0)) (distinct (f6 v0) (f6 v0)))))) (p2 (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))))) (xor (not (= (and (not (= (ite (p3 (f2 v2 v2) (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2))) (= (ite (p2 (ite (distinct v0 (f6 v0)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2))) (f6 v0) (f1 v2 (f2 v2 v2))) (= (f6 (f6 v0)) (f6 v0)) (= (f6 (f6 v0)) (f6 v0))) (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))))) (p1 (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))))) (p4 v2 (f2 v2 v2)))))) (or (not (xor (and (xor (=> (=> (distinct (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) (f3 v1))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f3 v1)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))))) (p1 (f1 v2 (f2 v2 v2)))) (not (p3 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (= (not (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (or (ite (and (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)) (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (and (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)) (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (p3 (f2 v2 v2) (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)))) (p2 (ite (distinct v0 (f6 v0)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2))) v0 (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2))))))) (or (xor (p4 (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (p3 v1 (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0))) (p4 (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)))))) (= (and (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (p1 (f1 v2 (f2 v2 v2)))) (and (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (p1 (f1 v2 (f2 v2 v2)))))))) (not (or (p1 (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2)))) (xor (not (ite (and (distinct (f6 v0) (f6 v0)) (= v0 (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0)))))) (xor (not (p1 (ite (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) v2 (f1 v2 (f2 v2 v2))))) (p0 (ite (distinct (f6 v0) (f6 v0)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (ite (p3 (f3 v1) (f6 v0)) (f1 v2 (f2 v2 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2)))))) (and (distinct (f6 v0) (f6 v0)) (= v0 (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0)))))))) (not (xor (= (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (p1 (f1 v2 (f2 v2 v2))) (= (f0 (f2 v2 v2) v1 v2) v1))))))))))
(assert (= BAV2 (and (=> (not (xor (=> (ite (= (xor (or (or (= (p3 (f2 v2 v2) (f6 v0)) (p1 (f1 v2 (f2 v2 v2)))) (= (distinct (ite (distinct (f6 v0) (f6 v0)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (p2 (f3 v1) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (not (distinct (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)) (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))))))) (xor (=> (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0))))) (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)))) (=> (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0))))) (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)))))) (p3 v1 (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0)))))) (= (or (p0 (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (xor (not (p4 (ite (p3 (f3 v1) (f6 v0)) (f1 v2 (f2 v2 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2)))) (f2 v2 v2))) (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))))) (distinct (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2)) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))))) (not (not (= (f0 (f2 v2 v2) v1 v2) (ite (p1 (f1 v2 (f2 v2 v2))) v1 (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))))))) (= (or (and (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f2 v2 v2)) (distinct (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f6 v0) v0) (f6 (f6 v0)))) (and (=> (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1))) (not (= (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0))))))) (or (and (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f2 v2 v2)) (distinct (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f6 v0) v0) (f6 (f6 v0)))) (and (=> (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1))) (not (= (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0))))))))) (=> (= (not (xor (= (not (= (f6 v0) (f6 v0))) (p1 v2)) (ite (p0 (f2 v2 v2) v2) (= (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2)) (f0 (f2 v2 v2) v1 v2)) (xor (p3 (f3 v1) (f6 v0)) (distinct (f6 v0) (f6 v0)))))) (p2 (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))))) (xor (not (= (and (not (= (ite (p3 (f2 v2 v2) (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2))) (= (ite (p2 (ite (distinct v0 (f6 v0)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2))) (f6 v0) (f1 v2 (f2 v2 v2))) (= (f6 (f6 v0)) (f6 v0)) (= (f6 (f6 v0)) (f6 v0))) (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))))) (p1 (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))))) (p4 v2 (f2 v2 v2)))))) (or (not (xor (and (xor (=> (=> (distinct (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) (f3 v1))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f3 v1)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))))) (p1 (f1 v2 (f2 v2 v2)))) (not (p3 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (= (not (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (or (ite (and (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)) (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (and (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)) (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (p3 (f2 v2 v2) (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)))) (p2 (ite (distinct v0 (f6 v0)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2))) v0 (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2))))))) (or (xor (p4 (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (p3 v1 (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0))) (p4 (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)))))) (= (and (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (p1 (f1 v2 (f2 v2 v2)))) (and (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (p1 (f1 v2 (f2 v2 v2))))))) (=> (not (xor (=> (ite (= (xor (or (or (= (p3 (f2 v2 v2) (f6 v0)) (p1 (f1 v2 (f2 v2 v2)))) (= (distinct (ite (distinct (f6 v0) (f6 v0)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (p2 (f3 v1) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (not (distinct (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)) (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))))))) (xor (=> (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0))))) (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)))) (=> (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0))))) (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)))))) (p3 v1 (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0)))))) (= (or (p0 (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (xor (not (p4 (ite (p3 (f3 v1) (f6 v0)) (f1 v2 (f2 v2 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2)))) (f2 v2 v2))) (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))))) (distinct (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2)) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))))) (not (not (= (f0 (f2 v2 v2) v1 v2) (ite (p1 (f1 v2 (f2 v2 v2))) v1 (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))))))) (= (or (and (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f2 v2 v2)) (distinct (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f6 v0) v0) (f6 (f6 v0)))) (and (=> (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1))) (not (= (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0))))))) (or (and (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f2 v2 v2)) (distinct (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f6 v0) v0) (f6 (f6 v0)))) (and (=> (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1))) (not (= (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0))))))))) (=> (= (not (xor (= (not (= (f6 v0) (f6 v0))) (p1 v2)) (ite (p0 (f2 v2 v2) v2) (= (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2)) (f0 (f2 v2 v2) v1 v2)) (xor (p3 (f3 v1) (f6 v0)) (distinct (f6 v0) (f6 v0)))))) (p2 (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))))) (xor (not (= (and (not (= (ite (p3 (f2 v2 v2) (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2))) (= (ite (p2 (ite (distinct v0 (f6 v0)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2))) (f6 v0) (f1 v2 (f2 v2 v2))) (= (f6 (f6 v0)) (f6 v0)) (= (f6 (f6 v0)) (f6 v0))) (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))))) (p1 (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))))) (p4 v2 (f2 v2 v2)))))) (or (not (xor (and (xor (=> (=> (distinct (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) (f3 v1))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f3 v1)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))))) (p1 (f1 v2 (f2 v2 v2)))) (not (p3 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (= (not (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (or (ite (and (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)) (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (and (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)) (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (p3 (f2 v2 v2) (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)))) (p2 (ite (distinct v0 (f6 v0)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2))) v0 (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2))))))) (or (xor (p4 (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (p3 v1 (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0))) (p4 (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)))))) (= (and (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (p1 (f1 v2 (f2 v2 v2)))) (and (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (p1 (f1 v2 (f2 v2 v2))))))))))
(assert (= BAV3 (=> (not (xor (=> (ite (= (xor (or (or (= (p3 (f2 v2 v2) (f6 v0)) (p1 (f1 v2 (f2 v2 v2)))) (= (distinct (ite (distinct (f6 v0) (f6 v0)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (p2 (f3 v1) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (not (distinct (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)) (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))))))) (xor (=> (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0))))) (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)))) (=> (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0))))) (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)))))) (p3 v1 (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0)))))) (= (or (p0 (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (xor (not (p4 (ite (p3 (f3 v1) (f6 v0)) (f1 v2 (f2 v2 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2)))) (f2 v2 v2))) (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))))) (distinct (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2)) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))))) (not (not (= (f0 (f2 v2 v2) v1 v2) (ite (p1 (f1 v2 (f2 v2 v2))) v1 (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))))))) (= (or (and (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f2 v2 v2)) (distinct (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f6 v0) v0) (f6 (f6 v0)))) (and (=> (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1))) (not (= (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0))))))) (or (and (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f2 v2 v2)) (distinct (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f6 v0) v0) (f6 (f6 v0)))) (and (=> (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1))) (not (= (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0))))))))) (=> (= (not (xor (= (not (= (f6 v0) (f6 v0))) (p1 v2)) (ite (p0 (f2 v2 v2) v2) (= (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2)) (f0 (f2 v2 v2) v1 v2)) (xor (p3 (f3 v1) (f6 v0)) (distinct (f6 v0) (f6 v0)))))) (p2 (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))))) (xor (not (= (and (not (= (ite (p3 (f2 v2 v2) (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2))) (= (ite (p2 (ite (distinct v0 (f6 v0)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2))) (f6 v0) (f1 v2 (f2 v2 v2))) (= (f6 (f6 v0)) (f6 v0)) (= (f6 (f6 v0)) (f6 v0))) (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))))) (p1 (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))))) (p4 v2 (f2 v2 v2)))))) (or (not (xor (and (xor (=> (=> (distinct (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) (f3 v1))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f3 v1)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))))) (p1 (f1 v2 (f2 v2 v2)))) (not (p3 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (= (not (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (or (ite (and (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)) (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (and (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)) (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (p3 (f2 v2 v2) (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)))) (p2 (ite (distinct v0 (f6 v0)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2))) v0 (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2))))))) (or (xor (p4 (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (p3 v1 (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0))) (p4 (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)))))) (= (and (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (p1 (f1 v2 (f2 v2 v2)))) (and (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (p1 (f1 v2 (f2 v2 v2)))))))))
(assert (= BAV4 (xor (=> (ite (= (xor (or (or (= (p3 (f2 v2 v2) (f6 v0)) (p1 (f1 v2 (f2 v2 v2)))) (= (distinct (ite (distinct (f6 v0) (f6 v0)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (p2 (f3 v1) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (not (distinct (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)) (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))))))) (xor (=> (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0))))) (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)))) (=> (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0))))) (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)))))) (p3 v1 (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0)))))) (= (or (p0 (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (xor (not (p4 (ite (p3 (f3 v1) (f6 v0)) (f1 v2 (f2 v2 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2)))) (f2 v2 v2))) (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))))) (distinct (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2)) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))))) (not (not (= (f0 (f2 v2 v2) v1 v2) (ite (p1 (f1 v2 (f2 v2 v2))) v1 (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))))))) (= (or (and (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f2 v2 v2)) (distinct (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f6 v0) v0) (f6 (f6 v0)))) (and (=> (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1))) (not (= (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0))))))) (or (and (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f2 v2 v2)) (distinct (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f6 v0) v0) (f6 (f6 v0)))) (and (=> (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1))) (not (= (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0))))))))) (=> (= (not (xor (= (not (= (f6 v0) (f6 v0))) (p1 v2)) (ite (p0 (f2 v2 v2) v2) (= (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2)) (f0 (f2 v2 v2) v1 v2)) (xor (p3 (f3 v1) (f6 v0)) (distinct (f6 v0) (f6 v0)))))) (p2 (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))))) (xor (not (= (and (not (= (ite (p3 (f2 v2 v2) (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2))) (= (ite (p2 (ite (distinct v0 (f6 v0)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2))) (f6 v0) (f1 v2 (f2 v2 v2))) (= (f6 (f6 v0)) (f6 v0)) (= (f6 (f6 v0)) (f6 v0))) (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))))) (p1 (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))))) (p4 v2 (f2 v2 v2)))))))
(assert (= BAV5 (=> (ite (= (xor (or (or (= (p3 (f2 v2 v2) (f6 v0)) (p1 (f1 v2 (f2 v2 v2)))) (= (distinct (ite (distinct (f6 v0) (f6 v0)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (p2 (f3 v1) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (not (distinct (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)) (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))))))) (xor (=> (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0))))) (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)))) (=> (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0))))) (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)))))) (p3 v1 (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0)))))) (= (or (p0 (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (xor (not (p4 (ite (p3 (f3 v1) (f6 v0)) (f1 v2 (f2 v2 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2)))) (f2 v2 v2))) (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))))) (distinct (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2)) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))))) (not (not (= (f0 (f2 v2 v2) v1 v2) (ite (p1 (f1 v2 (f2 v2 v2))) v1 (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))))))) (= (or (and (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f2 v2 v2)) (distinct (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f6 v0) v0) (f6 (f6 v0)))) (and (=> (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1))) (not (= (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0))))))) (or (and (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f2 v2 v2)) (distinct (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f6 v0) v0) (f6 (f6 v0)))) (and (=> (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1))) (not (= (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0)))))))))))
(assert (= BAV6 (= (xor (or (or (= (p3 (f2 v2 v2) (f6 v0)) (p1 (f1 v2 (f2 v2 v2)))) (= (distinct (ite (distinct (f6 v0) (f6 v0)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (p2 (f3 v1) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (not (distinct (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)) (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))))))) (xor (=> (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0))))) (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)))) (=> (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0))))) (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)))))) (p3 v1 (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))))))))
(assert (= BAV7 (xor (or (or (= (p3 (f2 v2 v2) (f6 v0)) (p1 (f1 v2 (f2 v2 v2)))) (= (distinct (ite (distinct (f6 v0) (f6 v0)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (p2 (f3 v1) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (not (distinct (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)) (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))))))) (xor (=> (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0))))) (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)))) (=> (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0))))) (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))))))))
(assert (= BAV8 (or (or (= (p3 (f2 v2 v2) (f6 v0)) (p1 (f1 v2 (f2 v2 v2)))) (= (distinct (ite (distinct (f6 v0) (f6 v0)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (p2 (f3 v1) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (not (distinct (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)) (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0)))))))))
(assert (= BAV9 (or (= (p3 (f2 v2 v2) (f6 v0)) (p1 (f1 v2 (f2 v2 v2)))) (= (distinct (ite (distinct (f6 v0) (f6 v0)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (p2 (f3 v1) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2))))))
(assert (= BAV10 (= (p3 (f2 v2 v2) (f6 v0)) (p1 (f1 v2 (f2 v2 v2))))))
(assert (= BAV11 (= (distinct (ite (distinct (f6 v0) (f6 v0)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (p2 (f3 v1) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))))
(assert (= BAV12 (distinct (ite (distinct (f6 v0) (f6 v0)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)))))
(assert (= BAV13 (distinct (f6 v0) (f6 v0))))
(assert (= BAV14 (= (f6 (f6 v0)) (f6 v0))))
(assert (= BAV15 (distinct (f6 v0) (f6 v0))))
(assert (= BAV16 (= (f0 (f2 v2 v2) v1 v2) v1)))
(assert (= BAV17 (distinct (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)) (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0)))))))
(assert (= BAV18 (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))
(assert (= BAV19 (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))
(assert (= BAV20 (xor (=> (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0))))) (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)))) (=> (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0))))) (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)))))))
(assert (= BAV21 (=> (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0))))) (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))))))
(assert (= BAV22 (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0)))))))
(assert (= BAV23 (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))))))))
(assert (= BAV24 (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))))
(assert (= BAV25 (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))
(assert (= BAV26 (distinct (f6 v0) (f6 v0))))
(assert (= BAV27 (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))
(assert (= BAV28 (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))))
(assert (= BAV29 (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))
(assert (= BAV30 (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))
(assert (= BAV31 (distinct (f6 v0) (f6 v0))))
(assert (= BAV32 (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0)))))
(assert (= BAV33 (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2))))))
(assert (= BAV34 (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))))
(assert (= BAV35 (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))))))
(assert (= BAV36 (= (f0 (f2 v2 v2) v1 v2) v1)))
(assert (= BAV37 (distinct v0 (f6 v0))))
(assert (= BAV38 (=> (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0))))) (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))))))
(assert (= BAV39 (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0)))))))
(assert (= BAV40 (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))))))))
(assert (= BAV41 (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))))
(assert (= BAV42 (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))
(assert (= BAV43 (distinct (f6 v0) (f6 v0))))
(assert (= BAV44 (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))
(assert (= BAV45 (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))))
(assert (= BAV46 (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))
(assert (= BAV47 (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))
(assert (= BAV48 (distinct (f6 v0) (f6 v0))))
(assert (= BAV49 (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0)))))
(assert (= BAV50 (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2))))))
(assert (= BAV51 (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))))
(assert (= BAV52 (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))))))
(assert (= BAV53 (= (f0 (f2 v2 v2) v1 v2) v1)))
(assert (= BAV54 (distinct v0 (f6 v0))))
(assert (= BAV55 (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))
(assert (= BAV56 (= (or (p0 (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (xor (not (p4 (ite (p3 (f3 v1) (f6 v0)) (f1 v2 (f2 v2 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2)))) (f2 v2 v2))) (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))))) (distinct (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2)) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))))))
(assert (= BAV57 (or (p0 (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (xor (not (p4 (ite (p3 (f3 v1) (f6 v0)) (f1 v2 (f2 v2 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2)))) (f2 v2 v2))) (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0)))))))
(assert (= BAV58 (distinct (f6 v0) (f6 v0))))
(assert (= BAV59 (xor (not (p4 (ite (p3 (f3 v1) (f6 v0)) (f1 v2 (f2 v2 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2)))) (f2 v2 v2))) (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))))))
(assert (= BAV60 (distinct (f6 v0) (f6 v0))))
(assert (= BAV61 (distinct (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2)) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))))))
(assert (= BAV62 (= (f0 (f2 v2 v2) v1 v2) (ite (p1 (f1 v2 (f2 v2 v2))) v1 (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))))))
(assert (= BAV63 (= (f6 (f6 v0)) (f6 v0))))
(assert (= BAV64 (= (or (and (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f2 v2 v2)) (distinct (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f6 v0) v0) (f6 (f6 v0)))) (and (=> (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1))) (not (= (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0))))))) (or (and (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f2 v2 v2)) (distinct (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f6 v0) v0) (f6 (f6 v0)))) (and (=> (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1))) (not (= (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0))))))))))
(assert (= BAV65 (or (and (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f2 v2 v2)) (distinct (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f6 v0) v0) (f6 (f6 v0)))) (and (=> (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1))) (not (= (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0)))))))))
(assert (= BAV66 (and (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f2 v2 v2)) (distinct (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f6 v0) v0) (f6 (f6 v0))))))
(assert (= BAV67 (distinct (f6 v0) (f6 v0))))
(assert (= BAV68 (distinct (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f6 v0) v0) (f6 (f6 v0)))))
(assert (= BAV69 (= (f0 (f2 v2 v2) v1 v2) v1)))
(assert (= BAV70 (and (=> (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1))) (not (= (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0))))))))
(assert (= BAV71 (=> (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))))
(assert (= BAV72 (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))))))
(assert (= BAV73 (= (f6 v0) (f6 v0))))
(assert (= BAV74 (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))))
(assert (= BAV75 (distinct (f6 v0) (f6 v0))))
(assert (= BAV76 (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))
(assert (= BAV77 (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1))))
(assert (= BAV78 (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0))))
(assert (= BAV79 (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))
(assert (= BAV80 (= (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0))))))
(assert (= BAV81 (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0)))))
(assert (= BAV82 (distinct v0 (f6 v0))))
(assert (= BAV83 (or (and (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f2 v2 v2)) (distinct (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f6 v0) v0) (f6 (f6 v0)))) (and (=> (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1))) (not (= (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0)))))))))
(assert (= BAV84 (and (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f2 v2 v2)) (distinct (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f6 v0) v0) (f6 (f6 v0))))))
(assert (= BAV85 (distinct (f6 v0) (f6 v0))))
(assert (= BAV86 (distinct (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f6 v0) v0) (f6 (f6 v0)))))
(assert (= BAV87 (= (f0 (f2 v2 v2) v1 v2) v1)))
(assert (= BAV88 (and (=> (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1))) (not (= (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0))))))))
(assert (= BAV89 (=> (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))))
(assert (= BAV90 (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))))))
(assert (= BAV91 (= (f6 v0) (f6 v0))))
(assert (= BAV92 (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))))
(assert (= BAV93 (distinct (f6 v0) (f6 v0))))
(assert (= BAV94 (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))
(assert (= BAV95 (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1))))
(assert (= BAV96 (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0))))
(assert (= BAV97 (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))
(assert (= BAV98 (= (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0))))))
(assert (= BAV99 (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0)))))
(assert (= BAV100 (distinct v0 (f6 v0))))
(assert (= BAV101 (=> (= (not (xor (= (not (= (f6 v0) (f6 v0))) (p1 v2)) (ite (p0 (f2 v2 v2) v2) (= (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2)) (f0 (f2 v2 v2) v1 v2)) (xor (p3 (f3 v1) (f6 v0)) (distinct (f6 v0) (f6 v0)))))) (p2 (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))))) (xor (not (= (and (not (= (ite (p3 (f2 v2 v2) (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2))) (= (ite (p2 (ite (distinct v0 (f6 v0)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2))) (f6 v0) (f1 v2 (f2 v2 v2))) (= (f6 (f6 v0)) (f6 v0)) (= (f6 (f6 v0)) (f6 v0))) (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))))) (p1 (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))))) (p4 v2 (f2 v2 v2))))))
(assert (= BAV102 (= (not (xor (= (not (= (f6 v0) (f6 v0))) (p1 v2)) (ite (p0 (f2 v2 v2) v2) (= (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2)) (f0 (f2 v2 v2) v1 v2)) (xor (p3 (f3 v1) (f6 v0)) (distinct (f6 v0) (f6 v0)))))) (p2 (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2)))))))
(assert (= BAV103 (xor (= (not (= (f6 v0) (f6 v0))) (p1 v2)) (ite (p0 (f2 v2 v2) v2) (= (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2)) (f0 (f2 v2 v2) v1 v2)) (xor (p3 (f3 v1) (f6 v0)) (distinct (f6 v0) (f6 v0)))))))
(assert (= BAV104 (= (not (= (f6 v0) (f6 v0))) (p1 v2))))
(assert (= BAV105 (= (f6 v0) (f6 v0))))
(assert (= BAV106 (= (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2)) (f0 (f2 v2 v2) v1 v2))))
(assert (= BAV107 (= (f6 (f6 v0)) (f6 v0))))
(assert (= BAV108 (xor (p3 (f3 v1) (f6 v0)) (distinct (f6 v0) (f6 v0)))))
(assert (= BAV109 (distinct (f6 v0) (f6 v0))))
(assert (= BAV110 (distinct (f6 v0) (f6 v0))))
(assert (= BAV111 (distinct (f6 v0) (f6 v0))))
(assert (= BAV112 (xor (not (= (and (not (= (ite (p3 (f2 v2 v2) (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2))) (= (ite (p2 (ite (distinct v0 (f6 v0)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2))) (f6 v0) (f1 v2 (f2 v2 v2))) (= (f6 (f6 v0)) (f6 v0)) (= (f6 (f6 v0)) (f6 v0))) (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))))) (p1 (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))))) (p4 v2 (f2 v2 v2)))))
(assert (= BAV113 (= (and (not (= (ite (p3 (f2 v2 v2) (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2))) (= (ite (p2 (ite (distinct v0 (f6 v0)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2))) (f6 v0) (f1 v2 (f2 v2 v2))) (= (f6 (f6 v0)) (f6 v0)) (= (f6 (f6 v0)) (f6 v0))) (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))))) (p1 (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))))))
(assert (= BAV114 (and (not (= (ite (p3 (f2 v2 v2) (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2))) (= (ite (p2 (ite (distinct v0 (f6 v0)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2))) (f6 v0) (f1 v2 (f2 v2 v2))) (= (f6 (f6 v0)) (f6 v0)) (= (f6 (f6 v0)) (f6 v0))) (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))))))))
(assert (= BAV115 (= (ite (p3 (f2 v2 v2) (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2))))
(assert (= BAV116 (= (ite (p2 (ite (distinct v0 (f6 v0)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2))) (f6 v0) (f1 v2 (f2 v2 v2))) (= (f6 (f6 v0)) (f6 v0)) (= (f6 (f6 v0)) (f6 v0))) (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))))))
(assert (= BAV117 (distinct v0 (f6 v0))))
(assert (= BAV118 (= (f6 (f6 v0)) (f6 v0))))
(assert (= BAV119 (= (f6 (f6 v0)) (f6 v0))))
(assert (= BAV120 (= (f6 (f6 v0)) (f6 v0))))
(assert (= BAV121 (distinct (f6 v0) (f6 v0))))
(assert (= BAV122 (or (not (xor (and (xor (=> (=> (distinct (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) (f3 v1))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f3 v1)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))))) (p1 (f1 v2 (f2 v2 v2)))) (not (p3 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (= (not (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (or (ite (and (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)) (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (and (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)) (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (p3 (f2 v2 v2) (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)))) (p2 (ite (distinct v0 (f6 v0)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2))) v0 (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2))))))) (or (xor (p4 (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (p3 v1 (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0))) (p4 (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)))))) (= (and (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (p1 (f1 v2 (f2 v2 v2)))) (and (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (p1 (f1 v2 (f2 v2 v2))))))))
(assert (= BAV123 (xor (and (xor (=> (=> (distinct (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) (f3 v1))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f3 v1)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))))) (p1 (f1 v2 (f2 v2 v2)))) (not (p3 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (= (not (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (or (ite (and (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)) (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (and (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)) (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (p3 (f2 v2 v2) (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)))) (p2 (ite (distinct v0 (f6 v0)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2))) v0 (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2))))))) (or (xor (p4 (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (p3 v1 (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0))) (p4 (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)))))))
(assert (= BAV124 (and (xor (=> (=> (distinct (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) (f3 v1))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f3 v1)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))))) (p1 (f1 v2 (f2 v2 v2)))) (not (p3 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (= (not (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (or (ite (and (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)) (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (and (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)) (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (p3 (f2 v2 v2) (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)))) (p2 (ite (distinct v0 (f6 v0)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2))) v0 (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))))))))
(assert (= BAV125 (xor (=> (=> (distinct (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) (f3 v1))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f3 v1)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))))) (p1 (f1 v2 (f2 v2 v2)))) (not (p3 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))))))
(assert (= BAV126 (=> (=> (distinct (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) (f3 v1))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f3 v1)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))))) (p1 (f1 v2 (f2 v2 v2))))))
(assert (= BAV127 (=> (distinct (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) (f3 v1))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f3 v1)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2)))))))
(assert (= BAV128 (distinct (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) (f3 v1)))))
(assert (= BAV129 (= (f6 (f6 v0)) (f6 v0))))
(assert (= BAV130 (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f3 v1)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))))))
(assert (= BAV131 (= (f6 (f6 v0)) (f6 v0))))
(assert (= BAV132 (= (f6 (f6 v0)) (f6 v0))))
(assert (= BAV133 (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))
(assert (= BAV134 (= (not (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (or (ite (and (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)) (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (and (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)) (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (p3 (f2 v2 v2) (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)))) (p2 (ite (distinct v0 (f6 v0)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2))) v0 (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2))))))))
(assert (= BAV135 (distinct (f6 v0) (f6 v0))))
(assert (= BAV136 (or (ite (and (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)) (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (and (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)) (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (p3 (f2 v2 v2) (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)))) (p2 (ite (distinct v0 (f6 v0)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2))) v0 (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))))))
(assert (= BAV137 (and (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)) (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))))
(assert (= BAV138 (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0))))
(assert (= BAV139 (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))
(assert (= BAV140 (distinct (f6 v0) (f6 v0))))
(assert (= BAV141 (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))))
(assert (= BAV142 (and (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)) (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))))
(assert (= BAV143 (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0))))
(assert (= BAV144 (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))
(assert (= BAV145 (distinct (f6 v0) (f6 v0))))
(assert (= BAV146 (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))))
(assert (= BAV147 (distinct v0 (f6 v0))))
(assert (= BAV148 (distinct v0 (f6 v0))))
(assert (= BAV149 (= (f6 (f6 v0)) (f6 v0))))
(assert (= BAV150 (distinct (f6 v0) (f6 v0))))
(assert (= BAV151 (or (xor (p4 (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (p3 v1 (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0))) (p4 (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2))))))
(assert (= BAV152 (xor (p4 (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (p3 v1 (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)))))
(assert (= BAV153 (distinct (f6 v0) (f6 v0))))
(assert (= BAV154 (distinct (f6 v0) (f6 v0))))
(assert (= BAV155 (distinct (f6 v0) (f6 v0))))
(assert (= BAV156 (= (and (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (p1 (f1 v2 (f2 v2 v2)))) (and (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (p1 (f1 v2 (f2 v2 v2)))))))
(assert (= BAV157 (and (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (p1 (f1 v2 (f2 v2 v2))))))
(assert (= BAV158 (and (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (p1 (f1 v2 (f2 v2 v2))))))
(assert (= BAV159 (=> (not (xor (=> (ite (= (xor (or (or (= (p3 (f2 v2 v2) (f6 v0)) (p1 (f1 v2 (f2 v2 v2)))) (= (distinct (ite (distinct (f6 v0) (f6 v0)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (p2 (f3 v1) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (not (distinct (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)) (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))))))) (xor (=> (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0))))) (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)))) (=> (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0))))) (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)))))) (p3 v1 (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0)))))) (= (or (p0 (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (xor (not (p4 (ite (p3 (f3 v1) (f6 v0)) (f1 v2 (f2 v2 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2)))) (f2 v2 v2))) (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))))) (distinct (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2)) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))))) (not (not (= (f0 (f2 v2 v2) v1 v2) (ite (p1 (f1 v2 (f2 v2 v2))) v1 (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))))))) (= (or (and (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f2 v2 v2)) (distinct (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f6 v0) v0) (f6 (f6 v0)))) (and (=> (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1))) (not (= (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0))))))) (or (and (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f2 v2 v2)) (distinct (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f6 v0) v0) (f6 (f6 v0)))) (and (=> (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1))) (not (= (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0))))))))) (=> (= (not (xor (= (not (= (f6 v0) (f6 v0))) (p1 v2)) (ite (p0 (f2 v2 v2) v2) (= (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2)) (f0 (f2 v2 v2) v1 v2)) (xor (p3 (f3 v1) (f6 v0)) (distinct (f6 v0) (f6 v0)))))) (p2 (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))))) (xor (not (= (and (not (= (ite (p3 (f2 v2 v2) (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2))) (= (ite (p2 (ite (distinct v0 (f6 v0)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2))) (f6 v0) (f1 v2 (f2 v2 v2))) (= (f6 (f6 v0)) (f6 v0)) (= (f6 (f6 v0)) (f6 v0))) (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))))) (p1 (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))))) (p4 v2 (f2 v2 v2)))))) (or (not (xor (and (xor (=> (=> (distinct (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) (f3 v1))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f3 v1)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))))) (p1 (f1 v2 (f2 v2 v2)))) (not (p3 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (= (not (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (or (ite (and (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)) (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (and (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)) (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (p3 (f2 v2 v2) (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)))) (p2 (ite (distinct v0 (f6 v0)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2))) v0 (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2))))))) (or (xor (p4 (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (p3 v1 (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0))) (p4 (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)))))) (= (and (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (p1 (f1 v2 (f2 v2 v2)))) (and (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (p1 (f1 v2 (f2 v2 v2)))))))))
(assert (= BAV160 (xor (=> (ite (= (xor (or (or (= (p3 (f2 v2 v2) (f6 v0)) (p1 (f1 v2 (f2 v2 v2)))) (= (distinct (ite (distinct (f6 v0) (f6 v0)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (p2 (f3 v1) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (not (distinct (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)) (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))))))) (xor (=> (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0))))) (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)))) (=> (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0))))) (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)))))) (p3 v1 (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0)))))) (= (or (p0 (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (xor (not (p4 (ite (p3 (f3 v1) (f6 v0)) (f1 v2 (f2 v2 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2)))) (f2 v2 v2))) (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))))) (distinct (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2)) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))))) (not (not (= (f0 (f2 v2 v2) v1 v2) (ite (p1 (f1 v2 (f2 v2 v2))) v1 (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))))))) (= (or (and (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f2 v2 v2)) (distinct (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f6 v0) v0) (f6 (f6 v0)))) (and (=> (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1))) (not (= (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0))))))) (or (and (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f2 v2 v2)) (distinct (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f6 v0) v0) (f6 (f6 v0)))) (and (=> (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1))) (not (= (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0))))))))) (=> (= (not (xor (= (not (= (f6 v0) (f6 v0))) (p1 v2)) (ite (p0 (f2 v2 v2) v2) (= (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2)) (f0 (f2 v2 v2) v1 v2)) (xor (p3 (f3 v1) (f6 v0)) (distinct (f6 v0) (f6 v0)))))) (p2 (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))))) (xor (not (= (and (not (= (ite (p3 (f2 v2 v2) (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2))) (= (ite (p2 (ite (distinct v0 (f6 v0)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2))) (f6 v0) (f1 v2 (f2 v2 v2))) (= (f6 (f6 v0)) (f6 v0)) (= (f6 (f6 v0)) (f6 v0))) (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))))) (p1 (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))))) (p4 v2 (f2 v2 v2)))))))
(assert (= BAV161 (=> (ite (= (xor (or (or (= (p3 (f2 v2 v2) (f6 v0)) (p1 (f1 v2 (f2 v2 v2)))) (= (distinct (ite (distinct (f6 v0) (f6 v0)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (p2 (f3 v1) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (not (distinct (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)) (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))))))) (xor (=> (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0))))) (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)))) (=> (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0))))) (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)))))) (p3 v1 (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0)))))) (= (or (p0 (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (xor (not (p4 (ite (p3 (f3 v1) (f6 v0)) (f1 v2 (f2 v2 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2)))) (f2 v2 v2))) (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))))) (distinct (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2)) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))))) (not (not (= (f0 (f2 v2 v2) v1 v2) (ite (p1 (f1 v2 (f2 v2 v2))) v1 (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))))))) (= (or (and (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f2 v2 v2)) (distinct (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f6 v0) v0) (f6 (f6 v0)))) (and (=> (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1))) (not (= (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0))))))) (or (and (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f2 v2 v2)) (distinct (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f6 v0) v0) (f6 (f6 v0)))) (and (=> (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1))) (not (= (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0)))))))))))
(assert (= BAV162 (= (xor (or (or (= (p3 (f2 v2 v2) (f6 v0)) (p1 (f1 v2 (f2 v2 v2)))) (= (distinct (ite (distinct (f6 v0) (f6 v0)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (p2 (f3 v1) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (not (distinct (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)) (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))))))) (xor (=> (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0))))) (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)))) (=> (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0))))) (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)))))) (p3 v1 (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))))))))
(assert (= BAV163 (xor (or (or (= (p3 (f2 v2 v2) (f6 v0)) (p1 (f1 v2 (f2 v2 v2)))) (= (distinct (ite (distinct (f6 v0) (f6 v0)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (p2 (f3 v1) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (not (distinct (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)) (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))))))) (xor (=> (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0))))) (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)))) (=> (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0))))) (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))))))))
(assert (= BAV164 (or (or (= (p3 (f2 v2 v2) (f6 v0)) (p1 (f1 v2 (f2 v2 v2)))) (= (distinct (ite (distinct (f6 v0) (f6 v0)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (p2 (f3 v1) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (not (distinct (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)) (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0)))))))))
(assert (= BAV165 (or (= (p3 (f2 v2 v2) (f6 v0)) (p1 (f1 v2 (f2 v2 v2)))) (= (distinct (ite (distinct (f6 v0) (f6 v0)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (p2 (f3 v1) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2))))))
(assert (= BAV166 (= (p3 (f2 v2 v2) (f6 v0)) (p1 (f1 v2 (f2 v2 v2))))))
(assert (= BAV167 (= (distinct (ite (distinct (f6 v0) (f6 v0)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (p2 (f3 v1) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))))
(assert (= BAV168 (distinct (ite (distinct (f6 v0) (f6 v0)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)))))
(assert (= BAV169 (distinct (f6 v0) (f6 v0))))
(assert (= BAV170 (= (f6 (f6 v0)) (f6 v0))))
(assert (= BAV171 (distinct (f6 v0) (f6 v0))))
(assert (= BAV172 (= (f0 (f2 v2 v2) v1 v2) v1)))
(assert (= BAV173 (distinct (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)) (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0)))))))
(assert (= BAV174 (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))
(assert (= BAV175 (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))
(assert (= BAV176 (xor (=> (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0))))) (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)))) (=> (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0))))) (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)))))))
(assert (= BAV177 (=> (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0))))) (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))))))
(assert (= BAV178 (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0)))))))
(assert (= BAV179 (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))))))))
(assert (= BAV180 (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))))
(assert (= BAV181 (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))
(assert (= BAV182 (distinct (f6 v0) (f6 v0))))
(assert (= BAV183 (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))
(assert (= BAV184 (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))))
(assert (= BAV185 (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))
(assert (= BAV186 (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))
(assert (= BAV187 (distinct (f6 v0) (f6 v0))))
(assert (= BAV188 (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0)))))
(assert (= BAV189 (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2))))))
(assert (= BAV190 (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))))
(assert (= BAV191 (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))))))
(assert (= BAV192 (= (f0 (f2 v2 v2) v1 v2) v1)))
(assert (= BAV193 (distinct v0 (f6 v0))))
(assert (= BAV194 (=> (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0))))) (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))))))
(assert (= BAV195 (= (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))) (not (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0)))))))
(assert (= BAV196 (or (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))))))))
(assert (= BAV197 (= (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))))
(assert (= BAV198 (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))
(assert (= BAV199 (distinct (f6 v0) (f6 v0))))
(assert (= BAV200 (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))
(assert (= BAV201 (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0)))))))
(assert (= BAV202 (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))
(assert (= BAV203 (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))
(assert (= BAV204 (distinct (f6 v0) (f6 v0))))
(assert (= BAV205 (or (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))) (distinct v0 (f6 v0)))))
(assert (= BAV206 (xor (p1 (f1 v2 (f2 v2 v2))) (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2))))))
(assert (= BAV207 (xor (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (p1 (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f1 v2 (f2 v2 v2)) v2)))))
(assert (= BAV208 (distinct (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))))))
(assert (= BAV209 (= (f0 (f2 v2 v2) v1 v2) v1)))
(assert (= BAV210 (distinct v0 (f6 v0))))
(assert (= BAV211 (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))
(assert (= BAV212 (= (or (p0 (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (xor (not (p4 (ite (p3 (f3 v1) (f6 v0)) (f1 v2 (f2 v2 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2)))) (f2 v2 v2))) (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))))) (distinct (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2)) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))))))
(assert (= BAV213 (or (p0 (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (xor (not (p4 (ite (p3 (f3 v1) (f6 v0)) (f1 v2 (f2 v2 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2)))) (f2 v2 v2))) (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0)))))))
(assert (= BAV214 (distinct (f6 v0) (f6 v0))))
(assert (= BAV215 (xor (not (p4 (ite (p3 (f3 v1) (f6 v0)) (f1 v2 (f2 v2 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2)))) (f2 v2 v2))) (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))))))
(assert (= BAV216 (distinct (f6 v0) (f6 v0))))
(assert (= BAV217 (distinct (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2)) (ite (p4 v2 (f2 v2 v2)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))))))
(assert (= BAV218 (= (f0 (f2 v2 v2) v1 v2) (ite (p1 (f1 v2 (f2 v2 v2))) v1 (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))))))
(assert (= BAV219 (= (f6 (f6 v0)) (f6 v0))))
(assert (= BAV220 (= (or (and (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f2 v2 v2)) (distinct (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f6 v0) v0) (f6 (f6 v0)))) (and (=> (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1))) (not (= (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0))))))) (or (and (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f2 v2 v2)) (distinct (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f6 v0) v0) (f6 (f6 v0)))) (and (=> (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1))) (not (= (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0))))))))))
(assert (= BAV221 (or (and (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f2 v2 v2)) (distinct (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f6 v0) v0) (f6 (f6 v0)))) (and (=> (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1))) (not (= (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0)))))))))
(assert (= BAV222 (and (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f2 v2 v2)) (distinct (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f6 v0) v0) (f6 (f6 v0))))))
(assert (= BAV223 (distinct (f6 v0) (f6 v0))))
(assert (= BAV224 (distinct (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f6 v0) v0) (f6 (f6 v0)))))
(assert (= BAV225 (= (f0 (f2 v2 v2) v1 v2) v1)))
(assert (= BAV226 (and (=> (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1))) (not (= (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0))))))))
(assert (= BAV227 (=> (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))))
(assert (= BAV228 (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))))))
(assert (= BAV229 (= (f6 v0) (f6 v0))))
(assert (= BAV230 (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))))
(assert (= BAV231 (distinct (f6 v0) (f6 v0))))
(assert (= BAV232 (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))
(assert (= BAV233 (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1))))
(assert (= BAV234 (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0))))
(assert (= BAV235 (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))
(assert (= BAV236 (= (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0))))))
(assert (= BAV237 (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0)))))
(assert (= BAV238 (distinct v0 (f6 v0))))
(assert (= BAV239 (or (and (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f2 v2 v2)) (distinct (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f6 v0) v0) (f6 (f6 v0)))) (and (=> (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1))) (not (= (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0)))))))))
(assert (= BAV240 (and (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f2 v2 v2)) (distinct (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f6 v0) v0) (f6 (f6 v0))))))
(assert (= BAV241 (distinct (f6 v0) (f6 v0))))
(assert (= BAV242 (distinct (ite (= (f0 (f2 v2 v2) v1 v2) v1) (f6 v0) v0) (f6 (f6 v0)))))
(assert (= BAV243 (= (f0 (f2 v2 v2) v1 v2) v1)))
(assert (= BAV244 (and (=> (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1))) (not (= (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0))))))))
(assert (= BAV245 (=> (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))))
(assert (= BAV246 (= (= (f6 v0) (f6 v0)) (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))))))
(assert (= BAV247 (= (f6 v0) (f6 v0))))
(assert (= BAV248 (distinct (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p4 v2 (f2 v2 v2)) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))))
(assert (= BAV249 (distinct (f6 v0) (f6 v0))))
(assert (= BAV250 (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))
(assert (= BAV251 (=> (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0)) (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1))))
(assert (= BAV252 (distinct (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f6 v0) (f6 (f6 v0))) (f6 v0))))
(assert (= BAV253 (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))
(assert (= BAV254 (= (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0))))))
(assert (= BAV255 (distinct (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)) (f6 (f6 v0)))))
(assert (= BAV256 (distinct v0 (f6 v0))))
(assert (= BAV257 (=> (= (not (xor (= (not (= (f6 v0) (f6 v0))) (p1 v2)) (ite (p0 (f2 v2 v2) v2) (= (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2)) (f0 (f2 v2 v2) v1 v2)) (xor (p3 (f3 v1) (f6 v0)) (distinct (f6 v0) (f6 v0)))))) (p2 (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))))) (xor (not (= (and (not (= (ite (p3 (f2 v2 v2) (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2))) (= (ite (p2 (ite (distinct v0 (f6 v0)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2))) (f6 v0) (f1 v2 (f2 v2 v2))) (= (f6 (f6 v0)) (f6 v0)) (= (f6 (f6 v0)) (f6 v0))) (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))))) (p1 (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))))) (p4 v2 (f2 v2 v2))))))
(assert (= BAV258 (= (not (xor (= (not (= (f6 v0) (f6 v0))) (p1 v2)) (ite (p0 (f2 v2 v2) v2) (= (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2)) (f0 (f2 v2 v2) v1 v2)) (xor (p3 (f3 v1) (f6 v0)) (distinct (f6 v0) (f6 v0)))))) (p2 (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) (f6 (f6 v0))) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2)))))))
(assert (= BAV259 (xor (= (not (= (f6 v0) (f6 v0))) (p1 v2)) (ite (p0 (f2 v2 v2) v2) (= (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2)) (f0 (f2 v2 v2) v1 v2)) (xor (p3 (f3 v1) (f6 v0)) (distinct (f6 v0) (f6 v0)))))))
(assert (= BAV260 (= (not (= (f6 v0) (f6 v0))) (p1 v2))))
(assert (= BAV261 (= (f6 v0) (f6 v0))))
(assert (= BAV262 (= (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2)) (f0 (f2 v2 v2) v1 v2))))
(assert (= BAV263 (= (f6 (f6 v0)) (f6 v0))))
(assert (= BAV264 (xor (p3 (f3 v1) (f6 v0)) (distinct (f6 v0) (f6 v0)))))
(assert (= BAV265 (distinct (f6 v0) (f6 v0))))
(assert (= BAV266 (distinct (f6 v0) (f6 v0))))
(assert (= BAV267 (distinct (f6 v0) (f6 v0))))
(assert (= BAV268 (xor (not (= (and (not (= (ite (p3 (f2 v2 v2) (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2))) (= (ite (p2 (ite (distinct v0 (f6 v0)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2))) (f6 v0) (f1 v2 (f2 v2 v2))) (= (f6 (f6 v0)) (f6 v0)) (= (f6 (f6 v0)) (f6 v0))) (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))))) (p1 (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))))) (p4 v2 (f2 v2 v2)))))
(assert (= BAV269 (= (and (not (= (ite (p3 (f2 v2 v2) (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2))) (= (ite (p2 (ite (distinct v0 (f6 v0)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2))) (f6 v0) (f1 v2 (f2 v2 v2))) (= (f6 (f6 v0)) (f6 v0)) (= (f6 (f6 v0)) (f6 v0))) (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))))) (p1 (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))))))
(assert (= BAV270 (and (not (= (ite (p3 (f2 v2 v2) (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2))) (= (ite (p2 (ite (distinct v0 (f6 v0)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2))) (f6 v0) (f1 v2 (f2 v2 v2))) (= (f6 (f6 v0)) (f6 v0)) (= (f6 (f6 v0)) (f6 v0))) (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))))))))
(assert (= BAV271 (= (ite (p3 (f2 v2 v2) (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0)) (f0 (f2 v2 v2) v1 v2))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2))))
(assert (= BAV272 (= (ite (p2 (ite (distinct v0 (f6 v0)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2))) (f6 v0) (f1 v2 (f2 v2 v2))) (= (f6 (f6 v0)) (f6 v0)) (= (f6 (f6 v0)) (f6 v0))) (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))))))
(assert (= BAV273 (distinct v0 (f6 v0))))
(assert (= BAV274 (= (f6 (f6 v0)) (f6 v0))))
(assert (= BAV275 (= (f6 (f6 v0)) (f6 v0))))
(assert (= BAV276 (= (f6 (f6 v0)) (f6 v0))))
(assert (= BAV277 (distinct (f6 v0) (f6 v0))))
(assert (= BAV278 (or (not (xor (and (xor (=> (=> (distinct (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) (f3 v1))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f3 v1)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))))) (p1 (f1 v2 (f2 v2 v2)))) (not (p3 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (= (not (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (or (ite (and (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)) (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (and (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)) (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (p3 (f2 v2 v2) (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)))) (p2 (ite (distinct v0 (f6 v0)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2))) v0 (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2))))))) (or (xor (p4 (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (p3 v1 (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0))) (p4 (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)))))) (= (and (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (p1 (f1 v2 (f2 v2 v2)))) (and (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (p1 (f1 v2 (f2 v2 v2))))))))
(assert (= BAV279 (xor (and (xor (=> (=> (distinct (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) (f3 v1))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f3 v1)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))))) (p1 (f1 v2 (f2 v2 v2)))) (not (p3 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (= (not (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (or (ite (and (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)) (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (and (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)) (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (p3 (f2 v2 v2) (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)))) (p2 (ite (distinct v0 (f6 v0)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2))) v0 (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2))))))) (or (xor (p4 (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (p3 v1 (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0))) (p4 (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)))))))
(assert (= BAV280 (and (xor (=> (=> (distinct (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) (f3 v1))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f3 v1)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))))) (p1 (f1 v2 (f2 v2 v2)))) (not (p3 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0)))) (= (not (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (or (ite (and (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)) (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (and (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)) (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (p3 (f2 v2 v2) (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)))) (p2 (ite (distinct v0 (f6 v0)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2))) v0 (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))))))))
(assert (= BAV281 (xor (=> (=> (distinct (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) (f3 v1))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f3 v1)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))))) (p1 (f1 v2 (f2 v2 v2)))) (not (p3 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0))))))
(assert (= BAV282 (=> (=> (distinct (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) (f3 v1))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f3 v1)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))))) (p1 (f1 v2 (f2 v2 v2))))))
(assert (= BAV283 (=> (distinct (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) (f3 v1))) (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f3 v1)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2)))))))
(assert (= BAV284 (distinct (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) (f3 v1)))))
(assert (= BAV285 (= (f6 (f6 v0)) (f6 v0))))
(assert (= BAV286 (= (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f3 v1)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))))))
(assert (= BAV287 (= (f6 (f6 v0)) (f6 v0))))
(assert (= BAV288 (= (f6 (f6 v0)) (f6 v0))))
(assert (= BAV289 (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))
(assert (= BAV290 (= (not (p4 (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (ite (p4 (f1 v2 (f2 v2 v2)) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2)))) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))) (or (ite (and (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)) (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (and (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)) (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (p3 (f2 v2 v2) (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)))) (p2 (ite (distinct v0 (f6 v0)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2))) v0 (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2))))))))
(assert (= BAV291 (distinct (f6 v0) (f6 v0))))
(assert (= BAV292 (or (ite (and (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)) (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (and (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)) (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))) (p3 (f2 v2 v2) (ite (distinct v0 (f6 v0)) (f6 v0) (f6 v0)))) (p2 (ite (distinct v0 (f6 v0)) (ite (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2))) v0 (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))))))
(assert (= BAV293 (and (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)) (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))))
(assert (= BAV294 (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0))))
(assert (= BAV295 (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))
(assert (= BAV296 (distinct (f6 v0) (f6 v0))))
(assert (= BAV297 (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))))
(assert (= BAV298 (and (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)) (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2)))))
(assert (= BAV299 (distinct (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 v0) (f6 v0)) (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0))))
(assert (= BAV300 (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))
(assert (= BAV301 (distinct (f6 v0) (f6 v0))))
(assert (= BAV302 (distinct (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (f2 v2 v2))))
(assert (= BAV303 (distinct v0 (f6 v0))))
(assert (= BAV304 (distinct v0 (f6 v0))))
(assert (= BAV305 (= (f6 (f6 v0)) (f6 v0))))
(assert (= BAV306 (distinct (f6 v0) (f6 v0))))
(assert (= BAV307 (or (xor (p4 (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (p3 v1 (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0))) (p4 (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2))))))
(assert (= BAV308 (xor (p4 (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (p3 v1 (ite (distinct (f6 v0) (f6 v0)) (f6 v0) v0)))))
(assert (= BAV309 (distinct (f6 v0) (f6 v0))))
(assert (= BAV310 (distinct (f6 v0) (f6 v0))))
(assert (= BAV311 (distinct (f6 v0) (f6 v0))))
(assert (= BAV312 (= (and (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (p1 (f1 v2 (f2 v2 v2)))) (and (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (p1 (f1 v2 (f2 v2 v2)))))))
(assert (= BAV313 (and (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (p1 (f1 v2 (f2 v2 v2))))))
(assert (= BAV314 (and (p0 (f3 v1) (f1 v2 (f2 v2 v2))) (p1 (f1 v2 (f2 v2 v2))))))
(assert (= BAV315 (or (p1 (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2)))) (xor (not (ite (and (distinct (f6 v0) (f6 v0)) (= v0 (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0)))))) (xor (not (p1 (ite (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) v2 (f1 v2 (f2 v2 v2))))) (p0 (ite (distinct (f6 v0) (f6 v0)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (ite (p3 (f3 v1) (f6 v0)) (f1 v2 (f2 v2 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2)))))) (and (distinct (f6 v0) (f6 v0)) (= v0 (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0)))))))) (not (xor (= (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (p1 (f1 v2 (f2 v2 v2))) (= (f0 (f2 v2 v2) v1 v2) v1))))))))
(assert (= BAV316 (distinct (f6 v0) (f6 v0))))
(assert (= BAV317 (xor (not (ite (and (distinct (f6 v0) (f6 v0)) (= v0 (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0)))))) (xor (not (p1 (ite (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) v2 (f1 v2 (f2 v2 v2))))) (p0 (ite (distinct (f6 v0) (f6 v0)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (ite (p3 (f3 v1) (f6 v0)) (f1 v2 (f2 v2 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2)))))) (and (distinct (f6 v0) (f6 v0)) (= v0 (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0)))))))) (not (xor (= (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (p1 (f1 v2 (f2 v2 v2))) (= (f0 (f2 v2 v2) v1 v2) v1)))))))
(assert (= BAV318 (and (distinct (f6 v0) (f6 v0)) (= v0 (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))))))))
(assert (= BAV319 (distinct (f6 v0) (f6 v0))))
(assert (= BAV320 (= v0 (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0)))))))
(assert (= BAV321 (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))
(assert (= BAV322 (xor (not (p1 (ite (p2 v1 (f6 v0) (f1 v2 (f2 v2 v2))) v2 (f1 v2 (f2 v2 v2))))) (p0 (ite (distinct (f6 v0) (f6 v0)) (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) (ite (= (f6 (f6 v0)) (f6 v0)) (f2 v2 v2) (f2 v2 v2))) (ite (p3 (f3 v1) (f6 v0)) (f1 v2 (f2 v2 v2)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (p3 (f4 (f6 (f6 v0)) (f2 v2 v2)) (f6 (f6 v0))) (f1 v2 (f2 v2 v2)) (ite (distinct (f6 v0) (f6 v0)) (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))) (f1 v2 (f2 v2 v2))))))))
(assert (= BAV323 (distinct (f6 v0) (f6 v0))))
(assert (= BAV324 (= (f6 (f6 v0)) (f6 v0))))
(assert (= BAV325 (distinct (f6 v0) (f6 v0))))
(assert (= BAV326 (and (distinct (f6 v0) (f6 v0)) (= v0 (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0))))))))
(assert (= BAV327 (distinct (f6 v0) (f6 v0))))
(assert (= BAV328 (= v0 (ite (p4 (f1 v2 (f2 v2 v2)) (f5 (f1 v2 (f2 v2 v2)) (f6 v0))) (f6 (f6 v0)) (ite (p1 (f1 v2 (f2 v2 v2))) (ite (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1) (f6 (f6 v0)) v0) (f6 (f6 v0)))))))
(assert (= BAV329 (= (f0 (f0 (f3 v1) (f2 v2 v2) (f1 v2 (f2 v2 v2))) (f4 (f6 (f6 v0)) (f2 v2 v2)) v2) v1)))
(assert (= BAV330 (xor (= (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2))) (ite (p1 (f1 v2 (f2 v2 v2))) (p1 (f1 v2 (f2 v2 v2))) (= (f0 (f2 v2 v2) v1 v2) v1)))))
(assert (= BAV331 (= (f1 v2 (f2 v2 v2)) (f1 v2 (f2 v2 v2)))))
(assert (= BAV332 (= (f0 (f2 v2 v2) v1 v2) v1)))
(check-sat)
(get-model)