(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(define-sort Elt () Int)
(define-sort mySet ()
  (Set Elt ))
(define-fun smt_set_emp () mySet (as emptyset mySet))
(declare-fun S () (Set Int))
(declare-fun T () (Set Int))
(declare-fun x () Int)
(assert (or (not (= S smt_set_emp)) (member x T)))
(assert (= smt_set_emp (ite (member x T) (union (union smt_set_emp (singleton x)) S) S)))
(assert (= BAV1 (or (not (= S smt_set_emp)) (member x T))))
(assert (= BAV2 (= S smt_set_emp)))
(assert (= BAV3 (= smt_set_emp (ite (member x T) (union (union smt_set_emp (singleton x)) S) S))))
(check-sat)
(get-model)