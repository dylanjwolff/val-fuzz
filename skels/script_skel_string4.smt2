(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const GEN14 Int)
(declare-const GEN13 Int)
(declare-const GEN12 String)
(get-model)
(declare-const GEN11 String)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 String)
(declare-const GEN4 String)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(set-option :smt.string_solver z3str3)
(declare-fun c2 () Int)
(assert (<= GEN1 c2))
(assert (<= c2 GEN2))
(assert (not (<= GEN3 (str.indexof GEN4 (str.substr GEN5 GEN6 c2) GEN7))))
(assert (= BAV1 (<= GEN1 c2)))
(assert (= BAV2 (<= c2 GEN2)))
(assert (= BAV3 (<= GEN3 (str.indexof GEN4 (str.substr GEN5 GEN6 c2) GEN7))))
(assert (= BAV4 (<= GEN8 c2)))
(assert (= BAV5 (<= c2 GEN9)))
(assert (= BAV6 (<= GEN10 (str.indexof GEN11 (str.substr GEN12 GEN13 c2) GEN14))))
(check-sat)
(get-model)
(exit)
(reset)
(set-option :smt.string_solver seq)
(set-option :model_validate true)
(declare-fun c2 () Int)
(assert (<= GEN8 c2))
(assert (<= c2 GEN9))
(assert (not (<= GEN10 (str.indexof GEN11 (str.substr GEN12 GEN13 c2) GEN14))))
(check-sat)
(get-model)