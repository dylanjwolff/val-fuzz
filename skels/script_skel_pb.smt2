(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const GEN13 Int)
(declare-const GEN12 Int)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(set-option :produce-models true)
(set-option :produce-unsat-cores true)
(declare-const a Int)
(declare-const b Int)
(declare-const c Int)
(declare-const d Int)
(assert (! (<= 0 a) :named a-lower))
(assert (! (<= a 1) :named a-upper))
(assert (! (<= 0 b) :named b-lower))
(assert (! (<= b 1) :named b-upper))
(assert (! (<= 0 c) :named c-lower))
(assert (! (<= c 1) :named c-upper))
(assert (<= 0 d))
(assert (<= d 1))
(assert (! (<= (+ a b d) 1) :named at-most-one))
(assert (! (or (= (+ (* 2 a) c) 1) (= (+ a (* 2 d)) 1)) :named complex))
(apply simplify :print-dependencies true)
(echo "after solving...")
(apply (and-then simplify solve-eqs) :print-dependencies true)
(echo "with pb2bv")
(apply (and-then simplify solve-eqs pb2bv simplify) :print-dependencies true :print-model-converter true)
(assert (= BAV1 (<= 0 a)))
(assert (= BAV2 (<= a 1)))
(assert (= BAV3 (<= 0 b)))
(assert (= BAV4 (<= b 1)))
(assert (= BAV5 (<= 0 c)))
(assert (= BAV6 (<= c 1)))
(assert (= BAV7 (<= 0 d)))
(assert (= BAV8 (<= d 1)))
(assert (= BAV9 (<= (+ a b d) 1)))
(assert (= BAV10 (or (= (+ (* 2 a) c) 1) (= (+ a (* 2 d)) 1))))
(assert (= BAV11 (= (+ (* 2 a) c) 1)))
(assert (= BAV12 (= (+ a (* 2 d)) 1)))