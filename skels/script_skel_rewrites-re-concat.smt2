(set-info :smt-lib-version 2.5)
(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const GEN19 String)
(declare-const GEN18 String)
(declare-const GEN17 String)
(declare-const GEN16 String)
(declare-const GEN15 String)
(declare-const GEN14 String)
(declare-const GEN13 String)
(declare-const GEN12 String)
(declare-const GEN11 String)
(declare-const GEN10 String)
(declare-const GEN9 String)
(declare-const GEN8 String)
(declare-const GEN7 String)
(declare-const GEN6 String)
(declare-const GEN5 String)
(declare-const GEN4 Int)
(declare-const GEN3 String)
(declare-const GEN2 String)
(declare-const GEN1 String)
(declare-fun x () String)
(assert (str.in.re x (re.++ (str.to.re GEN1) (re.* (str.to.re GEN2)) (re.* (str.to.re GEN3)))))
(declare-fun y () String)
(assert (< (str.len y) GEN4))
(assert (or (not (str.in.re x (re.++ (str.to.re GEN5) (re.* (str.to.re GEN6)) (re.* (str.to.re GEN7)) (re.* (str.to.re GEN8))))) (not (str.in.re x (re.++ (str.to.re GEN9) (str.to.re GEN10) (re.* (str.to.re GEN11)) (str.to.re GEN12) (re.* (str.to.re GEN13))))) (not (str.in.re x (re.++ (str.to.re GEN14) (re.* (str.to.re GEN15)) (str.to.re GEN16) (re.* (str.to.re GEN17)) (str.to.re GEN18) (re.* (str.to.re GEN19))))) (str.in.re y (re.++ re.allchar re.allchar (re.* re.allchar) re.allchar)) (str.in.re y (re.++ re.allchar re.allchar re.allchar))))
(assert (= BAV1 (< (str.len y) GEN4)))
(assert (= BAV2 (or (not (str.in.re x (re.++ (str.to.re GEN5) (re.* (str.to.re GEN6)) (re.* (str.to.re GEN7)) (re.* (str.to.re GEN8))))) (not (str.in.re x (re.++ (str.to.re GEN9) (str.to.re GEN10) (re.* (str.to.re GEN11)) (str.to.re GEN12) (re.* (str.to.re GEN13))))) (not (str.in.re x (re.++ (str.to.re GEN14) (re.* (str.to.re GEN15)) (str.to.re GEN16) (re.* (str.to.re GEN17)) (str.to.re GEN18) (re.* (str.to.re GEN19))))) (str.in.re y (re.++ re.allchar re.allchar (re.* re.allchar) re.allchar)) (str.in.re y (re.++ re.allchar re.allchar re.allchar)))))
(check-sat)
(get-model)