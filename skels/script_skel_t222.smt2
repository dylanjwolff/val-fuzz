(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const GEN22 Int)
(declare-const GEN21 Int)
(declare-const GEN20 Int)
(declare-const GEN19 Int)
(declare-const GEN18 Int)
(declare-const GEN17 Int)
(declare-const GEN16 Int)
(declare-const GEN15 Int)
(declare-const GEN14 Int)
(declare-const GEN13 Int)
(declare-const GEN12 Int)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(set-option :produce-unsat-cores true)
(declare-fun p (Int) Bool)
(assert (! (or (and (p 0) (p 1) (p 2)) (and (p 3) (p 4) (p 5))) :named a1))
(assert (! (iff (p 6) (and (p 8) (p 9))) :named a2))
(assert (! (or (and (p 0) (p 1) (p 2)) (p 10)) :named a3))
(assert (or (p 11) (p 12) (p 13)))
(assert (or (and (p 20) (p 21) (p 22)) (and (p 23) (p 24) (p 25))))
(apply (and-then (! simplify :elim-and true) solve-eqs tseitin-cnf) :print-dependencies true)
(apply (and-then (! simplify :elim-and true) solve-eqs (! tseitin-cnf :distributivity false)) :print-dependencies true)
(assert (= BAV1 (or (and (p 0) (p 1) (p 2)) (and (p 3) (p 4) (p 5)))))
(assert (= BAV2 (and (p 0) (p 1) (p 2))))
(assert (= BAV3 (and (p 3) (p 4) (p 5))))
(assert (= BAV4 (and (p 8) (p 9))))
(assert (= BAV5 (or (and (p 0) (p 1) (p 2)) (p 10))))
(assert (= BAV6 (and (p 0) (p 1) (p 2))))
(assert (= BAV7 (or (p 11) (p 12) (p 13))))
(assert (= BAV8 (or (and (p 20) (p 21) (p 22)) (and (p 23) (p 24) (p 25)))))
(assert (= BAV9 (and (p 20) (p 21) (p 22))))
(assert (= BAV10 (and (p 23) (p 24) (p 25))))