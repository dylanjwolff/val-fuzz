(set-info :smt-lib-version 2.6)
(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const BAV23 Bool)
(declare-const BAV24 Bool)
(declare-const BAV25 Bool)
(declare-const BAV26 Bool)
(declare-const BAV27 Bool)
(declare-const BAV28 Bool)
(declare-const BAV29 Bool)
(declare-const BAV30 Bool)
(declare-const BAV31 Bool)
(declare-const BAV32 Bool)
(declare-const BAV33 Bool)
(declare-const BAV34 Bool)
(declare-const BAV35 Bool)
(declare-const BAV36 Bool)
(declare-const BAV37 Bool)
(declare-const BAV38 Bool)
(declare-const BAV39 Bool)
(declare-const BAV40 Bool)
(declare-const BAV41 Bool)
(declare-const BAV42 Bool)
(declare-const BAV43 Bool)
(declare-const BAV44 Bool)
(declare-const BAV45 Bool)
(declare-const BAV46 Bool)
(declare-const BAV47 Bool)
(declare-const BAV48 Bool)
(declare-const BAV49 Bool)
(declare-const BAV50 Bool)
(declare-const BAV51 Bool)
(declare-const BAV52 Bool)
(declare-const BAV53 Bool)
(declare-const BAV54 Bool)
(declare-const BAV55 Bool)
(declare-const BAV56 Bool)
(declare-const BAV57 Bool)
(declare-const BAV58 Bool)
(declare-const BAV59 Bool)
(declare-const BAV60 Bool)
(declare-const BAV61 Bool)
(declare-const BAV62 Bool)
(declare-const BAV63 Bool)
(declare-const BAV64 Bool)
(declare-const BAV65 Bool)
(declare-const BAV66 Bool)
(declare-const BAV67 Bool)
(declare-const BAV68 Bool)
(declare-const BAV69 Bool)
(declare-const BAV70 Bool)
(declare-const BAV71 Bool)
(declare-const BAV72 Bool)
(declare-const BAV73 Bool)
(declare-const BAV74 Bool)
(declare-const BAV75 Bool)
(declare-const BAV76 Bool)
(declare-const BAV77 Bool)
(declare-const BAV78 Bool)
(declare-const BAV79 Bool)
(declare-const BAV80 Bool)
(declare-const BAV81 Bool)
(declare-const BAV82 Bool)
(declare-const BAV83 Bool)
(declare-const BAV84 Bool)
(declare-const BAV85 Bool)
(declare-const BAV86 Bool)
(declare-const BAV87 Bool)
(declare-const BAV88 Bool)
(declare-const BAV89 Bool)
(declare-const BAV90 Bool)
(declare-const BAV91 Bool)
(declare-const BAV92 Bool)
(declare-const BAV93 Bool)
(declare-const BAV94 Bool)
(declare-const BAV95 Bool)
(declare-const BAV96 Bool)
(declare-const BAV97 Bool)
(declare-const BAV98 Bool)
(declare-const BAV99 Bool)
(declare-const BAV100 Bool)
(declare-const BAV101 Bool)
(declare-const BAV102 Bool)
(declare-const BAV103 Bool)
(declare-const BAV104 Bool)
(declare-const BAV105 Bool)
(declare-const BAV106 Bool)
(declare-const BAV107 Bool)
(declare-const BAV108 Bool)
(declare-const BAV109 Bool)
(declare-const BAV110 Bool)
(declare-const BAV111 Bool)
(declare-const BAV112 Bool)
(declare-const BAV113 Bool)
(declare-const BAV114 Bool)
(declare-const BAV115 Bool)
(declare-const BAV116 Bool)
(declare-const BAV117 Bool)
(declare-const BAV118 Bool)
(declare-const BAV119 Bool)
(declare-const BAV120 Bool)
(declare-const BAV121 Bool)
(declare-const BAV122 Bool)
(declare-const BAV123 Bool)
(declare-const BAV124 Bool)
(declare-const BAV125 Bool)
(declare-const BAV126 Bool)
(declare-const BAV127 Bool)
(declare-const BAV128 Bool)
(declare-const BAV129 Bool)
(declare-const BAV130 Bool)
(declare-const BAV131 Bool)
(declare-const BAV132 Bool)
(declare-const BAV133 Bool)
(declare-const BAV134 Bool)
(declare-const BAV135 Bool)
(declare-const BAV136 Bool)
(declare-const BAV137 Bool)
(declare-const BAV138 Bool)
(declare-const BAV139 Bool)
(declare-const BAV140 Bool)
(declare-const BAV141 Bool)
(declare-const BAV142 Bool)
(declare-const BAV143 Bool)
(declare-const BAV144 Bool)
(declare-const BAV145 Bool)
(declare-const BAV146 Bool)
(declare-const BAV147 Bool)
(declare-const BAV148 Bool)
(declare-const GEN36 Int)
(declare-const GEN35 Int)
(declare-const GEN34 Int)
(declare-const GEN33 Int)
(declare-const GEN32 Int)
(declare-const GEN31 Int)
(declare-const GEN30 Int)
(declare-const GEN29 Int)
(declare-const GEN28 Int)
(declare-const GEN27 Int)
(declare-const GEN26 Int)
(declare-const GEN25 Int)
(declare-const GEN24 Int)
(declare-const GEN23 Int)
(declare-const GEN22 Int)
(declare-const GEN21 Int)
(declare-const GEN20 Int)
(declare-const GEN19 Int)
(declare-const GEN18 Int)
(declare-const GEN17 Int)
(declare-const GEN16 Int)
(declare-const GEN15 Int)
(declare-const GEN14 Int)
(declare-const GEN13 Int)
(declare-const GEN12 Int)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(set-info :source |
Generated by: Cristina Borralleras, Daniel Larraz, Albert Oliveras, Enric Rodriguez-Carbonell, Albert Rubio
Generated on: 2017-04-27
Generator: VeryMax
Application: Termination proving
Target solver: barcelogic
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(declare-fun global_invc1_0 () Int)
(declare-fun lam0n0 () Int)
(declare-fun lam0n2 () Int)
(declare-fun global_invc1_1 () Int)
(declare-fun lam0n1 () Int)
(declare-fun lam1n0 () Int)
(declare-fun lam1n1 () Int)
(declare-fun lam1n3 () Int)
(declare-fun lam1n4 () Int)
(declare-fun lam1n2 () Int)
(declare-fun term_invc1_0 () Int)
(declare-fun lam2n0 () Int)
(declare-fun lam2n1 () Int)
(declare-fun lam2n3 () Int)
(declare-fun lam2n4 () Int)
(declare-fun lam2n5 () Int)
(declare-fun lam2n6 () Int)
(declare-fun lam2n7 () Int)
(declare-fun lam2n8 () Int)
(declare-fun lam2n9 () Int)
(declare-fun lam2n10 () Int)
(declare-fun lam2n11 () Int)
(declare-fun lam2n12 () Int)
(declare-fun lam2n13 () Int)
(declare-fun lam2n2 () Int)
(declare-fun term_invc1_1 () Int)
(declare-fun non_inc1_L () Bool)
(declare-fun lam3n0 () Int)
(declare-fun lam3n1 () Int)
(declare-fun lam3n3 () Int)
(declare-fun lam3n4 () Int)
(declare-fun lam3n5 () Int)
(declare-fun lam3n6 () Int)
(declare-fun lam3n7 () Int)
(declare-fun lam3n8 () Int)
(declare-fun lam3n9 () Int)
(declare-fun lam3n10 () Int)
(declare-fun lam3n11 () Int)
(declare-fun lam3n12 () Int)
(declare-fun lam3n13 () Int)
(declare-fun lam3n15 () Int)
(declare-fun lam3n14 () Int)
(declare-fun lam3n2 () Int)
(declare-fun rfc0 () Int)
(declare-fun disabled1_L () Bool)
(declare-fun bounded1_L () Bool)
(declare-fun lam4n0 () Int)
(declare-fun lam4n1 () Int)
(declare-fun lam4n3 () Int)
(declare-fun lam4n4 () Int)
(declare-fun lam4n5 () Int)
(declare-fun lam4n6 () Int)
(declare-fun lam4n7 () Int)
(declare-fun lam4n8 () Int)
(declare-fun lam4n9 () Int)
(declare-fun lam4n10 () Int)
(declare-fun lam4n11 () Int)
(declare-fun lam4n12 () Int)
(declare-fun lam4n13 () Int)
(declare-fun lam4n14 () Int)
(declare-fun lam4n2 () Int)
(declare-fun rfc1 () Int)
(declare-fun dec1_L () Bool)
(declare-fun lam5n0 () Int)
(declare-fun lam5n1 () Int)
(declare-fun lam5n3 () Int)
(declare-fun lam5n4 () Int)
(declare-fun lam5n5 () Int)
(declare-fun lam5n6 () Int)
(declare-fun lam5n7 () Int)
(declare-fun lam5n8 () Int)
(declare-fun lam5n9 () Int)
(declare-fun lam5n10 () Int)
(declare-fun lam5n11 () Int)
(declare-fun lam5n12 () Int)
(declare-fun lam5n13 () Int)
(declare-fun lam5n14 () Int)
(declare-fun lam5n2 () Int)
(declare-fun bnd_and_dec1_L () Bool)
(declare-fun GLOBAL_NT_1 () Bool)
(declare-fun global_V0_1 () Int)
(declare-fun TERM_NT_1 () Bool)
(declare-fun term_V0_1 () Int)
(declare-fun ALL_NON_INC_0 () Bool)
(declare-fun DIS_OR_ALL_NON_INC_0 () Bool)
(declare-fun SOME_BND_AND_DEC_0 () Bool)
(declare-fun V0_NIV () Int)
(declare-fun V1_NIV () Int)
(assert (and (>= global_invc1_0 (- GEN1)) (<= global_invc1_0 GEN2) (and (>= lam0n0 GEN3) (<= GEN4 lam0n2) (< lam0n2 GEN5) (and (= (* (- GEN6) lam0n0) (+ global_invc1_1 (* (- GEN7) lam0n2))) (= (* lam0n1 GEN8) GEN9) (= (* lam0n1 (- GEN10)) global_invc1_0))) (and (>= lam1n0 GEN11) (>= lam1n1 GEN12) (>= lam1n3 GEN13) (<= GEN14 lam1n4) (< lam1n4 GEN15) (and (= (+ (* (- GEN16) lam1n0) (* lam1n1 (- GEN17)) (* lam1n2 GEN18) (* lam1n3 global_invc1_1)) (+ global_invc1_1 (* (- GEN19) lam1n4))) (= (+ (* lam1n1 (- GEN20)) (* lam1n2 GEN21) (* lam1n3 global_invc1_0)) GEN22) (= (* lam1n2 (- GEN23)) global_invc1_0))) (>= term_invc1_0 (- GEN24)) (<= term_invc1_0 GEN25) (and (>= lam2n0 GEN26) (>= lam2n1 GEN27) (>= lam2n3 GEN28) (>= lam2n4 GEN29) (>= lam2n5 GEN30) (>= lam2n6 GEN31) (>= lam2n7 GEN32) (>= lam2n8 GEN33) (>= lam2n9 GEN34) (>= lam2n10 GEN35) (>= lam2n11 GEN36) (>= lam2n12 0) (<= 0 lam2n13) (< lam2n13 1) (and (= (+ (* (- 1) lam2n0) (* lam2n1 (- 999)) (* lam2n2 1000) (* lam2n3 50001) (* lam2n4 (- 1)) (* lam2n5 1) (* lam2n6 2) (* lam2n7 3) (* lam2n8 55) (* lam2n9 58) (* lam2n10 61) (* lam2n11 62) (* lam2n12 global_invc1_1)) (+ term_invc1_1 (* (- 1) lam2n13))) (= (+ (* lam2n1 (- 1)) (* lam2n2 1) (* lam2n3 (- 1)) (* lam2n4 (- 1)) (* lam2n5 (- 1)) (* lam2n6 (- 1)) (* lam2n7 (- 1)) (* lam2n8 (- 1)) (* lam2n9 (- 1)) (* lam2n10 (- 1)) (* lam2n11 (- 1)) (* lam2n12 global_invc1_0)) 0) (= (* lam2n2 (- 1)) term_invc1_0))) (= non_inc1_L (and (>= lam3n0 0) (>= lam3n1 0) (>= lam3n3 0) (>= lam3n4 0) (>= lam3n5 0) (>= lam3n6 0) (>= lam3n7 0) (>= lam3n8 0) (>= lam3n9 0) (>= lam3n10 0) (>= lam3n11 0) (>= lam3n12 0) (>= lam3n13 0) (<= 0 lam3n15) (< lam3n15 1) (<= lam3n14 1) (>= lam3n14 0) (and (> (+ (* (- 1) lam3n0) (* lam3n1 (- 999)) (* lam3n2 1000) (* lam3n3 50001) (* lam3n4 (- 1)) (* lam3n5 1) (* lam3n6 2) (* lam3n7 3) (* lam3n8 55) (* lam3n9 58) (* lam3n10 61) (* lam3n11 62) (* lam3n12 global_invc1_1) (* lam3n13 term_invc1_1) (* lam3n14 (+ 1 (* (- 1) lam3n15)))) 0) (= (+ (* lam3n1 (- 1)) (* lam3n2 1) (* lam3n3 (- 1)) (* lam3n4 (- 1)) (* lam3n5 (- 1)) (* lam3n6 (- 1)) (* lam3n7 (- 1)) (* lam3n8 (- 1)) (* lam3n9 (- 1)) (* lam3n10 (- 1)) (* lam3n11 (- 1)) (* lam3n12 global_invc1_0) (* lam3n13 term_invc1_0) (* lam3n14 rfc0)) 0) (= (+ (* lam3n2 (- 1)) (* lam3n14 (* (- 1) rfc0))) 0)))) (= disabled1_L (and (= lam3n14 0) non_inc1_L)) (= bounded1_L (and (>= lam4n0 0) (>= lam4n1 0) (>= lam4n3 0) (>= lam4n4 0) (>= lam4n5 0) (>= lam4n6 0) (>= lam4n7 0) (>= lam4n8 0) (>= lam4n9 0) (>= lam4n10 0) (>= lam4n11 0) (>= lam4n12 0) (>= lam4n13 0) (<= 0 lam4n14) (< lam4n14 1) (and (= (+ (* (- 1) lam4n0) (* lam4n1 (- 999)) (* lam4n2 1000) (* lam4n3 50001) (* lam4n4 (- 1)) (* lam4n5 1) (* lam4n6 2) (* lam4n7 3) (* lam4n8 55) (* lam4n9 58) (* lam4n10 61) (* lam4n11 62) (* lam4n12 global_invc1_1) (* lam4n13 term_invc1_1)) (+ (* (- 1) rfc1) (* (- 1) lam4n14))) (= (+ (* lam4n1 (- 1)) (* lam4n2 1) (* lam4n3 (- 1)) (* lam4n4 (- 1)) (* lam4n5 (- 1)) (* lam4n6 (- 1)) (* lam4n7 (- 1)) (* lam4n8 (- 1)) (* lam4n9 (- 1)) (* lam4n10 (- 1)) (* lam4n11 (- 1)) (* lam4n12 global_invc1_0) (* lam4n13 term_invc1_0)) (* (- 1) rfc0)) (= (* lam4n2 (- 1)) 0)))) (= dec1_L (and (>= lam5n0 0) (>= lam5n1 0) (>= lam5n3 0) (>= lam5n4 0) (>= lam5n5 0) (>= lam5n6 0) (>= lam5n7 0) (>= lam5n8 0) (>= lam5n9 0) (>= lam5n10 0) (>= lam5n11 0) (>= lam5n12 0) (>= lam5n13 0) (<= 0 lam5n14) (< lam5n14 1) (and (= (+ (* (- 1) lam5n0) (* lam5n1 (- 999)) (* lam5n2 1000) (* lam5n3 50001) (* lam5n4 (- 1)) (* lam5n5 1) (* lam5n6 2) (* lam5n7 3) (* lam5n8 55) (* lam5n9 58) (* lam5n10 61) (* lam5n11 62) (* lam5n12 global_invc1_1) (* lam5n13 term_invc1_1)) (+ 1 (* (- 1) lam5n14))) (= (+ (* lam5n1 (- 1)) (* lam5n2 1) (* lam5n3 (- 1)) (* lam5n4 (- 1)) (* lam5n5 (- 1)) (* lam5n6 (- 1)) (* lam5n7 (- 1)) (* lam5n8 (- 1)) (* lam5n9 (- 1)) (* lam5n10 (- 1)) (* lam5n11 (- 1)) (* lam5n12 global_invc1_0) (* lam5n13 term_invc1_0)) (* (- 1) rfc0)) (= (* lam5n2 (- 1)) rfc0)))) (= bnd_and_dec1_L (and bounded1_L dec1_L)) (= GLOBAL_NT_1 (not (= global_invc1_0 0))) (or (not (<= (+ global_invc1_1 (* global_invc1_0 global_V0_1)) 0)) (= global_invc1_0 0)) (= TERM_NT_1 (not (= term_invc1_0 0))) (or (and (not (<= (+ term_invc1_1 (* term_invc1_0 term_V0_1)) 0)) (<= (+ (* (- 1) term_V0_1) (- 1)) 0) (<= (+ (* (- 1) term_V0_1) 1) 0) (<= (+ (* (- 1) term_V0_1) 2) 0) (<= (+ (* (- 1) term_V0_1) 3) 0) (<= (+ (* (- 1) term_V0_1) 55) 0) (<= (+ (* (- 1) term_V0_1) 58) 0) (<= (+ (* (- 1) term_V0_1) 61) 0) (<= (+ (* (- 1) term_V0_1) 62) 0)) (= term_invc1_0 0)) (= ALL_NON_INC_0 non_inc1_L) (= DIS_OR_ALL_NON_INC_0 (or disabled1_L ALL_NON_INC_0)) (= SOME_BND_AND_DEC_0 bnd_and_dec1_L) (or (not ALL_NON_INC_0) (and (>= rfc0 (- 2)) (<= rfc0 2) (not (= rfc0 0)) (>= rfc1 0) (or SOME_BND_AND_DEC_0 (or (and (<= (+ (* rfc0 V0_NIV) 1) (* rfc0 V1_NIV)) (>= (* (- 1) V0_NIV) (* (- 1) V1_NIV))) (= rfc0 0))))) (or GLOBAL_NT_1 TERM_NT_1 ALL_NON_INC_0)))
(assert (= BAV1 (and (>= global_invc1_0 (- GEN1)) (<= global_invc1_0 GEN2) (and (>= lam0n0 GEN3) (<= GEN4 lam0n2) (< lam0n2 GEN5) (and (= (* (- GEN6) lam0n0) (+ global_invc1_1 (* (- GEN7) lam0n2))) (= (* lam0n1 GEN8) GEN9) (= (* lam0n1 (- GEN10)) global_invc1_0))) (and (>= lam1n0 GEN11) (>= lam1n1 GEN12) (>= lam1n3 GEN13) (<= GEN14 lam1n4) (< lam1n4 GEN15) (and (= (+ (* (- GEN16) lam1n0) (* lam1n1 (- GEN17)) (* lam1n2 GEN18) (* lam1n3 global_invc1_1)) (+ global_invc1_1 (* (- GEN19) lam1n4))) (= (+ (* lam1n1 (- GEN20)) (* lam1n2 GEN21) (* lam1n3 global_invc1_0)) GEN22) (= (* lam1n2 (- GEN23)) global_invc1_0))) (>= term_invc1_0 (- GEN24)) (<= term_invc1_0 GEN25) (and (>= lam2n0 GEN26) (>= lam2n1 GEN27) (>= lam2n3 GEN28) (>= lam2n4 GEN29) (>= lam2n5 GEN30) (>= lam2n6 GEN31) (>= lam2n7 GEN32) (>= lam2n8 GEN33) (>= lam2n9 GEN34) (>= lam2n10 GEN35) (>= lam2n11 GEN36) (>= lam2n12 0) (<= 0 lam2n13) (< lam2n13 1) (and (= (+ (* (- 1) lam2n0) (* lam2n1 (- 999)) (* lam2n2 1000) (* lam2n3 50001) (* lam2n4 (- 1)) (* lam2n5 1) (* lam2n6 2) (* lam2n7 3) (* lam2n8 55) (* lam2n9 58) (* lam2n10 61) (* lam2n11 62) (* lam2n12 global_invc1_1)) (+ term_invc1_1 (* (- 1) lam2n13))) (= (+ (* lam2n1 (- 1)) (* lam2n2 1) (* lam2n3 (- 1)) (* lam2n4 (- 1)) (* lam2n5 (- 1)) (* lam2n6 (- 1)) (* lam2n7 (- 1)) (* lam2n8 (- 1)) (* lam2n9 (- 1)) (* lam2n10 (- 1)) (* lam2n11 (- 1)) (* lam2n12 global_invc1_0)) 0) (= (* lam2n2 (- 1)) term_invc1_0))) (= non_inc1_L (and (>= lam3n0 0) (>= lam3n1 0) (>= lam3n3 0) (>= lam3n4 0) (>= lam3n5 0) (>= lam3n6 0) (>= lam3n7 0) (>= lam3n8 0) (>= lam3n9 0) (>= lam3n10 0) (>= lam3n11 0) (>= lam3n12 0) (>= lam3n13 0) (<= 0 lam3n15) (< lam3n15 1) (<= lam3n14 1) (>= lam3n14 0) (and (> (+ (* (- 1) lam3n0) (* lam3n1 (- 999)) (* lam3n2 1000) (* lam3n3 50001) (* lam3n4 (- 1)) (* lam3n5 1) (* lam3n6 2) (* lam3n7 3) (* lam3n8 55) (* lam3n9 58) (* lam3n10 61) (* lam3n11 62) (* lam3n12 global_invc1_1) (* lam3n13 term_invc1_1) (* lam3n14 (+ 1 (* (- 1) lam3n15)))) 0) (= (+ (* lam3n1 (- 1)) (* lam3n2 1) (* lam3n3 (- 1)) (* lam3n4 (- 1)) (* lam3n5 (- 1)) (* lam3n6 (- 1)) (* lam3n7 (- 1)) (* lam3n8 (- 1)) (* lam3n9 (- 1)) (* lam3n10 (- 1)) (* lam3n11 (- 1)) (* lam3n12 global_invc1_0) (* lam3n13 term_invc1_0) (* lam3n14 rfc0)) 0) (= (+ (* lam3n2 (- 1)) (* lam3n14 (* (- 1) rfc0))) 0)))) (= disabled1_L (and (= lam3n14 0) non_inc1_L)) (= bounded1_L (and (>= lam4n0 0) (>= lam4n1 0) (>= lam4n3 0) (>= lam4n4 0) (>= lam4n5 0) (>= lam4n6 0) (>= lam4n7 0) (>= lam4n8 0) (>= lam4n9 0) (>= lam4n10 0) (>= lam4n11 0) (>= lam4n12 0) (>= lam4n13 0) (<= 0 lam4n14) (< lam4n14 1) (and (= (+ (* (- 1) lam4n0) (* lam4n1 (- 999)) (* lam4n2 1000) (* lam4n3 50001) (* lam4n4 (- 1)) (* lam4n5 1) (* lam4n6 2) (* lam4n7 3) (* lam4n8 55) (* lam4n9 58) (* lam4n10 61) (* lam4n11 62) (* lam4n12 global_invc1_1) (* lam4n13 term_invc1_1)) (+ (* (- 1) rfc1) (* (- 1) lam4n14))) (= (+ (* lam4n1 (- 1)) (* lam4n2 1) (* lam4n3 (- 1)) (* lam4n4 (- 1)) (* lam4n5 (- 1)) (* lam4n6 (- 1)) (* lam4n7 (- 1)) (* lam4n8 (- 1)) (* lam4n9 (- 1)) (* lam4n10 (- 1)) (* lam4n11 (- 1)) (* lam4n12 global_invc1_0) (* lam4n13 term_invc1_0)) (* (- 1) rfc0)) (= (* lam4n2 (- 1)) 0)))) (= dec1_L (and (>= lam5n0 0) (>= lam5n1 0) (>= lam5n3 0) (>= lam5n4 0) (>= lam5n5 0) (>= lam5n6 0) (>= lam5n7 0) (>= lam5n8 0) (>= lam5n9 0) (>= lam5n10 0) (>= lam5n11 0) (>= lam5n12 0) (>= lam5n13 0) (<= 0 lam5n14) (< lam5n14 1) (and (= (+ (* (- 1) lam5n0) (* lam5n1 (- 999)) (* lam5n2 1000) (* lam5n3 50001) (* lam5n4 (- 1)) (* lam5n5 1) (* lam5n6 2) (* lam5n7 3) (* lam5n8 55) (* lam5n9 58) (* lam5n10 61) (* lam5n11 62) (* lam5n12 global_invc1_1) (* lam5n13 term_invc1_1)) (+ 1 (* (- 1) lam5n14))) (= (+ (* lam5n1 (- 1)) (* lam5n2 1) (* lam5n3 (- 1)) (* lam5n4 (- 1)) (* lam5n5 (- 1)) (* lam5n6 (- 1)) (* lam5n7 (- 1)) (* lam5n8 (- 1)) (* lam5n9 (- 1)) (* lam5n10 (- 1)) (* lam5n11 (- 1)) (* lam5n12 global_invc1_0) (* lam5n13 term_invc1_0)) (* (- 1) rfc0)) (= (* lam5n2 (- 1)) rfc0)))) (= bnd_and_dec1_L (and bounded1_L dec1_L)) (= GLOBAL_NT_1 (not (= global_invc1_0 0))) (or (not (<= (+ global_invc1_1 (* global_invc1_0 global_V0_1)) 0)) (= global_invc1_0 0)) (= TERM_NT_1 (not (= term_invc1_0 0))) (or (and (not (<= (+ term_invc1_1 (* term_invc1_0 term_V0_1)) 0)) (<= (+ (* (- 1) term_V0_1) (- 1)) 0) (<= (+ (* (- 1) term_V0_1) 1) 0) (<= (+ (* (- 1) term_V0_1) 2) 0) (<= (+ (* (- 1) term_V0_1) 3) 0) (<= (+ (* (- 1) term_V0_1) 55) 0) (<= (+ (* (- 1) term_V0_1) 58) 0) (<= (+ (* (- 1) term_V0_1) 61) 0) (<= (+ (* (- 1) term_V0_1) 62) 0)) (= term_invc1_0 0)) (= ALL_NON_INC_0 non_inc1_L) (= DIS_OR_ALL_NON_INC_0 (or disabled1_L ALL_NON_INC_0)) (= SOME_BND_AND_DEC_0 bnd_and_dec1_L) (or (not ALL_NON_INC_0) (and (>= rfc0 (- 2)) (<= rfc0 2) (not (= rfc0 0)) (>= rfc1 0) (or SOME_BND_AND_DEC_0 (or (and (<= (+ (* rfc0 V0_NIV) 1) (* rfc0 V1_NIV)) (>= (* (- 1) V0_NIV) (* (- 1) V1_NIV))) (= rfc0 0))))) (or GLOBAL_NT_1 TERM_NT_1 ALL_NON_INC_0))))
(assert (= BAV2 (>= global_invc1_0 (- GEN1))))
(assert (= BAV3 (<= global_invc1_0 GEN2)))
(assert (= BAV4 (and (>= lam0n0 GEN3) (<= GEN4 lam0n2) (< lam0n2 GEN5) (and (= (* (- GEN6) lam0n0) (+ global_invc1_1 (* (- GEN7) lam0n2))) (= (* lam0n1 GEN8) GEN9) (= (* lam0n1 (- GEN10)) global_invc1_0)))))
(assert (= BAV5 (>= lam0n0 GEN3)))
(assert (= BAV6 (<= GEN4 lam0n2)))
(assert (= BAV7 (< lam0n2 GEN5)))
(assert (= BAV8 (and (= (* (- GEN6) lam0n0) (+ global_invc1_1 (* (- GEN7) lam0n2))) (= (* lam0n1 GEN8) GEN9) (= (* lam0n1 (- GEN10)) global_invc1_0))))
(assert (= BAV9 (= (* (- GEN6) lam0n0) (+ global_invc1_1 (* (- GEN7) lam0n2)))))
(assert (= BAV10 (= (* lam0n1 GEN8) GEN9)))
(assert (= BAV11 (= (* lam0n1 (- GEN10)) global_invc1_0)))
(assert (= BAV12 (and (>= lam1n0 GEN11) (>= lam1n1 GEN12) (>= lam1n3 GEN13) (<= GEN14 lam1n4) (< lam1n4 GEN15) (and (= (+ (* (- GEN16) lam1n0) (* lam1n1 (- GEN17)) (* lam1n2 GEN18) (* lam1n3 global_invc1_1)) (+ global_invc1_1 (* (- GEN19) lam1n4))) (= (+ (* lam1n1 (- GEN20)) (* lam1n2 GEN21) (* lam1n3 global_invc1_0)) GEN22) (= (* lam1n2 (- GEN23)) global_invc1_0)))))
(assert (= BAV13 (>= lam1n0 GEN11)))
(assert (= BAV14 (>= lam1n1 GEN12)))
(assert (= BAV15 (>= lam1n3 GEN13)))
(assert (= BAV16 (<= GEN14 lam1n4)))
(assert (= BAV17 (< lam1n4 GEN15)))
(assert (= BAV18 (and (= (+ (* (- GEN16) lam1n0) (* lam1n1 (- GEN17)) (* lam1n2 GEN18) (* lam1n3 global_invc1_1)) (+ global_invc1_1 (* (- GEN19) lam1n4))) (= (+ (* lam1n1 (- GEN20)) (* lam1n2 GEN21) (* lam1n3 global_invc1_0)) GEN22) (= (* lam1n2 (- GEN23)) global_invc1_0))))
(assert (= BAV19 (= (+ (* (- GEN16) lam1n0) (* lam1n1 (- GEN17)) (* lam1n2 GEN18) (* lam1n3 global_invc1_1)) (+ global_invc1_1 (* (- GEN19) lam1n4)))))
(assert (= BAV20 (= (+ (* lam1n1 (- GEN20)) (* lam1n2 GEN21) (* lam1n3 global_invc1_0)) GEN22)))
(assert (= BAV21 (= (* lam1n2 (- GEN23)) global_invc1_0)))
(assert (= BAV22 (>= term_invc1_0 (- GEN24))))
(assert (= BAV23 (<= term_invc1_0 GEN25)))
(assert (= BAV24 (and (>= lam2n0 GEN26) (>= lam2n1 GEN27) (>= lam2n3 GEN28) (>= lam2n4 GEN29) (>= lam2n5 GEN30) (>= lam2n6 GEN31) (>= lam2n7 GEN32) (>= lam2n8 GEN33) (>= lam2n9 GEN34) (>= lam2n10 GEN35) (>= lam2n11 GEN36) (>= lam2n12 0) (<= 0 lam2n13) (< lam2n13 1) (and (= (+ (* (- 1) lam2n0) (* lam2n1 (- 999)) (* lam2n2 1000) (* lam2n3 50001) (* lam2n4 (- 1)) (* lam2n5 1) (* lam2n6 2) (* lam2n7 3) (* lam2n8 55) (* lam2n9 58) (* lam2n10 61) (* lam2n11 62) (* lam2n12 global_invc1_1)) (+ term_invc1_1 (* (- 1) lam2n13))) (= (+ (* lam2n1 (- 1)) (* lam2n2 1) (* lam2n3 (- 1)) (* lam2n4 (- 1)) (* lam2n5 (- 1)) (* lam2n6 (- 1)) (* lam2n7 (- 1)) (* lam2n8 (- 1)) (* lam2n9 (- 1)) (* lam2n10 (- 1)) (* lam2n11 (- 1)) (* lam2n12 global_invc1_0)) 0) (= (* lam2n2 (- 1)) term_invc1_0)))))
(assert (= BAV25 (>= lam2n0 GEN26)))
(assert (= BAV26 (>= lam2n1 GEN27)))
(assert (= BAV27 (>= lam2n3 GEN28)))
(assert (= BAV28 (>= lam2n4 GEN29)))
(assert (= BAV29 (>= lam2n5 GEN30)))
(assert (= BAV30 (>= lam2n6 GEN31)))
(assert (= BAV31 (>= lam2n7 GEN32)))
(assert (= BAV32 (>= lam2n8 GEN33)))
(assert (= BAV33 (>= lam2n9 GEN34)))
(assert (= BAV34 (>= lam2n10 GEN35)))
(assert (= BAV35 (>= lam2n11 GEN36)))
(assert (= BAV36 (>= lam2n12 0)))
(assert (= BAV37 (<= 0 lam2n13)))
(assert (= BAV38 (< lam2n13 1)))
(assert (= BAV39 (and (= (+ (* (- 1) lam2n0) (* lam2n1 (- 999)) (* lam2n2 1000) (* lam2n3 50001) (* lam2n4 (- 1)) (* lam2n5 1) (* lam2n6 2) (* lam2n7 3) (* lam2n8 55) (* lam2n9 58) (* lam2n10 61) (* lam2n11 62) (* lam2n12 global_invc1_1)) (+ term_invc1_1 (* (- 1) lam2n13))) (= (+ (* lam2n1 (- 1)) (* lam2n2 1) (* lam2n3 (- 1)) (* lam2n4 (- 1)) (* lam2n5 (- 1)) (* lam2n6 (- 1)) (* lam2n7 (- 1)) (* lam2n8 (- 1)) (* lam2n9 (- 1)) (* lam2n10 (- 1)) (* lam2n11 (- 1)) (* lam2n12 global_invc1_0)) 0) (= (* lam2n2 (- 1)) term_invc1_0))))
(assert (= BAV40 (= (+ (* (- 1) lam2n0) (* lam2n1 (- 999)) (* lam2n2 1000) (* lam2n3 50001) (* lam2n4 (- 1)) (* lam2n5 1) (* lam2n6 2) (* lam2n7 3) (* lam2n8 55) (* lam2n9 58) (* lam2n10 61) (* lam2n11 62) (* lam2n12 global_invc1_1)) (+ term_invc1_1 (* (- 1) lam2n13)))))
(assert (= BAV41 (= (+ (* lam2n1 (- 1)) (* lam2n2 1) (* lam2n3 (- 1)) (* lam2n4 (- 1)) (* lam2n5 (- 1)) (* lam2n6 (- 1)) (* lam2n7 (- 1)) (* lam2n8 (- 1)) (* lam2n9 (- 1)) (* lam2n10 (- 1)) (* lam2n11 (- 1)) (* lam2n12 global_invc1_0)) 0)))
(assert (= BAV42 (= (* lam2n2 (- 1)) term_invc1_0)))
(assert (= BAV43 (= non_inc1_L (and (>= lam3n0 0) (>= lam3n1 0) (>= lam3n3 0) (>= lam3n4 0) (>= lam3n5 0) (>= lam3n6 0) (>= lam3n7 0) (>= lam3n8 0) (>= lam3n9 0) (>= lam3n10 0) (>= lam3n11 0) (>= lam3n12 0) (>= lam3n13 0) (<= 0 lam3n15) (< lam3n15 1) (<= lam3n14 1) (>= lam3n14 0) (and (> (+ (* (- 1) lam3n0) (* lam3n1 (- 999)) (* lam3n2 1000) (* lam3n3 50001) (* lam3n4 (- 1)) (* lam3n5 1) (* lam3n6 2) (* lam3n7 3) (* lam3n8 55) (* lam3n9 58) (* lam3n10 61) (* lam3n11 62) (* lam3n12 global_invc1_1) (* lam3n13 term_invc1_1) (* lam3n14 (+ 1 (* (- 1) lam3n15)))) 0) (= (+ (* lam3n1 (- 1)) (* lam3n2 1) (* lam3n3 (- 1)) (* lam3n4 (- 1)) (* lam3n5 (- 1)) (* lam3n6 (- 1)) (* lam3n7 (- 1)) (* lam3n8 (- 1)) (* lam3n9 (- 1)) (* lam3n10 (- 1)) (* lam3n11 (- 1)) (* lam3n12 global_invc1_0) (* lam3n13 term_invc1_0) (* lam3n14 rfc0)) 0) (= (+ (* lam3n2 (- 1)) (* lam3n14 (* (- 1) rfc0))) 0))))))
(assert (= BAV44 (and (>= lam3n0 0) (>= lam3n1 0) (>= lam3n3 0) (>= lam3n4 0) (>= lam3n5 0) (>= lam3n6 0) (>= lam3n7 0) (>= lam3n8 0) (>= lam3n9 0) (>= lam3n10 0) (>= lam3n11 0) (>= lam3n12 0) (>= lam3n13 0) (<= 0 lam3n15) (< lam3n15 1) (<= lam3n14 1) (>= lam3n14 0) (and (> (+ (* (- 1) lam3n0) (* lam3n1 (- 999)) (* lam3n2 1000) (* lam3n3 50001) (* lam3n4 (- 1)) (* lam3n5 1) (* lam3n6 2) (* lam3n7 3) (* lam3n8 55) (* lam3n9 58) (* lam3n10 61) (* lam3n11 62) (* lam3n12 global_invc1_1) (* lam3n13 term_invc1_1) (* lam3n14 (+ 1 (* (- 1) lam3n15)))) 0) (= (+ (* lam3n1 (- 1)) (* lam3n2 1) (* lam3n3 (- 1)) (* lam3n4 (- 1)) (* lam3n5 (- 1)) (* lam3n6 (- 1)) (* lam3n7 (- 1)) (* lam3n8 (- 1)) (* lam3n9 (- 1)) (* lam3n10 (- 1)) (* lam3n11 (- 1)) (* lam3n12 global_invc1_0) (* lam3n13 term_invc1_0) (* lam3n14 rfc0)) 0) (= (+ (* lam3n2 (- 1)) (* lam3n14 (* (- 1) rfc0))) 0)))))
(assert (= BAV45 (>= lam3n0 0)))
(assert (= BAV46 (>= lam3n1 0)))
(assert (= BAV47 (>= lam3n3 0)))
(assert (= BAV48 (>= lam3n4 0)))
(assert (= BAV49 (>= lam3n5 0)))
(assert (= BAV50 (>= lam3n6 0)))
(assert (= BAV51 (>= lam3n7 0)))
(assert (= BAV52 (>= lam3n8 0)))
(assert (= BAV53 (>= lam3n9 0)))
(assert (= BAV54 (>= lam3n10 0)))
(assert (= BAV55 (>= lam3n11 0)))
(assert (= BAV56 (>= lam3n12 0)))
(assert (= BAV57 (>= lam3n13 0)))
(assert (= BAV58 (<= 0 lam3n15)))
(assert (= BAV59 (< lam3n15 1)))
(assert (= BAV60 (<= lam3n14 1)))
(assert (= BAV61 (>= lam3n14 0)))
(assert (= BAV62 (and (> (+ (* (- 1) lam3n0) (* lam3n1 (- 999)) (* lam3n2 1000) (* lam3n3 50001) (* lam3n4 (- 1)) (* lam3n5 1) (* lam3n6 2) (* lam3n7 3) (* lam3n8 55) (* lam3n9 58) (* lam3n10 61) (* lam3n11 62) (* lam3n12 global_invc1_1) (* lam3n13 term_invc1_1) (* lam3n14 (+ 1 (* (- 1) lam3n15)))) 0) (= (+ (* lam3n1 (- 1)) (* lam3n2 1) (* lam3n3 (- 1)) (* lam3n4 (- 1)) (* lam3n5 (- 1)) (* lam3n6 (- 1)) (* lam3n7 (- 1)) (* lam3n8 (- 1)) (* lam3n9 (- 1)) (* lam3n10 (- 1)) (* lam3n11 (- 1)) (* lam3n12 global_invc1_0) (* lam3n13 term_invc1_0) (* lam3n14 rfc0)) 0) (= (+ (* lam3n2 (- 1)) (* lam3n14 (* (- 1) rfc0))) 0))))
(assert (= BAV63 (> (+ (* (- 1) lam3n0) (* lam3n1 (- 999)) (* lam3n2 1000) (* lam3n3 50001) (* lam3n4 (- 1)) (* lam3n5 1) (* lam3n6 2) (* lam3n7 3) (* lam3n8 55) (* lam3n9 58) (* lam3n10 61) (* lam3n11 62) (* lam3n12 global_invc1_1) (* lam3n13 term_invc1_1) (* lam3n14 (+ 1 (* (- 1) lam3n15)))) 0)))
(assert (= BAV64 (= (+ (* lam3n1 (- 1)) (* lam3n2 1) (* lam3n3 (- 1)) (* lam3n4 (- 1)) (* lam3n5 (- 1)) (* lam3n6 (- 1)) (* lam3n7 (- 1)) (* lam3n8 (- 1)) (* lam3n9 (- 1)) (* lam3n10 (- 1)) (* lam3n11 (- 1)) (* lam3n12 global_invc1_0) (* lam3n13 term_invc1_0) (* lam3n14 rfc0)) 0)))
(assert (= BAV65 (= (+ (* lam3n2 (- 1)) (* lam3n14 (* (- 1) rfc0))) 0)))
(assert (= BAV66 (= disabled1_L (and (= lam3n14 0) non_inc1_L))))
(assert (= BAV67 (and (= lam3n14 0) non_inc1_L)))
(assert (= BAV68 (= lam3n14 0)))
(assert (= BAV69 (= bounded1_L (and (>= lam4n0 0) (>= lam4n1 0) (>= lam4n3 0) (>= lam4n4 0) (>= lam4n5 0) (>= lam4n6 0) (>= lam4n7 0) (>= lam4n8 0) (>= lam4n9 0) (>= lam4n10 0) (>= lam4n11 0) (>= lam4n12 0) (>= lam4n13 0) (<= 0 lam4n14) (< lam4n14 1) (and (= (+ (* (- 1) lam4n0) (* lam4n1 (- 999)) (* lam4n2 1000) (* lam4n3 50001) (* lam4n4 (- 1)) (* lam4n5 1) (* lam4n6 2) (* lam4n7 3) (* lam4n8 55) (* lam4n9 58) (* lam4n10 61) (* lam4n11 62) (* lam4n12 global_invc1_1) (* lam4n13 term_invc1_1)) (+ (* (- 1) rfc1) (* (- 1) lam4n14))) (= (+ (* lam4n1 (- 1)) (* lam4n2 1) (* lam4n3 (- 1)) (* lam4n4 (- 1)) (* lam4n5 (- 1)) (* lam4n6 (- 1)) (* lam4n7 (- 1)) (* lam4n8 (- 1)) (* lam4n9 (- 1)) (* lam4n10 (- 1)) (* lam4n11 (- 1)) (* lam4n12 global_invc1_0) (* lam4n13 term_invc1_0)) (* (- 1) rfc0)) (= (* lam4n2 (- 1)) 0))))))
(assert (= BAV70 (and (>= lam4n0 0) (>= lam4n1 0) (>= lam4n3 0) (>= lam4n4 0) (>= lam4n5 0) (>= lam4n6 0) (>= lam4n7 0) (>= lam4n8 0) (>= lam4n9 0) (>= lam4n10 0) (>= lam4n11 0) (>= lam4n12 0) (>= lam4n13 0) (<= 0 lam4n14) (< lam4n14 1) (and (= (+ (* (- 1) lam4n0) (* lam4n1 (- 999)) (* lam4n2 1000) (* lam4n3 50001) (* lam4n4 (- 1)) (* lam4n5 1) (* lam4n6 2) (* lam4n7 3) (* lam4n8 55) (* lam4n9 58) (* lam4n10 61) (* lam4n11 62) (* lam4n12 global_invc1_1) (* lam4n13 term_invc1_1)) (+ (* (- 1) rfc1) (* (- 1) lam4n14))) (= (+ (* lam4n1 (- 1)) (* lam4n2 1) (* lam4n3 (- 1)) (* lam4n4 (- 1)) (* lam4n5 (- 1)) (* lam4n6 (- 1)) (* lam4n7 (- 1)) (* lam4n8 (- 1)) (* lam4n9 (- 1)) (* lam4n10 (- 1)) (* lam4n11 (- 1)) (* lam4n12 global_invc1_0) (* lam4n13 term_invc1_0)) (* (- 1) rfc0)) (= (* lam4n2 (- 1)) 0)))))
(assert (= BAV71 (>= lam4n0 0)))
(assert (= BAV72 (>= lam4n1 0)))
(assert (= BAV73 (>= lam4n3 0)))
(assert (= BAV74 (>= lam4n4 0)))
(assert (= BAV75 (>= lam4n5 0)))
(assert (= BAV76 (>= lam4n6 0)))
(assert (= BAV77 (>= lam4n7 0)))
(assert (= BAV78 (>= lam4n8 0)))
(assert (= BAV79 (>= lam4n9 0)))
(assert (= BAV80 (>= lam4n10 0)))
(assert (= BAV81 (>= lam4n11 0)))
(assert (= BAV82 (>= lam4n12 0)))
(assert (= BAV83 (>= lam4n13 0)))
(assert (= BAV84 (<= 0 lam4n14)))
(assert (= BAV85 (< lam4n14 1)))
(assert (= BAV86 (and (= (+ (* (- 1) lam4n0) (* lam4n1 (- 999)) (* lam4n2 1000) (* lam4n3 50001) (* lam4n4 (- 1)) (* lam4n5 1) (* lam4n6 2) (* lam4n7 3) (* lam4n8 55) (* lam4n9 58) (* lam4n10 61) (* lam4n11 62) (* lam4n12 global_invc1_1) (* lam4n13 term_invc1_1)) (+ (* (- 1) rfc1) (* (- 1) lam4n14))) (= (+ (* lam4n1 (- 1)) (* lam4n2 1) (* lam4n3 (- 1)) (* lam4n4 (- 1)) (* lam4n5 (- 1)) (* lam4n6 (- 1)) (* lam4n7 (- 1)) (* lam4n8 (- 1)) (* lam4n9 (- 1)) (* lam4n10 (- 1)) (* lam4n11 (- 1)) (* lam4n12 global_invc1_0) (* lam4n13 term_invc1_0)) (* (- 1) rfc0)) (= (* lam4n2 (- 1)) 0))))
(assert (= BAV87 (= (+ (* (- 1) lam4n0) (* lam4n1 (- 999)) (* lam4n2 1000) (* lam4n3 50001) (* lam4n4 (- 1)) (* lam4n5 1) (* lam4n6 2) (* lam4n7 3) (* lam4n8 55) (* lam4n9 58) (* lam4n10 61) (* lam4n11 62) (* lam4n12 global_invc1_1) (* lam4n13 term_invc1_1)) (+ (* (- 1) rfc1) (* (- 1) lam4n14)))))
(assert (= BAV88 (= (+ (* lam4n1 (- 1)) (* lam4n2 1) (* lam4n3 (- 1)) (* lam4n4 (- 1)) (* lam4n5 (- 1)) (* lam4n6 (- 1)) (* lam4n7 (- 1)) (* lam4n8 (- 1)) (* lam4n9 (- 1)) (* lam4n10 (- 1)) (* lam4n11 (- 1)) (* lam4n12 global_invc1_0) (* lam4n13 term_invc1_0)) (* (- 1) rfc0))))
(assert (= BAV89 (= (* lam4n2 (- 1)) 0)))
(assert (= BAV90 (= dec1_L (and (>= lam5n0 0) (>= lam5n1 0) (>= lam5n3 0) (>= lam5n4 0) (>= lam5n5 0) (>= lam5n6 0) (>= lam5n7 0) (>= lam5n8 0) (>= lam5n9 0) (>= lam5n10 0) (>= lam5n11 0) (>= lam5n12 0) (>= lam5n13 0) (<= 0 lam5n14) (< lam5n14 1) (and (= (+ (* (- 1) lam5n0) (* lam5n1 (- 999)) (* lam5n2 1000) (* lam5n3 50001) (* lam5n4 (- 1)) (* lam5n5 1) (* lam5n6 2) (* lam5n7 3) (* lam5n8 55) (* lam5n9 58) (* lam5n10 61) (* lam5n11 62) (* lam5n12 global_invc1_1) (* lam5n13 term_invc1_1)) (+ 1 (* (- 1) lam5n14))) (= (+ (* lam5n1 (- 1)) (* lam5n2 1) (* lam5n3 (- 1)) (* lam5n4 (- 1)) (* lam5n5 (- 1)) (* lam5n6 (- 1)) (* lam5n7 (- 1)) (* lam5n8 (- 1)) (* lam5n9 (- 1)) (* lam5n10 (- 1)) (* lam5n11 (- 1)) (* lam5n12 global_invc1_0) (* lam5n13 term_invc1_0)) (* (- 1) rfc0)) (= (* lam5n2 (- 1)) rfc0))))))
(assert (= BAV91 (and (>= lam5n0 0) (>= lam5n1 0) (>= lam5n3 0) (>= lam5n4 0) (>= lam5n5 0) (>= lam5n6 0) (>= lam5n7 0) (>= lam5n8 0) (>= lam5n9 0) (>= lam5n10 0) (>= lam5n11 0) (>= lam5n12 0) (>= lam5n13 0) (<= 0 lam5n14) (< lam5n14 1) (and (= (+ (* (- 1) lam5n0) (* lam5n1 (- 999)) (* lam5n2 1000) (* lam5n3 50001) (* lam5n4 (- 1)) (* lam5n5 1) (* lam5n6 2) (* lam5n7 3) (* lam5n8 55) (* lam5n9 58) (* lam5n10 61) (* lam5n11 62) (* lam5n12 global_invc1_1) (* lam5n13 term_invc1_1)) (+ 1 (* (- 1) lam5n14))) (= (+ (* lam5n1 (- 1)) (* lam5n2 1) (* lam5n3 (- 1)) (* lam5n4 (- 1)) (* lam5n5 (- 1)) (* lam5n6 (- 1)) (* lam5n7 (- 1)) (* lam5n8 (- 1)) (* lam5n9 (- 1)) (* lam5n10 (- 1)) (* lam5n11 (- 1)) (* lam5n12 global_invc1_0) (* lam5n13 term_invc1_0)) (* (- 1) rfc0)) (= (* lam5n2 (- 1)) rfc0)))))
(assert (= BAV92 (>= lam5n0 0)))
(assert (= BAV93 (>= lam5n1 0)))
(assert (= BAV94 (>= lam5n3 0)))
(assert (= BAV95 (>= lam5n4 0)))
(assert (= BAV96 (>= lam5n5 0)))
(assert (= BAV97 (>= lam5n6 0)))
(assert (= BAV98 (>= lam5n7 0)))
(assert (= BAV99 (>= lam5n8 0)))
(assert (= BAV100 (>= lam5n9 0)))
(assert (= BAV101 (>= lam5n10 0)))
(assert (= BAV102 (>= lam5n11 0)))
(assert (= BAV103 (>= lam5n12 0)))
(assert (= BAV104 (>= lam5n13 0)))
(assert (= BAV105 (<= 0 lam5n14)))
(assert (= BAV106 (< lam5n14 1)))
(assert (= BAV107 (and (= (+ (* (- 1) lam5n0) (* lam5n1 (- 999)) (* lam5n2 1000) (* lam5n3 50001) (* lam5n4 (- 1)) (* lam5n5 1) (* lam5n6 2) (* lam5n7 3) (* lam5n8 55) (* lam5n9 58) (* lam5n10 61) (* lam5n11 62) (* lam5n12 global_invc1_1) (* lam5n13 term_invc1_1)) (+ 1 (* (- 1) lam5n14))) (= (+ (* lam5n1 (- 1)) (* lam5n2 1) (* lam5n3 (- 1)) (* lam5n4 (- 1)) (* lam5n5 (- 1)) (* lam5n6 (- 1)) (* lam5n7 (- 1)) (* lam5n8 (- 1)) (* lam5n9 (- 1)) (* lam5n10 (- 1)) (* lam5n11 (- 1)) (* lam5n12 global_invc1_0) (* lam5n13 term_invc1_0)) (* (- 1) rfc0)) (= (* lam5n2 (- 1)) rfc0))))
(assert (= BAV108 (= (+ (* (- 1) lam5n0) (* lam5n1 (- 999)) (* lam5n2 1000) (* lam5n3 50001) (* lam5n4 (- 1)) (* lam5n5 1) (* lam5n6 2) (* lam5n7 3) (* lam5n8 55) (* lam5n9 58) (* lam5n10 61) (* lam5n11 62) (* lam5n12 global_invc1_1) (* lam5n13 term_invc1_1)) (+ 1 (* (- 1) lam5n14)))))
(assert (= BAV109 (= (+ (* lam5n1 (- 1)) (* lam5n2 1) (* lam5n3 (- 1)) (* lam5n4 (- 1)) (* lam5n5 (- 1)) (* lam5n6 (- 1)) (* lam5n7 (- 1)) (* lam5n8 (- 1)) (* lam5n9 (- 1)) (* lam5n10 (- 1)) (* lam5n11 (- 1)) (* lam5n12 global_invc1_0) (* lam5n13 term_invc1_0)) (* (- 1) rfc0))))
(assert (= BAV110 (= (* lam5n2 (- 1)) rfc0)))
(assert (= BAV111 (= bnd_and_dec1_L (and bounded1_L dec1_L))))
(assert (= BAV112 (and bounded1_L dec1_L)))
(assert (= BAV113 (= GLOBAL_NT_1 (not (= global_invc1_0 0)))))
(assert (= BAV114 (= global_invc1_0 0)))
(assert (= BAV115 (or (not (<= (+ global_invc1_1 (* global_invc1_0 global_V0_1)) 0)) (= global_invc1_0 0))))
(assert (= BAV116 (<= (+ global_invc1_1 (* global_invc1_0 global_V0_1)) 0)))
(assert (= BAV117 (= global_invc1_0 0)))
(assert (= BAV118 (= TERM_NT_1 (not (= term_invc1_0 0)))))
(assert (= BAV119 (= term_invc1_0 0)))
(assert (= BAV120 (or (and (not (<= (+ term_invc1_1 (* term_invc1_0 term_V0_1)) 0)) (<= (+ (* (- 1) term_V0_1) (- 1)) 0) (<= (+ (* (- 1) term_V0_1) 1) 0) (<= (+ (* (- 1) term_V0_1) 2) 0) (<= (+ (* (- 1) term_V0_1) 3) 0) (<= (+ (* (- 1) term_V0_1) 55) 0) (<= (+ (* (- 1) term_V0_1) 58) 0) (<= (+ (* (- 1) term_V0_1) 61) 0) (<= (+ (* (- 1) term_V0_1) 62) 0)) (= term_invc1_0 0))))
(assert (= BAV121 (and (not (<= (+ term_invc1_1 (* term_invc1_0 term_V0_1)) 0)) (<= (+ (* (- 1) term_V0_1) (- 1)) 0) (<= (+ (* (- 1) term_V0_1) 1) 0) (<= (+ (* (- 1) term_V0_1) 2) 0) (<= (+ (* (- 1) term_V0_1) 3) 0) (<= (+ (* (- 1) term_V0_1) 55) 0) (<= (+ (* (- 1) term_V0_1) 58) 0) (<= (+ (* (- 1) term_V0_1) 61) 0) (<= (+ (* (- 1) term_V0_1) 62) 0))))
(assert (= BAV122 (<= (+ term_invc1_1 (* term_invc1_0 term_V0_1)) 0)))
(assert (= BAV123 (<= (+ (* (- 1) term_V0_1) (- 1)) 0)))
(assert (= BAV124 (<= (+ (* (- 1) term_V0_1) 1) 0)))
(assert (= BAV125 (<= (+ (* (- 1) term_V0_1) 2) 0)))
(assert (= BAV126 (<= (+ (* (- 1) term_V0_1) 3) 0)))
(assert (= BAV127 (<= (+ (* (- 1) term_V0_1) 55) 0)))
(assert (= BAV128 (<= (+ (* (- 1) term_V0_1) 58) 0)))
(assert (= BAV129 (<= (+ (* (- 1) term_V0_1) 61) 0)))
(assert (= BAV130 (<= (+ (* (- 1) term_V0_1) 62) 0)))
(assert (= BAV131 (= term_invc1_0 0)))
(assert (= BAV132 (= ALL_NON_INC_0 non_inc1_L)))
(assert (= BAV133 (= DIS_OR_ALL_NON_INC_0 (or disabled1_L ALL_NON_INC_0))))
(assert (= BAV134 (or disabled1_L ALL_NON_INC_0)))
(assert (= BAV135 (= SOME_BND_AND_DEC_0 bnd_and_dec1_L)))
(assert (= BAV136 (or (not ALL_NON_INC_0) (and (>= rfc0 (- 2)) (<= rfc0 2) (not (= rfc0 0)) (>= rfc1 0) (or SOME_BND_AND_DEC_0 (or (and (<= (+ (* rfc0 V0_NIV) 1) (* rfc0 V1_NIV)) (>= (* (- 1) V0_NIV) (* (- 1) V1_NIV))) (= rfc0 0)))))))
(assert (= BAV137 (and (>= rfc0 (- 2)) (<= rfc0 2) (not (= rfc0 0)) (>= rfc1 0) (or SOME_BND_AND_DEC_0 (or (and (<= (+ (* rfc0 V0_NIV) 1) (* rfc0 V1_NIV)) (>= (* (- 1) V0_NIV) (* (- 1) V1_NIV))) (= rfc0 0))))))
(assert (= BAV138 (>= rfc0 (- 2))))
(assert (= BAV139 (<= rfc0 2)))
(assert (= BAV140 (= rfc0 0)))
(assert (= BAV141 (>= rfc1 0)))
(assert (= BAV142 (or SOME_BND_AND_DEC_0 (or (and (<= (+ (* rfc0 V0_NIV) 1) (* rfc0 V1_NIV)) (>= (* (- 1) V0_NIV) (* (- 1) V1_NIV))) (= rfc0 0)))))
(assert (= BAV143 (or (and (<= (+ (* rfc0 V0_NIV) 1) (* rfc0 V1_NIV)) (>= (* (- 1) V0_NIV) (* (- 1) V1_NIV))) (= rfc0 0))))
(assert (= BAV144 (and (<= (+ (* rfc0 V0_NIV) 1) (* rfc0 V1_NIV)) (>= (* (- 1) V0_NIV) (* (- 1) V1_NIV)))))
(assert (= BAV145 (<= (+ (* rfc0 V0_NIV) 1) (* rfc0 V1_NIV))))
(assert (= BAV146 (>= (* (- 1) V0_NIV) (* (- 1) V1_NIV))))
(assert (= BAV147 (= rfc0 0)))
(assert (= BAV148 (or GLOBAL_NT_1 TERM_NT_1 ALL_NON_INC_0)))
(check-sat)
(get-model)
(exit)