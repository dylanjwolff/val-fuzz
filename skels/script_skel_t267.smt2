(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(set-option :pp.max-depth 20)
(declare-fun f (Int Int) Int)
(assert (or (forall ((X Int)(Y Int)) (! (and (> (f X X) GEN1) (= (f X Y) Y)) :pattern (f X Y))) (= (f GEN2 GEN3) GEN4)))
(assert (forall ((X Int)(Y Int)) (= (f X Y) GEN5)))
(apply distribute-forall)
(assert (= BAV1 (or (forall ((X Int)(Y Int)) (! (and (> (f X X) GEN1) (= (f X Y) Y)) :pattern (f X Y))) (= (f GEN2 GEN3) GEN4))))
(assert (= BAV2 (forall ((X Int)(Y Int)) (and (> (f X X) GEN1) (= (f X Y) Y)))))
(assert (= BAV3 (forall ((X Int)(Y Int)) (> (f X X) GEN1))))
(assert (= BAV4 (forall ((X Int)(Y Int)) (= (f X Y) Y))))
(assert (= BAV5 (= (f GEN2 GEN3) GEN4)))
(assert (= BAV6 (forall ((X Int)(Y Int)) (= (f X Y) GEN5))))