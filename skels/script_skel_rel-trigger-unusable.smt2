(set-logic ALL)
(declare-const GEN1 Int)
(declare-const GEN2 Int)
(declare-const GEN3 Int)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-fun two_to_the (Int) Int)
(define-fun intmax ((k Int)) Int (- (two_to_the k) 1))
(define-fun intmodtotal ((k Int) (a Int) (b Int)) Int (ite (= b 0) a (mod a b)))
(define-fun intnot ((k Int) (a Int)) Int (- (intmax k) a))
(define-fun intadd ((k Int) (a Int) (b Int) ) Int (intmodtotal k (+ a b) (two_to_the k)))
(define-fun l ((k Int) (x Int) (s Int) (t Int)) Bool  (distinct (intadd k x s) t))
(define-fun SC ((k Int) (s Int) (t Int)) Bool true)
(define-fun inv ((k Int) (s Int) (t Int)) Int (intnot k (intadd k s t)))
(declare-fun k () Int)
(declare-fun s () Int)
(declare-fun t () Int)
(define-fun left_to_right ((k Int) (s Int) (t Int)) Bool (=> (SC k s t) (l k (inv k s t) s t)))
(define-fun assertion_ltr () Bool (not (left_to_right k s t)))
(define-fun in_range ((k Int) (x Int)) Bool (and (>= x 0) (< x (two_to_the k))))
(define-fun range_assumptions ((k Int) (s Int) (t Int)) Bool (and (>= k 1) (in_range k s) (in_range k t)))
(assert (range_assumptions k s t))
(assert assertion_ltr)
(declare-fun dummy (Int) Bool)
(assert (dummy t))
(assert (forall ((x Int)) (! (=> (>= x GEN1) (and (dummy x) (distinct (- (two_to_the k) GEN2) (* GEN3 x)))) :pattern ((dummy x)))))
(assert (= BAV4 (forall ((x Int)) (=> (>= x GEN1) (and (dummy x) (distinct (- (two_to_the k) GEN2) (* GEN3 x)))))))
(assert (= BAV5 (forall ((x Int)) (>= x GEN1))))
(assert (= BAV6 (forall ((x Int)) (and (dummy x) (distinct (- (two_to_the k) GEN2) (* GEN3 x))))))
(assert (= BAV7 (forall ((x Int)) (distinct (- (two_to_the k) GEN2) (* GEN3 x)))))
(check-sat)