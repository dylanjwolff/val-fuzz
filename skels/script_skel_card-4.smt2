(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-sort E 0)
(declare-fun s () (Set E))
(declare-fun t () (Set E))
(declare-fun u () (Set E))
(assert (>= (card (union s t)) GEN1))
(assert (>= (card (union s u)) GEN2))
(assert (<= (card s) GEN3))
(assert (= (as emptyset (Set E)) (intersection t u)))
(declare-fun x1 () E)
(declare-fun x2 () E)
(declare-fun x3 () E)
(declare-fun x4 () E)
(declare-fun x5 () E)
(declare-fun x6 () E)
(assert (member x1 s))
(assert (member x2 s))
(assert (member x3 s))
(assert (member x4 s))
(assert (member x5 s))
(assert (member x6 s))
(assert (= BAV1 (>= (card (union s t)) GEN1)))
(assert (= BAV2 (>= (card (union s u)) GEN2)))
(assert (= BAV3 (<= (card s) GEN3)))
(assert (= BAV4 (= (as emptyset (Set E)) (intersection t u))))
(check-sat)
(get-model)