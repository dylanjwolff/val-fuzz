(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-fun a () Real)
(declare-fun t () Real)
(declare-fun x () Real)
(declare-fun y () Real)
(assert (and (= (- (- (* (- x t) (- x t)) (* GEN1 (* (- y GEN2) (- y GEN3)))) GEN4) GEN5) (= (- (+ (* (- x (* a t)) (- x (* a t))) (* GEN6 (* (- y (* a t)) (- y (* a t))))) GEN7) GEN8) (> t GEN9) (> a GEN10)))
(eliminate-quantifiers (exists y x t))
(exit)
(assert (= BAV1 (and (= (- (- (* (- x t) (- x t)) (* GEN1 (* (- y GEN2) (- y GEN3)))) GEN4) GEN5) (= (- (+ (* (- x (* a t)) (- x (* a t))) (* GEN6 (* (- y (* a t)) (- y (* a t))))) GEN7) GEN8) (> t GEN9) (> a GEN10))))
(assert (= BAV2 (= (- (- (* (- x t) (- x t)) (* GEN1 (* (- y GEN2) (- y GEN3)))) GEN4) GEN5)))
(assert (= BAV3 (= (- (+ (* (- x (* a t)) (- x (* a t))) (* GEN6 (* (- y (* a t)) (- y (* a t))))) GEN7) GEN8)))
(assert (= BAV4 (> t GEN9)))
(assert (= BAV5 (> a GEN10)))