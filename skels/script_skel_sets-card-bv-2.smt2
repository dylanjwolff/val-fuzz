(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(set-option :produce-models true)
(set-option :sets-ext true)
(declare-fun A () (Set (_ BitVec 3)))
(declare-fun B () (Set (_ BitVec 3)))
(declare-fun universe () (Set (_ BitVec 3)))
(assert (= (card A) GEN1))
(assert (= (card B) GEN2))
(assert (not (= A B)))
(assert (= (card (intersection A B)) GEN3))
(assert (= (card (setminus A B)) GEN4))
(assert (= (card (setminus B A)) GEN5))
(assert (= universe (as univset (Set (_ BitVec 3)))))
(assert (= BAV1 (= (card A) GEN1)))
(assert (= BAV2 (= (card B) GEN2)))
(assert (= BAV3 (= A B)))
(assert (= BAV4 (= (card (intersection A B)) GEN3)))
(assert (= BAV5 (= (card (setminus A B)) GEN4)))
(assert (= BAV6 (= (card (setminus B A)) GEN5)))
(assert (= BAV7 (= universe (as univset (Set (_ BitVec 3))))))
(check-sat)
(get-model)