(set-logic ALL)
(declare-const GEN1 String)
(declare-const GEN2 Int)
(declare-const GEN3 Int)
(declare-const GEN4 Int)
(declare-const GEN5 Int)
(declare-const GEN6 String)
(declare-const GEN7 String)
(declare-const GEN8 String)
(declare-const GEN9 String)
(declare-const GEN10 String)
(declare-const GEN11 Int)
(declare-const GEN12 String)
(declare-const GEN13 String)
(declare-const GEN14 String)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const BAV23 Bool)
(set-option :strings-exp true)
(declare-fun a () String)
(declare-fun b () String)
(declare-const c String)
(declare-const d String)
(declare-const g String)
(declare-const e String)
(declare-const f String)
(assert (or (and (= d (str.++ e g)) (str.in.re e (re.* (str.to.re GEN1))) (> GEN2 (str.to.int g)) (= GEN3 (str.len e)) (= GEN4 (str.len (str.substr b GEN5 (str.len d))))) (and (str.in.re (str.replace (str.replace a c GEN6) GEN7 GEN8) (re.* (re.union (str.to.re GEN9) (str.to.re GEN10)))) (= GEN11 (str.to.int (str.replace (str.replace a c GEN12) GEN13 GEN14))))))
(assert (= b (str.++ d f)))
(assert (= BAV15 (or (and (= d (str.++ e g)) (str.in.re e (re.* (str.to.re GEN1))) (> GEN2 (str.to.int g)) (= GEN3 (str.len e)) (= GEN4 (str.len (str.substr b GEN5 (str.len d))))) (and (str.in.re (str.replace (str.replace a c GEN6) GEN7 GEN8) (re.* (re.union (str.to.re GEN9) (str.to.re GEN10)))) (= GEN11 (str.to.int (str.replace (str.replace a c GEN12) GEN13 GEN14)))))))
(assert (= BAV16 (and (= d (str.++ e g)) (str.in.re e (re.* (str.to.re GEN1))) (> GEN2 (str.to.int g)) (= GEN3 (str.len e)) (= GEN4 (str.len (str.substr b GEN5 (str.len d)))))))
(assert (= BAV17 (= d (str.++ e g))))
(assert (= BAV18 (> GEN2 (str.to.int g))))
(assert (= BAV19 (= GEN3 (str.len e))))
(assert (= BAV20 (= GEN4 (str.len (str.substr b GEN5 (str.len d))))))
(assert (= BAV21 (and (str.in.re (str.replace (str.replace a c GEN6) GEN7 GEN8) (re.* (re.union (str.to.re GEN9) (str.to.re GEN10)))) (= GEN11 (str.to.int (str.replace (str.replace a c GEN12) GEN13 GEN14))))))
(assert (= BAV22 (= GEN11 (str.to.int (str.replace (str.replace a c GEN12) GEN13 GEN14)))))
(assert (= BAV23 (= b (str.++ d f))))
(check-sat)
(get-model)