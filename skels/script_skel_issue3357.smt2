(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const GEN14 String)
(declare-const GEN13 String)
(declare-const GEN12 String)
(declare-const GEN11 Int)
(declare-const GEN10 String)
(declare-const GEN9 String)
(declare-const GEN8 String)
(declare-const GEN7 String)
(declare-const GEN6 String)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 String)
(set-option :strings-exp true)
(declare-fun a () String)
(declare-fun b () String)
(declare-const c String)
(declare-const d String)
(declare-const g String)
(declare-const e String)
(declare-const f String)
(assert (or (and (= d (str.++ e g)) (str.in.re e (re.* (str.to.re "HG4"))) (> GEN2 (str.to.int g)) (= GEN3 (str.len e)) (= GEN4 (str.len (str.substr b GEN5 (str.len d))))) (and (str.in.re (str.replace (str.replace a c GEN6) GEN7 GEN8) (re.* (re.union (str.to.re GEN9) (str.to.re GEN10)))) (= GEN11 (str.to.int (str.replace (str.replace a c GEN12) GEN13 GEN14))))))
(assert (= b (str.++ d f)))
(assert (= BAV1 (or (and (= d (str.++ e g)) (str.in.re e (re.* (str.to.re "HG4"))) (> GEN2 (str.to.int g)) (= GEN3 (str.len e)) (= GEN4 (str.len (str.substr b GEN5 (str.len d))))) (and (str.in.re (str.replace (str.replace a c GEN6) GEN7 GEN8) (re.* (re.union (str.to.re GEN9) (str.to.re GEN10)))) (= GEN11 (str.to.int (str.replace (str.replace a c GEN12) GEN13 GEN14)))))))
(assert (= BAV2 (and (= d (str.++ e g)) (str.in.re e (re.* (str.to.re "HG4"))) (> GEN2 (str.to.int g)) (= GEN3 (str.len e)) (= GEN4 (str.len (str.substr b GEN5 (str.len d)))))))
(assert (= BAV3 (= d (str.++ e g))))
(assert (= BAV4 (> GEN2 (str.to.int g))))
(assert (= BAV5 (= GEN3 (str.len e))))
(assert (= BAV6 (= GEN4 (str.len (str.substr b GEN5 (str.len d))))))
(assert (= BAV7 (and (str.in.re (str.replace (str.replace a c GEN6) GEN7 GEN8) (re.* (re.union (str.to.re GEN9) (str.to.re GEN10)))) (= GEN11 (str.to.int (str.replace (str.replace a c GEN12) GEN13 GEN14))))))
(assert (= BAV8 (= GEN11 (str.to.int (str.replace (str.replace a c GEN12) GEN13 GEN14)))))
(assert (= BAV9 (= b (str.++ d f))))
(check-sat)
(get-model)