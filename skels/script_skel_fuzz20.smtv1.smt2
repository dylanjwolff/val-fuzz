(set-option :incremental false)
(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const BAV23 Bool)
(declare-const BAV24 Bool)
(declare-const BAV25 Bool)
(declare-const BAV26 Bool)
(declare-const BAV27 Bool)
(declare-const BAV28 Bool)
(declare-const BAV29 Bool)
(declare-const BAV30 Bool)
(declare-const BAV31 Bool)
(declare-const BAV32 Bool)
(declare-const BAV33 Bool)
(declare-const BAV34 Bool)
(declare-const BAV35 Bool)
(declare-const BAV36 Bool)
(declare-const BAV37 Bool)
(declare-const BAV38 Bool)
(declare-const BAV39 Bool)
(declare-const BAV40 Bool)
(declare-const BAV41 Bool)
(declare-const BAV42 Bool)
(declare-const BAV43 Bool)
(declare-const BAV44 Bool)
(declare-const BAV45 Bool)
(declare-const BAV46 Bool)
(declare-const BAV47 Bool)
(declare-const BAV48 Bool)
(declare-const BAV49 Bool)
(declare-const BAV50 Bool)
(declare-const BAV51 Bool)
(declare-const BAV52 Bool)
(declare-const BAV53 Bool)
(declare-const BAV54 Bool)
(declare-const BAV55 Bool)
(declare-const BAV56 Bool)
(declare-const BAV57 Bool)
(declare-const BAV58 Bool)
(declare-const BAV59 Bool)
(declare-const BAV60 Bool)
(declare-const BAV61 Bool)
(declare-const BAV62 Bool)
(declare-const BAV63 Bool)
(declare-const BAV64 Bool)
(declare-const BAV65 Bool)
(declare-const BAV66 Bool)
(declare-const BAV67 Bool)
(declare-const BAV68 Bool)
(declare-const BAV69 Bool)
(declare-const BAV70 Bool)
(declare-const BAV71 Bool)
(declare-const BAV72 Bool)
(declare-const BAV73 Bool)
(declare-const BAV74 Bool)
(declare-const BAV75 Bool)
(declare-const BAV76 Bool)
(declare-const BAV77 Bool)
(declare-const BAV78 Bool)
(declare-const BAV79 Bool)
(declare-const BAV80 Bool)
(declare-const BAV81 Bool)
(declare-const BAV82 Bool)
(declare-const BAV83 Bool)
(declare-const BAV84 Bool)
(declare-const BAV85 Bool)
(declare-const BAV86 Bool)
(declare-const BAV87 Bool)
(declare-const BAV88 Bool)
(declare-const BAV89 Bool)
(declare-const BAV90 Bool)
(declare-const BAV91 Bool)
(declare-const BAV92 Bool)
(declare-const BAV93 Bool)
(declare-const BAV94 Bool)
(declare-const BAV95 Bool)
(declare-const BAV96 Bool)
(declare-const BAV97 Bool)
(declare-const BAV98 Bool)
(declare-const BAV99 Bool)
(declare-const BAV100 Bool)
(declare-const BAV101 Bool)
(declare-const BAV102 Bool)
(declare-const BAV103 Bool)
(declare-const BAV104 Bool)
(declare-const BAV105 Bool)
(declare-const BAV106 Bool)
(declare-const BAV107 Bool)
(declare-const BAV108 Bool)
(declare-const BAV109 Bool)
(declare-const BAV110 Bool)
(declare-const BAV111 Bool)
(declare-const BAV112 Bool)
(declare-const BAV113 Bool)
(declare-const BAV114 Bool)
(declare-const BAV115 Bool)
(declare-const BAV116 Bool)
(declare-const BAV117 Bool)
(declare-const BAV118 Bool)
(declare-const BAV119 Bool)
(declare-const BAV120 Bool)
(declare-const BAV121 Bool)
(declare-const BAV122 Bool)
(declare-const BAV123 Bool)
(declare-const BAV124 Bool)
(declare-const BAV125 Bool)
(declare-const BAV126 Bool)
(declare-const BAV127 Bool)
(declare-const BAV128 Bool)
(declare-const BAV129 Bool)
(declare-const BAV130 Bool)
(declare-const BAV131 Bool)
(declare-const BAV132 Bool)
(declare-const BAV133 Bool)
(declare-const BAV134 Bool)
(declare-const BAV135 Bool)
(declare-const BAV136 Bool)
(declare-const GEN170 Int)
(declare-const GEN169 Int)
(declare-const GEN168 Int)
(declare-const GEN167 Int)
(declare-const GEN166 Int)
(declare-const GEN165 Int)
(declare-const GEN164 Int)
(declare-const GEN163 Int)
(declare-const GEN162 Int)
(declare-const GEN161 Int)
(declare-const GEN160 Int)
(declare-const GEN159 Int)
(declare-const GEN158 Int)
(declare-const GEN157 Int)
(declare-const GEN156 Int)
(declare-const GEN155 Int)
(declare-const GEN154 Int)
(declare-const GEN153 Int)
(declare-const GEN152 Int)
(declare-const GEN151 Int)
(declare-const GEN150 Int)
(declare-const GEN149 Int)
(declare-const GEN148 Int)
(declare-const GEN147 Int)
(declare-const GEN146 Int)
(declare-const GEN145 Int)
(declare-const GEN144 Int)
(declare-const GEN143 Int)
(declare-const GEN142 Int)
(declare-const GEN141 Int)
(declare-const GEN140 Int)
(declare-const GEN139 Int)
(declare-const GEN138 Int)
(declare-const GEN137 Int)
(declare-const GEN136 Int)
(declare-const GEN135 Int)
(declare-const GEN134 Int)
(declare-const GEN133 Int)
(declare-const GEN132 Int)
(declare-const GEN131 Int)
(declare-const GEN130 Int)
(declare-const GEN129 Int)
(declare-const GEN128 Int)
(declare-const GEN127 Int)
(declare-const GEN126 Int)
(declare-const GEN125 Int)
(declare-const GEN124 Int)
(declare-const GEN123 Int)
(declare-const GEN122 Int)
(declare-const GEN121 Int)
(declare-const GEN120 Int)
(declare-const GEN119 Int)
(declare-const GEN118 Int)
(declare-const GEN117 Int)
(declare-const GEN116 Int)
(declare-const GEN115 Int)
(declare-const GEN114 Int)
(declare-const GEN113 Int)
(declare-const GEN112 Int)
(declare-const GEN111 Int)
(declare-const GEN110 Int)
(declare-const GEN109 Int)
(declare-const GEN108 Int)
(declare-const GEN107 Int)
(declare-const GEN106 Int)
(declare-const GEN105 Int)
(declare-const GEN104 Int)
(declare-const GEN103 Int)
(declare-const GEN102 Int)
(declare-const GEN101 Int)
(declare-const GEN100 Int)
(declare-const GEN99 Int)
(declare-const GEN98 Int)
(declare-const GEN97 Int)
(declare-const GEN96 Int)
(declare-const GEN95 Int)
(declare-const GEN94 Int)
(declare-const GEN93 Int)
(declare-const GEN92 Int)
(declare-const GEN91 Int)
(declare-const GEN90 Int)
(declare-const GEN89 Int)
(declare-const GEN88 Int)
(declare-const GEN87 Int)
(declare-const GEN86 Int)
(declare-const GEN85 Int)
(declare-const GEN84 Int)
(declare-const GEN83 Int)
(declare-const GEN82 Int)
(declare-const GEN81 Int)
(declare-const GEN80 Int)
(declare-const GEN79 Int)
(declare-const GEN78 Int)
(declare-const GEN77 Int)
(declare-const GEN76 Int)
(declare-const GEN75 Int)
(declare-const GEN74 Int)
(declare-const GEN73 Int)
(declare-const GEN72 Int)
(declare-const GEN71 Int)
(declare-const GEN70 Int)
(declare-const GEN69 Int)
(declare-const GEN68 Int)
(declare-const GEN67 Int)
(declare-const GEN66 Int)
(declare-const GEN65 Int)
(declare-const GEN64 Int)
(declare-const GEN63 Int)
(declare-const GEN62 Int)
(declare-const GEN61 Int)
(declare-const GEN60 Int)
(declare-const GEN59 Int)
(declare-const GEN58 Int)
(declare-const GEN57 Int)
(declare-const GEN56 Int)
(declare-const GEN55 Int)
(declare-const GEN54 Int)
(declare-const GEN53 Int)
(declare-const GEN52 Int)
(declare-const GEN51 Int)
(declare-const GEN50 Int)
(declare-const GEN49 Int)
(declare-const GEN48 Int)
(declare-const GEN47 Int)
(declare-const GEN46 Int)
(declare-const GEN45 Int)
(declare-const GEN44 Int)
(declare-const GEN43 Int)
(declare-const GEN42 Int)
(declare-const GEN41 Int)
(declare-const GEN40 Int)
(declare-const GEN39 Int)
(declare-const GEN38 Int)
(declare-const GEN37 Int)
(declare-const GEN36 Int)
(declare-const GEN35 Int)
(declare-const GEN34 Int)
(declare-const GEN33 Int)
(declare-const GEN32 Int)
(declare-const GEN31 Int)
(declare-const GEN30 Int)
(declare-const GEN29 Int)
(declare-const GEN28 Int)
(declare-const GEN27 Int)
(declare-const GEN26 Int)
(declare-const GEN25 Int)
(declare-const GEN24 Int)
(declare-const GEN23 Int)
(declare-const GEN22 Int)
(declare-const GEN21 Int)
(declare-const GEN20 Int)
(declare-const GEN19 Int)
(declare-const GEN18 Int)
(declare-const GEN17 Int)
(declare-const GEN16 Int)
(declare-const GEN15 Int)
(declare-const GEN14 Int)
(declare-const GEN13 Int)
(declare-const GEN12 Int)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-fun v0 () (_ BitVec 4))
(declare-fun v1 () (_ BitVec 4))
(declare-fun v2 () (_ BitVec 4))
(assert (= BAV1 (and (or (not (bvugt (_ bv7 4) (_ bv8 4))) (not (bvslt (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (= ((_ zero_extend 3) (ite (bvule (_ bv2 4) ((_ zero_extend 0) v1)) (_ bv1 1) (_ bv0 1))) (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))))) (or (bvuge ((_ sign_extend 3) (ite (bvsgt ((_ zero_extend 0) v1) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvand ((_ zero_extend 3) (ite (bvule (_ bv2 4) ((_ zero_extend 0) v1)) (_ bv1 1) (_ bv0 1))) v0)) (= v0 ((_ zero_extend 3) (bvnot (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (not (bvule (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)) (bvnot (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)))))) (or (not (distinct (bvnot (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvsub (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1)) (bvnot (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1)))))) (bvugt (_ bv2 4) v1) (bvugt ((_ sign_extend 3) (ite (bvsgt ((_ zero_extend 0) v1) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0))))) (or (not (bvsgt (bvnot v0) (_ bv2 4))) (not (= ((_ zero_extend 3) (ite (bvsgt (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv6 4)) (_ bv1 1) (_ bv0 1))) (bvnand (_ bv2 4) v0))) (not (bvugt ((_ sign_extend 3) (ite (bvsgt ((_ zero_extend 0) v1) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))))) (or (not (bvugt (bvor v0 (_ bv3 4)) (bvneg (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))))))) (not (bvugt (_ bv7 4) (_ bv8 4))) (bvuge (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0))) (bvashr (bvnand (_ bv2 4) v0) (_ bv8 4)))) (or (not (bvugt ((_ zero_extend 0) v1) v0)) (bvsle ((_ sign_extend 3) (ite (distinct (_ bv8 4) (_ bv8 4)) (_ bv1 1) (_ bv0 1))) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0))) (bvslt ((_ zero_extend 0) v1) ((_ zero_extend 3) (bvnot (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1)))))) (or (= (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))) (bvmul v2 v2)) (not (distinct (bvashr (bvnand (_ bv2 4) v0) (_ bv8 4)) v1)) (not (= ((_ zero_extend 3) (ite (bvule (_ bv2 4) ((_ zero_extend 0) v1)) (_ bv1 1) (_ bv0 1))) (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2)))))) (or (bvsgt (_ bv8 4) (_ bv2 4)) (not (bvsgt (bvashr (bvnand (_ bv2 4) v0) (_ bv8 4)) (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1)))) (= (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1) (_ bv2 4))) (or (bvule (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)) (bvnot (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)))) (not (bvsgt ((_ zero_extend 3) (ite (bvsgt ((_ zero_extend 0) v1) (bvnand (_ bv2 4) v0)) (_ bv1 1) (_ bv0 1))) v1)) (not (bvsle (_ bv6 4) (_ bv6 4)))) (or (not (bvsgt (bvmul v2 v2) ((_ sign_extend 3) (ite (distinct (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)) (_ bv1 1) (_ bv0 1))))) (distinct (bvashr (bvnand (_ bv2 4) v0) (_ bv8 4)) ((_ sign_extend 3) (ite (bvsgt (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv6 4)) (_ bv1 1) (_ bv0 1)))) (not (bvsgt (bvashr (bvnand (_ bv2 4) v0) (_ bv8 4)) (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1))))) (or (bvule ((_ sign_extend 3) (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1))) (bvor (_ bv7 4) v1)) (bvslt (bvxnor ((_ sign_extend 3) (ite (distinct (_ bv8 4) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))) v0) (_ bv8 4)) (not (bvsle (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1)) ((_ zero_extend 3) ((_ rotate_left 0) (bvnot (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)))))))) (or (bvsgt ((_ sign_extend 3) (ite (distinct (_ bv8 4) (_ bv8 4)) (_ bv1 1) (_ bv0 1))) (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1))) (not (bvsgt (_ bv8 4) (_ bv2 4))) (bvsgt (bvlshr (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))) (bvlshr v2 (bvor (_ bv7 4) v1))) v1)) (or (bvsgt (bvashr (bvnand (_ bv2 4) v0) (_ bv8 4)) (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1))) (bvsgt (bvashr (bvnand (_ bv2 4) v0) (_ bv8 4)) (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1))) (bvsgt (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1)) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))))) (or (= (bvneg (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))))) (bvsub ((_ zero_extend 0) v1) (bvor (_ bv7 4) v1))) (bvslt (bvsub ((_ zero_extend 0) v1) (bvor (_ bv7 4) v1)) (_ bv6 4)) (not (bvsle (_ bv2 4) (bvxnor ((_ sign_extend 3) (ite (distinct (_ bv8 4) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))) v0)))) (or (distinct (_ bv8 4) ((_ zero_extend 3) (bvnot (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1))))) (bvult ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)) (_ bv2 4)) (bvugt (bvneg (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))))) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)))))) (or (= (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1)) (bvsub (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1)) (bvnot (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1))))) (not (bvsgt (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1)) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))))) (distinct (bvnot v0) ((_ zero_extend 3) (ite (bvsgt (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv6 4)) (_ bv1 1) (_ bv0 1))))) (or (distinct (bvneg (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))))) v0) (bvsgt ((_ zero_extend 3) (ite (bvsgt ((_ zero_extend 0) v1) (bvnand (_ bv2 4) v0)) (_ bv1 1) (_ bv0 1))) v1) (not (bvslt (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)))))) (or (not (distinct (bvashr (bvnand (_ bv2 4) v0) (_ bv8 4)) ((_ sign_extend 3) (ite (bvsgt (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv6 4)) (_ bv1 1) (_ bv0 1))))) (not (bvslt (bvor (_ bv7 4) v1) (bvmul v2 v2))) (bvsgt (bvor v2 v0) ((_ sign_extend 3) (ite (distinct (_ bv8 4) (_ bv8 4)) (_ bv1 1) (_ bv0 1))))) (or (not (bvsge (bvxnor ((_ sign_extend 3) (ite (distinct (_ bv8 4) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))) v0) ((_ rotate_left 1) (bvmul v2 v2)))) (bvsgt (_ bv8 4) (_ bv2 4)) (not (bvule (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1) (bvmul v2 v2)))) (or (not (bvslt (bvxnor ((_ sign_extend 3) (ite (distinct (_ bv8 4) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))) v0) (_ bv8 4))) (not (bvult ((_ zero_extend 0) v1) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0))))) (not (bvslt (bvlshr v2 (bvor (_ bv7 4) v1)) (bvnot v0)))) (or (bvule v1 (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)) (not (bvsge (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (bvlshr v2 (bvor (_ bv7 4) v1)))) (bvuge (bvneg (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))))) ((_ zero_extend 3) ((_ rotate_left 0) (bvnot (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))))) (or (not (bvugt ((_ sign_extend 3) (ite (bvsgt ((_ zero_extend 0) v1) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0))))) (not (bvsgt (bvnot v0) (_ bv2 4))) (not (= (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)))) ((_ zero_extend 3) (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1)))))) (or (= ((_ sign_extend 3) (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1))) (bvor v0 (_ bv3 4))) (not (distinct (_ bv8 4) ((_ zero_extend 3) (bvnot (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1)))))) (not (= ((_ sign_extend 3) (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1))) (bvor v0 (_ bv3 4))))) (or (not (bvsgt (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1)) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))))) (not (distinct (bvashr (bvnand (_ bv2 4) v0) (_ bv8 4)) ((_ sign_extend 3) (ite (bvsgt (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv6 4)) (_ bv1 1) (_ bv0 1))))) (bvsle ((_ sign_extend 3) (ite (distinct (_ bv8 4) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))) v2)) (or (= (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))) (bvmul v2 v2)) (bvugt ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)) ((_ zero_extend 3) (bvnot (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (bvsgt (bvnot v0) (_ bv2 4))) (or (not (= (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1)) (bvsub (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1)) (bvnot (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1)))))) (bvsgt ((_ zero_extend 3) (ite (bvsgt ((_ zero_extend 0) v1) (bvnand (_ bv2 4) v0)) (_ bv1 1) (_ bv0 1))) v1) (bvugt (_ bv7 4) (_ bv8 4))) (or (bvsge (_ bv6 4) (bvsub ((_ zero_extend 0) v1) (bvor (_ bv7 4) v1))) (not (distinct (bvor v0 (_ bv3 4)) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (bvult ((_ zero_extend 0) v1) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0))))) (or (not (bvsle (_ bv6 4) (_ bv6 4))) (not (bvsle ((_ rotate_right 0) (bvmul v2 v2)) (bvxnor ((_ sign_extend 3) (ite (distinct (_ bv8 4) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))) v0))) (not (bvslt (bvand ((_ zero_extend 3) (ite (bvule (_ bv2 4) ((_ zero_extend 0) v1)) (_ bv1 1) (_ bv0 1))) v0) ((_ sign_extend 3) (ite (bvsgt (bvand ((_ zero_extend 3) (ite (bvule (_ bv2 4) ((_ zero_extend 0) v1)) (_ bv1 1) (_ bv0 1))) v0) (_ bv3 4)) (_ bv1 1) (_ bv0 1)))))) (or (not (= (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))) (bvmul v2 v2))) (not (bvult ((_ repeat 1) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))) ((_ repeat 1) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))))) (not (bvslt (bvxnor ((_ sign_extend 3) (ite (distinct (_ bv8 4) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))) v0) (_ bv8 4)))) (or (not (bvult ((_ repeat 1) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))) v0)) (not (bvslt (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (bvult (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) ((_ zero_extend 3) (ite (bvsgt ((_ zero_extend 0) v1) (bvnand (_ bv2 4) v0)) (_ bv1 1) (_ bv0 1))))) (or (not (bvult ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)) (_ bv2 4))) (bvsge (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (bvlshr v2 (bvor (_ bv7 4) v1))) (distinct (bvashr (bvnand (_ bv2 4) v0) (_ bv8 4)) v1)) (or (not (bvugt (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))) (bvslt (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)))) (bvugt (bvor v0 (_ bv3 4)) (bvneg (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (or (not (bvult ((_ repeat 1) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))) ((_ repeat 1) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))))) (not (= v0 ((_ zero_extend 3) (bvnot (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)))))) (not (bvsgt ((_ sign_extend 3) (ite (distinct (_ bv8 4) (_ bv8 4)) (_ bv1 1) (_ bv0 1))) (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1))))) (or (not (bvsgt (bvmul v2 v2) ((_ sign_extend 3) (ite (distinct (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)) (_ bv1 1) (_ bv0 1))))) (= (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))) (bvmul v2 v2)) (not (bvule ((_ sign_extend 3) (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1))) (bvor (_ bv7 4) v1)))) (or (not (= ((_ zero_extend 3) (ite (bvsgt (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv6 4)) (_ bv1 1) (_ bv0 1))) (bvnand (_ bv2 4) v0))) (= (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0) (_ bv3 4)) (not (bvult ((_ repeat 1) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))) v0))) (or (bvsgt (_ bv8 4) (_ bv2 4)) (not (bvslt ((_ zero_extend 0) v1) ((_ zero_extend 3) (bvnot (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1)))))) (distinct (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))) ((_ zero_extend 3) (ite (bvule (_ bv2 4) ((_ zero_extend 0) v1)) (_ bv1 1) (_ bv0 1))))) (or (not (bvule (bvor v0 (_ bv3 4)) ((_ zero_extend 0) v1))) (not (bvsgt (_ bv8 4) (_ bv2 4))) (not (bvule (ite (bvsgt (bvand ((_ zero_extend 3) (ite (bvule (_ bv2 4) ((_ zero_extend 0) v1)) (_ bv1 1) (_ bv0 1))) v0) (_ bv3 4)) (_ bv1 1) (_ bv0 1)) (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1))))) (or (not (bvugt (bvor v0 (_ bv3 4)) (bvneg (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (bvslt ((_ zero_extend 0) v1) ((_ zero_extend 3) (bvnot (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1))))) (bvugt (_ bv2 4) v1)) (or (distinct (bvnot v0) ((_ zero_extend 3) (ite (bvsgt (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv6 4)) (_ bv1 1) (_ bv0 1)))) (bvsgt (bvmul v2 v2) ((_ sign_extend 3) (ite (distinct (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)) (_ bv1 1) (_ bv0 1)))) (not (distinct (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1)) (bvlshr v2 (bvor (_ bv7 4) v1))))) (or (bvsgt (_ bv8 4) (_ bv2 4)) (not (bvugt (bvxnor ((_ sign_extend 3) (ite (distinct (_ bv8 4) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))) v0) ((_ zero_extend 3) (ite (bvsgt ((_ zero_extend 0) v1) (bvnand (_ bv2 4) v0)) (_ bv1 1) (_ bv0 1))))) (not (bvugt (bvor v0 (_ bv3 4)) (bvneg (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))))))) (or (not (bvule (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)) (bvnot (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (not (bvult ((_ sign_extend 3) ((_ rotate_left 0) (bvnot (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1)))) (not (bvult ((_ zero_extend 0) v1) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))))) (or (bvsge (bvxnor ((_ sign_extend 3) (ite (distinct (_ bv8 4) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))) v0) ((_ rotate_left 1) (bvmul v2 v2))) (bvslt (bvand ((_ zero_extend 3) (ite (bvule (_ bv2 4) ((_ zero_extend 0) v1)) (_ bv1 1) (_ bv0 1))) v0) ((_ sign_extend 3) (ite (bvsgt (bvand ((_ zero_extend 3) (ite (bvule (_ bv2 4) ((_ zero_extend 0) v1)) (_ bv1 1) (_ bv0 1))) v0) (_ bv3 4)) (_ bv1 1) (_ bv0 1)))) (bvslt (bvxnor ((_ sign_extend 3) (ite (distinct (_ bv8 4) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))) v0) (_ bv8 4))) (or (not (bvsle (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1)) (_ bv2 4))) (bvule (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1) (bvmul v2 v2)) (bvslt (bvlshr v2 (bvor (_ bv7 4) v1)) (bvnot v0))))))
(assert (= BAV2 (or (not (bvugt (_ bv7 4) (_ bv8 4))) (not (bvslt (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (= ((_ zero_extend 3) (ite (bvule (_ bv2 4) ((_ zero_extend 0) v1)) (_ bv1 1) (_ bv0 1))) (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2)))))))
(assert (= BAV3 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV4 (= ((_ zero_extend 3) (ite (bvule (_ bv2 4) ((_ zero_extend 0) v1)) (_ bv1 1) (_ bv0 1))) (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))))))
(assert (= BAV5 (or (bvuge ((_ sign_extend 3) (ite (bvsgt ((_ zero_extend 0) v1) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvand ((_ zero_extend 3) (ite (bvule (_ bv2 4) ((_ zero_extend 0) v1)) (_ bv1 1) (_ bv0 1))) v0)) (= v0 ((_ zero_extend 3) (bvnot (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (not (bvule (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)) (bvnot (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))))))
(assert (= BAV6 (= v0 ((_ zero_extend 3) (bvnot (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)))))))
(assert (= BAV7 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV8 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV9 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV10 (or (not (distinct (bvnot (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvsub (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1)) (bvnot (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1)))))) (bvugt (_ bv2 4) v1) (bvugt ((_ sign_extend 3) (ite (bvsgt ((_ zero_extend 0) v1) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))))))
(assert (= BAV11 (distinct (bvnot (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvsub (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1)) (bvnot (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1)))))))
(assert (= BAV12 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV13 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV14 (or (not (bvsgt (bvnot v0) (_ bv2 4))) (not (= ((_ zero_extend 3) (ite (bvsgt (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv6 4)) (_ bv1 1) (_ bv0 1))) (bvnand (_ bv2 4) v0))) (not (bvugt ((_ sign_extend 3) (ite (bvsgt ((_ zero_extend 0) v1) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0))))))))
(assert (= BAV15 (= ((_ zero_extend 3) (ite (bvsgt (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv6 4)) (_ bv1 1) (_ bv0 1))) (bvnand (_ bv2 4) v0))))
(assert (= BAV16 (or (not (bvugt (bvor v0 (_ bv3 4)) (bvneg (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))))))) (not (bvugt (_ bv7 4) (_ bv8 4))) (bvuge (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0))) (bvashr (bvnand (_ bv2 4) v0) (_ bv8 4))))))
(assert (= BAV17 (or (not (bvugt ((_ zero_extend 0) v1) v0)) (bvsle ((_ sign_extend 3) (ite (distinct (_ bv8 4) (_ bv8 4)) (_ bv1 1) (_ bv0 1))) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0))) (bvslt ((_ zero_extend 0) v1) ((_ zero_extend 3) (bvnot (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1))))))))
(assert (= BAV18 (distinct (_ bv8 4) (_ bv8 4))))
(assert (= BAV19 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV20 (or (= (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))) (bvmul v2 v2)) (not (distinct (bvashr (bvnand (_ bv2 4) v0) (_ bv8 4)) v1)) (not (= ((_ zero_extend 3) (ite (bvule (_ bv2 4) ((_ zero_extend 0) v1)) (_ bv1 1) (_ bv0 1))) (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))))))))
(assert (= BAV21 (= (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))) (bvmul v2 v2))))
(assert (= BAV22 (distinct (bvashr (bvnand (_ bv2 4) v0) (_ bv8 4)) v1)))
(assert (= BAV23 (= ((_ zero_extend 3) (ite (bvule (_ bv2 4) ((_ zero_extend 0) v1)) (_ bv1 1) (_ bv0 1))) (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))))))
(assert (= BAV24 (or (bvsgt (_ bv8 4) (_ bv2 4)) (not (bvsgt (bvashr (bvnand (_ bv2 4) v0) (_ bv8 4)) (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1)))) (= (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1) (_ bv2 4)))))
(assert (= BAV25 (= (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1) (_ bv2 4))))
(assert (= BAV26 (or (bvule (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)) (bvnot (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)))) (not (bvsgt ((_ zero_extend 3) (ite (bvsgt ((_ zero_extend 0) v1) (bvnand (_ bv2 4) v0)) (_ bv1 1) (_ bv0 1))) v1)) (not (bvsle (_ bv6 4) (_ bv6 4))))))
(assert (= BAV27 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV28 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV29 (or (not (bvsgt (bvmul v2 v2) ((_ sign_extend 3) (ite (distinct (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)) (_ bv1 1) (_ bv0 1))))) (distinct (bvashr (bvnand (_ bv2 4) v0) (_ bv8 4)) ((_ sign_extend 3) (ite (bvsgt (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv6 4)) (_ bv1 1) (_ bv0 1)))) (not (bvsgt (bvashr (bvnand (_ bv2 4) v0) (_ bv8 4)) (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1)))))))
(assert (= BAV30 (distinct (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0))))
(assert (= BAV31 (distinct (bvashr (bvnand (_ bv2 4) v0) (_ bv8 4)) ((_ sign_extend 3) (ite (bvsgt (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv6 4)) (_ bv1 1) (_ bv0 1))))))
(assert (= BAV32 (or (bvule ((_ sign_extend 3) (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1))) (bvor (_ bv7 4) v1)) (bvslt (bvxnor ((_ sign_extend 3) (ite (distinct (_ bv8 4) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))) v0) (_ bv8 4)) (not (bvsle (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1)) ((_ zero_extend 3) ((_ rotate_left 0) (bvnot (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))))))))
(assert (= BAV33 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV34 (distinct (_ bv8 4) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)))))))
(assert (= BAV35 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV36 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV37 (or (bvsgt ((_ sign_extend 3) (ite (distinct (_ bv8 4) (_ bv8 4)) (_ bv1 1) (_ bv0 1))) (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1))) (not (bvsgt (_ bv8 4) (_ bv2 4))) (bvsgt (bvlshr (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))) (bvlshr v2 (bvor (_ bv7 4) v1))) v1))))
(assert (= BAV38 (distinct (_ bv8 4) (_ bv8 4))))
(assert (= BAV39 (or (bvsgt (bvashr (bvnand (_ bv2 4) v0) (_ bv8 4)) (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1))) (bvsgt (bvashr (bvnand (_ bv2 4) v0) (_ bv8 4)) (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1))) (bvsgt (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1)) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))))))
(assert (= BAV40 (or (= (bvneg (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))))) (bvsub ((_ zero_extend 0) v1) (bvor (_ bv7 4) v1))) (bvslt (bvsub ((_ zero_extend 0) v1) (bvor (_ bv7 4) v1)) (_ bv6 4)) (not (bvsle (_ bv2 4) (bvxnor ((_ sign_extend 3) (ite (distinct (_ bv8 4) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))) v0))))))
(assert (= BAV41 (= (bvneg (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))))) (bvsub ((_ zero_extend 0) v1) (bvor (_ bv7 4) v1)))))
(assert (= BAV42 (distinct (_ bv8 4) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)))))))
(assert (= BAV43 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV44 (or (distinct (_ bv8 4) ((_ zero_extend 3) (bvnot (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1))))) (bvult ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)) (_ bv2 4)) (bvugt (bvneg (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))))) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))))))
(assert (= BAV45 (distinct (_ bv8 4) ((_ zero_extend 3) (bvnot (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1)))))))
(assert (= BAV46 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV47 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV48 (or (= (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1)) (bvsub (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1)) (bvnot (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1))))) (not (bvsgt (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1)) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))))) (distinct (bvnot v0) ((_ zero_extend 3) (ite (bvsgt (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv6 4)) (_ bv1 1) (_ bv0 1)))))))
(assert (= BAV49 (= (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1)) (bvsub (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1)) (bvnot (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1)))))))
(assert (= BAV50 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV51 (distinct (bvnot v0) ((_ zero_extend 3) (ite (bvsgt (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv6 4)) (_ bv1 1) (_ bv0 1))))))
(assert (= BAV52 (or (distinct (bvneg (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))))) v0) (bvsgt ((_ zero_extend 3) (ite (bvsgt ((_ zero_extend 0) v1) (bvnand (_ bv2 4) v0)) (_ bv1 1) (_ bv0 1))) v1) (not (bvslt (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))))))
(assert (= BAV53 (distinct (bvneg (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))))) v0)))
(assert (= BAV54 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV55 (or (not (distinct (bvashr (bvnand (_ bv2 4) v0) (_ bv8 4)) ((_ sign_extend 3) (ite (bvsgt (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv6 4)) (_ bv1 1) (_ bv0 1))))) (not (bvslt (bvor (_ bv7 4) v1) (bvmul v2 v2))) (bvsgt (bvor v2 v0) ((_ sign_extend 3) (ite (distinct (_ bv8 4) (_ bv8 4)) (_ bv1 1) (_ bv0 1)))))))
(assert (= BAV56 (distinct (bvashr (bvnand (_ bv2 4) v0) (_ bv8 4)) ((_ sign_extend 3) (ite (bvsgt (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv6 4)) (_ bv1 1) (_ bv0 1))))))
(assert (= BAV57 (distinct (_ bv8 4) (_ bv8 4))))
(assert (= BAV58 (or (not (bvsge (bvxnor ((_ sign_extend 3) (ite (distinct (_ bv8 4) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))) v0) ((_ rotate_left 1) (bvmul v2 v2)))) (bvsgt (_ bv8 4) (_ bv2 4)) (not (bvule (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1) (bvmul v2 v2))))))
(assert (= BAV59 (distinct (_ bv8 4) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)))))))
(assert (= BAV60 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV61 (or (not (bvslt (bvxnor ((_ sign_extend 3) (ite (distinct (_ bv8 4) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))) v0) (_ bv8 4))) (not (bvult ((_ zero_extend 0) v1) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0))))) (not (bvslt (bvlshr v2 (bvor (_ bv7 4) v1)) (bvnot v0))))))
(assert (= BAV62 (distinct (_ bv8 4) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)))))))
(assert (= BAV63 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV64 (or (bvule v1 (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)) (not (bvsge (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (bvlshr v2 (bvor (_ bv7 4) v1)))) (bvuge (bvneg (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))))) ((_ zero_extend 3) ((_ rotate_left 0) (bvnot (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)))))))))
(assert (= BAV65 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV66 (or (not (bvugt ((_ sign_extend 3) (ite (bvsgt ((_ zero_extend 0) v1) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0))))) (not (bvsgt (bvnot v0) (_ bv2 4))) (not (= (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)))) ((_ zero_extend 3) (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1))))))))
(assert (= BAV67 (= (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)))) ((_ zero_extend 3) (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1))))))
(assert (= BAV68 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV69 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV70 (or (= ((_ sign_extend 3) (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1))) (bvor v0 (_ bv3 4))) (not (distinct (_ bv8 4) ((_ zero_extend 3) (bvnot (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1)))))) (not (= ((_ sign_extend 3) (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1))) (bvor v0 (_ bv3 4)))))))
(assert (= BAV71 (= ((_ sign_extend 3) (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1))) (bvor v0 (_ bv3 4)))))
(assert (= BAV72 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV73 (distinct (_ bv8 4) ((_ zero_extend 3) (bvnot (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1)))))))
(assert (= BAV74 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV75 (= ((_ sign_extend 3) (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1))) (bvor v0 (_ bv3 4)))))
(assert (= BAV76 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV77 (or (not (bvsgt (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1)) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))))) (not (distinct (bvashr (bvnand (_ bv2 4) v0) (_ bv8 4)) ((_ sign_extend 3) (ite (bvsgt (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv6 4)) (_ bv1 1) (_ bv0 1))))) (bvsle ((_ sign_extend 3) (ite (distinct (_ bv8 4) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))) v2))))
(assert (= BAV78 (distinct (bvashr (bvnand (_ bv2 4) v0) (_ bv8 4)) ((_ sign_extend 3) (ite (bvsgt (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv6 4)) (_ bv1 1) (_ bv0 1))))))
(assert (= BAV79 (distinct (_ bv8 4) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)))))))
(assert (= BAV80 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV81 (or (= (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))) (bvmul v2 v2)) (bvugt ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)) ((_ zero_extend 3) (bvnot (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (bvsgt (bvnot v0) (_ bv2 4)))))
(assert (= BAV82 (= (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))) (bvmul v2 v2))))
(assert (= BAV83 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV84 (or (not (= (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1)) (bvsub (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1)) (bvnot (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1)))))) (bvsgt ((_ zero_extend 3) (ite (bvsgt ((_ zero_extend 0) v1) (bvnand (_ bv2 4) v0)) (_ bv1 1) (_ bv0 1))) v1) (bvugt (_ bv7 4) (_ bv8 4)))))
(assert (= BAV85 (= (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1)) (bvsub (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1)) (bvnot (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1)))))))
(assert (= BAV86 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV87 (or (bvsge (_ bv6 4) (bvsub ((_ zero_extend 0) v1) (bvor (_ bv7 4) v1))) (not (distinct (bvor v0 (_ bv3 4)) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (bvult ((_ zero_extend 0) v1) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))))))
(assert (= BAV88 (distinct (bvor v0 (_ bv3 4)) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))))
(assert (= BAV89 (or (not (bvsle (_ bv6 4) (_ bv6 4))) (not (bvsle ((_ rotate_right 0) (bvmul v2 v2)) (bvxnor ((_ sign_extend 3) (ite (distinct (_ bv8 4) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))) v0))) (not (bvslt (bvand ((_ zero_extend 3) (ite (bvule (_ bv2 4) ((_ zero_extend 0) v1)) (_ bv1 1) (_ bv0 1))) v0) ((_ sign_extend 3) (ite (bvsgt (bvand ((_ zero_extend 3) (ite (bvule (_ bv2 4) ((_ zero_extend 0) v1)) (_ bv1 1) (_ bv0 1))) v0) (_ bv3 4)) (_ bv1 1) (_ bv0 1))))))))
(assert (= BAV90 (distinct (_ bv8 4) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)))))))
(assert (= BAV91 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV92 (or (not (= (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))) (bvmul v2 v2))) (not (bvult ((_ repeat 1) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))) ((_ repeat 1) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))))) (not (bvslt (bvxnor ((_ sign_extend 3) (ite (distinct (_ bv8 4) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))) v0) (_ bv8 4))))))
(assert (= BAV93 (= (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))) (bvmul v2 v2))))
(assert (= BAV94 (distinct (_ bv8 4) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)))))))
(assert (= BAV95 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV96 (or (not (bvult ((_ repeat 1) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))) v0)) (not (bvslt (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (bvult (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) ((_ zero_extend 3) (ite (bvsgt ((_ zero_extend 0) v1) (bvnand (_ bv2 4) v0)) (_ bv1 1) (_ bv0 1)))))))
(assert (= BAV97 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV98 (or (not (bvult ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)) (_ bv2 4))) (bvsge (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (bvlshr v2 (bvor (_ bv7 4) v1))) (distinct (bvashr (bvnand (_ bv2 4) v0) (_ bv8 4)) v1))))
(assert (= BAV99 (distinct (bvashr (bvnand (_ bv2 4) v0) (_ bv8 4)) v1)))
(assert (= BAV100 (or (not (bvugt (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))) (bvslt (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)))) (bvugt (bvor v0 (_ bv3 4)) (bvneg (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0))))))
(assert (= BAV101 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV102 (or (not (bvult ((_ repeat 1) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))) ((_ repeat 1) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))))) (not (= v0 ((_ zero_extend 3) (bvnot (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)))))) (not (bvsgt ((_ sign_extend 3) (ite (distinct (_ bv8 4) (_ bv8 4)) (_ bv1 1) (_ bv0 1))) (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1)))))))
(assert (= BAV103 (= v0 ((_ zero_extend 3) (bvnot (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)))))))
(assert (= BAV104 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV105 (distinct (_ bv8 4) (_ bv8 4))))
(assert (= BAV106 (or (not (bvsgt (bvmul v2 v2) ((_ sign_extend 3) (ite (distinct (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)) (_ bv1 1) (_ bv0 1))))) (= (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))) (bvmul v2 v2)) (not (bvule ((_ sign_extend 3) (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1))) (bvor (_ bv7 4) v1))))))
(assert (= BAV107 (distinct (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0))))
(assert (= BAV108 (= (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))) (bvmul v2 v2))))
(assert (= BAV109 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV110 (or (not (= ((_ zero_extend 3) (ite (bvsgt (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv6 4)) (_ bv1 1) (_ bv0 1))) (bvnand (_ bv2 4) v0))) (= (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0) (_ bv3 4)) (not (bvult ((_ repeat 1) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))) v0)))))
(assert (= BAV111 (= ((_ zero_extend 3) (ite (bvsgt (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv6 4)) (_ bv1 1) (_ bv0 1))) (bvnand (_ bv2 4) v0))))
(assert (= BAV112 (= (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0) (_ bv3 4))))
(assert (= BAV113 (or (bvsgt (_ bv8 4) (_ bv2 4)) (not (bvslt ((_ zero_extend 0) v1) ((_ zero_extend 3) (bvnot (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1)))))) (distinct (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))) ((_ zero_extend 3) (ite (bvule (_ bv2 4) ((_ zero_extend 0) v1)) (_ bv1 1) (_ bv0 1)))))))
(assert (= BAV114 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV115 (distinct (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))) ((_ zero_extend 3) (ite (bvule (_ bv2 4) ((_ zero_extend 0) v1)) (_ bv1 1) (_ bv0 1))))))
(assert (= BAV116 (or (not (bvule (bvor v0 (_ bv3 4)) ((_ zero_extend 0) v1))) (not (bvsgt (_ bv8 4) (_ bv2 4))) (not (bvule (ite (bvsgt (bvand ((_ zero_extend 3) (ite (bvule (_ bv2 4) ((_ zero_extend 0) v1)) (_ bv1 1) (_ bv0 1))) v0) (_ bv3 4)) (_ bv1 1) (_ bv0 1)) (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1)))))))
(assert (= BAV117 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV118 (or (not (bvugt (bvor v0 (_ bv3 4)) (bvneg (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (bvslt ((_ zero_extend 0) v1) ((_ zero_extend 3) (bvnot (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1))))) (bvugt (_ bv2 4) v1))))
(assert (= BAV119 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV120 (or (distinct (bvnot v0) ((_ zero_extend 3) (ite (bvsgt (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv6 4)) (_ bv1 1) (_ bv0 1)))) (bvsgt (bvmul v2 v2) ((_ sign_extend 3) (ite (distinct (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)) (_ bv1 1) (_ bv0 1)))) (not (distinct (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1)) (bvlshr v2 (bvor (_ bv7 4) v1)))))))
(assert (= BAV121 (distinct (bvnot v0) ((_ zero_extend 3) (ite (bvsgt (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv6 4)) (_ bv1 1) (_ bv0 1))))))
(assert (= BAV122 (distinct (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0))))
(assert (= BAV123 (distinct (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1)) (bvlshr v2 (bvor (_ bv7 4) v1)))))
(assert (= BAV124 (or (bvsgt (_ bv8 4) (_ bv2 4)) (not (bvugt (bvxnor ((_ sign_extend 3) (ite (distinct (_ bv8 4) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))) v0) ((_ zero_extend 3) (ite (bvsgt ((_ zero_extend 0) v1) (bvnand (_ bv2 4) v0)) (_ bv1 1) (_ bv0 1))))) (not (bvugt (bvor v0 (_ bv3 4)) (bvneg (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))))))))))
(assert (= BAV125 (distinct (_ bv8 4) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)))))))
(assert (= BAV126 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV127 (or (not (bvule (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)) (bvnot (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (not (bvult ((_ sign_extend 3) ((_ rotate_left 0) (bvnot (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1)))) (not (bvult ((_ zero_extend 0) v1) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0))))))))
(assert (= BAV128 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV129 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV130 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV131 (or (bvsge (bvxnor ((_ sign_extend 3) (ite (distinct (_ bv8 4) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))) v0) ((_ rotate_left 1) (bvmul v2 v2))) (bvslt (bvand ((_ zero_extend 3) (ite (bvule (_ bv2 4) ((_ zero_extend 0) v1)) (_ bv1 1) (_ bv0 1))) v0) ((_ sign_extend 3) (ite (bvsgt (bvand ((_ zero_extend 3) (ite (bvule (_ bv2 4) ((_ zero_extend 0) v1)) (_ bv1 1) (_ bv0 1))) v0) (_ bv3 4)) (_ bv1 1) (_ bv0 1)))) (bvslt (bvxnor ((_ sign_extend 3) (ite (distinct (_ bv8 4) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))) v0) (_ bv8 4)))))
(assert (= BAV132 (distinct (_ bv8 4) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)))))))
(assert (= BAV133 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV134 (distinct (_ bv8 4) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)))))))
(assert (= BAV135 (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))))
(assert (= BAV136 (or (not (bvsle (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1)) (_ bv2 4))) (bvule (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1) (bvmul v2 v2)) (bvslt (bvlshr v2 (bvor (_ bv7 4) v1)) (bvnot v0)))))
(check-sat-assuming ((and (or (not (bvugt (_ bv7 4) (_ bv8 4))) (not (bvslt (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (= ((_ zero_extend 3) (ite (bvule (_ bv2 4) ((_ zero_extend 0) v1)) (_ bv1 1) (_ bv0 1))) (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))))) (or (bvuge ((_ sign_extend 3) (ite (bvsgt ((_ zero_extend 0) v1) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvand ((_ zero_extend 3) (ite (bvule (_ bv2 4) ((_ zero_extend 0) v1)) (_ bv1 1) (_ bv0 1))) v0)) (= v0 ((_ zero_extend 3) (bvnot (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (not (bvule (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)) (bvnot (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)))))) (or (not (distinct (bvnot (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvsub (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1)) (bvnot (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1)))))) (bvugt (_ bv2 4) v1) (bvugt ((_ sign_extend 3) (ite (bvsgt ((_ zero_extend 0) v1) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0))))) (or (not (bvsgt (bvnot v0) (_ bv2 4))) (not (= ((_ zero_extend 3) (ite (bvsgt (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv6 4)) (_ bv1 1) (_ bv0 1))) (bvnand (_ bv2 4) v0))) (not (bvugt ((_ sign_extend 3) (ite (bvsgt ((_ zero_extend 0) v1) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))))) (or (not (bvugt (bvor v0 (_ bv3 4)) (bvneg (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))))))) (not (bvugt (_ bv7 4) (_ bv8 4))) (bvuge (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0))) (bvashr (bvnand (_ bv2 4) v0) (_ bv8 4)))) (or (not (bvugt ((_ zero_extend 0) v1) v0)) (bvsle ((_ sign_extend 3) (ite (distinct (_ bv8 4) (_ bv8 4)) (_ bv1 1) (_ bv0 1))) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0))) (bvslt ((_ zero_extend 0) v1) ((_ zero_extend 3) (bvnot (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1)))))) (or (= (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))) (bvmul v2 v2)) (not (distinct (bvashr (bvnand (_ bv2 4) v0) (_ bv8 4)) v1)) (not (= ((_ zero_extend 3) (ite (bvule (_ bv2 4) ((_ zero_extend 0) v1)) (_ bv1 1) (_ bv0 1))) (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2)))))) (or (bvsgt (_ bv8 4) (_ bv2 4)) (not (bvsgt (bvashr (bvnand (_ bv2 4) v0) (_ bv8 4)) (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1)))) (= (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1) (_ bv2 4))) (or (bvule (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)) (bvnot (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)))) (not (bvsgt ((_ zero_extend 3) (ite (bvsgt ((_ zero_extend 0) v1) (bvnand (_ bv2 4) v0)) (_ bv1 1) (_ bv0 1))) v1)) (not (bvsle (_ bv6 4) (_ bv6 4)))) (or (not (bvsgt (bvmul v2 v2) ((_ sign_extend 3) (ite (distinct (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)) (_ bv1 1) (_ bv0 1))))) (distinct (bvashr (bvnand (_ bv2 4) v0) (_ bv8 4)) ((_ sign_extend 3) (ite (bvsgt (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv6 4)) (_ bv1 1) (_ bv0 1)))) (not (bvsgt (bvashr (bvnand (_ bv2 4) v0) (_ bv8 4)) (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1))))) (or (bvule ((_ sign_extend 3) (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1))) (bvor (_ bv7 4) v1)) (bvslt (bvxnor ((_ sign_extend 3) (ite (distinct (_ bv8 4) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))) v0) (_ bv8 4)) (not (bvsle (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1)) ((_ zero_extend 3) ((_ rotate_left 0) (bvnot (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)))))))) (or (bvsgt ((_ sign_extend 3) (ite (distinct (_ bv8 4) (_ bv8 4)) (_ bv1 1) (_ bv0 1))) (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1))) (not (bvsgt (_ bv8 4) (_ bv2 4))) (bvsgt (bvlshr (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))) (bvlshr v2 (bvor (_ bv7 4) v1))) v1)) (or (bvsgt (bvashr (bvnand (_ bv2 4) v0) (_ bv8 4)) (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1))) (bvsgt (bvashr (bvnand (_ bv2 4) v0) (_ bv8 4)) (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1))) (bvsgt (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1)) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))))) (or (= (bvneg (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))))) (bvsub ((_ zero_extend 0) v1) (bvor (_ bv7 4) v1))) (bvslt (bvsub ((_ zero_extend 0) v1) (bvor (_ bv7 4) v1)) (_ bv6 4)) (not (bvsle (_ bv2 4) (bvxnor ((_ sign_extend 3) (ite (distinct (_ bv8 4) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))) v0)))) (or (distinct (_ bv8 4) ((_ zero_extend 3) (bvnot (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1))))) (bvult ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)) (_ bv2 4)) (bvugt (bvneg (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))))) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)))))) (or (= (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1)) (bvsub (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1)) (bvnot (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1))))) (not (bvsgt (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1)) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))))) (distinct (bvnot v0) ((_ zero_extend 3) (ite (bvsgt (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv6 4)) (_ bv1 1) (_ bv0 1))))) (or (distinct (bvneg (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))))) v0) (bvsgt ((_ zero_extend 3) (ite (bvsgt ((_ zero_extend 0) v1) (bvnand (_ bv2 4) v0)) (_ bv1 1) (_ bv0 1))) v1) (not (bvslt (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)))))) (or (not (distinct (bvashr (bvnand (_ bv2 4) v0) (_ bv8 4)) ((_ sign_extend 3) (ite (bvsgt (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv6 4)) (_ bv1 1) (_ bv0 1))))) (not (bvslt (bvor (_ bv7 4) v1) (bvmul v2 v2))) (bvsgt (bvor v2 v0) ((_ sign_extend 3) (ite (distinct (_ bv8 4) (_ bv8 4)) (_ bv1 1) (_ bv0 1))))) (or (not (bvsge (bvxnor ((_ sign_extend 3) (ite (distinct (_ bv8 4) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))) v0) ((_ rotate_left 1) (bvmul v2 v2)))) (bvsgt (_ bv8 4) (_ bv2 4)) (not (bvule (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1) (bvmul v2 v2)))) (or (not (bvslt (bvxnor ((_ sign_extend 3) (ite (distinct (_ bv8 4) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))) v0) (_ bv8 4))) (not (bvult ((_ zero_extend 0) v1) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0))))) (not (bvslt (bvlshr v2 (bvor (_ bv7 4) v1)) (bvnot v0)))) (or (bvule v1 (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)) (not (bvsge (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (bvlshr v2 (bvor (_ bv7 4) v1)))) (bvuge (bvneg (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))))) ((_ zero_extend 3) ((_ rotate_left 0) (bvnot (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))))) (or (not (bvugt ((_ sign_extend 3) (ite (bvsgt ((_ zero_extend 0) v1) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0))))) (not (bvsgt (bvnot v0) (_ bv2 4))) (not (= (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)))) ((_ zero_extend 3) (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1)))))) (or (= ((_ sign_extend 3) (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1))) (bvor v0 (_ bv3 4))) (not (distinct (_ bv8 4) ((_ zero_extend 3) (bvnot (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1)))))) (not (= ((_ sign_extend 3) (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1))) (bvor v0 (_ bv3 4))))) (or (not (bvsgt (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1)) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))))) (not (distinct (bvashr (bvnand (_ bv2 4) v0) (_ bv8 4)) ((_ sign_extend 3) (ite (bvsgt (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv6 4)) (_ bv1 1) (_ bv0 1))))) (bvsle ((_ sign_extend 3) (ite (distinct (_ bv8 4) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))) v2)) (or (= (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))) (bvmul v2 v2)) (bvugt ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)) ((_ zero_extend 3) (bvnot (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (bvsgt (bvnot v0) (_ bv2 4))) (or (not (= (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1)) (bvsub (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1)) (bvnot (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1)))))) (bvsgt ((_ zero_extend 3) (ite (bvsgt ((_ zero_extend 0) v1) (bvnand (_ bv2 4) v0)) (_ bv1 1) (_ bv0 1))) v1) (bvugt (_ bv7 4) (_ bv8 4))) (or (bvsge (_ bv6 4) (bvsub ((_ zero_extend 0) v1) (bvor (_ bv7 4) v1))) (not (distinct (bvor v0 (_ bv3 4)) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (bvult ((_ zero_extend 0) v1) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0))))) (or (not (bvsle (_ bv6 4) (_ bv6 4))) (not (bvsle ((_ rotate_right 0) (bvmul v2 v2)) (bvxnor ((_ sign_extend 3) (ite (distinct (_ bv8 4) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))) v0))) (not (bvslt (bvand ((_ zero_extend 3) (ite (bvule (_ bv2 4) ((_ zero_extend 0) v1)) (_ bv1 1) (_ bv0 1))) v0) ((_ sign_extend 3) (ite (bvsgt (bvand ((_ zero_extend 3) (ite (bvule (_ bv2 4) ((_ zero_extend 0) v1)) (_ bv1 1) (_ bv0 1))) v0) (_ bv3 4)) (_ bv1 1) (_ bv0 1)))))) (or (not (= (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))) (bvmul v2 v2))) (not (bvult ((_ repeat 1) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))) ((_ repeat 1) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))))) (not (bvslt (bvxnor ((_ sign_extend 3) (ite (distinct (_ bv8 4) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))) v0) (_ bv8 4)))) (or (not (bvult ((_ repeat 1) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))) v0)) (not (bvslt (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (bvult (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) ((_ zero_extend 3) (ite (bvsgt ((_ zero_extend 0) v1) (bvnand (_ bv2 4) v0)) (_ bv1 1) (_ bv0 1))))) (or (not (bvult ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)) (_ bv2 4))) (bvsge (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (bvlshr v2 (bvor (_ bv7 4) v1))) (distinct (bvashr (bvnand (_ bv2 4) v0) (_ bv8 4)) v1)) (or (not (bvugt (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2)))) (bvslt (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)))) (bvugt (bvor v0 (_ bv3 4)) (bvneg (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (or (not (bvult ((_ repeat 1) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))) ((_ repeat 1) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))))) (not (= v0 ((_ zero_extend 3) (bvnot (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)))))) (not (bvsgt ((_ sign_extend 3) (ite (distinct (_ bv8 4) (_ bv8 4)) (_ bv1 1) (_ bv0 1))) (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1))))) (or (not (bvsgt (bvmul v2 v2) ((_ sign_extend 3) (ite (distinct (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)) (_ bv1 1) (_ bv0 1))))) (= (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))) (bvmul v2 v2)) (not (bvule ((_ sign_extend 3) (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1))) (bvor (_ bv7 4) v1)))) (or (not (= ((_ zero_extend 3) (ite (bvsgt (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv6 4)) (_ bv1 1) (_ bv0 1))) (bvnand (_ bv2 4) v0))) (= (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0) (_ bv3 4)) (not (bvult ((_ repeat 1) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))) v0))) (or (bvsgt (_ bv8 4) (_ bv2 4)) (not (bvslt ((_ zero_extend 0) v1) ((_ zero_extend 3) (bvnot (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1)))))) (distinct (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))) ((_ zero_extend 3) (ite (bvule (_ bv2 4) ((_ zero_extend 0) v1)) (_ bv1 1) (_ bv0 1))))) (or (not (bvule (bvor v0 (_ bv3 4)) ((_ zero_extend 0) v1))) (not (bvsgt (_ bv8 4) (_ bv2 4))) (not (bvule (ite (bvsgt (bvand ((_ zero_extend 3) (ite (bvule (_ bv2 4) ((_ zero_extend 0) v1)) (_ bv1 1) (_ bv0 1))) v0) (_ bv3 4)) (_ bv1 1) (_ bv0 1)) (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1))))) (or (not (bvugt (bvor v0 (_ bv3 4)) (bvneg (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (bvslt ((_ zero_extend 0) v1) ((_ zero_extend 3) (bvnot (ite (bvslt ((_ zero_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))) (_ bv1 1) (_ bv0 1))))) (bvugt (_ bv2 4) v1)) (or (distinct (bvnot v0) ((_ zero_extend 3) (ite (bvsgt (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv6 4)) (_ bv1 1) (_ bv0 1)))) (bvsgt (bvmul v2 v2) ((_ sign_extend 3) (ite (distinct (bvshl (_ bv2 4) ((_ rotate_right 0) (bvmul v2 v2))) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)) (_ bv1 1) (_ bv0 1)))) (not (distinct (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1)) (bvlshr v2 (bvor (_ bv7 4) v1))))) (or (bvsgt (_ bv8 4) (_ bv2 4)) (not (bvugt (bvxnor ((_ sign_extend 3) (ite (distinct (_ bv8 4) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))) v0) ((_ zero_extend 3) (ite (bvsgt ((_ zero_extend 0) v1) (bvnand (_ bv2 4) v0)) (_ bv1 1) (_ bv0 1))))) (not (bvugt (bvor v0 (_ bv3 4)) (bvneg (bvashr (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2))) (bvadd (bvmul v2 v2) ((_ rotate_right 0) (bvmul v2 v2)))))))) (or (not (bvule (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1)) (bvnot (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (not (bvult ((_ sign_extend 3) ((_ rotate_left 0) (bvnot (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1)))) (not (bvult ((_ zero_extend 0) v1) (bvadd (_ bv2 4) ((_ rotate_right 1) (bvashr ((_ sign_extend 3) (ite (bvsle (bvmul v2 v2) (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1)) (_ bv1 1) (_ bv0 1))) v0)))))) (or (bvsge (bvxnor ((_ sign_extend 3) (ite (distinct (_ bv8 4) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))) v0) ((_ rotate_left 1) (bvmul v2 v2))) (bvslt (bvand ((_ zero_extend 3) (ite (bvule (_ bv2 4) ((_ zero_extend 0) v1)) (_ bv1 1) (_ bv0 1))) v0) ((_ sign_extend 3) (ite (bvsgt (bvand ((_ zero_extend 3) (ite (bvule (_ bv2 4) ((_ zero_extend 0) v1)) (_ bv1 1) (_ bv0 1))) v0) (_ bv3 4)) (_ bv1 1) (_ bv0 1)))) (bvslt (bvxnor ((_ sign_extend 3) (ite (distinct (_ bv8 4) (bvnor (bvor (_ bv7 4) v1) ((_ sign_extend 3) (ite (distinct (bvlshr v2 (bvor (_ bv7 4) v1)) ((_ rotate_right 0) (bvmul v2 v2))) (_ bv1 1) (_ bv0 1))))) (_ bv1 1) (_ bv0 1))) v0) (_ bv8 4))) (or (not (bvsle (bvmul (bvnand (_ bv2 4) v0) (bvor (_ bv7 4) v1)) (_ bv2 4))) (bvule (bvxor (bvlshr v2 (bvor (_ bv7 4) v1)) v1) (bvmul v2 v2)) (bvslt (bvlshr v2 (bvor (_ bv7 4) v1)) (bvnot v0))))))
(get-model)