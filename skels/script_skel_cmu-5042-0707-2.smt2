(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const GEN33 String)
(declare-const GEN32 Int)
(declare-const GEN31 Int)
(declare-const GEN30 String)
(declare-const GEN29 Int)
(declare-const GEN28 Int)
(declare-const GEN27 String)
(declare-const GEN26 String)
(declare-const GEN25 String)
(declare-const GEN24 Int)
(declare-const GEN23 Int)
(declare-const GEN22 Int)
(declare-const GEN21 String)
(declare-const GEN20 Int)
(declare-const GEN19 Int)
(declare-const GEN18 String)
(declare-const GEN17 Int)
(declare-const GEN16 Int)
(declare-const GEN15 String)
(declare-const GEN14 Int)
(declare-const GEN13 Int)
(declare-const GEN12 Int)
(declare-const GEN11 String)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 String)
(declare-const GEN7 String)
(declare-const GEN6 String)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 String)
(declare-const GEN1 Int)
(set-option :strings-exp true)
(declare-fun key2 () String)
(declare-fun key1 () String)
(assert (and (not (str.contains (str.++ (str.replace (str.substr key2 GEN1 (- (+ (str.indexof key2 GEN2 GEN3) GEN4) GEN5)) GEN6 GEN7) (str.++ (str.replace (str.substr (str.substr key2 (+ (str.indexof key2 GEN8 GEN9) GEN10) (- (str.len key2) (+ (str.indexof key2 GEN11 GEN12) GEN13))) GEN14 (- (+ (str.indexof (str.substr key2 (+ (str.indexof key2 GEN15 GEN16) GEN17) (- (str.len key2) (+ (str.indexof key2 GEN18 GEN19) GEN20))) GEN21 GEN22) GEN23) GEN24)) GEN25 GEN26) (str.substr (str.substr key2 (+ (str.indexof key2 GEN27 GEN28) GEN29) (- (str.len key2) (+ (str.indexof key2 GEN30 GEN31) GEN32))) (+ (str.indexof (str.substr key2 (+ (str.indexof key2 GEN33 0) 1) (- (str.len key2) (+ (str.indexof key2 "X" 0) 1))) "X" 0) 1) (- (str.len (str.substr key2 (+ (str.indexof key2 "X" 0) 1) (- (str.len key2) (+ (str.indexof key2 "X" 0) 1)))) (+ (str.indexof (str.substr key2 (+ (str.indexof key2 "X" 0) 1) (- (str.len key2) (+ (str.indexof key2 "X" 0) 1))) "X" 0) 1))))) "Z")) (str.contains (str.substr key2 (+ (str.indexof key2 "X" 0) 1) (- (str.len key2) (+ (str.indexof key2 "X" 0) 1))) "X")))
(assert (= BAV1 (and (not (str.contains (str.++ (str.replace (str.substr key2 GEN1 (- (+ (str.indexof key2 GEN2 GEN3) GEN4) GEN5)) GEN6 GEN7) (str.++ (str.replace (str.substr (str.substr key2 (+ (str.indexof key2 GEN8 GEN9) GEN10) (- (str.len key2) (+ (str.indexof key2 GEN11 GEN12) GEN13))) GEN14 (- (+ (str.indexof (str.substr key2 (+ (str.indexof key2 GEN15 GEN16) GEN17) (- (str.len key2) (+ (str.indexof key2 GEN18 GEN19) GEN20))) GEN21 GEN22) GEN23) GEN24)) GEN25 GEN26) (str.substr (str.substr key2 (+ (str.indexof key2 GEN27 GEN28) GEN29) (- (str.len key2) (+ (str.indexof key2 GEN30 GEN31) GEN32))) (+ (str.indexof (str.substr key2 (+ (str.indexof key2 GEN33 0) 1) (- (str.len key2) (+ (str.indexof key2 "X" 0) 1))) "X" 0) 1) (- (str.len (str.substr key2 (+ (str.indexof key2 "X" 0) 1) (- (str.len key2) (+ (str.indexof key2 "X" 0) 1)))) (+ (str.indexof (str.substr key2 (+ (str.indexof key2 "X" 0) 1) (- (str.len key2) (+ (str.indexof key2 "X" 0) 1))) "X" 0) 1))))) "Z")) (str.contains (str.substr key2 (+ (str.indexof key2 "X" 0) 1) (- (str.len key2) (+ (str.indexof key2 "X" 0) 1))) "X"))))
(check-sat)
(get-model)