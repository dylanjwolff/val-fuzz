(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(set-info :source |Benchmarks from the paper: "Extending Sledgehammer with SMT Solvers" by Jasmin Blanchette, Sascha Bohme, and Lawrence C. Paulson, CADE 2011.  Translated to SMT2 by Andrew Reynolds and Morgan Deters.|)
(set-info :smt-lib-version 2.0)
(set-info :category "industrial")
(declare-sort S1 0)
(declare-sort S2 0)
(declare-sort S3 0)
(declare-sort S4 0)
(declare-fun f1 () S1)
(declare-fun f2 () S1)
(declare-fun f3 () S2)
(declare-fun f4 (S3 Int) S2)
(declare-fun f5 () S3)
(declare-fun f6 (S4 S2) Int)
(declare-fun f7 () S4)
(declare-fun f8 () Int)
(declare-fun f9 (Int) S1)
(declare-fun f10 () Int)
(declare-fun f11 () S2)
(assert (not (= f1 f2)))
(assert (not (=> (and (= f3 (f4 f5 (- (f6 f7 (f4 f5 f8)) GEN1))) (= (f9 (* (+ (* GEN2 f10) GEN3) (+ GEN4 (f6 f7 f3)))) f1)) (=> (< f8 (+ GEN5 (f6 f7 f11))) (=> (< GEN6 f8) (< (f6 f7 f3) (f6 f7 f11)))))))
(assert (forall ((?v0 S2)) (= (f4 f5 (f6 f7 ?v0)) ?v0)))
(assert (forall ((?v0 Int)) (=> (<= GEN7 ?v0) (= (f6 f7 (f4 f5 ?v0)) ?v0))))
(assert (forall ((?v0 Int)) (=> (< ?v0 GEN8) (= (f6 f7 (f4 f5 ?v0)) GEN9))))
(assert (= BAV1 (= f1 f2)))
(assert (= BAV2 (=> (and (= f3 (f4 f5 (- (f6 f7 (f4 f5 f8)) GEN1))) (= (f9 (* (+ (* GEN2 f10) GEN3) (+ GEN4 (f6 f7 f3)))) f1)) (=> (< f8 (+ GEN5 (f6 f7 f11))) (=> (< GEN6 f8) (< (f6 f7 f3) (f6 f7 f11)))))))
(assert (= BAV3 (and (= f3 (f4 f5 (- (f6 f7 (f4 f5 f8)) GEN1))) (= (f9 (* (+ (* GEN2 f10) GEN3) (+ GEN4 (f6 f7 f3)))) f1))))
(assert (= BAV4 (= f3 (f4 f5 (- (f6 f7 (f4 f5 f8)) GEN1)))))
(assert (= BAV5 (= (f9 (* (+ (* GEN2 f10) GEN3) (+ GEN4 (f6 f7 f3)))) f1)))
(assert (= BAV6 (=> (< f8 (+ GEN5 (f6 f7 f11))) (=> (< GEN6 f8) (< (f6 f7 f3) (f6 f7 f11))))))
(assert (= BAV7 (< f8 (+ GEN5 (f6 f7 f11)))))
(assert (= BAV8 (=> (< GEN6 f8) (< (f6 f7 f3) (f6 f7 f11)))))
(assert (= BAV9 (< GEN6 f8)))
(assert (= BAV10 (< (f6 f7 f3) (f6 f7 f11))))
(assert (= BAV11 (forall ((?v0 S2)) (= (f4 f5 (f6 f7 ?v0)) ?v0))))
(assert (= BAV12 (forall ((?v0 Int)) (=> (<= GEN7 ?v0) (= (f6 f7 (f4 f5 ?v0)) ?v0)))))
(assert (= BAV13 (forall ((?v0 Int)) (<= GEN7 ?v0))))
(assert (= BAV14 (forall ((?v0 Int)) (= (f6 f7 (f4 f5 ?v0)) ?v0))))
(assert (= BAV15 (forall ((?v0 Int)) (=> (< ?v0 GEN8) (= (f6 f7 (f4 f5 ?v0)) GEN9)))))
(assert (= BAV16 (forall ((?v0 Int)) (< ?v0 GEN8))))
(assert (= BAV17 (forall ((?v0 Int)) (= (f6 f7 (f4 f5 ?v0)) GEN9))))
(check-sat)
(get-model)
(exit)