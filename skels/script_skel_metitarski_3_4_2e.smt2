(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const GEN30 Int)
(declare-const GEN29 Int)
(declare-const GEN28 Int)
(declare-const GEN27 Int)
(declare-const GEN26 Int)
(declare-const GEN25 Int)
(declare-const GEN24 Int)
(declare-const GEN23 Int)
(declare-const GEN22 Int)
(declare-const GEN21 Int)
(declare-const GEN20 Int)
(declare-const GEN19 Int)
(declare-const GEN18 Int)
(declare-const GEN17 Int)
(declare-const GEN16 Int)
(declare-const GEN15 Int)
(declare-const GEN14 Int)
(declare-const GEN13 Int)
(declare-const GEN12 Int)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(set-info :source |
These benchmarks used in the paper:

  Dejan Jovanovic and Leonardo de Moura.  Solving Non-Linear Arithmetic.
  In IJCAR 2012, published as LNCS volume 7364, pp. 339--354.

The meti-tarski benchmarks are proof obligations extracted from the
Meti-Tarski project, see:

  B. Akbarpour and L. C. Paulson. MetiTarski: An automatic theorem prover
  for real-valued special functions. Journal of Automated Reasoning,
  44(3):175-205, 2010.

Submitted by Dejan Jovanovic for SMT-LIB.


|)
(set-info :smt-lib-version 2.0)
(set-info :category "industrial")
(declare-fun skoX () Real)
(declare-fun skoS () Real)
(declare-fun skoC () Real)
(assert (and (<= (* skoX (+ (/ (- GEN4) GEN5) (* skoX (/ (- GEN6) GEN7)))) GEN8) (and (not (<= skoX GEN1)) (and (or (not (<= (* skoX (+ (+ (+ (/ (- GEN9) GEN10) (* skoC (/ GEN11 GEN12))) (* skoS (/ (- GEN13) GEN14))) (* skoX (+ (+ (/ (- GEN15) GEN16) (* skoC (/ (- GEN17) GEN18))) (* skoS (/ GEN19 GEN20)))))) (+ (+ (/ GEN21 GEN22) (* skoC (/ GEN23 GEN24))) (* skoS (/ (- GEN25) GEN26))))) (<= skoX GEN1)) (and (<= (* skoC (/ GEN2 GEN3)) skoS) (and (or (not (<= (* skoC (/ GEN2 GEN3)) skoS)) (not (<= skoS (* skoC (/ GEN2 GEN3))))) (and (= (* skoS skoS) (+ GEN27 (* skoC (* skoC (- GEN28))))) (and (<= skoX GEN29) (<= GEN30 skoX)))))))))
(assert (= BAV1 (and (<= (* skoX (+ (/ (- GEN4) GEN5) (* skoX (/ (- GEN6) GEN7)))) GEN8) (and (not (<= skoX GEN1)) (and (or (not (<= (* skoX (+ (+ (+ (/ (- GEN9) GEN10) (* skoC (/ GEN11 GEN12))) (* skoS (/ (- GEN13) GEN14))) (* skoX (+ (+ (/ (- GEN15) GEN16) (* skoC (/ (- GEN17) GEN18))) (* skoS (/ GEN19 GEN20)))))) (+ (+ (/ GEN21 GEN22) (* skoC (/ GEN23 GEN24))) (* skoS (/ (- GEN25) GEN26))))) (<= skoX GEN1)) (and (<= (* skoC (/ GEN2 GEN3)) skoS) (and (or (not (<= (* skoC (/ GEN2 GEN3)) skoS)) (not (<= skoS (* skoC (/ GEN2 GEN3))))) (and (= (* skoS skoS) (+ GEN27 (* skoC (* skoC (- GEN28))))) (and (<= skoX GEN29) (<= GEN30 skoX))))))))))
(assert (= BAV2 (<= (* skoX (+ (/ (- GEN4) GEN5) (* skoX (/ (- GEN6) GEN7)))) GEN8)))
(assert (= BAV3 (and (not (<= skoX GEN1)) (and (or (not (<= (* skoX (+ (+ (+ (/ (- GEN9) GEN10) (* skoC (/ GEN11 GEN12))) (* skoS (/ (- GEN13) GEN14))) (* skoX (+ (+ (/ (- GEN15) GEN16) (* skoC (/ (- GEN17) GEN18))) (* skoS (/ GEN19 GEN20)))))) (+ (+ (/ GEN21 GEN22) (* skoC (/ GEN23 GEN24))) (* skoS (/ (- GEN25) GEN26))))) (<= skoX GEN1)) (and (<= (* skoC (/ GEN2 GEN3)) skoS) (and (or (not (<= (* skoC (/ GEN2 GEN3)) skoS)) (not (<= skoS (* skoC (/ GEN2 GEN3))))) (and (= (* skoS skoS) (+ GEN27 (* skoC (* skoC (- GEN28))))) (and (<= skoX GEN29) (<= GEN30 skoX)))))))))
(assert (= BAV4 (<= skoX GEN1)))
(assert (= BAV5 (and (or (not (<= (* skoX (+ (+ (+ (/ (- GEN9) GEN10) (* skoC (/ GEN11 GEN12))) (* skoS (/ (- GEN13) GEN14))) (* skoX (+ (+ (/ (- GEN15) GEN16) (* skoC (/ (- GEN17) GEN18))) (* skoS (/ GEN19 GEN20)))))) (+ (+ (/ GEN21 GEN22) (* skoC (/ GEN23 GEN24))) (* skoS (/ (- GEN25) GEN26))))) (<= skoX GEN1)) (and (<= (* skoC (/ GEN2 GEN3)) skoS) (and (or (not (<= (* skoC (/ GEN2 GEN3)) skoS)) (not (<= skoS (* skoC (/ GEN2 GEN3))))) (and (= (* skoS skoS) (+ GEN27 (* skoC (* skoC (- GEN28))))) (and (<= skoX GEN29) (<= GEN30 skoX))))))))
(assert (= BAV6 (or (not (<= (* skoX (+ (+ (+ (/ (- GEN9) GEN10) (* skoC (/ GEN11 GEN12))) (* skoS (/ (- GEN13) GEN14))) (* skoX (+ (+ (/ (- GEN15) GEN16) (* skoC (/ (- GEN17) GEN18))) (* skoS (/ GEN19 GEN20)))))) (+ (+ (/ GEN21 GEN22) (* skoC (/ GEN23 GEN24))) (* skoS (/ (- GEN25) GEN26))))) (<= skoX GEN1))))
(assert (= BAV7 (<= (* skoX (+ (+ (+ (/ (- GEN9) GEN10) (* skoC (/ GEN11 GEN12))) (* skoS (/ (- GEN13) GEN14))) (* skoX (+ (+ (/ (- GEN15) GEN16) (* skoC (/ (- GEN17) GEN18))) (* skoS (/ GEN19 GEN20)))))) (+ (+ (/ GEN21 GEN22) (* skoC (/ GEN23 GEN24))) (* skoS (/ (- GEN25) GEN26))))))
(assert (= BAV8 (<= skoX GEN1)))
(assert (= BAV9 (and (<= (* skoC (/ GEN2 GEN3)) skoS) (and (or (not (<= (* skoC (/ GEN2 GEN3)) skoS)) (not (<= skoS (* skoC (/ GEN2 GEN3))))) (and (= (* skoS skoS) (+ GEN27 (* skoC (* skoC (- GEN28))))) (and (<= skoX GEN29) (<= GEN30 skoX)))))))
(assert (= BAV10 (<= (* skoC (/ GEN2 GEN3)) skoS)))
(assert (= BAV11 (and (or (not (<= (* skoC (/ GEN2 GEN3)) skoS)) (not (<= skoS (* skoC (/ GEN2 GEN3))))) (and (= (* skoS skoS) (+ GEN27 (* skoC (* skoC (- GEN28))))) (and (<= skoX GEN29) (<= GEN30 skoX))))))
(assert (= BAV12 (or (not (<= (* skoC (/ GEN2 GEN3)) skoS)) (not (<= skoS (* skoC (/ GEN2 GEN3)))))))
(assert (= BAV13 (<= (* skoC (/ GEN2 GEN3)) skoS)))
(assert (= BAV14 (<= skoS (* skoC (/ GEN2 GEN3)))))
(assert (= BAV15 (and (= (* skoS skoS) (+ GEN27 (* skoC (* skoC (- GEN28))))) (and (<= skoX GEN29) (<= GEN30 skoX)))))
(assert (= BAV16 (= (* skoS skoS) (+ GEN27 (* skoC (* skoC (- GEN28)))))))
(assert (= BAV17 (and (<= skoX GEN29) (<= GEN30 skoX))))
(assert (= BAV18 (<= skoX GEN29)))
(assert (= BAV19 (<= GEN30 skoX)))
(check-sat)
(get-model)
(exit)