(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const BAV23 Bool)
(declare-const BAV24 Bool)
(declare-const BAV25 Bool)
(declare-const BAV26 Bool)
(declare-const BAV27 Bool)
(declare-const BAV28 Bool)
(declare-const BAV29 Bool)
(declare-const BAV30 Bool)
(declare-const BAV31 Bool)
(declare-const BAV32 Bool)
(declare-const BAV33 Bool)
(declare-const BAV34 Bool)
(declare-const BAV35 Bool)
(declare-const BAV36 Bool)
(declare-const BAV37 Bool)
(declare-const BAV38 Bool)
(declare-const BAV39 Bool)
(declare-const BAV40 Bool)
(declare-const BAV41 Bool)
(declare-const BAV42 Bool)
(declare-const BAV43 Bool)
(declare-const BAV44 Bool)
(declare-const BAV45 Bool)
(declare-const BAV46 Bool)
(declare-const BAV47 Bool)
(declare-const BAV48 Bool)
(declare-const BAV49 Bool)
(declare-const BAV50 Bool)
(declare-const BAV51 Bool)
(declare-const BAV52 Bool)
(declare-const BAV53 Bool)
(declare-const BAV54 Bool)
(declare-const GEN24 Real)
(declare-const GEN23 Real)
(declare-const GEN22 Real)
(declare-const GEN21 Real)
(declare-const GEN20 Real)
(declare-const GEN19 Int)
(declare-const GEN18 Int)
(declare-const GEN17 Int)
(declare-const GEN16 Int)
(declare-const GEN15 Int)
(declare-const GEN14 Real)
(declare-const GEN13 Int)
(declare-const GEN12 Int)
(declare-const GEN11 Real)
(declare-const GEN10 Real)
(declare-const GEN9 Real)
(declare-const GEN8 Real)
(declare-const GEN7 Real)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(set-option :fmf-bound true)
(set-option :finite-model-find true)
(set-option :produce-models true)
(declare-datatype NodeMobile ((Rnode)))
(declare-datatype NodeInfra ((Anode) (Bnode) (Cnode)))
(declare-datatype NodeBase ((Dnode)))
(declare-datatype Node ((mobile (mnode NodeMobile)) (infra (inode NodeInfra)) (base (bnode NodeBase))))
(define-fun R () Node (mobile Rnode))
(define-fun A () Node (infra Anode))
(define-fun B () Node (infra Bnode))
(define-fun C () Node (infra Cnode))
(define-fun D () Node (base Dnode))
(declare-datatype Packet ((P1)))
(declare-datatype Channel ((Ch1) (Ch2) (Ch3)))
(declare-fun GlobalState_prcv (Node Packet Int) Bool)
(declare-fun GlobalState_energy (Node Int) Real)
(declare-datatype Action
(
(act_idle)
(act_send (_dst Node) (_pck Packet) (_chn Channel))
))
(declare-datatype Condition
(
(ctrue)
(check_rcv (_rcv_pck Packet))
))
(define-fun get-condition-holds ((c Condition) (n Node) (t Int)) Bool
  (ite ((_ is check_rcv) c)
    (GlobalState_prcv n (_rcv_pck c) t)
  (ite ((_ is ctrue) c) 
    true
        false)
  )
)
(declare-fun max_period () Int)
(assert (>= max_period GEN1))
(declare-fun GlobalPolicyAct (Node Int) Action)
(declare-fun GlobalPolicyCond (Node Int) Condition)
(declare-fun max_slots () Int)
(assert (>= max_slots GEN2))
(assert (forall ((x Node)) (= (GlobalPolicyCond x max_slots) ctrue)))
(declare-fun get-action-for-time-slot (Node Int Int) Action)
(assert (forall ((x Node)(t Int)(s Int)) (=> (and (>= s GEN3) (<= s max_slots) (>= t GEN4) (< t max_period)) (= (get-action-for-time-slot x t s) (ite (get-condition-holds (GlobalPolicyCond x s) x t) (GlobalPolicyAct x s) (get-action-for-time-slot x t (+ s GEN5)))))))
(define-fun get-action ((x Node) (t Int)) Action
      (get-action-for-time-slot x t 0)
)
(declare-fun connectivity (Node Node Int) Real)
(assert (forall ((x Node)(y Node)(t Int)) (=> (and (>= t GEN6) (< t max_period)) (= (connectivity x y t) (ite (= x R) (ite (or (= y A) (= y B) (= y C)) GEN7 GEN8) (ite (or (= x A) (= x B) (= x C)) (ite (= y D) GEN9 GEN10) GEN11))))))
(define-fun get-connected ((x Node) (y Node) (t Int)) Bool 
    (> (connectivity x y t) 0.0)
)
(define-fun get-act-success ((x Node) (t Int)) Bool
  (let ((x_act_at_t (get-action x t)))
  (ite ((_ is act_send) x_act_at_t)
    (and 
              (get-connected x (_dst x_act_at_t) t) 
              (GlobalState_prcv x (_pck x_act_at_t) t)
    )
    true
  )
  )
)
(define-fun get-sends ((x Node) (y Node) (p Packet) (t Int)) Bool
  (let ((x_act_at_t (get-action x t)))
  (and
    (ite ((_ is act_send) x_act_at_t)
              (and 
        (= (_dst x_act_at_t) y)
        (= (_pck x_act_at_t) p)
      )
      false
    )
    (get-act-success x t)
  ))
)
(define-fun get-energy ((x Node) (t Int)) Real
  (let ((x_act_at_t (get-action x t)))
  (ite ((_ is act_send) x_act_at_t)
    1.0
    0.05
  ))
)
(assert (forall ((x Node)(p Packet)) (= (GlobalState_prcv x p GEN12) (= x R))))
(assert (forall ((x Node)) (= (GlobalState_energy x GEN13) GEN14)))
(assert (forall ((x Node)(t Int)) (=> (and (>= t GEN15) (< t max_period)) (and (forall ((p Packet)) (= (GlobalState_prcv x p (+ t GEN16)) (or (GlobalState_prcv x p t) (exists ((y Node)) (get-sends y x p t))))) (= (GlobalState_energy x (+ t GEN17)) (+ (GlobalState_energy x t) (get-energy x t)))))))
(assert (forall ((x Node)(y Node)(t Int)) (=> (and (>= t GEN18) (< t max_period) (not (= x y))) (=> (and ((_ is act_send) (get-action x t)) ((_ is act_send) (get-action y t))) (not (= (_chn (get-action x t)) (_chn (get-action y t))))))))
(assert (forall ((x Node)(t Int)) (=> (and (>= t GEN19) (< t max_period)) (=> ((_ is act_send) (get-action x t)) (GlobalState_prcv x (_pck (get-action x t)) t)))))
(assert (GlobalState_prcv D P1 max_period))
(assert (< (GlobalState_energy R max_period) GEN20))
(assert (< (GlobalState_energy A max_period) GEN21))
(assert (< (GlobalState_energy B max_period) GEN22))
(assert (< (GlobalState_energy C max_period) GEN23))
(assert (< (GlobalState_energy D max_period) GEN24))
(assert (= BAV1 (>= max_period GEN1)))
(assert (= BAV2 (>= max_slots GEN2)))
(assert (= BAV3 (forall ((x Node)) (= (GlobalPolicyCond x max_slots) ctrue))))
(assert (= BAV4 (forall ((x Node)(t Int)(s Int)) (=> (and (>= s GEN3) (<= s max_slots) (>= t GEN4) (< t max_period)) (= (get-action-for-time-slot x t s) (ite (get-condition-holds (GlobalPolicyCond x s) x t) (GlobalPolicyAct x s) (get-action-for-time-slot x t (+ s GEN5))))))))
(assert (= BAV5 (forall ((x Node)(t Int)(s Int)) (and (>= s GEN3) (<= s max_slots) (>= t GEN4) (< t max_period)))))
(assert (= BAV6 (forall ((x Node)(t Int)(s Int)) (>= s GEN3))))
(assert (= BAV7 (forall ((x Node)(t Int)(s Int)) (<= s max_slots))))
(assert (= BAV8 (forall ((x Node)(t Int)(s Int)) (>= t GEN4))))
(assert (= BAV9 (forall ((x Node)(t Int)(s Int)) (< t max_period))))
(assert (= BAV10 (forall ((x Node)(t Int)(s Int)) (= (get-action-for-time-slot x t s) (ite (get-condition-holds (GlobalPolicyCond x s) x t) (GlobalPolicyAct x s) (get-action-for-time-slot x t (+ s GEN5)))))))
(assert (= BAV11 (forall ((x Node)(y Node)(t Int)) (=> (and (>= t GEN6) (< t max_period)) (= (connectivity x y t) (ite (= x R) (ite (or (= y A) (= y B) (= y C)) GEN7 GEN8) (ite (or (= x A) (= x B) (= x C)) (ite (= y D) GEN9 GEN10) GEN11)))))))
(assert (= BAV12 (forall ((x Node)(y Node)(t Int)) (and (>= t GEN6) (< t max_period)))))
(assert (= BAV13 (forall ((x Node)(y Node)(t Int)) (>= t GEN6))))
(assert (= BAV14 (forall ((x Node)(y Node)(t Int)) (< t max_period))))
(assert (= BAV15 (forall ((x Node)(y Node)(t Int)) (= (connectivity x y t) (ite (= x R) (ite (or (= y A) (= y B) (= y C)) GEN7 GEN8) (ite (or (= x A) (= x B) (= x C)) (ite (= y D) GEN9 GEN10) GEN11))))))
(assert (= BAV16 (forall ((x Node)(y Node)(t Int)) (= x R))))
(assert (= BAV17 (forall ((x Node)(y Node)(t Int)) (or (= y A) (= y B) (= y C)))))
(assert (= BAV18 (forall ((x Node)(y Node)(t Int)) (= y A))))
(assert (= BAV19 (forall ((x Node)(y Node)(t Int)) (= y B))))
(assert (= BAV20 (forall ((x Node)(y Node)(t Int)) (= y C))))
(assert (= BAV21 (forall ((x Node)(y Node)(t Int)) (or (= x A) (= x B) (= x C)))))
(assert (= BAV22 (forall ((x Node)(y Node)(t Int)) (= x A))))
(assert (= BAV23 (forall ((x Node)(y Node)(t Int)) (= x B))))
(assert (= BAV24 (forall ((x Node)(y Node)(t Int)) (= x C))))
(assert (= BAV25 (forall ((x Node)(y Node)(t Int)) (= y D))))
(assert (= BAV26 (forall ((x Node)(p Packet)) (= (GlobalState_prcv x p GEN12) (= x R)))))
(assert (= BAV27 (forall ((x Node)(p Packet)) (= x R))))
(assert (= BAV28 (forall ((x Node)) (= (GlobalState_energy x GEN13) GEN14))))
(assert (= BAV29 (forall ((x Node)(t Int)) (=> (and (>= t GEN15) (< t max_period)) (and (forall ((p Packet)) (= (GlobalState_prcv x p (+ t GEN16)) (or (GlobalState_prcv x p t) (exists ((y Node)) (get-sends y x p t))))) (= (GlobalState_energy x (+ t GEN17)) (+ (GlobalState_energy x t) (get-energy x t))))))))
(assert (= BAV30 (forall ((x Node)(t Int)) (and (>= t GEN15) (< t max_period)))))
(assert (= BAV31 (forall ((x Node)(t Int)) (>= t GEN15))))
(assert (= BAV32 (forall ((x Node)(t Int)) (< t max_period))))
(assert (= BAV33 (forall ((x Node)(t Int)) (and (forall ((p Packet)) (= (GlobalState_prcv x p (+ t GEN16)) (or (GlobalState_prcv x p t) (exists ((y Node)) (get-sends y x p t))))) (= (GlobalState_energy x (+ t GEN17)) (+ (GlobalState_energy x t) (get-energy x t)))))))
(assert (= BAV34 (forall ((x Node)(t Int)(p Packet)) (= (GlobalState_prcv x p (+ t GEN16)) (or (GlobalState_prcv x p t) (exists ((y Node)) (get-sends y x p t)))))))
(assert (= BAV35 (forall ((x Node)(t Int)(p Packet)) (or (GlobalState_prcv x p t) (exists ((y Node)) (get-sends y x p t))))))
(assert (= BAV36 (forall ((x Node)(t Int)) (= (GlobalState_energy x (+ t GEN17)) (+ (GlobalState_energy x t) (get-energy x t))))))
(assert (= BAV37 (forall ((x Node)(y Node)(t Int)) (=> (and (>= t GEN18) (< t max_period) (not (= x y))) (=> (and ((_ is act_send) (get-action x t)) ((_ is act_send) (get-action y t))) (not (= (_chn (get-action x t)) (_chn (get-action y t)))))))))
(assert (= BAV38 (forall ((x Node)(y Node)(t Int)) (and (>= t GEN18) (< t max_period) (not (= x y))))))
(assert (= BAV39 (forall ((x Node)(y Node)(t Int)) (>= t GEN18))))
(assert (= BAV40 (forall ((x Node)(y Node)(t Int)) (< t max_period))))
(assert (= BAV41 (forall ((x Node)(y Node)(t Int)) (= x y))))
(assert (= BAV42 (forall ((x Node)(y Node)(t Int)) (=> (and ((_ is act_send) (get-action x t)) ((_ is act_send) (get-action y t))) (not (= (_chn (get-action x t)) (_chn (get-action y t))))))))
(assert (= BAV43 (forall ((x Node)(y Node)(t Int)) (and ((_ is act_send) (get-action x t)) ((_ is act_send) (get-action y t))))))
(assert (= BAV44 (forall ((x Node)(y Node)(t Int)) (= (_chn (get-action x t)) (_chn (get-action y t))))))
(assert (= BAV45 (forall ((x Node)(t Int)) (=> (and (>= t GEN19) (< t max_period)) (=> ((_ is act_send) (get-action x t)) (GlobalState_prcv x (_pck (get-action x t)) t))))))
(assert (= BAV46 (forall ((x Node)(t Int)) (and (>= t GEN19) (< t max_period)))))
(assert (= BAV47 (forall ((x Node)(t Int)) (>= t GEN19))))
(assert (= BAV48 (forall ((x Node)(t Int)) (< t max_period))))
(assert (= BAV49 (forall ((x Node)(t Int)) (=> ((_ is act_send) (get-action x t)) (GlobalState_prcv x (_pck (get-action x t)) t)))))
(assert (= BAV50 (< (GlobalState_energy R max_period) GEN20)))
(assert (= BAV51 (< (GlobalState_energy A max_period) GEN21)))
(assert (= BAV52 (< (GlobalState_energy B max_period) GEN22)))
(assert (= BAV53 (< (GlobalState_energy C max_period) GEN23)))
(assert (= BAV54 (< (GlobalState_energy D max_period) GEN24)))
(check-sat)
(get-model)