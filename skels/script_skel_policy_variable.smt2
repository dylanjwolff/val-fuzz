(set-info :smt-lib-version 2.5)
(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const GEN17 String)
(declare-const GEN16 String)
(declare-const GEN15 String)
(declare-const GEN14 Int)
(declare-const GEN13 Int)
(declare-const GEN12 Int)
(declare-const GEN11 Int)
(declare-const GEN10 String)
(declare-const GEN9 String)
(declare-const GEN8 String)
(declare-const GEN7 String)
(declare-const GEN6 String)
(declare-const GEN5 String)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 String)
(declare-const GEN1 String)
(set-option :strings-exp true)
(set-option :re-elim true)
(declare-const actionName String)
(declare-const actionNamespace String)
(declare-const example_key String)
(declare-const p0.0.action Bool)
(assert (= p0.0.action (and (= GEN1 actionNamespace) (and (str.prefixof GEN2 actionName) (str.contains (str.substr actionName GEN3 (- (str.len actionName) GEN4)) GEN5) (str.suffixof GEN6 actionName) (not (= actionName GEN7)) (not (= actionName GEN8))))))
(declare-const p0.denies Bool)
(assert (not p0.denies))
(declare-const p0.allows Bool)
(assert (= p0.allows (and (not p0.denies) p0.0.action)))
(declare-const p0.neutral Bool)
(assert (= p0.neutral (and (not p0.allows) (not p0.denies))))
(declare-const p1.0.action Bool)
(assert (= p1.0.action (and (= GEN9 actionNamespace) (and (str.prefixof GEN10 actionName) (str.prefixof example_key (str.substr actionName GEN11 (- (str.len actionName) GEN12))) (str.contains (str.substr actionName (+ GEN13 (str.len example_key)) (- (str.len actionName) GEN14 (str.len example_key))) GEN15) (str.suffixof GEN16 actionName)))))
(declare-const p1.0.condition Bool)
(assert (= p1.0.condition (str.prefixof GEN17 example_key)))
(declare-const p1.denies Bool)
(assert (not p1.denies))
(declare-const p1.allows Bool)
(assert (= p1.allows (and (not p1.denies) p1.0.action p1.0.condition)))
(declare-const p1.neutral Bool)
(assert (= p1.neutral (and (not p1.allows) (not p1.denies))))
(assert (or p0.neutral p0.denies))
(assert p1.allows)
(assert (= BAV1 (= p0.0.action (and (= GEN1 actionNamespace) (and (str.prefixof GEN2 actionName) (str.contains (str.substr actionName GEN3 (- (str.len actionName) GEN4)) GEN5) (str.suffixof GEN6 actionName) (not (= actionName GEN7)) (not (= actionName GEN8)))))))
(assert (= BAV2 (and (= GEN1 actionNamespace) (and (str.prefixof GEN2 actionName) (str.contains (str.substr actionName GEN3 (- (str.len actionName) GEN4)) GEN5) (str.suffixof GEN6 actionName) (not (= actionName GEN7)) (not (= actionName GEN8))))))
(assert (= BAV3 (= GEN1 actionNamespace)))
(assert (= BAV4 (and (str.prefixof GEN2 actionName) (str.contains (str.substr actionName GEN3 (- (str.len actionName) GEN4)) GEN5) (str.suffixof GEN6 actionName) (not (= actionName GEN7)) (not (= actionName GEN8)))))
(assert (= BAV5 (= actionName GEN7)))
(assert (= BAV6 (= actionName GEN8)))
(assert (= BAV7 (= p0.allows (and (not p0.denies) p0.0.action))))
(assert (= BAV8 (and (not p0.denies) p0.0.action)))
(assert (= BAV9 (= p0.neutral (and (not p0.allows) (not p0.denies)))))
(assert (= BAV10 (and (not p0.allows) (not p0.denies))))
(assert (= BAV11 (= p1.0.action (and (= GEN9 actionNamespace) (and (str.prefixof GEN10 actionName) (str.prefixof example_key (str.substr actionName GEN11 (- (str.len actionName) GEN12))) (str.contains (str.substr actionName (+ GEN13 (str.len example_key)) (- (str.len actionName) GEN14 (str.len example_key))) GEN15) (str.suffixof GEN16 actionName))))))
(assert (= BAV12 (and (= GEN9 actionNamespace) (and (str.prefixof GEN10 actionName) (str.prefixof example_key (str.substr actionName GEN11 (- (str.len actionName) GEN12))) (str.contains (str.substr actionName (+ GEN13 (str.len example_key)) (- (str.len actionName) GEN14 (str.len example_key))) GEN15) (str.suffixof GEN16 actionName)))))
(assert (= BAV13 (= GEN9 actionNamespace)))
(assert (= BAV14 (and (str.prefixof GEN10 actionName) (str.prefixof example_key (str.substr actionName GEN11 (- (str.len actionName) GEN12))) (str.contains (str.substr actionName (+ GEN13 (str.len example_key)) (- (str.len actionName) GEN14 (str.len example_key))) GEN15) (str.suffixof GEN16 actionName))))
(assert (= BAV15 (= p1.0.condition (str.prefixof GEN17 example_key))))
(assert (= BAV16 (= p1.allows (and (not p1.denies) p1.0.action p1.0.condition))))
(assert (= BAV17 (and (not p1.denies) p1.0.action p1.0.condition)))
(assert (= BAV18 (= p1.neutral (and (not p1.allows) (not p1.denies)))))
(assert (= BAV19 (and (not p1.allows) (not p1.denies))))
(assert (= BAV20 (or p0.neutral p0.denies)))
(check-sat)
(get-model)