(set-option :print-success false)
(declare-const GEN1 Int)
(declare-const GEN2 Int)
(declare-const GEN3 Int)
(declare-const GEN4 Real)
(declare-const GEN5 Int)
(declare-const GEN6 Real)
(declare-const GEN7 Real)
(declare-const GEN8 Real)
(declare-const GEN9 Real)
(declare-const GEN10 Int)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const BAV23 Bool)
(declare-const BAV24 Bool)
(declare-const BAV25 Bool)
(declare-const BAV26 Bool)
(declare-const BAV27 Bool)
(declare-const BAV28 Bool)
(declare-const BAV29 Bool)
(declare-const BAV30 Bool)
(declare-const BAV31 Bool)
(declare-const BAV32 Bool)
(declare-const BAV33 Bool)
(declare-const BAV34 Bool)
(declare-const BAV35 Bool)
(declare-const BAV36 Bool)
(declare-const BAV37 Bool)
(declare-const BAV38 Bool)
(declare-const BAV39 Bool)
(declare-const BAV40 Bool)
(declare-const BAV41 Bool)
(declare-const BAV42 Bool)
(declare-const BAV43 Bool)
(declare-const BAV44 Bool)
(declare-const BAV45 Bool)
(declare-const BAV46 Bool)
(declare-const BAV47 Bool)
(declare-const BAV48 Bool)
(declare-const BAV49 Bool)
(declare-const BAV50 Bool)
(declare-const BAV51 Bool)
(declare-const BAV52 Bool)
(declare-const BAV53 Bool)
(declare-const BAV54 Bool)
(declare-const BAV55 Bool)
(declare-const BAV56 Bool)
(declare-const BAV57 Bool)
(declare-const BAV58 Bool)
(declare-const BAV59 Bool)
(declare-const BAV60 Bool)
(declare-const BAV61 Bool)
(declare-const BAV62 Bool)
(declare-const BAV63 Bool)
(declare-const BAV64 Bool)
(declare-const BAV65 Bool)
(declare-const BAV66 Bool)
(declare-const BAV67 Bool)
(declare-const BAV68 Bool)
(declare-const BAV69 Bool)
(declare-const BAV70 Bool)
(declare-const BAV71 Bool)
(declare-const BAV72 Bool)
(declare-const BAV73 Bool)
(declare-const BAV74 Bool)
(declare-const BAV75 Bool)
(set-info :smt-lib-version 2.0)
(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun %lbl%+67 () Bool)
(declare-fun i@0 () Int)
(declare-fun x@@5 () Int)
(declare-fun y@@1 () Int)
(declare-fun i@1 () Int)
(declare-fun %lbl%@186 () Bool)
(declare-fun %lbl%+69 () Bool)
(declare-fun %lbl%@157 () Bool)
(declare-fun %lbl%+65 () Bool)
(declare-fun %lbl%+63 () Bool)
(declare-fun %lbl%@125 () Bool)
(declare-fun %lbl%+97 () Bool)
(assert (and (= (Ctor intType) GEN1) (= (Ctor realType) GEN2) (= (Ctor boolType) GEN3) (forall ((arg0 Int)) (! (= (U_2_int (int_2_U arg0)) arg0) :qid |typeInv:U_2_int| :pattern ((int_2_U arg0)))) (forall ((x T@U)) (! (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x)) :qid |cast:U_2_int| :pattern ((U_2_int x)))) (forall ((arg0@@0 Int)) (! (= (type (int_2_U arg0@@0)) intType) :qid |funType:int_2_U| :pattern ((int_2_U arg0@@0)))) (forall ((arg0@@1 Real)) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1) :qid |typeInv:U_2_real| :pattern ((real_2_U arg0@@1)))) (forall ((x@@0 T@U)) (! (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0)) :qid |cast:U_2_real| :pattern ((U_2_real x@@0)))) (forall ((arg0@@2 Real)) (! (= (type (real_2_U arg0@@2)) realType) :qid |funType:real_2_U| :pattern ((real_2_U arg0@@2)))) (forall ((arg0@@3 Bool)) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3) :qid |typeInv:U_2_bool| :pattern ((bool_2_U arg0@@3)))) (forall ((x@@1 T@U)) (! (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1)) :qid |cast:U_2_bool| :pattern ((U_2_bool x@@1)))) (forall ((arg0@@4 Bool)) (! (= (type (bool_2_U arg0@@4)) boolType) :qid |funType:bool_2_U| :pattern ((bool_2_U arg0@@4))))))
(assert (forall ((x@@2 T@U)) (! (UOrdering2 x@@2 x@@2) :qid |bg:subtype-refl| :no-pattern (U_2_int x@@2) :no-pattern (U_2_bool x@@2))))
(assert (forall ((x@@3 T@U)(y T@U)(z T@U)) (! (=> (and (= (type y) (type x@@3)) (= (type z) (type x@@3)) (UOrdering2 x@@3 y) (UOrdering2 y z)) (UOrdering2 x@@3 z)) :qid |bg:subtype-trans| :pattern ((UOrdering2 x@@3 y) (UOrdering2 y z)))))
(assert (forall ((x@@4 T@U)(y@@0 T@U)) (! (=> (= (type y@@0) (type x@@4)) (=> (and (UOrdering2 x@@4 y@@0) (UOrdering2 y@@0 x@@4)) (= x@@4 y@@0))) :qid |bg:subtype-antisymm| :pattern ((UOrdering2 x@@4 y@@0) (UOrdering2 y@@0 x@@4)))))
(push 1)
(set-info :boogie-vc-id foo)
(assert (not (=> (! (and %lbl%+97 true) :lblpos GEN9) (=> (>= y@@1 GEN10) (=> (! (and %lbl%+63 true) :lblpos GEN8) (and (! (or %lbl%@125 (<= x@@5 (+ x@@5 y@@1))) :lblneg @125) (=> (<= x@@5 (+ x@@5 y@@1)) (=> (! (and %lbl%+65 true) :lblpos GEN7) (=> (<= i@0 (+ x@@5 y@@1)) (and (=> (! (and %lbl%+69 true) :lblpos GEN6) (=> (<= (+ x@@5 y@@1) i@0) (and (! (or %lbl%@157 (= i@0 (- x@@5 y@@1))) :lblneg @157) (=> (= i@0 (- x@@5 y@@1)) true)))) (=> (! (and %lbl%+67 true) :lblpos GEN4) (=> (and (< i@0 (+ x@@5 y@@1)) (= i@1 (+ i@0 GEN5))) (and (! (or %lbl%@186 (<= i@1 (+ x@@5 y@@1))) :lblneg @186) (=> (<= i@1 (+ x@@5 y@@1)) true))))))))))))))
(assert (= BAV11 (and (tickleBool true) (tickleBool false))))
(assert (= BAV12 (and (= (Ctor intType) GEN1) (= (Ctor realType) GEN2) (= (Ctor boolType) GEN3) (forall ((arg0 Int)) (! (= (U_2_int (int_2_U arg0)) arg0) :qid |typeInv:U_2_int| :pattern ((int_2_U arg0)))) (forall ((x T@U)) (! (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x)) :qid |cast:U_2_int| :pattern ((U_2_int x)))) (forall ((arg0@@0 Int)) (! (= (type (int_2_U arg0@@0)) intType) :qid |funType:int_2_U| :pattern ((int_2_U arg0@@0)))) (forall ((arg0@@1 Real)) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1) :qid |typeInv:U_2_real| :pattern ((real_2_U arg0@@1)))) (forall ((x@@0 T@U)) (! (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0)) :qid |cast:U_2_real| :pattern ((U_2_real x@@0)))) (forall ((arg0@@2 Real)) (! (= (type (real_2_U arg0@@2)) realType) :qid |funType:real_2_U| :pattern ((real_2_U arg0@@2)))) (forall ((arg0@@3 Bool)) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3) :qid |typeInv:U_2_bool| :pattern ((bool_2_U arg0@@3)))) (forall ((x@@1 T@U)) (! (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1)) :qid |cast:U_2_bool| :pattern ((U_2_bool x@@1)))) (forall ((arg0@@4 Bool)) (! (= (type (bool_2_U arg0@@4)) boolType) :qid |funType:bool_2_U| :pattern ((bool_2_U arg0@@4)))))))
(assert (= BAV13 (= (Ctor intType) GEN1)))
(assert (= BAV14 (= (Ctor realType) GEN2)))
(assert (= BAV15 (= (Ctor boolType) GEN3)))
(assert (= BAV16 (forall ((arg0 Int)) (= (U_2_int (int_2_U arg0)) arg0))))
(assert (= BAV17 (forall ((x T@U)) (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x)))))
(assert (= BAV18 (forall ((x T@U)) (= (type x) intType))))
(assert (= BAV19 (forall ((x T@U)) (= (int_2_U (U_2_int x)) x))))
(assert (= BAV20 (forall ((arg0@@0 Int)) (= (type (int_2_U arg0@@0)) intType))))
(assert (= BAV21 (forall ((arg0@@1 Real)) (= (U_2_real (real_2_U arg0@@1)) arg0@@1))))
(assert (= BAV22 (forall ((x@@0 T@U)) (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0)))))
(assert (= BAV23 (forall ((x@@0 T@U)) (= (type x@@0) realType))))
(assert (= BAV24 (forall ((x@@0 T@U)) (= (real_2_U (U_2_real x@@0)) x@@0))))
(assert (= BAV25 (forall ((arg0@@2 Real)) (= (type (real_2_U arg0@@2)) realType))))
(assert (= BAV26 (forall ((arg0@@3 Bool)) (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3))))
(assert (= BAV27 (forall ((x@@1 T@U)) (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1)))))
(assert (= BAV28 (forall ((x@@1 T@U)) (= (type x@@1) boolType))))
(assert (= BAV29 (forall ((x@@1 T@U)) (= (bool_2_U (U_2_bool x@@1)) x@@1))))
(assert (= BAV30 (forall ((arg0@@4 Bool)) (= (type (bool_2_U arg0@@4)) boolType))))
(assert (= BAV31 (forall ((x@@3 T@U)(y T@U)(z T@U)) (=> (and (= (type y) (type x@@3)) (= (type z) (type x@@3)) (UOrdering2 x@@3 y) (UOrdering2 y z)) (UOrdering2 x@@3 z)))))
(assert (= BAV32 (forall ((x@@3 T@U)(y T@U)(z T@U)) (and (= (type y) (type x@@3)) (= (type z) (type x@@3)) (UOrdering2 x@@3 y) (UOrdering2 y z)))))
(assert (= BAV33 (forall ((x@@3 T@U)(y T@U)(z T@U)) (= (type y) (type x@@3)))))
(assert (= BAV34 (forall ((x@@3 T@U)(y T@U)(z T@U)) (= (type z) (type x@@3)))))
(assert (= BAV35 (forall ((x@@4 T@U)(y@@0 T@U)) (=> (= (type y@@0) (type x@@4)) (=> (and (UOrdering2 x@@4 y@@0) (UOrdering2 y@@0 x@@4)) (= x@@4 y@@0))))))
(assert (= BAV36 (forall ((x@@4 T@U)(y@@0 T@U)) (= (type y@@0) (type x@@4)))))
(assert (= BAV37 (forall ((x@@4 T@U)(y@@0 T@U)) (=> (and (UOrdering2 x@@4 y@@0) (UOrdering2 y@@0 x@@4)) (= x@@4 y@@0)))))
(assert (= BAV38 (forall ((x@@4 T@U)(y@@0 T@U)) (and (UOrdering2 x@@4 y@@0) (UOrdering2 y@@0 x@@4)))))
(assert (= BAV39 (forall ((x@@4 T@U)(y@@0 T@U)) (= x@@4 y@@0))))
(assert (= BAV40 (=> (! (and %lbl%+97 true) :lblpos GEN9) (=> (>= y@@1 GEN10) (=> (! (and %lbl%+63 true) :lblpos GEN8) (and (! (or %lbl%@125 (<= x@@5 (+ x@@5 y@@1))) :lblneg @125) (=> (<= x@@5 (+ x@@5 y@@1)) (=> (! (and %lbl%+65 true) :lblpos GEN7) (=> (<= i@0 (+ x@@5 y@@1)) (and (=> (! (and %lbl%+69 true) :lblpos GEN6) (=> (<= (+ x@@5 y@@1) i@0) (and (! (or %lbl%@157 (= i@0 (- x@@5 y@@1))) :lblneg @157) (=> (= i@0 (- x@@5 y@@1)) true)))) (=> (! (and %lbl%+67 true) :lblpos GEN4) (=> (and (< i@0 (+ x@@5 y@@1)) (= i@1 (+ i@0 GEN5))) (and (! (or %lbl%@186 (<= i@1 (+ x@@5 y@@1))) :lblneg @186) (=> (<= i@1 (+ x@@5 y@@1)) true))))))))))))))
(assert (= BAV41 (and %lbl%+97 true)))
(assert (= BAV42 (=> (>= y@@1 GEN10) (=> (! (and %lbl%+63 true) :lblpos GEN8) (and (! (or %lbl%@125 (<= x@@5 (+ x@@5 y@@1))) :lblneg @125) (=> (<= x@@5 (+ x@@5 y@@1)) (=> (! (and %lbl%+65 true) :lblpos GEN7) (=> (<= i@0 (+ x@@5 y@@1)) (and (=> (! (and %lbl%+69 true) :lblpos GEN6) (=> (<= (+ x@@5 y@@1) i@0) (and (! (or %lbl%@157 (= i@0 (- x@@5 y@@1))) :lblneg @157) (=> (= i@0 (- x@@5 y@@1)) true)))) (=> (! (and %lbl%+67 true) :lblpos GEN4) (=> (and (< i@0 (+ x@@5 y@@1)) (= i@1 (+ i@0 GEN5))) (and (! (or %lbl%@186 (<= i@1 (+ x@@5 y@@1))) :lblneg @186) (=> (<= i@1 (+ x@@5 y@@1)) true)))))))))))))
(assert (= BAV43 (>= y@@1 GEN10)))
(assert (= BAV44 (=> (! (and %lbl%+63 true) :lblpos GEN8) (and (! (or %lbl%@125 (<= x@@5 (+ x@@5 y@@1))) :lblneg @125) (=> (<= x@@5 (+ x@@5 y@@1)) (=> (! (and %lbl%+65 true) :lblpos GEN7) (=> (<= i@0 (+ x@@5 y@@1)) (and (=> (! (and %lbl%+69 true) :lblpos GEN6) (=> (<= (+ x@@5 y@@1) i@0) (and (! (or %lbl%@157 (= i@0 (- x@@5 y@@1))) :lblneg @157) (=> (= i@0 (- x@@5 y@@1)) true)))) (=> (! (and %lbl%+67 true) :lblpos GEN4) (=> (and (< i@0 (+ x@@5 y@@1)) (= i@1 (+ i@0 GEN5))) (and (! (or %lbl%@186 (<= i@1 (+ x@@5 y@@1))) :lblneg @186) (=> (<= i@1 (+ x@@5 y@@1)) true))))))))))))
(assert (= BAV45 (and %lbl%+63 true)))
(assert (= BAV46 (and (! (or %lbl%@125 (<= x@@5 (+ x@@5 y@@1))) :lblneg @125) (=> (<= x@@5 (+ x@@5 y@@1)) (=> (! (and %lbl%+65 true) :lblpos GEN7) (=> (<= i@0 (+ x@@5 y@@1)) (and (=> (! (and %lbl%+69 true) :lblpos GEN6) (=> (<= (+ x@@5 y@@1) i@0) (and (! (or %lbl%@157 (= i@0 (- x@@5 y@@1))) :lblneg @157) (=> (= i@0 (- x@@5 y@@1)) true)))) (=> (! (and %lbl%+67 true) :lblpos GEN4) (=> (and (< i@0 (+ x@@5 y@@1)) (= i@1 (+ i@0 GEN5))) (and (! (or %lbl%@186 (<= i@1 (+ x@@5 y@@1))) :lblneg @186) (=> (<= i@1 (+ x@@5 y@@1)) true)))))))))))
(assert (= BAV47 (or %lbl%@125 (<= x@@5 (+ x@@5 y@@1)))))
(assert (= BAV48 (<= x@@5 (+ x@@5 y@@1))))
(assert (= BAV49 (=> (<= x@@5 (+ x@@5 y@@1)) (=> (! (and %lbl%+65 true) :lblpos GEN7) (=> (<= i@0 (+ x@@5 y@@1)) (and (=> (! (and %lbl%+69 true) :lblpos GEN6) (=> (<= (+ x@@5 y@@1) i@0) (and (! (or %lbl%@157 (= i@0 (- x@@5 y@@1))) :lblneg @157) (=> (= i@0 (- x@@5 y@@1)) true)))) (=> (! (and %lbl%+67 true) :lblpos GEN4) (=> (and (< i@0 (+ x@@5 y@@1)) (= i@1 (+ i@0 GEN5))) (and (! (or %lbl%@186 (<= i@1 (+ x@@5 y@@1))) :lblneg @186) (=> (<= i@1 (+ x@@5 y@@1)) true))))))))))
(assert (= BAV50 (<= x@@5 (+ x@@5 y@@1))))
(assert (= BAV51 (=> (! (and %lbl%+65 true) :lblpos GEN7) (=> (<= i@0 (+ x@@5 y@@1)) (and (=> (! (and %lbl%+69 true) :lblpos GEN6) (=> (<= (+ x@@5 y@@1) i@0) (and (! (or %lbl%@157 (= i@0 (- x@@5 y@@1))) :lblneg @157) (=> (= i@0 (- x@@5 y@@1)) true)))) (=> (! (and %lbl%+67 true) :lblpos GEN4) (=> (and (< i@0 (+ x@@5 y@@1)) (= i@1 (+ i@0 GEN5))) (and (! (or %lbl%@186 (<= i@1 (+ x@@5 y@@1))) :lblneg @186) (=> (<= i@1 (+ x@@5 y@@1)) true)))))))))
(assert (= BAV52 (and %lbl%+65 true)))
(assert (= BAV53 (=> (<= i@0 (+ x@@5 y@@1)) (and (=> (! (and %lbl%+69 true) :lblpos GEN6) (=> (<= (+ x@@5 y@@1) i@0) (and (! (or %lbl%@157 (= i@0 (- x@@5 y@@1))) :lblneg @157) (=> (= i@0 (- x@@5 y@@1)) true)))) (=> (! (and %lbl%+67 true) :lblpos GEN4) (=> (and (< i@0 (+ x@@5 y@@1)) (= i@1 (+ i@0 GEN5))) (and (! (or %lbl%@186 (<= i@1 (+ x@@5 y@@1))) :lblneg @186) (=> (<= i@1 (+ x@@5 y@@1)) true))))))))
(assert (= BAV54 (<= i@0 (+ x@@5 y@@1))))
(assert (= BAV55 (and (=> (! (and %lbl%+69 true) :lblpos GEN6) (=> (<= (+ x@@5 y@@1) i@0) (and (! (or %lbl%@157 (= i@0 (- x@@5 y@@1))) :lblneg @157) (=> (= i@0 (- x@@5 y@@1)) true)))) (=> (! (and %lbl%+67 true) :lblpos GEN4) (=> (and (< i@0 (+ x@@5 y@@1)) (= i@1 (+ i@0 GEN5))) (and (! (or %lbl%@186 (<= i@1 (+ x@@5 y@@1))) :lblneg @186) (=> (<= i@1 (+ x@@5 y@@1)) true)))))))
(assert (= BAV56 (=> (! (and %lbl%+69 true) :lblpos GEN6) (=> (<= (+ x@@5 y@@1) i@0) (and (! (or %lbl%@157 (= i@0 (- x@@5 y@@1))) :lblneg @157) (=> (= i@0 (- x@@5 y@@1)) true))))))
(assert (= BAV57 (and %lbl%+69 true)))
(assert (= BAV58 (=> (<= (+ x@@5 y@@1) i@0) (and (! (or %lbl%@157 (= i@0 (- x@@5 y@@1))) :lblneg @157) (=> (= i@0 (- x@@5 y@@1)) true)))))
(assert (= BAV59 (<= (+ x@@5 y@@1) i@0)))
(assert (= BAV60 (and (! (or %lbl%@157 (= i@0 (- x@@5 y@@1))) :lblneg @157) (=> (= i@0 (- x@@5 y@@1)) true))))
(assert (= BAV61 (or %lbl%@157 (= i@0 (- x@@5 y@@1)))))
(assert (= BAV62 (= i@0 (- x@@5 y@@1))))
(assert (= BAV63 (=> (= i@0 (- x@@5 y@@1)) true)))
(assert (= BAV64 (= i@0 (- x@@5 y@@1))))
(assert (= BAV65 (=> (! (and %lbl%+67 true) :lblpos GEN4) (=> (and (< i@0 (+ x@@5 y@@1)) (= i@1 (+ i@0 GEN5))) (and (! (or %lbl%@186 (<= i@1 (+ x@@5 y@@1))) :lblneg @186) (=> (<= i@1 (+ x@@5 y@@1)) true))))))
(assert (= BAV66 (and %lbl%+67 true)))
(assert (= BAV67 (=> (and (< i@0 (+ x@@5 y@@1)) (= i@1 (+ i@0 GEN5))) (and (! (or %lbl%@186 (<= i@1 (+ x@@5 y@@1))) :lblneg @186) (=> (<= i@1 (+ x@@5 y@@1)) true)))))
(assert (= BAV68 (and (< i@0 (+ x@@5 y@@1)) (= i@1 (+ i@0 GEN5)))))
(assert (= BAV69 (< i@0 (+ x@@5 y@@1))))
(assert (= BAV70 (= i@1 (+ i@0 GEN5))))
(assert (= BAV71 (and (! (or %lbl%@186 (<= i@1 (+ x@@5 y@@1))) :lblneg @186) (=> (<= i@1 (+ x@@5 y@@1)) true))))
(assert (= BAV72 (or %lbl%@186 (<= i@1 (+ x@@5 y@@1)))))
(assert (= BAV73 (<= i@1 (+ x@@5 y@@1))))
(assert (= BAV74 (=> (<= i@1 (+ x@@5 y@@1)) true)))
(assert (= BAV75 (<= i@1 (+ x@@5 y@@1))))
(check-sat)
(get-info :reason-unknown)
(assert %lbl%@157)
(check-sat)
(pop 1)