(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(set-option :produce-unsat-cores true)
(declare-const x Int)
(declare-const y Int)
(declare-const z Int)
(declare-const w Int)
(declare-fun f (Int) Int)
(assert (! (= x (+ y 1)) :named a1))
(assert (! (= z (+ x 1)) :named a2))
(assert (! (>= y 0) :named a3))
(assert (<= z 10))
(assert (<= (f (+ x 1)) 0))
(assert (<= (f y) 2))
(assert (<= (f z) 3))
(assert (! (> (* w w) 4) :named a4))
(apply (and-then simplify solve-eqs) :print-dependencies true)
(assert (= BAV1 (= x (+ y 1))))
(assert (= BAV2 (= z (+ x 1))))
(assert (= BAV3 (>= y 0)))
(assert (= BAV4 (<= z 10)))
(assert (= BAV5 (<= (f (+ x 1)) 0)))
(assert (= BAV6 (<= (f y) 2)))
(assert (= BAV7 (<= (f z) 3)))
(assert (= BAV8 (> (* w w) 4)))