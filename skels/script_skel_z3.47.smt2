(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(get-model)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(set-option :auto-config true)
(set-option :produce-models true)
(set-option :smt.mbqi true)
(declare-fun h (Int) Int)
(declare-fun f (Int) Int)
(declare-const n Int)
(assert (forall ((x1 Int)(x2 Int)) (=> (and (<= GEN1 x1) (<= x1 x2) (<= x2 n)) (<= (h (f x1)) (h (f x2))))))
(declare-const p0 Int)
(assert (forall ((x Int)) (=> (and (<= GEN2 x) (<= x n)) (not (= (f x) p0)))))
(declare-fun new-h (Int) Int)
(declare-const p Int)
(declare-const a Int)
(assert (= (new-h p) a))
(assert (forall ((x Int)) (or (= x p) (= (new-h x) (h x)))))
(assert (not (forall ((x1 Int)(x2 Int)) (=> (and (<= GEN3 x1) (<= x1 x2) (<= x2 n)) (<= (new-h (f x1)) (new-h (f x2)))))))
(assert (= BAV1 (forall ((x1 Int)(x2 Int)) (=> (and (<= GEN1 x1) (<= x1 x2) (<= x2 n)) (<= (h (f x1)) (h (f x2)))))))
(assert (= BAV2 (forall ((x1 Int)(x2 Int)) (and (<= GEN1 x1) (<= x1 x2) (<= x2 n)))))
(assert (= BAV3 (forall ((x1 Int)(x2 Int)) (<= GEN1 x1))))
(assert (= BAV4 (forall ((x1 Int)(x2 Int)) (<= x1 x2))))
(assert (= BAV5 (forall ((x1 Int)(x2 Int)) (<= x2 n))))
(assert (= BAV6 (forall ((x1 Int)(x2 Int)) (<= (h (f x1)) (h (f x2))))))
(assert (= BAV7 (forall ((x Int)) (=> (and (<= GEN2 x) (<= x n)) (not (= (f x) p0))))))
(assert (= BAV8 (forall ((x Int)) (and (<= GEN2 x) (<= x n)))))
(assert (= BAV9 (forall ((x Int)) (<= GEN2 x))))
(assert (= BAV10 (forall ((x Int)) (<= x n))))
(assert (= BAV11 (forall ((x Int)) (= (f x) p0))))
(assert (= BAV12 (= (new-h p) a)))
(assert (= BAV13 (forall ((x Int)) (or (= x p) (= (new-h x) (h x))))))
(assert (= BAV14 (forall ((x Int)) (= x p))))
(assert (= BAV15 (forall ((x Int)) (= (new-h x) (h x)))))
(assert (= BAV16 (forall ((x1 Int)(x2 Int)) (=> (and (<= GEN3 x1) (<= x1 x2) (<= x2 n)) (<= (new-h (f x1)) (new-h (f x2)))))))
(assert (= BAV17 (forall ((x1 Int)(x2 Int)) (and (<= GEN3 x1) (<= x1 x2) (<= x2 n)))))
(assert (= BAV18 (forall ((x1 Int)(x2 Int)) (<= GEN3 x1))))
(assert (= BAV19 (forall ((x1 Int)(x2 Int)) (<= x1 x2))))
(assert (= BAV20 (forall ((x1 Int)(x2 Int)) (<= x2 n))))
(assert (= BAV21 (forall ((x1 Int)(x2 Int)) (<= (new-h (f x1)) (new-h (f x2))))))
(assert (= BAV22 (= p0 p)))
(check-sat)
(get-model)
(echo "If p0 = p, then the problem is unsatisfiable. Why?")
(assert (= p0 p))
(check-sat)