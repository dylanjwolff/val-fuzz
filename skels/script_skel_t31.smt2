(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(get-model)
(declare-const BAV4 Bool)
(get-model)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(get-model)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(get-model)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const BAV23 Bool)
(declare-const BAV24 Bool)
(declare-const BAV25 Bool)
(declare-const BAV26 Bool)
(declare-const BAV27 Bool)
(declare-const BAV28 Bool)
(declare-const BAV29 Bool)
(declare-const BAV30 Bool)
(declare-const BAV31 Bool)
(declare-const BAV32 Bool)
(declare-const BAV33 Bool)
(declare-const BAV34 Bool)
(declare-const BAV35 Bool)
(declare-const BAV36 Bool)
(declare-const BAV37 Bool)
(declare-const BAV38 Bool)
(declare-const BAV39 Bool)
(declare-const BAV40 Bool)
(declare-const BAV41 Bool)
(declare-const BAV42 Bool)
(declare-const BAV43 Bool)
(declare-const BAV44 Bool)
(declare-fun a () (Array Int Int))
(declare-fun b () (Array Int Int))
(declare-fun c () (Array Int Int))
(declare-fun a1 () (Array Int Int))
(declare-fun b1 () (Array Int Int))
(declare-fun c1 () (Array Int Int))
(declare-fun a2 () (Array Int Int))
(declare-fun b2 () (Array Int Int))
(declare-fun c2 () (Array Int Int))
(declare-fun a3 () (Array Int Int))
(declare-fun b3 () (Array Int Int))
(declare-fun c3 () (Array Int Int))
(declare-fun a4 () (Array Int Int))
(declare-fun b4 () (Array Int Int))
(declare-fun c4 () (Array Int Int))
(declare-fun i () Int)
(declare-fun j () Int)
(declare-fun k () Int)
(declare-fun i1 () Int)
(declare-fun j1 () Int)
(declare-fun i2 () Int)
(declare-fun j2 () Int)
(declare-fun i3 () Int)
(declare-fun j3 () Int)
(declare-fun i4 () Int)
(declare-fun j4 () Int)
(declare-fun v () Int)
(declare-fun w () Int)
(declare-fun u () Int)
(declare-fun v1 () Int)
(declare-fun w1 () Int)
(declare-fun u1 () Int)
(declare-fun v2 () Int)
(declare-fun w2 () Int)
(declare-fun u2 () Int)
(declare-fun v3 () Int)
(declare-fun w3 () Int)
(declare-fun u3 () Int)
(push)
(assert (and (= (store a i v) b) (= (store a j w) c) (= (select b j) w) (= (select c i) v) (not (= b c))))
(assert (= BAV1 (and (= (store a i v) b) (= (store a j w) c) (= (select b j) w) (= (select c i) v) (not (= b c)))))
(assert (= BAV2 (= (store a i v) b)))
(assert (= BAV3 (= (store a j w) c)))
(assert (= BAV4 (= (select b j) w)))
(assert (= BAV5 (= (select c i) v)))
(assert (= BAV6 (= b c)))
(assert (= BAV7 (and (= a4 (store a3 i3 v3)) (not (= j i3)) (not (= (select a4 j) (select a3 j))))))
(assert (= BAV8 (= a4 (store a3 i3 v3))))
(assert (= BAV9 (= j i3)))
(assert (= BAV10 (= (select a4 j) (select a3 j))))
(assert (= BAV11 (and (= a2 (store a1 i1 v1)) (= a3 (store a2 i2 v2)) (= a4 (store a3 i3 v3)) (not (= j i3)) (not (= j i2)) (not (= j i1)) (not (= (select a4 j) (select a1 j))))))
(assert (= BAV12 (= a2 (store a1 i1 v1))))
(assert (= BAV13 (= a3 (store a2 i2 v2))))
(assert (= BAV14 (= a4 (store a3 i3 v3))))
(assert (= BAV15 (= j i3)))
(assert (= BAV16 (= j i2)))
(assert (= BAV17 (= j i1)))
(assert (= BAV18 (= (select a4 j) (select a1 j))))
(assert (= BAV19 (and (= (store a1 i1 w) (store a2 i2 u)) (not (= i1 i3)) (not (= i2 i3)) (not (= (select a1 i3) (select a2 i3))))))
(assert (= BAV20 (= (store a1 i1 w) (store a2 i2 u))))
(assert (= BAV21 (= i1 i3)))
(assert (= BAV22 (= i2 i3)))
(assert (= BAV23 (= (select a1 i3) (select a2 i3))))
(assert (= BAV24 (and (= (store (store a2 i2 v2) i1 v1) (store a3 i3 v3)) (= i2 i3) (not (= i1 i3)) (not (= v2 v3)))))
(assert (= BAV25 (= (store (store a2 i2 v2) i1 v1) (store a3 i3 v3))))
(assert (= BAV26 (= i2 i3)))
(assert (= BAV27 (= i1 i3)))
(assert (= BAV28 (= v2 v3)))
(assert (= BAV29 (and (= a3 (store a2 i2 v2)) (= a4 (store a3 i3 v3)) (not (= j i3)) (not (= j i2)) (not (= (select a4 j) (select a2 j))))))
(assert (= BAV30 (= a3 (store a2 i2 v2))))
(assert (= BAV31 (= a4 (store a3 i3 v3))))
(assert (= BAV32 (= j i3)))
(assert (= BAV33 (= j i2)))
(assert (= BAV34 (= (select a4 j) (select a2 j))))
(assert (= BAV35 (and (= (store a i v) b) (= (store a j w) c) (= (select b j) w) (= (select c i) v) (not (= b c)))))
(assert (= BAV36 (= (store a i v) b)))
(assert (= BAV37 (= (store a j w) c)))
(assert (= BAV38 (= (select b j) w)))
(assert (= BAV39 (= (select c i) v)))
(assert (= BAV40 (= b c)))
(assert (= BAV41 (and (= a4 (store a3 i3 v3)) (not (= j i3)) (not (= (select a4 j) (select a3 j))))))
(assert (= BAV42 (= a4 (store a3 i3 v3))))
(assert (= BAV43 (= j i3)))
(assert (= BAV44 (= (select a4 j) (select a3 j))))
(check-sat)
(get-model)
(pop)
(push)
(assert (and (= a4 (store a3 i3 v3)) (not (= j i3)) (not (= (select a4 j) (select a3 j)))))
(check-sat)
(pop)
(push)
(assert (and (= a2 (store a1 i1 v1)) (= a3 (store a2 i2 v2)) (= a4 (store a3 i3 v3)) (not (= j i3)) (not (= j i2)) (not (= j i1)) (not (= (select a4 j) (select a1 j)))))
(check-sat)
(pop)
(push)
(assert (and (= (store a1 i1 w) (store a2 i2 u)) (not (= i1 i3)) (not (= i2 i3)) (not (= (select a1 i3) (select a2 i3)))))
(check-sat)
(pop)
(push)
(assert (and (= (store (store a2 i2 v2) i1 v1) (store a3 i3 v3)) (= i2 i3) (not (= i1 i3)) (not (= v2 v3))))
(check-sat)
(pop)
(push)
(assert (and (= a3 (store a2 i2 v2)) (= a4 (store a3 i3 v3)) (not (= j i3)) (not (= j i2)) (not (= (select a4 j) (select a2 j)))))
(check-sat)
(pop)
(reset)
(set-option :auto-config true)
(declare-fun a () (Array Int Int))
(declare-fun b () (Array Int Int))
(declare-fun c () (Array Int Int))
(declare-fun i () Int)
(declare-fun j () Int)
(declare-fun k () Int)
(declare-fun v () Int)
(declare-fun w () Int)
(declare-fun u () Int)
(assert (and (= (store a i v) b) (= (store a j w) c) (= (select b j) w) (= (select c i) v) (not (= b c))))
(check-sat)
(reset)
(echo "after second reset...")
(check-sat)
(get-option :auto-config)
(declare-fun a3 () (Array Int Int))
(declare-fun a4 () (Array Int Int))
(declare-fun i () Int)
(declare-fun j () Int)
(declare-fun i3 () Int)
(declare-fun v3 () Int)
(assert (and (= a4 (store a3 i3 v3)) (not (= j i3)) (not (= (select a4 j) (select a3 j)))))
(check-sat)