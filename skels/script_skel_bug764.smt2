(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const GEN1 String)
(define-fun BoolToString ((b Bool)) String (ite b "true" "false") )
(declare-datatypes () (
    (Color (red) (white) (blue))
) )
(define-fun ColorToString ((c Color)) String (ite (is-red c) "red" (ite (is-white c) "white" "blue")) )
(declare-datatypes () (
    (CP (cp (b Bool) (c Color)))
) )
(define-fun-rec CPToString ((cp CP)) String (str.++ "cp(" (BoolToString (b cp)) "," (ColorToString (c cp)) ")"))
(declare-fun CPFromString (String) CP)
(assert (forall ((cp1 CP)) (= cp1 (CPFromString (CPToString cp1)))))
(declare-fun cpx() CP)
(assert (= cpx (CPFromString GEN1)))
(assert (= BAV1 (forall ((cp1 CP)) (= cp1 (CPFromString (CPToString cp1))))))
(assert (= BAV2 (= cpx (CPFromString GEN1))))
(check-sat)
(get-model)