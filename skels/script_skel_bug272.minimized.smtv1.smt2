(set-option :incremental false)
(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-sort Index 0)
(declare-sort Element 0)
(declare-fun v2 () Index)
(declare-fun v0 () (Array Index Element))
(declare-fun v3 () Element)
(declare-fun v1 () Index)
(assert (= BAV1 (xor true (or (= v3 (select v0 v2)) (distinct (ite (= (store (store v0 v1 v3) v2 v3) (store (store v0 v1 v3) v2 (select v0 v2))) (store (store v0 v1 v3) v2 v3) (store (store (store v0 v1 v3) v2 v3) v1 (select v0 v2))) (store (store (store v0 v1 v3) v2 v3) v1 (ite (= v0 (store (store v0 v1 v3) v2 (select v0 v2))) (ite (distinct (store (store v0 v1 v3) v2 v3) (store (store (store v0 v1 v3) v2 v3) v1 (select v0 v2))) v3 (ite (distinct v3 (select (store (store v0 v1 v3) v2 v3) v1)) v3 (select (store (store v0 v1 v3) v2 v3) v1))) (ite (= (store v0 v1 v3) (store (store v0 v1 v3) v2 (select v0 v2))) (select v0 v2) (select v0 v2)))))))))
(assert (= BAV2 (or (= v3 (select v0 v2)) (distinct (ite (= (store (store v0 v1 v3) v2 v3) (store (store v0 v1 v3) v2 (select v0 v2))) (store (store v0 v1 v3) v2 v3) (store (store (store v0 v1 v3) v2 v3) v1 (select v0 v2))) (store (store (store v0 v1 v3) v2 v3) v1 (ite (= v0 (store (store v0 v1 v3) v2 (select v0 v2))) (ite (distinct (store (store v0 v1 v3) v2 v3) (store (store (store v0 v1 v3) v2 v3) v1 (select v0 v2))) v3 (ite (distinct v3 (select (store (store v0 v1 v3) v2 v3) v1)) v3 (select (store (store v0 v1 v3) v2 v3) v1))) (ite (= (store v0 v1 v3) (store (store v0 v1 v3) v2 (select v0 v2))) (select v0 v2) (select v0 v2))))))))
(assert (= BAV3 (= v3 (select v0 v2))))
(assert (= BAV4 (distinct (ite (= (store (store v0 v1 v3) v2 v3) (store (store v0 v1 v3) v2 (select v0 v2))) (store (store v0 v1 v3) v2 v3) (store (store (store v0 v1 v3) v2 v3) v1 (select v0 v2))) (store (store (store v0 v1 v3) v2 v3) v1 (ite (= v0 (store (store v0 v1 v3) v2 (select v0 v2))) (ite (distinct (store (store v0 v1 v3) v2 v3) (store (store (store v0 v1 v3) v2 v3) v1 (select v0 v2))) v3 (ite (distinct v3 (select (store (store v0 v1 v3) v2 v3) v1)) v3 (select (store (store v0 v1 v3) v2 v3) v1))) (ite (= (store v0 v1 v3) (store (store v0 v1 v3) v2 (select v0 v2))) (select v0 v2) (select v0 v2)))))))
(assert (= BAV5 (= (store (store v0 v1 v3) v2 v3) (store (store v0 v1 v3) v2 (select v0 v2)))))
(assert (= BAV6 (= v0 (store (store v0 v1 v3) v2 (select v0 v2)))))
(assert (= BAV7 (distinct (store (store v0 v1 v3) v2 v3) (store (store (store v0 v1 v3) v2 v3) v1 (select v0 v2)))))
(assert (= BAV8 (distinct v3 (select (store (store v0 v1 v3) v2 v3) v1))))
(assert (= BAV9 (= (store v0 v1 v3) (store (store v0 v1 v3) v2 (select v0 v2)))))
(check-sat-assuming ((xor true (or (= v3 (select v0 v2)) (distinct (ite (= (store (store v0 v1 v3) v2 v3) (store (store v0 v1 v3) v2 (select v0 v2))) (store (store v0 v1 v3) v2 v3) (store (store (store v0 v1 v3) v2 v3) v1 (select v0 v2))) (store (store (store v0 v1 v3) v2 v3) v1 (ite (= v0 (store (store v0 v1 v3) v2 (select v0 v2))) (ite (distinct (store (store v0 v1 v3) v2 v3) (store (store (store v0 v1 v3) v2 v3) v1 (select v0 v2))) v3 (ite (distinct v3 (select (store (store v0 v1 v3) v2 v3) v1)) v3 (select (store (store v0 v1 v3) v2 v3) v1))) (ite (= (store v0 v1 v3) (store (store v0 v1 v3) v2 (select v0 v2))) (select v0 v2) (select v0 v2)))))))))
(get-model)