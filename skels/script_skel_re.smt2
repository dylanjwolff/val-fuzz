(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(get-model)
(get-model)
(get-model)
(declare-const BAV5 Bool)
(get-model)
(get-model)
(get-model)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const GEN36 Int)
(declare-const GEN35 String)
(declare-const GEN34 Int)
(declare-const GEN33 Int)
(declare-const GEN32 String)
(declare-const GEN31 Int)
(declare-const GEN30 Int)
(declare-const GEN29 String)
(declare-const GEN28 Int)
(declare-const GEN27 String)
(declare-const GEN26 Int)
(declare-const GEN25 Int)
(declare-const GEN24 Int)
(declare-const GEN23 Int)
(declare-const GEN22 String)
(declare-const GEN21 Int)
(declare-const GEN20 Int)
(declare-const GEN19 Int)
(declare-const GEN18 String)
(declare-const GEN17 Int)
(declare-const GEN16 Int)
(declare-const GEN15 Int)
(declare-const GEN14 String)
(declare-const GEN13 Int)
(declare-const GEN12 Int)
(declare-const GEN11 Int)
(declare-const GEN10 String)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 String)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 String)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-const a String)
(declare-const b String)
(declare-const r (RegEx String))
(declare-const r1 (RegEx String))
(declare-const r2 (RegEx String))
(simplify (not (str.in.re a re.nostr)))
(simplify (str.in.re a re.all))
(simplify (str.in.re "a" (str.to.re "a")))
(simplify (not (str.in.re "a" (str.to.re "ab"))))
(simplify (str.in.re "a" (re.+ (str.to.re "a"))))
(simplify (str.in.re "a" (re.* (str.to.re "a"))))
(simplify (str.in.re "a" (re.opt (str.to.re "a"))))
(simplify (str.in.re "a" (re.union (str.to.re "a") (str.to.re "b"))))
(simplify (not (str.in.re "c" (re.union (str.to.re "a") (str.to.re "b")))))
(echo "algebra")
(simplify (= (= a "") (str.in.re a (re.* re.nostr))))
(simplify (str.in.re a (re.* re.all)))
(simplify (not (str.in.re a (re.+ re.nostr))))
(simplify (str.in.re a (re.+ re.all)))
(simplify (= (= a "") (str.in.re a (re.opt re.nostr))))
(simplify (str.in.re a (re.opt re.all)))
(simplify (= r (re.union re.nostr r)))
(simplify (= r (re.union r re.nostr)))
(simplify (= re.all (re.union re.all r)))
(simplify (= re.all (re.union r re.all)))
(simplify (= r (re.union r r)))
(simplify (= re.nostr (re.++ re.nostr r)))
(simplify (= re.nostr (re.++ r re.nostr)))
(simplify (= r (re.++ r (str.to.re ""))))
(simplify (= r (re.++ (str.to.re "") r)))
(simplify (= r (re.inter r r)))
(simplify (= re.nostr (re.inter re.nostr r)))
(simplify (= re.nostr (re.inter r re.nostr)))
(simplify (= r (re.inter r re.all)))
(simplify (= r (re.inter re.all r)))
(simplify (= (re.+ r) (re.+ (re.+ r))))
(simplify (= (re.* r) (re.* (re.* r))))
(simplify (= (re.* r) (re.* (re.+ r))))
(simplify (= (re.* r) (re.+ (re.* r))))
(simplify (= (str.to.re "") (re.* re.nostr)))
(simplify (= re.nostr (re.+ re.nostr)))
(simplify (= re.all (re.* re.all)))
(simplify (= re.all (re.+ re.all)))
(simplify (= (re.* (re.union r1 r2)) (re.* (re.union (re.* r1) r2))))
(simplify (= (re.* (re.union r1 r2)) (re.* (re.union r1 (re.* r2)))))
(simplify (= (re.* r) (re.* (re.union (str.to.re "") r))))
(simplify (= (re.* r) (re.* (re.opt r))))
(echo "complement")
(simplify (str.in.re "a" (re.complement (str.to.re "b"))))
(simplify (not (str.in.re "a" (re.complement (str.to.re "a")))))
(simplify (str.in.re "a" (re.complement (re.range "b" "d"))))
(simplify (not (str.in.re "c" (re.complement (re.range "b" "d")))))
(simplify (= re.nostr (re.complement re.all)))
(simplify (= re.all (re.complement re.nostr)))
(simplify (= (re.union (re.complement r1) (re.complement r2)) (re.complement (re.inter r1 r2))))
(simplify (= (re.inter (re.complement r1) (re.complement r2)) (re.complement (re.union r1 r2))))
(simplify (str.in.re a (str.to.re "abc")))
(simplify (str.in.re a (re.union (str.to.re "ab") (str.to.re "abc"))))
(push)
(assert (str.in.re a ((_ re.loop 1 3) (str.to.re GEN3))))
(assert (= BAV1 (= (str.len a) GEN7)))
(assert (= BAV2 (= (str.len a) GEN11)))
(assert (= BAV3 (= (str.len a) GEN15)))
(assert (= BAV4 (> (str.len a) GEN19)))
(assert (= BAV5 (= (str.len a) GEN23)))
(assert (= BAV6 (= (str.len a) GEN24)))
(assert (= BAV7 (= (str.len a) GEN25)))
(assert (= BAV8 (= (str.len a) GEN30)))
(assert (= BAV9 (= (str.len a) GEN33)))
(assert (= BAV10 (= (str.len a) GEN36)))
(check-sat)
(get-model)
(pop)
(push)
(assert (str.in.re a ((_ re.loop 1 3) (str.to.re GEN6))))
(assert (= (str.len a) GEN7))
(check-sat)
(get-model)
(pop)
(push)
(assert (str.in.re a ((_ re.loop 1 3) (str.to.re GEN10))))
(assert (= (str.len a) GEN11))
(check-sat)
(get-model)
(pop)
(push)
(assert (str.in.re a ((_ re.loop 1 3) (str.to.re GEN14))))
(assert (= (str.len a) GEN15))
(check-sat)
(get-model)
(pop)
(push)
(assert (str.in.re a ((_ re.loop 1 3) (str.to.re GEN18))))
(assert (> (str.len a) GEN19))
(check-sat)
(pop)
(push)
(assert (str.in.re a ((_ re.loop 1 3) (str.to.re GEN22))))
(assert (not (= (str.len a) GEN23)))
(assert (not (= (str.len a) GEN24)))
(assert (not (= (str.len a) GEN25)))
(check-sat)
(pop)
(push)
(assert (str.in.re a ((_ re.loop 2) (str.to.re GEN27))))
(check-sat)
(pop)
(push)
(assert (str.in.re a ((_ re.loop 2) (str.to.re GEN29))))
(assert (= (str.len a) GEN30))
(check-sat)
(get-model)
(pop)
(push)
(assert (str.in.re a ((_ re.loop 2) (str.to.re GEN32))))
(assert (= (str.len a) GEN33))
(check-sat)
(get-model)
(pop)
(push)
(assert (str.in.re a ((_ re.loop 2) (str.to.re GEN35))))
(assert (= (str.len a) GEN36))
(check-sat)
(pop)