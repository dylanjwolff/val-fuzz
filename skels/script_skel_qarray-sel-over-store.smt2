(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(set-info :category "crafted")
(declare-sort Element 0)
(declare-fun a1 () (Array (_ BitVec 8) Element))
(declare-fun a2 () (Array (_ BitVec 8) Element))
(declare-fun a3 () (Array (_ BitVec 8) Element))
(declare-fun a4 () (Array (_ BitVec 8) Element))
(declare-fun i2 () (_ BitVec 8))
(declare-fun i3 () (_ BitVec 8))
(declare-fun e1 () Element)
(declare-fun e2 () Element)
(assert (not (= e1 e2)))
(assert (= a3 (store a1 (_ bv3 8) e1)))
(assert (= a4 (store a2 (_ bv3 8) e1)))
(assert (= (select a3 (_ bv2 8)) e1))
(assert (= (select a4 (_ bv2 8)) e2))
(assert (forall ((x (_ BitVec 8))) (=> (and (bvule (_ bv0 8) x) (bvule x (_ bv2 8))) (= (select a3 x) (select a4 x)))))
(assert (= BAV1 (= e1 e2)))
(assert (= BAV2 (= a3 (store a1 (_ bv3 8) e1))))
(assert (= BAV3 (= a4 (store a2 (_ bv3 8) e1))))
(assert (= BAV4 (= (select a3 (_ bv2 8)) e1)))
(assert (= BAV5 (= (select a4 (_ bv2 8)) e2)))
(assert (= BAV6 (forall ((x (_ BitVec 8))) (=> (and (bvule (_ bv0 8) x) (bvule x (_ bv2 8))) (= (select a3 x) (select a4 x))))))
(assert (= BAV7 (forall ((x (_ BitVec 8))) (and (bvule (_ bv0 8) x) (bvule x (_ bv2 8))))))
(assert (= BAV8 (forall ((x (_ BitVec 8))) (= (select a3 x) (select a4 x)))))
(check-sat)
(get-model)
(exit)