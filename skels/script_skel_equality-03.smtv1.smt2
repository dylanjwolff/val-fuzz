(set-option :incremental false)
(set-info :source "Source unknown")
(set-info :status unknown)
(set-info :difficulty "unknown")
(set-info :category "unknown")
(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-fun x0 () (_ BitVec 32))
(declare-fun x1 () (_ BitVec 32))
(declare-fun x2 () (_ BitVec 32))
(declare-fun y0 () (_ BitVec 32))
(declare-fun y1 () (_ BitVec 32))
(declare-fun y2 () (_ BitVec 32))
(declare-fun a0 () (_ BitVec 32))
(declare-fun a1 () (_ BitVec 32))
(declare-fun a2 () (_ BitVec 32))
(declare-fun a3 () (_ BitVec 32))
(assert (xor (and (= a0 x0) (= x0 a1)) (and (= a0 y0) (= y0 a1))))
(assert (xor (and (= a1 x1) (= x1 a2)) (and (= a1 y1) (= y1 a2))))
(assert (xor (and (= a2 x2) (= x2 a3)) (and (= a2 y2) (= y2 a3))))
(assert (= BAV1 (xor (and (= a0 x0) (= x0 a1)) (and (= a0 y0) (= y0 a1)))))
(assert (= BAV2 (and (= a0 x0) (= x0 a1))))
(assert (= BAV3 (= a0 x0)))
(assert (= BAV4 (= x0 a1)))
(assert (= BAV5 (and (= a0 y0) (= y0 a1))))
(assert (= BAV6 (= a0 y0)))
(assert (= BAV7 (= y0 a1)))
(assert (= BAV8 (xor (and (= a1 x1) (= x1 a2)) (and (= a1 y1) (= y1 a2)))))
(assert (= BAV9 (and (= a1 x1) (= x1 a2))))
(assert (= BAV10 (= a1 x1)))
(assert (= BAV11 (= x1 a2)))
(assert (= BAV12 (and (= a1 y1) (= y1 a2))))
(assert (= BAV13 (= a1 y1)))
(assert (= BAV14 (= y1 a2)))
(assert (= BAV15 (xor (and (= a2 x2) (= x2 a3)) (and (= a2 y2) (= y2 a3)))))
(assert (= BAV16 (and (= a2 x2) (= x2 a3))))
(assert (= BAV17 (= a2 x2)))
(assert (= BAV18 (= x2 a3)))
(assert (= BAV19 (and (= a2 y2) (= y2 a3))))
(assert (= BAV20 (= a2 y2)))
(assert (= BAV21 (= y2 a3)))
(assert (= BAV22 (= a0 a3)))
(check-sat-assuming ((not (= a0 a3))))
(get-model)