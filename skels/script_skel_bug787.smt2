(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const BAV23 Bool)
(declare-const BAV24 Bool)
(declare-const BAV25 Bool)
(declare-const BAV26 Bool)
(declare-const BAV27 Bool)
(declare-const BAV28 Bool)
(declare-const GEN35 Int)
(declare-const GEN34 Int)
(declare-const GEN33 Int)
(declare-const GEN32 Int)
(declare-const GEN31 Int)
(declare-const GEN30 Int)
(declare-const GEN29 Int)
(declare-const GEN28 Int)
(declare-const GEN27 Int)
(declare-const GEN26 Int)
(declare-const GEN25 Int)
(declare-const GEN24 Int)
(declare-const GEN23 Int)
(declare-const GEN22 Int)
(declare-const GEN21 Int)
(declare-const GEN20 Int)
(declare-const GEN19 Int)
(declare-const GEN18 Int)
(declare-const GEN17 Int)
(declare-const GEN16 Int)
(declare-const GEN15 Int)
(declare-const GEN14 Int)
(declare-const GEN13 Int)
(declare-const GEN12 Int)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(define-fun hamming-weight ((bv (_ BitVec 4))) (_ BitVec 4)
 (bvadd
  (bvadd
   (bvadd ((_ zero_extend 3) ((_ extract 0 0) bv))
    ((_ zero_extend 3) ((_ extract 1 1) bv)))
   ((_ zero_extend 3) ((_ extract 2 2) bv)))
  ((_ zero_extend 3) ((_ extract 3 3) bv))))
(define-fun left-hamming-weight ((index (_ BitVec 4)) (bv (_ BitVec 4)))
 (_ BitVec 4)
 (hamming-weight (bvand bv (bvnot (bvsub (bvshl index (_ bv1 4)) (_ bv1 4))))))
(define-fun right-hamming-weight ((index (_ BitVec 4)) (bv (_ BitVec 4)))
 (_ BitVec 4) (hamming-weight (bvand bv (bvsub index (_ bv1 4)))))
(define-fun bit-1 ((bv (_ BitVec 4))) (_ BitVec 4) (bvand bv (bvneg bv)))
(define-fun bit-2 ((bv (_ BitVec 4))) (_ BitVec 4)
 (bit-1 (bvand bv (bvsub bv (_ bv1 4)))))
(define-fun bit-3 ((bv (_ BitVec 4))) (_ BitVec 4)
 (bit-2 (bvand bv (bvsub bv (_ bv1 4)))))
(define-fun bit-4 ((bv (_ BitVec 4))) (_ BitVec 4)
 (bit-3 (bvand bv (bvsub bv (_ bv1 4)))))
(define-fun bit-5 ((bv (_ BitVec 4))) (_ BitVec 4)
 (bit-4 (bvand bv (bvsub bv (_ bv1 4)))))
(define-fun index-bit ((index (_ BitVec 4)) (bv (_ BitVec 4))) (_ BitVec 4)
 (ite (= index (_ bv0 4)) (bit-1 bv)
  (ite (= index (_ bv1 4)) (bit-2 bv)
   (ite (= index (_ bv2 4)) (bit-3 bv) (bit-4 bv)))))
(define-fun permute
 ((index (_ BitVec 4)) (obj-0 (_ BitVec 4)) (obj-1 (_ BitVec 4))
  (obj-2 (_ BitVec 4)) (obj-3 (_ BitVec 4)))
 (_ BitVec 4)
 (let ((my-index-bit (bvshl (_ bv1 4) index)))
  (ite (= my-index-bit obj-0) (_ bv0 4)
   (ite (= my-index-bit obj-1) (_ bv1 4)
    (ite (= my-index-bit obj-2) (_ bv2 4) (_ bv3 4))))))
(define-fun left-zeros ((index (_ BitVec 4))) (_ BitVec 8)
 (ite (bvugt index (_ bv2 4)) (ite (bvugt index (_ bv4 4)) (_ bv0 8) (_ bv1 8))
  (ite (bvugt index (_ bv1 4)) (_ bv2 8) (_ bv3 8))))
(define-fun centered ((index (_ BitVec 4)) (bv (_ BitVec 4))) (_ BitVec 8)
 (bvshl ((_ zero_extend 4) bv) (left-zeros index)))
(declare-const v0 (_ BitVec 4))
(assert (= (_ bv4 4) (hamming-weight v0)))
(declare-const v1 (_ BitVec 4))
(assert (= (_ bv4 4) (hamming-weight v1)))
(declare-const vp1-0 (_ BitVec 4))
(assert (or (= (_ bv1 4) vp1-0) (= (_ bv2 4) vp1-0) (= (_ bv4 4) vp1-0) (= (_ bv8 4) vp1-0)))
(declare-const vp1-1 (_ BitVec 4))
(assert (or (= (_ bv1 4) vp1-1) (= (_ bv2 4) vp1-1) (= (_ bv4 4) vp1-1) (= (_ bv8 4) vp1-1)))
(declare-const vp1-2 (_ BitVec 4))
(assert (or (= (_ bv1 4) vp1-2) (= (_ bv2 4) vp1-2) (= (_ bv4 4) vp1-2) (= (_ bv8 4) vp1-2)))
(declare-const vp1-3 (_ BitVec 4))
(assert (or (= (_ bv1 4) vp1-3) (= (_ bv2 4) vp1-3) (= (_ bv4 4) vp1-3) (= (_ bv8 4) vp1-3)))
(assert (= (_ bv15 4) (bvor vp1-0 (bvor vp1-1 (bvor vp1-2 vp1-3)))))
(assert (and (= (_ bv0 8) (bvxor (bvand (centered (index-bit (permute (_ bv0 4) vp1-0 vp1-1 vp1-2 vp1-3) v1) v1) (centered (index-bit (_ bv0 4) v0) v0)) (_ bv8 8))) (= (_ bv0 8) (bvxor (bvand (centered (index-bit (permute (_ bv1 4) vp1-0 vp1-1 vp1-2 vp1-3) v1) v1) (centered (index-bit (_ bv1 4) v0) v0)) (_ bv8 8))) (= (_ bv0 8) (bvxor (bvand (centered (index-bit (permute (_ bv2 4) vp1-0 vp1-1 vp1-2 vp1-3) v1) v1) (centered (index-bit (_ bv2 4) v0) v0)) (_ bv8 8))) (= (_ bv0 8) (bvxor (bvand (centered (index-bit (permute (_ bv3 4) vp1-0 vp1-1 vp1-2 vp1-3) v1) v1) (centered (index-bit (_ bv3 4) v0) v0)) (_ bv8 8)))))
(assert (= BAV1 (= (_ bv4 4) (hamming-weight v0))))
(assert (= BAV2 (= (_ bv4 4) (hamming-weight v1))))
(assert (= BAV3 (or (= (_ bv1 4) vp1-0) (= (_ bv2 4) vp1-0) (= (_ bv4 4) vp1-0) (= (_ bv8 4) vp1-0))))
(assert (= BAV4 (= (_ bv1 4) vp1-0)))
(assert (= BAV5 (= (_ bv2 4) vp1-0)))
(assert (= BAV6 (= (_ bv4 4) vp1-0)))
(assert (= BAV7 (= (_ bv8 4) vp1-0)))
(assert (= BAV8 (or (= (_ bv1 4) vp1-1) (= (_ bv2 4) vp1-1) (= (_ bv4 4) vp1-1) (= (_ bv8 4) vp1-1))))
(assert (= BAV9 (= (_ bv1 4) vp1-1)))
(assert (= BAV10 (= (_ bv2 4) vp1-1)))
(assert (= BAV11 (= (_ bv4 4) vp1-1)))
(assert (= BAV12 (= (_ bv8 4) vp1-1)))
(assert (= BAV13 (or (= (_ bv1 4) vp1-2) (= (_ bv2 4) vp1-2) (= (_ bv4 4) vp1-2) (= (_ bv8 4) vp1-2))))
(assert (= BAV14 (= (_ bv1 4) vp1-2)))
(assert (= BAV15 (= (_ bv2 4) vp1-2)))
(assert (= BAV16 (= (_ bv4 4) vp1-2)))
(assert (= BAV17 (= (_ bv8 4) vp1-2)))
(assert (= BAV18 (or (= (_ bv1 4) vp1-3) (= (_ bv2 4) vp1-3) (= (_ bv4 4) vp1-3) (= (_ bv8 4) vp1-3))))
(assert (= BAV19 (= (_ bv1 4) vp1-3)))
(assert (= BAV20 (= (_ bv2 4) vp1-3)))
(assert (= BAV21 (= (_ bv4 4) vp1-3)))
(assert (= BAV22 (= (_ bv8 4) vp1-3)))
(assert (= BAV23 (= (_ bv15 4) (bvor vp1-0 (bvor vp1-1 (bvor vp1-2 vp1-3))))))
(assert (= BAV24 (and (= (_ bv0 8) (bvxor (bvand (centered (index-bit (permute (_ bv0 4) vp1-0 vp1-1 vp1-2 vp1-3) v1) v1) (centered (index-bit (_ bv0 4) v0) v0)) (_ bv8 8))) (= (_ bv0 8) (bvxor (bvand (centered (index-bit (permute (_ bv1 4) vp1-0 vp1-1 vp1-2 vp1-3) v1) v1) (centered (index-bit (_ bv1 4) v0) v0)) (_ bv8 8))) (= (_ bv0 8) (bvxor (bvand (centered (index-bit (permute (_ bv2 4) vp1-0 vp1-1 vp1-2 vp1-3) v1) v1) (centered (index-bit (_ bv2 4) v0) v0)) (_ bv8 8))) (= (_ bv0 8) (bvxor (bvand (centered (index-bit (permute (_ bv3 4) vp1-0 vp1-1 vp1-2 vp1-3) v1) v1) (centered (index-bit (_ bv3 4) v0) v0)) (_ bv8 8))))))
(assert (= BAV25 (= (_ bv0 8) (bvxor (bvand (centered (index-bit (permute (_ bv0 4) vp1-0 vp1-1 vp1-2 vp1-3) v1) v1) (centered (index-bit (_ bv0 4) v0) v0)) (_ bv8 8)))))
(assert (= BAV26 (= (_ bv0 8) (bvxor (bvand (centered (index-bit (permute (_ bv1 4) vp1-0 vp1-1 vp1-2 vp1-3) v1) v1) (centered (index-bit (_ bv1 4) v0) v0)) (_ bv8 8)))))
(assert (= BAV27 (= (_ bv0 8) (bvxor (bvand (centered (index-bit (permute (_ bv2 4) vp1-0 vp1-1 vp1-2 vp1-3) v1) v1) (centered (index-bit (_ bv2 4) v0) v0)) (_ bv8 8)))))
(assert (= BAV28 (= (_ bv0 8) (bvxor (bvand (centered (index-bit (permute (_ bv3 4) vp1-0 vp1-1 vp1-2 vp1-3) v1) v1) (centered (index-bit (_ bv3 4) v0) v0)) (_ bv8 8)))))
(check-sat)
(get-model)