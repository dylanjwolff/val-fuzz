(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-fun abs1 (Int) Int)
(assert (forall ((x Int)(y Int)) (! (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y))) :pattern ((abs1 x) y))))
(assert (< (abs1 (- GEN1)) GEN2))
(assert (= BAV1 (forall ((x Int)(y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y))))))
(assert (= BAV2 (forall ((x Int)(y Int)) (<= (abs1 x) y))))
(assert (= BAV3 (forall ((x Int)(y Int)) (and (<= (- y) x) (<= x y)))))
(assert (= BAV4 (forall ((x Int)(y Int)) (<= (- y) x))))
(assert (= BAV5 (forall ((x Int)(y Int)) (<= x y))))
(assert (= BAV6 (< (abs1 (- GEN1)) GEN2)))
(check-sat)
(get-model)