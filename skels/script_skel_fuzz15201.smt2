(set-info :source |fuzzsmt|)
(set-info :smt-lib-version 2.0)
(set-info :category "random")
(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const BAV23 Bool)
(declare-const BAV24 Bool)
(declare-const BAV25 Bool)
(declare-const BAV26 Bool)
(declare-const BAV27 Bool)
(declare-const BAV28 Bool)
(declare-const BAV29 Bool)
(declare-const BAV30 Bool)
(declare-const BAV31 Bool)
(declare-const BAV32 Bool)
(declare-const BAV33 Bool)
(declare-const BAV34 Bool)
(declare-const BAV35 Bool)
(declare-const BAV36 Bool)
(declare-const BAV37 Bool)
(declare-const BAV38 Bool)
(declare-const BAV39 Bool)
(declare-const BAV40 Bool)
(declare-const BAV41 Bool)
(declare-const BAV42 Bool)
(declare-const BAV43 Bool)
(declare-const BAV44 Bool)
(declare-const BAV45 Bool)
(declare-const BAV46 Bool)
(declare-const BAV47 Bool)
(declare-const BAV48 Bool)
(declare-const BAV49 Bool)
(declare-const BAV50 Bool)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(define-sort Element () Int)
(declare-fun f0 ( Int) Int)
(declare-fun f1 ( (Set Element)) (Set Element))
(declare-fun p0 ( Int) Bool)
(declare-fun p1 ( (Set Element) (Set Element) (Set Element)) Bool)
(declare-fun v0 () Int)
(declare-fun v1 () (Set Element))
(declare-fun v2 () (Set Element))
(assert (and (member v0 (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1))) (=> (= (= (and (member (ite (p0 (- v0)) GEN2 GEN3) (intersection v1 (setminus v2 v1))) (= (member (* (- GEN1) (+ v0 v0)) v1) (or (member (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1))) (member (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0))) (setminus v2 v1))))) (or (member (- v0) v1) (= (member (* (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (- GEN1)) (ite (p1 v2 (union (setminus v1 v2) (setminus v1 v2)) (intersection v1 (setminus v2 v1))) (singleton GEN4) (singleton GEN5))) (= (* (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (- GEN1)) (* (* (- GEN1) (+ v0 v0)) GEN1))))) (xor (member (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0))) v2) (and (and (xor (= (>= (- (+ v0 (+ v0 v0))) (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0))))) (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1)))) (p0 (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0))))) (>= (* (* (- GEN1) (+ v0 v0)) GEN1) (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0))))) (xor (ite (distinct (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (* (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (- GEN1))) (>= (+ v0 (+ v0 v0)) (ite (p0 (- v0)) GEN2 GEN3)) (not (<= v0 (* (* (- GEN1) (+ v0 v0)) GEN1)))) (and (member (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0))) (union v2 (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1)))) (= (+ v0 v0) (ite (p0 (- v0)) GEN2 GEN3))))))) (and (ite (and (member (+ v0 (+ v0 v0)) (f1 (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))))) (or (and (>= (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0)))) (member v0 v1)) (xor (> (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (* (* (- GEN1) (+ v0 v0)) GEN1)) (or (member v0 (f1 (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))))) (member (* (* (- GEN1) (+ v0 v0)) GEN1) (ite (p1 v2 (union (setminus v1 v2) (setminus v1 v2)) (intersection v1 (setminus v2 v1))) (singleton GEN4) (singleton GEN5))))))) (=> (ite (member (+ v0 v0) (setminus v1 v2)) (distinct (ite (p0 (- v0)) GEN2 GEN3) (+ v0 v0)) (member (- v0) (union (setminus v1 v2) (setminus v1 v2)))) (or (= (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2)))) (member (+ v0 v0) (setminus v2 v1))) (and (= (= (ite (p0 (- v0)) GEN2 GEN3) (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0))))) (xor (= (not (member (- v0) (setminus v2 v1))) (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (union v2 (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1))))) (xor (not (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) v2)) (xor (=> (distinct (- v0) (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0)))) (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (setminus v1 v2))) (member (+ v0 v0) (intersection v1 (setminus v2 v1))))))) (p0 v0)))) (= (not (distinct v0 (- v0))) (or (xor (= (* (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (- GEN1)) (* (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (- GEN1))) (member (ite (p0 (- v0)) GEN2 GEN3) (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1)))) (<= (* (- GEN1) (+ v0 v0)) (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0))))))) (not (not (member (* (- GEN1) (+ v0 v0)) (f1 (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2)))))))))))
(assert (= BAV1 (and (member v0 (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1))) (=> (= (= (and (member (ite (p0 (- v0)) GEN2 GEN3) (intersection v1 (setminus v2 v1))) (= (member (* (- GEN1) (+ v0 v0)) v1) (or (member (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1))) (member (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0))) (setminus v2 v1))))) (or (member (- v0) v1) (= (member (* (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (- GEN1)) (ite (p1 v2 (union (setminus v1 v2) (setminus v1 v2)) (intersection v1 (setminus v2 v1))) (singleton GEN4) (singleton GEN5))) (= (* (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (- GEN1)) (* (* (- GEN1) (+ v0 v0)) GEN1))))) (xor (member (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0))) v2) (and (and (xor (= (>= (- (+ v0 (+ v0 v0))) (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0))))) (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1)))) (p0 (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0))))) (>= (* (* (- GEN1) (+ v0 v0)) GEN1) (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0))))) (xor (ite (distinct (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (* (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (- GEN1))) (>= (+ v0 (+ v0 v0)) (ite (p0 (- v0)) GEN2 GEN3)) (not (<= v0 (* (* (- GEN1) (+ v0 v0)) GEN1)))) (and (member (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0))) (union v2 (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1)))) (= (+ v0 v0) (ite (p0 (- v0)) GEN2 GEN3))))))) (and (ite (and (member (+ v0 (+ v0 v0)) (f1 (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))))) (or (and (>= (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0)))) (member v0 v1)) (xor (> (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (* (* (- GEN1) (+ v0 v0)) GEN1)) (or (member v0 (f1 (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))))) (member (* (* (- GEN1) (+ v0 v0)) GEN1) (ite (p1 v2 (union (setminus v1 v2) (setminus v1 v2)) (intersection v1 (setminus v2 v1))) (singleton GEN4) (singleton GEN5))))))) (=> (ite (member (+ v0 v0) (setminus v1 v2)) (distinct (ite (p0 (- v0)) GEN2 GEN3) (+ v0 v0)) (member (- v0) (union (setminus v1 v2) (setminus v1 v2)))) (or (= (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2)))) (member (+ v0 v0) (setminus v2 v1))) (and (= (= (ite (p0 (- v0)) GEN2 GEN3) (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0))))) (xor (= (not (member (- v0) (setminus v2 v1))) (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (union v2 (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1))))) (xor (not (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) v2)) (xor (=> (distinct (- v0) (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0)))) (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (setminus v1 v2))) (member (+ v0 v0) (intersection v1 (setminus v2 v1))))))) (p0 v0)))) (= (not (distinct v0 (- v0))) (or (xor (= (* (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (- GEN1)) (* (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (- GEN1))) (member (ite (p0 (- v0)) GEN2 GEN3) (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1)))) (<= (* (- GEN1) (+ v0 v0)) (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0))))))) (not (not (member (* (- GEN1) (+ v0 v0)) (f1 (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))))))))))))
(assert (= BAV2 (=> (= (= (and (member (ite (p0 (- v0)) GEN2 GEN3) (intersection v1 (setminus v2 v1))) (= (member (* (- GEN1) (+ v0 v0)) v1) (or (member (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1))) (member (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0))) (setminus v2 v1))))) (or (member (- v0) v1) (= (member (* (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (- GEN1)) (ite (p1 v2 (union (setminus v1 v2) (setminus v1 v2)) (intersection v1 (setminus v2 v1))) (singleton GEN4) (singleton GEN5))) (= (* (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (- GEN1)) (* (* (- GEN1) (+ v0 v0)) GEN1))))) (xor (member (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0))) v2) (and (and (xor (= (>= (- (+ v0 (+ v0 v0))) (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0))))) (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1)))) (p0 (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0))))) (>= (* (* (- GEN1) (+ v0 v0)) GEN1) (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0))))) (xor (ite (distinct (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (* (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (- GEN1))) (>= (+ v0 (+ v0 v0)) (ite (p0 (- v0)) GEN2 GEN3)) (not (<= v0 (* (* (- GEN1) (+ v0 v0)) GEN1)))) (and (member (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0))) (union v2 (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1)))) (= (+ v0 v0) (ite (p0 (- v0)) GEN2 GEN3))))))) (and (ite (and (member (+ v0 (+ v0 v0)) (f1 (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))))) (or (and (>= (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0)))) (member v0 v1)) (xor (> (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (* (* (- GEN1) (+ v0 v0)) GEN1)) (or (member v0 (f1 (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))))) (member (* (* (- GEN1) (+ v0 v0)) GEN1) (ite (p1 v2 (union (setminus v1 v2) (setminus v1 v2)) (intersection v1 (setminus v2 v1))) (singleton GEN4) (singleton GEN5))))))) (=> (ite (member (+ v0 v0) (setminus v1 v2)) (distinct (ite (p0 (- v0)) GEN2 GEN3) (+ v0 v0)) (member (- v0) (union (setminus v1 v2) (setminus v1 v2)))) (or (= (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2)))) (member (+ v0 v0) (setminus v2 v1))) (and (= (= (ite (p0 (- v0)) GEN2 GEN3) (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0))))) (xor (= (not (member (- v0) (setminus v2 v1))) (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (union v2 (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1))))) (xor (not (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) v2)) (xor (=> (distinct (- v0) (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0)))) (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (setminus v1 v2))) (member (+ v0 v0) (intersection v1 (setminus v2 v1))))))) (p0 v0)))) (= (not (distinct v0 (- v0))) (or (xor (= (* (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (- GEN1)) (* (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (- GEN1))) (member (ite (p0 (- v0)) GEN2 GEN3) (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1)))) (<= (* (- GEN1) (+ v0 v0)) (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0))))))) (not (not (member (* (- GEN1) (+ v0 v0)) (f1 (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2)))))))))))
(assert (= BAV3 (= (= (and (member (ite (p0 (- v0)) GEN2 GEN3) (intersection v1 (setminus v2 v1))) (= (member (* (- GEN1) (+ v0 v0)) v1) (or (member (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1))) (member (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0))) (setminus v2 v1))))) (or (member (- v0) v1) (= (member (* (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (- GEN1)) (ite (p1 v2 (union (setminus v1 v2) (setminus v1 v2)) (intersection v1 (setminus v2 v1))) (singleton GEN4) (singleton GEN5))) (= (* (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (- GEN1)) (* (* (- GEN1) (+ v0 v0)) GEN1))))) (xor (member (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0))) v2) (and (and (xor (= (>= (- (+ v0 (+ v0 v0))) (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0))))) (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1)))) (p0 (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0))))) (>= (* (* (- GEN1) (+ v0 v0)) GEN1) (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0))))) (xor (ite (distinct (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (* (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (- GEN1))) (>= (+ v0 (+ v0 v0)) (ite (p0 (- v0)) GEN2 GEN3)) (not (<= v0 (* (* (- GEN1) (+ v0 v0)) GEN1)))) (and (member (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0))) (union v2 (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1)))) (= (+ v0 v0) (ite (p0 (- v0)) GEN2 GEN3)))))))))
(assert (= BAV4 (= (and (member (ite (p0 (- v0)) GEN2 GEN3) (intersection v1 (setminus v2 v1))) (= (member (* (- GEN1) (+ v0 v0)) v1) (or (member (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1))) (member (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0))) (setminus v2 v1))))) (or (member (- v0) v1) (= (member (* (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (- GEN1)) (ite (p1 v2 (union (setminus v1 v2) (setminus v1 v2)) (intersection v1 (setminus v2 v1))) (singleton GEN4) (singleton GEN5))) (= (* (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (- GEN1)) (* (* (- GEN1) (+ v0 v0)) GEN1)))))))
(assert (= BAV5 (and (member (ite (p0 (- v0)) GEN2 GEN3) (intersection v1 (setminus v2 v1))) (= (member (* (- GEN1) (+ v0 v0)) v1) (or (member (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1))) (member (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0))) (setminus v2 v1)))))))
(assert (= BAV6 (= (member (* (- GEN1) (+ v0 v0)) v1) (or (member (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1))) (member (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0))) (setminus v2 v1))))))
(assert (= BAV7 (or (member (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1))) (member (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0))) (setminus v2 v1)))))
(assert (= BAV8 (or (member (- v0) v1) (= (member (* (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (- GEN1)) (ite (p1 v2 (union (setminus v1 v2) (setminus v1 v2)) (intersection v1 (setminus v2 v1))) (singleton GEN4) (singleton GEN5))) (= (* (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (- GEN1)) (* (* (- GEN1) (+ v0 v0)) GEN1))))))
(assert (= BAV9 (= (member (* (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (- GEN1)) (ite (p1 v2 (union (setminus v1 v2) (setminus v1 v2)) (intersection v1 (setminus v2 v1))) (singleton GEN4) (singleton GEN5))) (= (* (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (- GEN1)) (* (* (- GEN1) (+ v0 v0)) GEN1)))))
(assert (= BAV10 (= (* (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (- GEN1)) (* (* (- GEN1) (+ v0 v0)) GEN1))))
(assert (= BAV11 (xor (member (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0))) v2) (and (and (xor (= (>= (- (+ v0 (+ v0 v0))) (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0))))) (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1)))) (p0 (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0))))) (>= (* (* (- GEN1) (+ v0 v0)) GEN1) (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0))))) (xor (ite (distinct (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (* (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (- GEN1))) (>= (+ v0 (+ v0 v0)) (ite (p0 (- v0)) GEN2 GEN3)) (not (<= v0 (* (* (- GEN1) (+ v0 v0)) GEN1)))) (and (member (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0))) (union v2 (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1)))) (= (+ v0 v0) (ite (p0 (- v0)) GEN2 GEN3))))))))
(assert (= BAV12 (and (and (xor (= (>= (- (+ v0 (+ v0 v0))) (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0))))) (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1)))) (p0 (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0))))) (>= (* (* (- GEN1) (+ v0 v0)) GEN1) (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0))))) (xor (ite (distinct (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (* (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (- GEN1))) (>= (+ v0 (+ v0 v0)) (ite (p0 (- v0)) GEN2 GEN3)) (not (<= v0 (* (* (- GEN1) (+ v0 v0)) GEN1)))) (and (member (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0))) (union v2 (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1)))) (= (+ v0 v0) (ite (p0 (- v0)) GEN2 GEN3)))))))
(assert (= BAV13 (and (xor (= (>= (- (+ v0 (+ v0 v0))) (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0))))) (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1)))) (p0 (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0))))) (>= (* (* (- GEN1) (+ v0 v0)) GEN1) (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0)))))))
(assert (= BAV14 (xor (= (>= (- (+ v0 (+ v0 v0))) (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0))))) (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1)))) (p0 (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0)))))))
(assert (= BAV15 (= (>= (- (+ v0 (+ v0 v0))) (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0))))) (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1))))))
(assert (= BAV16 (>= (- (+ v0 (+ v0 v0))) (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))))))
(assert (= BAV17 (>= (* (* (- GEN1) (+ v0 v0)) GEN1) (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0))))))
(assert (= BAV18 (xor (ite (distinct (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (* (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (- GEN1))) (>= (+ v0 (+ v0 v0)) (ite (p0 (- v0)) GEN2 GEN3)) (not (<= v0 (* (* (- GEN1) (+ v0 v0)) GEN1)))) (and (member (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0))) (union v2 (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1)))) (= (+ v0 v0) (ite (p0 (- v0)) GEN2 GEN3))))))
(assert (= BAV19 (distinct (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (* (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (- GEN1)))))
(assert (= BAV20 (>= (+ v0 (+ v0 v0)) (ite (p0 (- v0)) GEN2 GEN3))))
(assert (= BAV21 (<= v0 (* (* (- GEN1) (+ v0 v0)) GEN1))))
(assert (= BAV22 (and (member (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0))) (union v2 (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1)))) (= (+ v0 v0) (ite (p0 (- v0)) GEN2 GEN3)))))
(assert (= BAV23 (= (+ v0 v0) (ite (p0 (- v0)) GEN2 GEN3))))
(assert (= BAV24 (and (ite (and (member (+ v0 (+ v0 v0)) (f1 (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))))) (or (and (>= (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0)))) (member v0 v1)) (xor (> (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (* (* (- GEN1) (+ v0 v0)) GEN1)) (or (member v0 (f1 (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))))) (member (* (* (- GEN1) (+ v0 v0)) GEN1) (ite (p1 v2 (union (setminus v1 v2) (setminus v1 v2)) (intersection v1 (setminus v2 v1))) (singleton GEN4) (singleton GEN5))))))) (=> (ite (member (+ v0 v0) (setminus v1 v2)) (distinct (ite (p0 (- v0)) GEN2 GEN3) (+ v0 v0)) (member (- v0) (union (setminus v1 v2) (setminus v1 v2)))) (or (= (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2)))) (member (+ v0 v0) (setminus v2 v1))) (and (= (= (ite (p0 (- v0)) GEN2 GEN3) (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0))))) (xor (= (not (member (- v0) (setminus v2 v1))) (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (union v2 (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1))))) (xor (not (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) v2)) (xor (=> (distinct (- v0) (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0)))) (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (setminus v1 v2))) (member (+ v0 v0) (intersection v1 (setminus v2 v1))))))) (p0 v0)))) (= (not (distinct v0 (- v0))) (or (xor (= (* (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (- GEN1)) (* (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (- GEN1))) (member (ite (p0 (- v0)) GEN2 GEN3) (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1)))) (<= (* (- GEN1) (+ v0 v0)) (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0))))))) (not (not (member (* (- GEN1) (+ v0 v0)) (f1 (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))))))))))
(assert (= BAV25 (and (member (+ v0 (+ v0 v0)) (f1 (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))))) (or (and (>= (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0)))) (member v0 v1)) (xor (> (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (* (* (- GEN1) (+ v0 v0)) GEN1)) (or (member v0 (f1 (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))))) (member (* (* (- GEN1) (+ v0 v0)) GEN1) (ite (p1 v2 (union (setminus v1 v2) (setminus v1 v2)) (intersection v1 (setminus v2 v1))) (singleton GEN4) (singleton GEN5)))))))))
(assert (= BAV26 (or (and (>= (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0)))) (member v0 v1)) (xor (> (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (* (* (- GEN1) (+ v0 v0)) GEN1)) (or (member v0 (f1 (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))))) (member (* (* (- GEN1) (+ v0 v0)) GEN1) (ite (p1 v2 (union (setminus v1 v2) (setminus v1 v2)) (intersection v1 (setminus v2 v1))) (singleton GEN4) (singleton GEN5))))))))
(assert (= BAV27 (and (>= (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0)))) (member v0 v1))))
(assert (= BAV28 (>= (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))))))
(assert (= BAV29 (xor (> (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (* (* (- GEN1) (+ v0 v0)) GEN1)) (or (member v0 (f1 (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))))) (member (* (* (- GEN1) (+ v0 v0)) GEN1) (ite (p1 v2 (union (setminus v1 v2) (setminus v1 v2)) (intersection v1 (setminus v2 v1))) (singleton GEN4) (singleton GEN5)))))))
(assert (= BAV30 (> (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (* (* (- GEN1) (+ v0 v0)) GEN1))))
(assert (= BAV31 (or (member v0 (f1 (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))))) (member (* (* (- GEN1) (+ v0 v0)) GEN1) (ite (p1 v2 (union (setminus v1 v2) (setminus v1 v2)) (intersection v1 (setminus v2 v1))) (singleton GEN4) (singleton GEN5))))))
(assert (= BAV32 (=> (ite (member (+ v0 v0) (setminus v1 v2)) (distinct (ite (p0 (- v0)) GEN2 GEN3) (+ v0 v0)) (member (- v0) (union (setminus v1 v2) (setminus v1 v2)))) (or (= (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2)))) (member (+ v0 v0) (setminus v2 v1))) (and (= (= (ite (p0 (- v0)) GEN2 GEN3) (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0))))) (xor (= (not (member (- v0) (setminus v2 v1))) (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (union v2 (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1))))) (xor (not (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) v2)) (xor (=> (distinct (- v0) (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0)))) (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (setminus v1 v2))) (member (+ v0 v0) (intersection v1 (setminus v2 v1))))))) (p0 v0))))))
(assert (= BAV33 (distinct (ite (p0 (- v0)) GEN2 GEN3) (+ v0 v0))))
(assert (= BAV34 (or (= (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2)))) (member (+ v0 v0) (setminus v2 v1))) (and (= (= (ite (p0 (- v0)) GEN2 GEN3) (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0))))) (xor (= (not (member (- v0) (setminus v2 v1))) (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (union v2 (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1))))) (xor (not (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) v2)) (xor (=> (distinct (- v0) (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0)))) (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (setminus v1 v2))) (member (+ v0 v0) (intersection v1 (setminus v2 v1))))))) (p0 v0)))))
(assert (= BAV35 (= (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2)))) (member (+ v0 v0) (setminus v2 v1)))))
(assert (= BAV36 (and (= (= (ite (p0 (- v0)) GEN2 GEN3) (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0))))) (xor (= (not (member (- v0) (setminus v2 v1))) (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (union v2 (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1))))) (xor (not (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) v2)) (xor (=> (distinct (- v0) (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0)))) (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (setminus v1 v2))) (member (+ v0 v0) (intersection v1 (setminus v2 v1))))))) (p0 v0))))
(assert (= BAV37 (= (= (ite (p0 (- v0)) GEN2 GEN3) (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0))))) (xor (= (not (member (- v0) (setminus v2 v1))) (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (union v2 (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1))))) (xor (not (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) v2)) (xor (=> (distinct (- v0) (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0)))) (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (setminus v1 v2))) (member (+ v0 v0) (intersection v1 (setminus v2 v1)))))))))
(assert (= BAV38 (= (ite (p0 (- v0)) GEN2 GEN3) (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))))))
(assert (= BAV39 (xor (= (not (member (- v0) (setminus v2 v1))) (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (union v2 (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1))))) (xor (not (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) v2)) (xor (=> (distinct (- v0) (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0)))) (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (setminus v1 v2))) (member (+ v0 v0) (intersection v1 (setminus v2 v1))))))))
(assert (= BAV40 (= (not (member (- v0) (setminus v2 v1))) (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (union v2 (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1)))))))
(assert (= BAV41 (xor (not (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) v2)) (xor (=> (distinct (- v0) (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0)))) (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (setminus v1 v2))) (member (+ v0 v0) (intersection v1 (setminus v2 v1)))))))
(assert (= BAV42 (xor (=> (distinct (- v0) (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0)))) (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (setminus v1 v2))) (member (+ v0 v0) (intersection v1 (setminus v2 v1))))))
(assert (= BAV43 (=> (distinct (- v0) (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0)))) (member (f0 (- (+ v0 v0) (* (- GEN1) (+ v0 v0)))) (setminus v1 v2)))))
(assert (= BAV44 (distinct (- v0) (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))))))
(assert (= BAV45 (= (not (distinct v0 (- v0))) (or (xor (= (* (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (- GEN1)) (* (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (- GEN1))) (member (ite (p0 (- v0)) GEN2 GEN3) (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1)))) (<= (* (- GEN1) (+ v0 v0)) (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0))))))))
(assert (= BAV46 (distinct v0 (- v0))))
(assert (= BAV47 (or (xor (= (* (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (- GEN1)) (* (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (- GEN1))) (member (ite (p0 (- v0)) GEN2 GEN3) (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1)))) (<= (* (- GEN1) (+ v0 v0)) (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0)))))))
(assert (= BAV48 (xor (= (* (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (- GEN1)) (* (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (- GEN1))) (member (ite (p0 (- v0)) GEN2 GEN3) (setminus (intersection (setminus v1 v2) (union (setminus v1 v2) (setminus v1 v2))) (setminus v2 v1))))))
(assert (= BAV49 (= (* (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (- GEN1)) (* (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (- GEN1)))))
(assert (= BAV50 (<= (* (- GEN1) (+ v0 v0)) (- (+ (- (+ v0 v0) (* (- GEN1) (+ v0 v0))) (+ v0 (+ v0 v0))) (+ v0 (+ v0 v0))))))
(check-sat)
(get-model)