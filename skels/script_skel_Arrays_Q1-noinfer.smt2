(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const BAV23 Bool)
(declare-const BAV24 Bool)
(declare-const BAV25 Bool)
(declare-const BAV26 Bool)
(declare-const BAV27 Bool)
(declare-const BAV28 Bool)
(declare-const BAV29 Bool)
(declare-const BAV30 Bool)
(declare-const BAV31 Bool)
(declare-const BAV32 Bool)
(declare-const BAV33 Bool)
(declare-const BAV34 Bool)
(declare-const BAV35 Bool)
(declare-const BAV36 Bool)
(declare-const BAV37 Bool)
(declare-const BAV38 Bool)
(declare-const BAV39 Bool)
(declare-const BAV40 Bool)
(declare-const BAV41 Bool)
(declare-const BAV42 Bool)
(declare-const BAV43 Bool)
(declare-const BAV44 Bool)
(declare-const BAV45 Bool)
(declare-const BAV46 Bool)
(declare-const BAV47 Bool)
(declare-const BAV48 Bool)
(declare-const BAV49 Bool)
(declare-const BAV50 Bool)
(declare-const BAV51 Bool)
(declare-const BAV52 Bool)
(declare-const BAV53 Bool)
(declare-const BAV54 Bool)
(declare-const BAV55 Bool)
(declare-const BAV56 Bool)
(declare-const BAV57 Bool)
(declare-const BAV58 Bool)
(declare-const BAV59 Bool)
(declare-const BAV60 Bool)
(declare-const BAV61 Bool)
(declare-const BAV62 Bool)
(declare-const BAV63 Bool)
(declare-const BAV64 Bool)
(declare-const BAV65 Bool)
(declare-const BAV66 Bool)
(declare-const BAV67 Bool)
(declare-const BAV68 Bool)
(declare-const BAV69 Bool)
(declare-const BAV70 Bool)
(declare-const BAV71 Bool)
(declare-const BAV72 Bool)
(declare-const BAV73 Bool)
(declare-const BAV74 Bool)
(declare-const BAV75 Bool)
(declare-const BAV76 Bool)
(declare-const BAV77 Bool)
(declare-const BAV78 Bool)
(declare-const BAV79 Bool)
(declare-const BAV80 Bool)
(declare-const BAV81 Bool)
(declare-const BAV82 Bool)
(declare-const BAV83 Bool)
(declare-const BAV84 Bool)
(declare-const BAV85 Bool)
(declare-const BAV86 Bool)
(declare-const BAV87 Bool)
(set-info :source | 
  Boogie/Spec# benchmarks.
  This benchmark was translated by Michal Moskal.
|)
(set-info :smt-lib-version 2.0)
(set-info :category "industrial")
(declare-fun InRange (Int Int) Bool)
(declare-fun o () Int)
(declare-fun q () Int)
(declare-fun int_18446744073709551615 () Int)
(declare-fun Smt.false () Int)
(declare-fun anyEqual (Int Int) Int)
(declare-fun y () Int)
(declare-fun select1 (Int Int) Int)
(declare-fun select2 (Int Int Int) Int)
(declare-fun CONCVARSYM (Int) Int)
(declare-fun divides (Int Int) Int)
(declare-fun intAtMost (Int Int) Int)
(declare-fun subtypes (Int Int) Bool)
(declare-fun store1 (Int Int Int) Int)
(declare-fun store2 (Int Int Int Int) Int)
(declare-fun B_0 () Int)
(declare-fun B_1 () Int)
(declare-fun intAtLeast (Int Int) Int)
(declare-fun int_2147483647 () Int)
(declare-fun boolOr (Int Int) Int)
(declare-fun ReallyLastGeneratedExit_correct () Int)
(declare-fun int_m9223372036854775808 () Int)
(declare-fun Smt.true () Int)
(declare-fun int_4294967295 () Int)
(declare-fun start_correct () Int)
(declare-fun B () Int)
(declare-fun F () Int)
(declare-fun G () Int)
(declare-fun boolAnd (Int Int) Int)
(declare-fun boolNot (Int) Int)
(declare-fun k_0 () Int)
(declare-fun intLess (Int Int) Int)
(declare-fun intGreater (Int Int) Int)
(declare-fun anyNeq (Int Int) Int)
(declare-fun is (Int Int) Int)
(declare-fun int_m2147483648 () Int)
(declare-fun modulo (Int Int) Int)
(declare-fun boolImplies (Int Int) Int)
(declare-fun boolIff (Int Int) Int)
(declare-fun int_9223372036854775807 () Int)
(assert true)
(assert true)
(assert (forall ((?A Int)(?i Int)(?v Int)) (= (select1 (store1 ?A ?i ?v) ?i) ?v)))
(assert (forall ((?A Int)(?i Int)(?j Int)(?v Int)) (=> (not (= ?i ?j)) (= (select1 (store1 ?A ?i ?v) ?j) (select1 ?A ?j)))))
(assert (forall ((?A Int)(?o Int)(?f Int)(?v Int)) (= (select2 (store2 ?A ?o ?f ?v) ?o ?f) ?v)))
(assert (forall ((?A Int)(?o Int)(?f Int)(?p Int)(?g Int)(?v Int)) (=> (not (= ?o ?p)) (= (select2 (store2 ?A ?o ?f ?v) ?p ?g) (select2 ?A ?p ?g)))))
(assert (forall ((?A Int)(?o Int)(?f Int)(?p Int)(?g Int)(?v Int)) (=> (not (= ?f ?g)) (= (select2 (store2 ?A ?o ?f ?v) ?p ?g) (select2 ?A ?p ?g)))))
(assert (forall ((?x Int)(?y Int)) (= (= (boolIff ?x ?y) Smt.true) (= (= ?x Smt.true) (= ?y Smt.true)))))
(assert (forall ((?x Int)(?y Int)) (= (= (boolImplies ?x ?y) Smt.true) (=> (= ?x Smt.true) (= ?y Smt.true)))))
(assert (forall ((?x Int)(?y Int)) (= (= (boolAnd ?x ?y) Smt.true) (and (= ?x Smt.true) (= ?y Smt.true)))))
(assert (forall ((?x Int)(?y Int)) (= (= (boolOr ?x ?y) Smt.true) (or (= ?x Smt.true) (= ?y Smt.true)))))
(assert (forall ((?x Int)) (! (= (= (boolNot ?x) Smt.true) (not (= ?x Smt.true))) :pattern ((boolNot ?x)))))
(assert (forall ((?x Int)(?y Int)) (= (= (anyEqual ?x ?y) Smt.true) (= ?x ?y))))
(assert (forall ((?x Int)(?y Int)) (! (= (= (anyNeq ?x ?y) Smt.true) (not (= ?x ?y))) :pattern ((anyNeq ?x ?y)))))
(assert (forall ((?x Int)(?y Int)) (= (= (intLess ?x ?y) Smt.true) (< ?x ?y))))
(assert (forall ((?x Int)(?y Int)) (= (= (intAtMost ?x ?y) Smt.true) (<= ?x ?y))))
(assert (forall ((?x Int)(?y Int)) (= (= (intAtLeast ?x ?y) Smt.true) (>= ?x ?y))))
(assert (forall ((?x Int)(?y Int)) (= (= (intGreater ?x ?y) Smt.true) (> ?x ?y))))
(assert (distinct Smt.false Smt.true))
(assert (forall ((?t Int)) (! (subtypes ?t ?t) :pattern ((subtypes ?t ?t)))))
(assert (forall ((?t Int)(?u Int)(?v Int)) (! (=> (and (subtypes ?t ?u) (subtypes ?u ?v)) (subtypes ?t ?v)) :pattern ((subtypes ?t ?u) (subtypes ?u ?v)))))
(assert (forall ((?t Int)(?u Int)) (! (=> (and (subtypes ?t ?u) (subtypes ?u ?t)) (= ?t ?u)) :pattern ((subtypes ?t ?u) (subtypes ?u ?t)))))
(assert (not (=> (=> (=> true (=> (= k_0 (select2 B q G)) (=> (= B_0 (store2 B o F (+ y (select2 B o F)))) (=> (= B_1 (store2 B_0 q G k_0)) (=> (=> (=> true (and (forall ((?p Int)(?f Int)) (or (= (select2 B_1 ?p ?f) (select2 B ?p ?f)) (and (= ?p o) (= ?f F)))) (=> (forall ((?p Int)(?f Int)) (or (= (select2 B_1 ?p ?f) (select2 B ?p ?f)) (and (= ?p o) (= ?f F)))) (=> true true)))) (= ReallyLastGeneratedExit_correct Smt.true)) (= ReallyLastGeneratedExit_correct Smt.true)))))) (= start_correct Smt.true)) (= start_correct Smt.true))))
(assert (= BAV1 (forall ((?A Int)(?i Int)(?v Int)) (= (select1 (store1 ?A ?i ?v) ?i) ?v))))
(assert (= BAV2 (forall ((?A Int)(?i Int)(?j Int)(?v Int)) (=> (not (= ?i ?j)) (= (select1 (store1 ?A ?i ?v) ?j) (select1 ?A ?j))))))
(assert (= BAV3 (forall ((?A Int)(?i Int)(?j Int)(?v Int)) (= ?i ?j))))
(assert (= BAV4 (forall ((?A Int)(?i Int)(?j Int)(?v Int)) (= (select1 (store1 ?A ?i ?v) ?j) (select1 ?A ?j)))))
(assert (= BAV5 (forall ((?A Int)(?o Int)(?f Int)(?v Int)) (= (select2 (store2 ?A ?o ?f ?v) ?o ?f) ?v))))
(assert (= BAV6 (forall ((?A Int)(?o Int)(?f Int)(?p Int)(?g Int)(?v Int)) (=> (not (= ?o ?p)) (= (select2 (store2 ?A ?o ?f ?v) ?p ?g) (select2 ?A ?p ?g))))))
(assert (= BAV7 (forall ((?A Int)(?o Int)(?f Int)(?p Int)(?g Int)(?v Int)) (= ?o ?p))))
(assert (= BAV8 (forall ((?A Int)(?o Int)(?f Int)(?p Int)(?g Int)(?v Int)) (= (select2 (store2 ?A ?o ?f ?v) ?p ?g) (select2 ?A ?p ?g)))))
(assert (= BAV9 (forall ((?A Int)(?o Int)(?f Int)(?p Int)(?g Int)(?v Int)) (=> (not (= ?f ?g)) (= (select2 (store2 ?A ?o ?f ?v) ?p ?g) (select2 ?A ?p ?g))))))
(assert (= BAV10 (forall ((?A Int)(?o Int)(?f Int)(?p Int)(?g Int)(?v Int)) (= ?f ?g))))
(assert (= BAV11 (forall ((?A Int)(?o Int)(?f Int)(?p Int)(?g Int)(?v Int)) (= (select2 (store2 ?A ?o ?f ?v) ?p ?g) (select2 ?A ?p ?g)))))
(assert (= BAV12 (forall ((?x Int)(?y Int)) (= (= (boolIff ?x ?y) Smt.true) (= (= ?x Smt.true) (= ?y Smt.true))))))
(assert (= BAV13 (forall ((?x Int)(?y Int)) (= (boolIff ?x ?y) Smt.true))))
(assert (= BAV14 (forall ((?x Int)(?y Int)) (= (= ?x Smt.true) (= ?y Smt.true)))))
(assert (= BAV15 (forall ((?x Int)(?y Int)) (= ?x Smt.true))))
(assert (= BAV16 (forall ((?x Int)(?y Int)) (= ?y Smt.true))))
(assert (= BAV17 (forall ((?x Int)(?y Int)) (= (= (boolImplies ?x ?y) Smt.true) (=> (= ?x Smt.true) (= ?y Smt.true))))))
(assert (= BAV18 (forall ((?x Int)(?y Int)) (= (boolImplies ?x ?y) Smt.true))))
(assert (= BAV19 (forall ((?x Int)(?y Int)) (=> (= ?x Smt.true) (= ?y Smt.true)))))
(assert (= BAV20 (forall ((?x Int)(?y Int)) (= ?x Smt.true))))
(assert (= BAV21 (forall ((?x Int)(?y Int)) (= ?y Smt.true))))
(assert (= BAV22 (forall ((?x Int)(?y Int)) (= (= (boolAnd ?x ?y) Smt.true) (and (= ?x Smt.true) (= ?y Smt.true))))))
(assert (= BAV23 (forall ((?x Int)(?y Int)) (= (boolAnd ?x ?y) Smt.true))))
(assert (= BAV24 (forall ((?x Int)(?y Int)) (and (= ?x Smt.true) (= ?y Smt.true)))))
(assert (= BAV25 (forall ((?x Int)(?y Int)) (= ?x Smt.true))))
(assert (= BAV26 (forall ((?x Int)(?y Int)) (= ?y Smt.true))))
(assert (= BAV27 (forall ((?x Int)(?y Int)) (= (= (boolOr ?x ?y) Smt.true) (or (= ?x Smt.true) (= ?y Smt.true))))))
(assert (= BAV28 (forall ((?x Int)(?y Int)) (= (boolOr ?x ?y) Smt.true))))
(assert (= BAV29 (forall ((?x Int)(?y Int)) (or (= ?x Smt.true) (= ?y Smt.true)))))
(assert (= BAV30 (forall ((?x Int)(?y Int)) (= ?x Smt.true))))
(assert (= BAV31 (forall ((?x Int)(?y Int)) (= ?y Smt.true))))
(assert (= BAV32 (forall ((?x Int)) (= (= (boolNot ?x) Smt.true) (not (= ?x Smt.true))))))
(assert (= BAV33 (forall ((?x Int)) (= (boolNot ?x) Smt.true))))
(assert (= BAV34 (forall ((?x Int)) (= ?x Smt.true))))
(assert (= BAV35 (forall ((?x Int)(?y Int)) (= (= (anyEqual ?x ?y) Smt.true) (= ?x ?y)))))
(assert (= BAV36 (forall ((?x Int)(?y Int)) (= (anyEqual ?x ?y) Smt.true))))
(assert (= BAV37 (forall ((?x Int)(?y Int)) (= ?x ?y))))
(assert (= BAV38 (forall ((?x Int)(?y Int)) (= (= (anyNeq ?x ?y) Smt.true) (not (= ?x ?y))))))
(assert (= BAV39 (forall ((?x Int)(?y Int)) (= (anyNeq ?x ?y) Smt.true))))
(assert (= BAV40 (forall ((?x Int)(?y Int)) (= ?x ?y))))
(assert (= BAV41 (forall ((?x Int)(?y Int)) (= (= (intLess ?x ?y) Smt.true) (< ?x ?y)))))
(assert (= BAV42 (forall ((?x Int)(?y Int)) (= (intLess ?x ?y) Smt.true))))
(assert (= BAV43 (forall ((?x Int)(?y Int)) (< ?x ?y))))
(assert (= BAV44 (forall ((?x Int)(?y Int)) (= (= (intAtMost ?x ?y) Smt.true) (<= ?x ?y)))))
(assert (= BAV45 (forall ((?x Int)(?y Int)) (= (intAtMost ?x ?y) Smt.true))))
(assert (= BAV46 (forall ((?x Int)(?y Int)) (<= ?x ?y))))
(assert (= BAV47 (forall ((?x Int)(?y Int)) (= (= (intAtLeast ?x ?y) Smt.true) (>= ?x ?y)))))
(assert (= BAV48 (forall ((?x Int)(?y Int)) (= (intAtLeast ?x ?y) Smt.true))))
(assert (= BAV49 (forall ((?x Int)(?y Int)) (>= ?x ?y))))
(assert (= BAV50 (forall ((?x Int)(?y Int)) (= (= (intGreater ?x ?y) Smt.true) (> ?x ?y)))))
(assert (= BAV51 (forall ((?x Int)(?y Int)) (= (intGreater ?x ?y) Smt.true))))
(assert (= BAV52 (forall ((?x Int)(?y Int)) (> ?x ?y))))
(assert (= BAV53 (distinct Smt.false Smt.true)))
(assert (= BAV54 (forall ((?t Int)(?u Int)(?v Int)) (=> (and (subtypes ?t ?u) (subtypes ?u ?v)) (subtypes ?t ?v)))))
(assert (= BAV55 (forall ((?t Int)(?u Int)(?v Int)) (and (subtypes ?t ?u) (subtypes ?u ?v)))))
(assert (= BAV56 (forall ((?t Int)(?u Int)) (=> (and (subtypes ?t ?u) (subtypes ?u ?t)) (= ?t ?u)))))
(assert (= BAV57 (forall ((?t Int)(?u Int)) (and (subtypes ?t ?u) (subtypes ?u ?t)))))
(assert (= BAV58 (forall ((?t Int)(?u Int)) (= ?t ?u))))
(assert (= BAV59 (=> (=> (=> true (=> (= k_0 (select2 B q G)) (=> (= B_0 (store2 B o F (+ y (select2 B o F)))) (=> (= B_1 (store2 B_0 q G k_0)) (=> (=> (=> true (and (forall ((?p Int)(?f Int)) (or (= (select2 B_1 ?p ?f) (select2 B ?p ?f)) (and (= ?p o) (= ?f F)))) (=> (forall ((?p Int)(?f Int)) (or (= (select2 B_1 ?p ?f) (select2 B ?p ?f)) (and (= ?p o) (= ?f F)))) (=> true true)))) (= ReallyLastGeneratedExit_correct Smt.true)) (= ReallyLastGeneratedExit_correct Smt.true)))))) (= start_correct Smt.true)) (= start_correct Smt.true))))
(assert (= BAV60 (=> (=> true (=> (= k_0 (select2 B q G)) (=> (= B_0 (store2 B o F (+ y (select2 B o F)))) (=> (= B_1 (store2 B_0 q G k_0)) (=> (=> (=> true (and (forall ((?p Int)(?f Int)) (or (= (select2 B_1 ?p ?f) (select2 B ?p ?f)) (and (= ?p o) (= ?f F)))) (=> (forall ((?p Int)(?f Int)) (or (= (select2 B_1 ?p ?f) (select2 B ?p ?f)) (and (= ?p o) (= ?f F)))) (=> true true)))) (= ReallyLastGeneratedExit_correct Smt.true)) (= ReallyLastGeneratedExit_correct Smt.true)))))) (= start_correct Smt.true))))
(assert (= BAV61 (=> true (=> (= k_0 (select2 B q G)) (=> (= B_0 (store2 B o F (+ y (select2 B o F)))) (=> (= B_1 (store2 B_0 q G k_0)) (=> (=> (=> true (and (forall ((?p Int)(?f Int)) (or (= (select2 B_1 ?p ?f) (select2 B ?p ?f)) (and (= ?p o) (= ?f F)))) (=> (forall ((?p Int)(?f Int)) (or (= (select2 B_1 ?p ?f) (select2 B ?p ?f)) (and (= ?p o) (= ?f F)))) (=> true true)))) (= ReallyLastGeneratedExit_correct Smt.true)) (= ReallyLastGeneratedExit_correct Smt.true))))))))
(assert (= BAV62 (=> (= k_0 (select2 B q G)) (=> (= B_0 (store2 B o F (+ y (select2 B o F)))) (=> (= B_1 (store2 B_0 q G k_0)) (=> (=> (=> true (and (forall ((?p Int)(?f Int)) (or (= (select2 B_1 ?p ?f) (select2 B ?p ?f)) (and (= ?p o) (= ?f F)))) (=> (forall ((?p Int)(?f Int)) (or (= (select2 B_1 ?p ?f) (select2 B ?p ?f)) (and (= ?p o) (= ?f F)))) (=> true true)))) (= ReallyLastGeneratedExit_correct Smt.true)) (= ReallyLastGeneratedExit_correct Smt.true)))))))
(assert (= BAV63 (= k_0 (select2 B q G))))
(assert (= BAV64 (=> (= B_0 (store2 B o F (+ y (select2 B o F)))) (=> (= B_1 (store2 B_0 q G k_0)) (=> (=> (=> true (and (forall ((?p Int)(?f Int)) (or (= (select2 B_1 ?p ?f) (select2 B ?p ?f)) (and (= ?p o) (= ?f F)))) (=> (forall ((?p Int)(?f Int)) (or (= (select2 B_1 ?p ?f) (select2 B ?p ?f)) (and (= ?p o) (= ?f F)))) (=> true true)))) (= ReallyLastGeneratedExit_correct Smt.true)) (= ReallyLastGeneratedExit_correct Smt.true))))))
(assert (= BAV65 (= B_0 (store2 B o F (+ y (select2 B o F))))))
(assert (= BAV66 (=> (= B_1 (store2 B_0 q G k_0)) (=> (=> (=> true (and (forall ((?p Int)(?f Int)) (or (= (select2 B_1 ?p ?f) (select2 B ?p ?f)) (and (= ?p o) (= ?f F)))) (=> (forall ((?p Int)(?f Int)) (or (= (select2 B_1 ?p ?f) (select2 B ?p ?f)) (and (= ?p o) (= ?f F)))) (=> true true)))) (= ReallyLastGeneratedExit_correct Smt.true)) (= ReallyLastGeneratedExit_correct Smt.true)))))
(assert (= BAV67 (= B_1 (store2 B_0 q G k_0))))
(assert (= BAV68 (=> (=> (=> true (and (forall ((?p Int)(?f Int)) (or (= (select2 B_1 ?p ?f) (select2 B ?p ?f)) (and (= ?p o) (= ?f F)))) (=> (forall ((?p Int)(?f Int)) (or (= (select2 B_1 ?p ?f) (select2 B ?p ?f)) (and (= ?p o) (= ?f F)))) (=> true true)))) (= ReallyLastGeneratedExit_correct Smt.true)) (= ReallyLastGeneratedExit_correct Smt.true))))
(assert (= BAV69 (=> (=> true (and (forall ((?p Int)(?f Int)) (or (= (select2 B_1 ?p ?f) (select2 B ?p ?f)) (and (= ?p o) (= ?f F)))) (=> (forall ((?p Int)(?f Int)) (or (= (select2 B_1 ?p ?f) (select2 B ?p ?f)) (and (= ?p o) (= ?f F)))) (=> true true)))) (= ReallyLastGeneratedExit_correct Smt.true))))
(assert (= BAV70 (=> true (and (forall ((?p Int)(?f Int)) (or (= (select2 B_1 ?p ?f) (select2 B ?p ?f)) (and (= ?p o) (= ?f F)))) (=> (forall ((?p Int)(?f Int)) (or (= (select2 B_1 ?p ?f) (select2 B ?p ?f)) (and (= ?p o) (= ?f F)))) (=> true true))))))
(assert (= BAV71 (and (forall ((?p Int)(?f Int)) (or (= (select2 B_1 ?p ?f) (select2 B ?p ?f)) (and (= ?p o) (= ?f F)))) (=> (forall ((?p Int)(?f Int)) (or (= (select2 B_1 ?p ?f) (select2 B ?p ?f)) (and (= ?p o) (= ?f F)))) (=> true true)))))
(assert (= BAV72 (forall ((?p Int)(?f Int)) (or (= (select2 B_1 ?p ?f) (select2 B ?p ?f)) (and (= ?p o) (= ?f F))))))
(assert (= BAV73 (forall ((?p Int)(?f Int)) (= (select2 B_1 ?p ?f) (select2 B ?p ?f)))))
(assert (= BAV74 (forall ((?p Int)(?f Int)) (and (= ?p o) (= ?f F)))))
(assert (= BAV75 (forall ((?p Int)(?f Int)) (= ?p o))))
(assert (= BAV76 (forall ((?p Int)(?f Int)) (= ?f F))))
(assert (= BAV77 (=> (forall ((?p Int)(?f Int)) (or (= (select2 B_1 ?p ?f) (select2 B ?p ?f)) (and (= ?p o) (= ?f F)))) (=> true true))))
(assert (= BAV78 (forall ((?p Int)(?f Int)) (or (= (select2 B_1 ?p ?f) (select2 B ?p ?f)) (and (= ?p o) (= ?f F))))))
(assert (= BAV79 (forall ((?p Int)(?f Int)) (= (select2 B_1 ?p ?f) (select2 B ?p ?f)))))
(assert (= BAV80 (forall ((?p Int)(?f Int)) (and (= ?p o) (= ?f F)))))
(assert (= BAV81 (forall ((?p Int)(?f Int)) (= ?p o))))
(assert (= BAV82 (forall ((?p Int)(?f Int)) (= ?f F))))
(assert (= BAV83 (=> true true)))
(assert (= BAV84 (= ReallyLastGeneratedExit_correct Smt.true)))
(assert (= BAV85 (= ReallyLastGeneratedExit_correct Smt.true)))
(assert (= BAV86 (= start_correct Smt.true)))
(assert (= BAV87 (= start_correct Smt.true)))
(check-sat)
(exit)