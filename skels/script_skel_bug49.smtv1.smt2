(set-option :incremental false)
(set-info :source "CADE ATP System competition. See http://www.cs.miami.edu/~tptp/CASC
 for more information. 

This benchmark was obtained by trying to find a finite model of a first-order 
formula (Albert Oliveras).

Original source is QF_UF/PEQ/PEQ012_size3.smt
Mucked up by Tim")
(set-info :category "crafted")
(set-info :difficulty "0")
(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const BAV23 Bool)
(declare-const BAV24 Bool)
(declare-const BAV25 Bool)
(declare-const BAV26 Bool)
(declare-const BAV27 Bool)
(declare-const BAV28 Bool)
(declare-const BAV29 Bool)
(declare-const BAV30 Bool)
(declare-const BAV31 Bool)
(declare-const BAV32 Bool)
(declare-const BAV33 Bool)
(declare-const BAV34 Bool)
(declare-const BAV35 Bool)
(declare-const BAV36 Bool)
(declare-const BAV37 Bool)
(declare-const BAV38 Bool)
(declare-const BAV39 Bool)
(declare-const BAV40 Bool)
(declare-const BAV41 Bool)
(declare-const BAV42 Bool)
(declare-const BAV43 Bool)
(declare-const BAV44 Bool)
(declare-const BAV45 Bool)
(declare-const BAV46 Bool)
(declare-const BAV47 Bool)
(declare-const BAV48 Bool)
(declare-const BAV49 Bool)
(declare-const BAV50 Bool)
(declare-const BAV51 Bool)
(declare-const BAV52 Bool)
(declare-const BAV53 Bool)
(declare-const BAV54 Bool)
(declare-const BAV55 Bool)
(declare-const BAV56 Bool)
(declare-const BAV57 Bool)
(declare-const BAV58 Bool)
(declare-const BAV59 Bool)
(declare-const BAV60 Bool)
(declare-const BAV61 Bool)
(declare-const BAV62 Bool)
(declare-const BAV63 Bool)
(declare-const BAV64 Bool)
(declare-const BAV65 Bool)
(declare-const BAV66 Bool)
(declare-const BAV67 Bool)
(declare-const BAV68 Bool)
(declare-const BAV69 Bool)
(declare-const BAV70 Bool)
(declare-const BAV71 Bool)
(declare-const BAV72 Bool)
(declare-const BAV73 Bool)
(declare-const BAV74 Bool)
(declare-const BAV75 Bool)
(declare-const BAV76 Bool)
(declare-const BAV77 Bool)
(declare-const BAV78 Bool)
(declare-const BAV79 Bool)
(declare-const BAV80 Bool)
(declare-const BAV81 Bool)
(declare-const BAV82 Bool)
(declare-const BAV83 Bool)
(declare-const BAV84 Bool)
(declare-const BAV85 Bool)
(declare-const BAV86 Bool)
(declare-const BAV87 Bool)
(declare-const BAV88 Bool)
(declare-const BAV89 Bool)
(declare-const BAV90 Bool)
(declare-const BAV91 Bool)
(declare-const BAV92 Bool)
(declare-const BAV93 Bool)
(declare-const BAV94 Bool)
(declare-const BAV95 Bool)
(declare-const BAV96 Bool)
(declare-sort U 0)
(declare-fun f1 (U U) U)
(declare-fun c6 () U)
(declare-fun c3 () U)
(declare-fun c7 () U)
(declare-fun c5 () U)
(declare-fun c2 () U)
(declare-fun c4 () U)
(declare-fun c8 () U)
(declare-fun c9 () U)
(declare-fun c_0 () U)
(declare-fun c_1 () U)
(declare-fun c_2 () U)
(assert (= BAV1 (and (not (= c_0 c_1)) (not (= c_0 c_2)) (not (= c_1 c_2)) (or (not (= (f1 c_0 c_1) (f1 c_0 c_1))) (= c_1 c_1)) (or (not (= (f1 c_0 c_2) (f1 c_0 c_0))) (= c_2 c_0)) (or (not (= (f1 c_0 c_2) (f1 c_0 c_2))) (= c_2 c_2)) (or (not (= (f1 c_1 c_0) (f1 c_1 c_0))) (= c_0 c_0)) (or (not (= (f1 c_1 c_0) (f1 c_1 c_2))) (= c_0 c_2)) (or (not (= (f1 c_1 c_1) (f1 c_1 c_0))) (= c_1 c_0)) (= (f1 (f1 c_0 c_0) c_0) (f1 c_0 (f1 c_0 c_0))) (= (f1 (f1 c_0 c_0) c_2) (f1 c_0 (f1 c_0 c_2))) (= (f1 (f1 c_0 c_1) c_1) (f1 c_0 (f1 c_1 c_1))) (= (f1 (f1 c_0 c_1) c_2) (f1 c_0 (f1 c_1 c_2))) (= (f1 (f1 c_2 c_1) c_2) (f1 c_2 (f1 c_1 c_2))) (= (f1 (f1 c_2 c_2) c_0) (f1 c_2 (f1 c_2 c_0))) (= (f1 (f1 c_2 c_2) c_1) (f1 c_2 (f1 c_2 c_1))) (= (f1 c_0 (f1 c_2 (f1 c_2 (f1 c_2 c_0)))) (f1 c_2 (f1 c_0 (f1 c_2 (f1 c_0 c_2))))) (= (f1 c2 c8) (f1 c4 c9)) (not (= (f1 c6 c8) (f1 c7 c9))) (or (= (f1 c_0 c_0) c_0) (= (f1 c_0 c_0) c_1) (= (f1 c_0 c_0) c_2)) (or (= (f1 c_0 c_1) c_0) (= (f1 c_0 c_1) c_1) (= (f1 c_0 c_1) c_2)) (or (= (f1 c_1 c_0) c_0) (= (f1 c_1 c_0) c_1) (= (f1 c_1 c_0) c_2)) (or (= (f1 c_1 c_1) c_0) (= (f1 c_1 c_1) c_1) (= (f1 c_1 c_1) c_2)) (or (= (f1 c_1 c_2) c_0) (= (f1 c_1 c_2) c_1) (= (f1 c_1 c_2) c_2)) (or (= (f1 c_2 c_0) c_0) (= (f1 c_2 c_0) c_1) (= (f1 c_2 c_0) c_2)) (or (= (f1 c_2 c_1) c_0) (= (f1 c_2 c_1) c_1) (= (f1 c_2 c_1) c_2)) (or (= (f1 c_2 c_2) c_0) (= (f1 c_2 c_2) c_1) (= (f1 c_2 c_2) c_2)) (or (= c6 c_0) (= c6 c_1) (= c6 c_2)) (or (= c3 c_0) (= c3 c_1) (= c3 c_2)) (or (= c7 c_0) (= c7 c_1) (= c7 c_2)) (or (= c5 c_0) (= c5 c_1) (= c5 c_2)) (or (= c2 c_0) (= c2 c_1) (= c2 c_2)) (or (= c4 c_0) (= c4 c_1) (= c4 c_2)) (or (= c8 c_0) (= c8 c_1) (= c8 c_2)) (or (= c9 c_0) (= c9 c_1) (= c9 c_2)))))
(assert (= BAV2 (= c_0 c_1)))
(assert (= BAV3 (= c_0 c_2)))
(assert (= BAV4 (= c_1 c_2)))
(assert (= BAV5 (or (not (= (f1 c_0 c_1) (f1 c_0 c_1))) (= c_1 c_1))))
(assert (= BAV6 (= (f1 c_0 c_1) (f1 c_0 c_1))))
(assert (= BAV7 (= c_1 c_1)))
(assert (= BAV8 (or (not (= (f1 c_0 c_2) (f1 c_0 c_0))) (= c_2 c_0))))
(assert (= BAV9 (= (f1 c_0 c_2) (f1 c_0 c_0))))
(assert (= BAV10 (= c_2 c_0)))
(assert (= BAV11 (or (not (= (f1 c_0 c_2) (f1 c_0 c_2))) (= c_2 c_2))))
(assert (= BAV12 (= (f1 c_0 c_2) (f1 c_0 c_2))))
(assert (= BAV13 (= c_2 c_2)))
(assert (= BAV14 (or (not (= (f1 c_1 c_0) (f1 c_1 c_0))) (= c_0 c_0))))
(assert (= BAV15 (= (f1 c_1 c_0) (f1 c_1 c_0))))
(assert (= BAV16 (= c_0 c_0)))
(assert (= BAV17 (or (not (= (f1 c_1 c_0) (f1 c_1 c_2))) (= c_0 c_2))))
(assert (= BAV18 (= (f1 c_1 c_0) (f1 c_1 c_2))))
(assert (= BAV19 (= c_0 c_2)))
(assert (= BAV20 (or (not (= (f1 c_1 c_1) (f1 c_1 c_0))) (= c_1 c_0))))
(assert (= BAV21 (= (f1 c_1 c_1) (f1 c_1 c_0))))
(assert (= BAV22 (= c_1 c_0)))
(assert (= BAV23 (= (f1 (f1 c_0 c_0) c_0) (f1 c_0 (f1 c_0 c_0)))))
(assert (= BAV24 (= (f1 (f1 c_0 c_0) c_2) (f1 c_0 (f1 c_0 c_2)))))
(assert (= BAV25 (= (f1 (f1 c_0 c_1) c_1) (f1 c_0 (f1 c_1 c_1)))))
(assert (= BAV26 (= (f1 (f1 c_0 c_1) c_2) (f1 c_0 (f1 c_1 c_2)))))
(assert (= BAV27 (= (f1 (f1 c_2 c_1) c_2) (f1 c_2 (f1 c_1 c_2)))))
(assert (= BAV28 (= (f1 (f1 c_2 c_2) c_0) (f1 c_2 (f1 c_2 c_0)))))
(assert (= BAV29 (= (f1 (f1 c_2 c_2) c_1) (f1 c_2 (f1 c_2 c_1)))))
(assert (= BAV30 (= (f1 c_0 (f1 c_2 (f1 c_2 (f1 c_2 c_0)))) (f1 c_2 (f1 c_0 (f1 c_2 (f1 c_0 c_2)))))))
(assert (= BAV31 (= (f1 c2 c8) (f1 c4 c9))))
(assert (= BAV32 (= (f1 c6 c8) (f1 c7 c9))))
(assert (= BAV33 (or (= (f1 c_0 c_0) c_0) (= (f1 c_0 c_0) c_1) (= (f1 c_0 c_0) c_2))))
(assert (= BAV34 (= (f1 c_0 c_0) c_0)))
(assert (= BAV35 (= (f1 c_0 c_0) c_1)))
(assert (= BAV36 (= (f1 c_0 c_0) c_2)))
(assert (= BAV37 (or (= (f1 c_0 c_1) c_0) (= (f1 c_0 c_1) c_1) (= (f1 c_0 c_1) c_2))))
(assert (= BAV38 (= (f1 c_0 c_1) c_0)))
(assert (= BAV39 (= (f1 c_0 c_1) c_1)))
(assert (= BAV40 (= (f1 c_0 c_1) c_2)))
(assert (= BAV41 (or (= (f1 c_1 c_0) c_0) (= (f1 c_1 c_0) c_1) (= (f1 c_1 c_0) c_2))))
(assert (= BAV42 (= (f1 c_1 c_0) c_0)))
(assert (= BAV43 (= (f1 c_1 c_0) c_1)))
(assert (= BAV44 (= (f1 c_1 c_0) c_2)))
(assert (= BAV45 (or (= (f1 c_1 c_1) c_0) (= (f1 c_1 c_1) c_1) (= (f1 c_1 c_1) c_2))))
(assert (= BAV46 (= (f1 c_1 c_1) c_0)))
(assert (= BAV47 (= (f1 c_1 c_1) c_1)))
(assert (= BAV48 (= (f1 c_1 c_1) c_2)))
(assert (= BAV49 (or (= (f1 c_1 c_2) c_0) (= (f1 c_1 c_2) c_1) (= (f1 c_1 c_2) c_2))))
(assert (= BAV50 (= (f1 c_1 c_2) c_0)))
(assert (= BAV51 (= (f1 c_1 c_2) c_1)))
(assert (= BAV52 (= (f1 c_1 c_2) c_2)))
(assert (= BAV53 (or (= (f1 c_2 c_0) c_0) (= (f1 c_2 c_0) c_1) (= (f1 c_2 c_0) c_2))))
(assert (= BAV54 (= (f1 c_2 c_0) c_0)))
(assert (= BAV55 (= (f1 c_2 c_0) c_1)))
(assert (= BAV56 (= (f1 c_2 c_0) c_2)))
(assert (= BAV57 (or (= (f1 c_2 c_1) c_0) (= (f1 c_2 c_1) c_1) (= (f1 c_2 c_1) c_2))))
(assert (= BAV58 (= (f1 c_2 c_1) c_0)))
(assert (= BAV59 (= (f1 c_2 c_1) c_1)))
(assert (= BAV60 (= (f1 c_2 c_1) c_2)))
(assert (= BAV61 (or (= (f1 c_2 c_2) c_0) (= (f1 c_2 c_2) c_1) (= (f1 c_2 c_2) c_2))))
(assert (= BAV62 (= (f1 c_2 c_2) c_0)))
(assert (= BAV63 (= (f1 c_2 c_2) c_1)))
(assert (= BAV64 (= (f1 c_2 c_2) c_2)))
(assert (= BAV65 (or (= c6 c_0) (= c6 c_1) (= c6 c_2))))
(assert (= BAV66 (= c6 c_0)))
(assert (= BAV67 (= c6 c_1)))
(assert (= BAV68 (= c6 c_2)))
(assert (= BAV69 (or (= c3 c_0) (= c3 c_1) (= c3 c_2))))
(assert (= BAV70 (= c3 c_0)))
(assert (= BAV71 (= c3 c_1)))
(assert (= BAV72 (= c3 c_2)))
(assert (= BAV73 (or (= c7 c_0) (= c7 c_1) (= c7 c_2))))
(assert (= BAV74 (= c7 c_0)))
(assert (= BAV75 (= c7 c_1)))
(assert (= BAV76 (= c7 c_2)))
(assert (= BAV77 (or (= c5 c_0) (= c5 c_1) (= c5 c_2))))
(assert (= BAV78 (= c5 c_0)))
(assert (= BAV79 (= c5 c_1)))
(assert (= BAV80 (= c5 c_2)))
(assert (= BAV81 (or (= c2 c_0) (= c2 c_1) (= c2 c_2))))
(assert (= BAV82 (= c2 c_0)))
(assert (= BAV83 (= c2 c_1)))
(assert (= BAV84 (= c2 c_2)))
(assert (= BAV85 (or (= c4 c_0) (= c4 c_1) (= c4 c_2))))
(assert (= BAV86 (= c4 c_0)))
(assert (= BAV87 (= c4 c_1)))
(assert (= BAV88 (= c4 c_2)))
(assert (= BAV89 (or (= c8 c_0) (= c8 c_1) (= c8 c_2))))
(assert (= BAV90 (= c8 c_0)))
(assert (= BAV91 (= c8 c_1)))
(assert (= BAV92 (= c8 c_2)))
(assert (= BAV93 (or (= c9 c_0) (= c9 c_1) (= c9 c_2))))
(assert (= BAV94 (= c9 c_0)))
(assert (= BAV95 (= c9 c_1)))
(assert (= BAV96 (= c9 c_2)))
(check-sat-assuming ((and (not (= c_0 c_1)) (not (= c_0 c_2)) (not (= c_1 c_2)) (or (not (= (f1 c_0 c_1) (f1 c_0 c_1))) (= c_1 c_1)) (or (not (= (f1 c_0 c_2) (f1 c_0 c_0))) (= c_2 c_0)) (or (not (= (f1 c_0 c_2) (f1 c_0 c_2))) (= c_2 c_2)) (or (not (= (f1 c_1 c_0) (f1 c_1 c_0))) (= c_0 c_0)) (or (not (= (f1 c_1 c_0) (f1 c_1 c_2))) (= c_0 c_2)) (or (not (= (f1 c_1 c_1) (f1 c_1 c_0))) (= c_1 c_0)) (= (f1 (f1 c_0 c_0) c_0) (f1 c_0 (f1 c_0 c_0))) (= (f1 (f1 c_0 c_0) c_2) (f1 c_0 (f1 c_0 c_2))) (= (f1 (f1 c_0 c_1) c_1) (f1 c_0 (f1 c_1 c_1))) (= (f1 (f1 c_0 c_1) c_2) (f1 c_0 (f1 c_1 c_2))) (= (f1 (f1 c_2 c_1) c_2) (f1 c_2 (f1 c_1 c_2))) (= (f1 (f1 c_2 c_2) c_0) (f1 c_2 (f1 c_2 c_0))) (= (f1 (f1 c_2 c_2) c_1) (f1 c_2 (f1 c_2 c_1))) (= (f1 c_0 (f1 c_2 (f1 c_2 (f1 c_2 c_0)))) (f1 c_2 (f1 c_0 (f1 c_2 (f1 c_0 c_2))))) (= (f1 c2 c8) (f1 c4 c9)) (not (= (f1 c6 c8) (f1 c7 c9))) (or (= (f1 c_0 c_0) c_0) (= (f1 c_0 c_0) c_1) (= (f1 c_0 c_0) c_2)) (or (= (f1 c_0 c_1) c_0) (= (f1 c_0 c_1) c_1) (= (f1 c_0 c_1) c_2)) (or (= (f1 c_1 c_0) c_0) (= (f1 c_1 c_0) c_1) (= (f1 c_1 c_0) c_2)) (or (= (f1 c_1 c_1) c_0) (= (f1 c_1 c_1) c_1) (= (f1 c_1 c_1) c_2)) (or (= (f1 c_1 c_2) c_0) (= (f1 c_1 c_2) c_1) (= (f1 c_1 c_2) c_2)) (or (= (f1 c_2 c_0) c_0) (= (f1 c_2 c_0) c_1) (= (f1 c_2 c_0) c_2)) (or (= (f1 c_2 c_1) c_0) (= (f1 c_2 c_1) c_1) (= (f1 c_2 c_1) c_2)) (or (= (f1 c_2 c_2) c_0) (= (f1 c_2 c_2) c_1) (= (f1 c_2 c_2) c_2)) (or (= c6 c_0) (= c6 c_1) (= c6 c_2)) (or (= c3 c_0) (= c3 c_1) (= c3 c_2)) (or (= c7 c_0) (= c7 c_1) (= c7 c_2)) (or (= c5 c_0) (= c5 c_1) (= c5 c_2)) (or (= c2 c_0) (= c2 c_1) (= c2 c_2)) (or (= c4 c_0) (= c4 c_1) (= c4 c_2)) (or (= c8 c_0) (= c8 c_1) (= c8 c_2)) (or (= c9 c_0) (= c9 c_1) (= c9 c_2)))))
(get-model)