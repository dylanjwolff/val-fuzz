(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const BAV23 Bool)
(declare-const BAV24 Bool)
(declare-const BAV25 Bool)
(declare-const BAV26 Bool)
(declare-const BAV27 Bool)
(declare-const BAV28 Bool)
(declare-const BAV29 Bool)
(declare-const BAV30 Bool)
(declare-const BAV31 Bool)
(declare-const BAV32 Bool)
(declare-const BAV33 Bool)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(set-option :pp.max-depth 100)
(declare-fun f (Int Int) Int)
(declare-fun g (Int) Int)
(declare-fun p (Int) Bool)
(push)
(assert (forall ((x Int)(y Int)) (=> (and (= x (f (f x x) (f x y))) (= y (f x x))) (= x y))))
(apply (and-then (! simplify :elim-and true) der))
(pop)
(push)
(assert (forall ((x Int)(y Int)) (=> (= x (f x y)) (p x))))
(assert (forall ((x Int)(y Int)) (not (= x (f y x)))))
(apply (and-then (! simplify :elim-and true) der))
(pop)
(push)
(assert (forall ((x Int)(y Int)) (not (= x (f y y)))))
(apply (and-then (! simplify :elim-and true) der))
(pop)
(push)
(assert (forall ((x1 Int)(x2 Int)(x3 Int)) (=> (and (= x1 (g GEN1)) (= x2 (f x1 x1)) (= x3 (f x2 (g x1)))) (p x3))))
(assert (forall ((x1 Int)(x2 Int)(x3 Int)) (=> (and (= x1 (g GEN2)) (= x2 (f x1 x3)) (= x3 (f x2 (g x1)))) (p x3))))
(apply (and-then (! simplify :elim-and true) der))
(pop)
(push)
(assert (forall ((x1 Int)(x2 Int)(x3 Int)) (=> (and (= x2 (f x1 x1)) (= x1 (g GEN3)) (= x3 (f x2 (g x1)))) (p x3))))
(apply (and-then (! simplify :elim-and true) der))
(pop)
(push)
(assert (forall ((x1 Int)(x2 Int)(x3 Int)) (=> (and (= x2 (f x1 x1)) (= x3 (f x2 (g x1))) (= x1 (g GEN4))) (p x3))))
(apply (and-then (! simplify :elim-and true) der))
(pop)
(push)
(assert (forall ((x1 Int)(x2 Int)(x3 Int)) (=> (and (= x2 (ite (forall ((y Int)) (= (g y) x1)) GEN5 GEN6))) (p x2))))
(apply (and-then (! simplify :elim-and true) der))
(pop)
(assert (= BAV1 (forall ((x Int)(y Int)) (=> (and (= x (f (f x x) (f x y))) (= y (f x x))) (= x y)))))
(assert (= BAV2 (forall ((x Int)(y Int)) (and (= x (f (f x x) (f x y))) (= y (f x x))))))
(assert (= BAV3 (forall ((x Int)(y Int)) (= x (f (f x x) (f x y))))))
(assert (= BAV4 (forall ((x Int)(y Int)) (= y (f x x)))))
(assert (= BAV5 (forall ((x Int)(y Int)) (= x y))))
(assert (= BAV6 (forall ((x Int)(y Int)) (=> (= x (f x y)) (p x)))))
(assert (= BAV7 (forall ((x Int)(y Int)) (= x (f x y)))))
(assert (= BAV8 (forall ((x Int)(y Int)) (= x (f y x)))))
(assert (= BAV9 (forall ((x Int)(y Int)) (= x (f y y)))))
(assert (= BAV10 (forall ((x1 Int)(x2 Int)(x3 Int)) (=> (and (= x1 (g GEN1)) (= x2 (f x1 x1)) (= x3 (f x2 (g x1)))) (p x3)))))
(assert (= BAV11 (forall ((x1 Int)(x2 Int)(x3 Int)) (and (= x1 (g GEN1)) (= x2 (f x1 x1)) (= x3 (f x2 (g x1)))))))
(assert (= BAV12 (forall ((x1 Int)(x2 Int)(x3 Int)) (= x1 (g GEN1)))))
(assert (= BAV13 (forall ((x1 Int)(x2 Int)(x3 Int)) (= x2 (f x1 x1)))))
(assert (= BAV14 (forall ((x1 Int)(x2 Int)(x3 Int)) (= x3 (f x2 (g x1))))))
(assert (= BAV15 (forall ((x1 Int)(x2 Int)(x3 Int)) (=> (and (= x1 (g GEN2)) (= x2 (f x1 x3)) (= x3 (f x2 (g x1)))) (p x3)))))
(assert (= BAV16 (forall ((x1 Int)(x2 Int)(x3 Int)) (and (= x1 (g GEN2)) (= x2 (f x1 x3)) (= x3 (f x2 (g x1)))))))
(assert (= BAV17 (forall ((x1 Int)(x2 Int)(x3 Int)) (= x1 (g GEN2)))))
(assert (= BAV18 (forall ((x1 Int)(x2 Int)(x3 Int)) (= x2 (f x1 x3)))))
(assert (= BAV19 (forall ((x1 Int)(x2 Int)(x3 Int)) (= x3 (f x2 (g x1))))))
(assert (= BAV20 (forall ((x1 Int)(x2 Int)(x3 Int)) (=> (and (= x2 (f x1 x1)) (= x1 (g GEN3)) (= x3 (f x2 (g x1)))) (p x3)))))
(assert (= BAV21 (forall ((x1 Int)(x2 Int)(x3 Int)) (and (= x2 (f x1 x1)) (= x1 (g GEN3)) (= x3 (f x2 (g x1)))))))
(assert (= BAV22 (forall ((x1 Int)(x2 Int)(x3 Int)) (= x2 (f x1 x1)))))
(assert (= BAV23 (forall ((x1 Int)(x2 Int)(x3 Int)) (= x1 (g GEN3)))))
(assert (= BAV24 (forall ((x1 Int)(x2 Int)(x3 Int)) (= x3 (f x2 (g x1))))))
(assert (= BAV25 (forall ((x1 Int)(x2 Int)(x3 Int)) (=> (and (= x2 (f x1 x1)) (= x3 (f x2 (g x1))) (= x1 (g GEN4))) (p x3)))))
(assert (= BAV26 (forall ((x1 Int)(x2 Int)(x3 Int)) (and (= x2 (f x1 x1)) (= x3 (f x2 (g x1))) (= x1 (g GEN4))))))
(assert (= BAV27 (forall ((x1 Int)(x2 Int)(x3 Int)) (= x2 (f x1 x1)))))
(assert (= BAV28 (forall ((x1 Int)(x2 Int)(x3 Int)) (= x3 (f x2 (g x1))))))
(assert (= BAV29 (forall ((x1 Int)(x2 Int)(x3 Int)) (= x1 (g GEN4)))))
(assert (= BAV30 (forall ((x1 Int)(x2 Int)(x3 Int)) (=> (and (= x2 (ite (forall ((y Int)) (= (g y) x1)) GEN5 GEN6))) (p x2)))))
(assert (= BAV31 (forall ((x1 Int)(x2 Int)(x3 Int)) (and (= x2 (ite (forall ((y Int)) (= (g y) x1)) GEN5 GEN6))))))
(assert (= BAV32 (forall ((x1 Int)(x2 Int)(x3 Int)) (= x2 (ite (forall ((y Int)) (= (g y) x1)) GEN5 GEN6)))))
(assert (= BAV33 (forall ((x1 Int)(x2 Int)(x3 Int)(y Int)) (= (g y) x1))))