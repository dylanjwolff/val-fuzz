(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(set-option :produce-abducts true)
(declare-fun n () Int)
(declare-fun m () Int)
(declare-fun x () Int)
(declare-fun y () Int)
(assert (>= n GEN1))
(assert (and (<= n x) (<= x (+ n GEN2))))
(assert (and (<= GEN3 y) (<= y m)))
(get-abduct A (not (< x y))

    ((Start Bool) (StartInt Int))
(
(Start Bool ((< StartInt StartInt)))
(StartInt Int (n m (+ StartInt StartInt) 0 1))
)

)
(assert (= BAV1 (>= n GEN1)))
(assert (= BAV2 (and (<= n x) (<= x (+ n GEN2)))))
(assert (= BAV3 (<= n x)))
(assert (= BAV4 (<= x (+ n GEN2))))
(assert (= BAV5 (and (<= GEN3 y) (<= y m))))
(assert (= BAV6 (<= GEN3 y)))
(assert (= BAV7 (<= y m)))