(set-info :source |fuzzsmt|)
(set-info :smt-lib-version 2.0)
(set-info :category "random")
(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const BAV23 Bool)
(declare-const BAV24 Bool)
(declare-const BAV25 Bool)
(declare-const BAV26 Bool)
(declare-const GEN15 Int)
(declare-const GEN14 Int)
(declare-const GEN13 Int)
(declare-const GEN12 Int)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(define-sort Element () Int)
(declare-fun f0 ( Int Int Int) Int)
(declare-fun f1 ( (Set Element) (Set Element)) (Set Element))
(declare-fun p0 ( Int Int Int) Bool)
(declare-fun p1 ( (Set Element)) Bool)
(declare-fun v0 () Int)
(declare-fun v1 () (Set Element))
(declare-fun v2 () (Set Element))
(declare-fun v3 () (Set Element))
(declare-fun v4 () (Set Element))
(assert (=> (not (= (and (distinct (ite (p0 (* (+ v0 v0) GEN1) v0 (+ v0 v0)) GEN2 GEN3) v0) (ite (or (<= (+ v0 v0) (* (+ v0 v0) (- GEN1))) (> v0 (* (+ v0 v0) (- GEN1)))) (member (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))) (ite (p1 (ite (p1 v1) (singleton GEN4) (singleton GEN5))) (singleton GEN8) (singleton GEN9))) (or (<= (+ v0 v0) (* (+ v0 v0) (- GEN1))) (> v0 (* (+ v0 v0) (- GEN1)))))) (xor (=> (member (* (+ v0 v0) GEN1) (ite (p1 (ite (p1 (ite (p1 v1) (singleton GEN4) (singleton GEN5))) (singleton GEN8) (singleton GEN9))) (singleton GEN12) (singleton GEN13))) (distinct v0 (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))))) (p0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) GEN1) (+ v0 v0))))) (or (xor (not (or (<= (* (+ v0 v0) GEN1) (* (+ v0 v0) (- GEN1))) (or (member (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))) v1) (< (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))) (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))))))) (distinct (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) GEN1))) (xor (not (or (<= (* (+ v0 v0) GEN1) (* (+ v0 v0) (- GEN1))) (or (member (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))) v1) (< (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))) (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))))))) (distinct (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) GEN1))))))
(assert (= BAV1 (=> (not (= (and (distinct (ite (p0 (* (+ v0 v0) GEN1) v0 (+ v0 v0)) GEN2 GEN3) v0) (ite (or (<= (+ v0 v0) (* (+ v0 v0) (- GEN1))) (> v0 (* (+ v0 v0) (- GEN1)))) (member (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))) (ite (p1 (ite (p1 v1) (singleton GEN4) (singleton GEN5))) (singleton GEN8) (singleton GEN9))) (or (<= (+ v0 v0) (* (+ v0 v0) (- GEN1))) (> v0 (* (+ v0 v0) (- GEN1)))))) (xor (=> (member (* (+ v0 v0) GEN1) (ite (p1 (ite (p1 (ite (p1 v1) (singleton GEN4) (singleton GEN5))) (singleton GEN8) (singleton GEN9))) (singleton GEN12) (singleton GEN13))) (distinct v0 (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))))) (p0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) GEN1) (+ v0 v0))))) (or (xor (not (or (<= (* (+ v0 v0) GEN1) (* (+ v0 v0) (- GEN1))) (or (member (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))) v1) (< (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))) (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))))))) (distinct (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) GEN1))) (xor (not (or (<= (* (+ v0 v0) GEN1) (* (+ v0 v0) (- GEN1))) (or (member (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))) v1) (< (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))) (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))))))) (distinct (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) GEN1)))))))
(assert (= BAV2 (= (and (distinct (ite (p0 (* (+ v0 v0) GEN1) v0 (+ v0 v0)) GEN2 GEN3) v0) (ite (or (<= (+ v0 v0) (* (+ v0 v0) (- GEN1))) (> v0 (* (+ v0 v0) (- GEN1)))) (member (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))) (ite (p1 (ite (p1 v1) (singleton GEN4) (singleton GEN5))) (singleton GEN8) (singleton GEN9))) (or (<= (+ v0 v0) (* (+ v0 v0) (- GEN1))) (> v0 (* (+ v0 v0) (- GEN1)))))) (xor (=> (member (* (+ v0 v0) GEN1) (ite (p1 (ite (p1 (ite (p1 v1) (singleton GEN4) (singleton GEN5))) (singleton GEN8) (singleton GEN9))) (singleton GEN12) (singleton GEN13))) (distinct v0 (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))))) (p0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) GEN1) (+ v0 v0))))))
(assert (= BAV3 (and (distinct (ite (p0 (* (+ v0 v0) GEN1) v0 (+ v0 v0)) GEN2 GEN3) v0) (ite (or (<= (+ v0 v0) (* (+ v0 v0) (- GEN1))) (> v0 (* (+ v0 v0) (- GEN1)))) (member (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))) (ite (p1 (ite (p1 v1) (singleton GEN4) (singleton GEN5))) (singleton GEN8) (singleton GEN9))) (or (<= (+ v0 v0) (* (+ v0 v0) (- GEN1))) (> v0 (* (+ v0 v0) (- GEN1))))))))
(assert (= BAV4 (distinct (ite (p0 (* (+ v0 v0) GEN1) v0 (+ v0 v0)) GEN2 GEN3) v0)))
(assert (= BAV5 (or (<= (+ v0 v0) (* (+ v0 v0) (- GEN1))) (> v0 (* (+ v0 v0) (- GEN1))))))
(assert (= BAV6 (<= (+ v0 v0) (* (+ v0 v0) (- GEN1)))))
(assert (= BAV7 (> v0 (* (+ v0 v0) (- GEN1)))))
(assert (= BAV8 (or (<= (+ v0 v0) (* (+ v0 v0) (- GEN1))) (> v0 (* (+ v0 v0) (- GEN1))))))
(assert (= BAV9 (<= (+ v0 v0) (* (+ v0 v0) (- GEN1)))))
(assert (= BAV10 (> v0 (* (+ v0 v0) (- GEN1)))))
(assert (= BAV11 (xor (=> (member (* (+ v0 v0) GEN1) (ite (p1 (ite (p1 (ite (p1 v1) (singleton GEN4) (singleton GEN5))) (singleton GEN8) (singleton GEN9))) (singleton GEN12) (singleton GEN13))) (distinct v0 (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))))) (p0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) GEN1) (+ v0 v0)))))
(assert (= BAV12 (=> (member (* (+ v0 v0) GEN1) (ite (p1 (ite (p1 (ite (p1 v1) (singleton GEN4) (singleton GEN5))) (singleton GEN8) (singleton GEN9))) (singleton GEN12) (singleton GEN13))) (distinct v0 (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1)))))))
(assert (= BAV13 (distinct v0 (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))))))
(assert (= BAV14 (or (xor (not (or (<= (* (+ v0 v0) GEN1) (* (+ v0 v0) (- GEN1))) (or (member (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))) v1) (< (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))) (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))))))) (distinct (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) GEN1))) (xor (not (or (<= (* (+ v0 v0) GEN1) (* (+ v0 v0) (- GEN1))) (or (member (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))) v1) (< (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))) (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))))))) (distinct (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) GEN1))))))
(assert (= BAV15 (xor (not (or (<= (* (+ v0 v0) GEN1) (* (+ v0 v0) (- GEN1))) (or (member (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))) v1) (< (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))) (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))))))) (distinct (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) GEN1)))))
(assert (= BAV16 (or (<= (* (+ v0 v0) GEN1) (* (+ v0 v0) (- GEN1))) (or (member (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))) v1) (< (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))) (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))))))))
(assert (= BAV17 (<= (* (+ v0 v0) GEN1) (* (+ v0 v0) (- GEN1)))))
(assert (= BAV18 (or (member (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))) v1) (< (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))) (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1)))))))
(assert (= BAV19 (< (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))) (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))))))
(assert (= BAV20 (distinct (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) GEN1))))
(assert (= BAV21 (xor (not (or (<= (* (+ v0 v0) GEN1) (* (+ v0 v0) (- GEN1))) (or (member (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))) v1) (< (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))) (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))))))) (distinct (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) GEN1)))))
(assert (= BAV22 (or (<= (* (+ v0 v0) GEN1) (* (+ v0 v0) (- GEN1))) (or (member (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))) v1) (< (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))) (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))))))))
(assert (= BAV23 (<= (* (+ v0 v0) GEN1) (* (+ v0 v0) (- GEN1)))))
(assert (= BAV24 (or (member (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))) v1) (< (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))) (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1)))))))
(assert (= BAV25 (< (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))) (f0 v0 (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) (- GEN1))))))
(assert (= BAV26 (distinct (* (+ v0 v0) (- GEN1)) (* (+ v0 v0) GEN1))))
(check-sat)
(get-model)