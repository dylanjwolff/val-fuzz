(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-const x1 Int)
(declare-const x2 Int)
(declare-const x3 Int)
(declare-fun f (Int Int Int) Int)
(declare-fun g (Int) Int)
(declare-const b Bool)
(set-option :pp.max-depth 1000)
(push)
(assert (= x1 (g x2)))
(assert (= x2 (g x3)))
(assert (= x3 (f x1 x2 x3)))
(apply solve-eqs)
(pop)
(push)
(assert (= x1 (g x2)))
(assert (= x2 (g x3)))
(assert (ite b (= x3 (g x2)) (= x3 (f x1 x2 x3))))
(apply solve-eqs)
(pop)
(push)
(assert (= x1 (g x2)))
(assert (= x2 (g x3)))
(assert (ite b (= x3 (f x1 x2 x3)) (= x3 (g x2))))
(apply solve-eqs)
(pop)
(push)
(assert (= x1 (g x2)))
(assert (= x2 (g x3)))
(assert (ite (= x3 (g x1)) (= x3 (g x2)) (= x3 (g (g x1)))))
(apply solve-eqs)
(pop)
(push)
(assert (= (+ x1 x2) GEN1))
(assert (= (+ x2 x3) GEN2))
(assert (= (+ x3 x2 x1 (g x3)) GEN3))
(apply solve-eqs)
(pop)
(push)
(assert (= (+ x1 x2) GEN4))
(assert (= (+ x2 x3) GEN5))
(assert (= (+ x3 x2 x1) (g x3)))
(apply solve-eqs)
(pop)
(assert (= BAV1 (= x1 (g x2))))
(assert (= BAV2 (= x2 (g x3))))
(assert (= BAV3 (= x3 (f x1 x2 x3))))
(assert (= BAV4 (= x1 (g x2))))
(assert (= BAV5 (= x2 (g x3))))
(assert (= BAV6 (= x3 (g x2))))
(assert (= BAV7 (= x3 (f x1 x2 x3))))
(assert (= BAV8 (= x1 (g x2))))
(assert (= BAV9 (= x2 (g x3))))
(assert (= BAV10 (= x3 (f x1 x2 x3))))
(assert (= BAV11 (= x3 (g x2))))
(assert (= BAV12 (= x1 (g x2))))
(assert (= BAV13 (= x2 (g x3))))
(assert (= BAV14 (= x3 (g x1))))
(assert (= BAV15 (= x3 (g x2))))
(assert (= BAV16 (= x3 (g (g x1)))))
(assert (= BAV17 (= (+ x1 x2) GEN1)))
(assert (= BAV18 (= (+ x2 x3) GEN2)))
(assert (= BAV19 (= (+ x3 x2 x1 (g x3)) GEN3)))
(assert (= BAV20 (= (+ x1 x2) GEN4)))
(assert (= BAV21 (= (+ x2 x3) GEN5)))
(assert (= BAV22 (= (+ x3 x2 x1) (g x3))))