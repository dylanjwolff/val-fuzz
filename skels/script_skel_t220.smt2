(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(set-option :produce-unsat-cores true)
(declare-const x Int)
(declare-const y Int)
(declare-const z Int)
(declare-fun f (Int) Int)
(assert (! (= (f 0) 1) :named a1))
(assert (! (= (f (+ (f 0) 1)) 10) :named a2))
(assert (= x 20))
(assert (= (f (+ x (f 0) (f 2))) 3))
(assert (= (f (+ x (f 0))) 3))
(apply (and-then simplify (! propagate-values :max-rounds 10)) :print-dependencies true)
(assert (= BAV1 (= (f 0) 1)))
(assert (= BAV2 (= (f (+ (f 0) 1)) 10)))
(assert (= BAV3 (= x 20)))
(assert (= BAV4 (= (f (+ x (f 0) (f 2))) 3)))
(assert (= BAV5 (= (f (+ x (f 0))) 3)))