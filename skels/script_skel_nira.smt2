(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const GEN6 Int)
(declare-const GEN5 Real)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Real)
(declare-const GEN1 Int)
(declare-const x Real)
(assert (> x GEN1))
(apply (then simplify (when is-nra (echo "nra"))) :print false)
(apply (then simplify (when is-lra (echo "lra"))) :print false)
(apply (then simplify (when is-nia (echo "nia"))) :print false)
(apply (then simplify (when is-lia (echo "lia"))) :print false)
(apply (then simplify (when is-lira (echo "lira"))) :print false)
(apply (then simplify (when is-nira (echo "nira"))) :print false)
(assert (= (^ x GEN2) GEN3))
(echo "---------------")
(apply (then simplify (when is-nra (echo "nra"))) :print false)
(apply (then simplify (when is-lra (echo "lra"))) :print false)
(apply (then simplify (when is-nia (echo "nia"))) :print false)
(apply (then simplify (when is-lia (echo "lia"))) :print false)
(apply (then simplify (when is-lira (echo "lira"))) :print false)
(apply (then simplify (when is-nira (echo "nira"))) :print false)
(declare-const y Int)
(assert (= x y))
(echo "---------------")
(apply (then simplify (when is-nra (echo "nra"))) :print false)
(apply (then simplify (when is-lra (echo "lra"))) :print false)
(apply (then simplify (when is-nia (echo "nia"))) :print false)
(apply (then simplify (when is-lia (echo "lia"))) :print false)
(apply (then simplify (when is-lira (echo "lira"))) :print false)
(apply (then simplify (when is-nira (echo "nira"))) :print false)
(reset)
(declare-const y Int)
(assert (> y GEN4))
(echo "---------------")
(apply (then simplify (when is-nra (echo "nra"))) :print false)
(apply (then simplify (when is-lra (echo "lra"))) :print false)
(apply (then simplify (when is-nia (echo "nia"))) :print false)
(apply (then simplify (when is-lia (echo "lia"))) :print false)
(apply (then simplify (when is-lira (echo "lira"))) :print false)
(apply (then simplify (when is-nira (echo "nira"))) :print false)
(assert (= (* y y) GEN5))
(echo "---------------")
(apply (then simplify (when is-nra (echo "nra"))) :print false)
(apply (then simplify (when is-lra (echo "lra"))) :print false)
(apply (then simplify (when is-nia (echo "nia"))) :print false)
(apply (then simplify (when is-lia (echo "lia"))) :print false)
(apply (then simplify (when is-lira (echo "lira"))) :print false)
(apply (then simplify (when is-nira (echo "nira"))) :print false)
(assert (forall ((x Int)) (exists ((y Int)) (> y x))))
(echo "---------------")
(apply (then simplify (when is-nra (echo "nra"))) :print false)
(apply (then simplify (when is-lra (echo "lra"))) :print false)
(apply (then simplify (when is-nia (echo "nia"))) :print false)
(apply (then simplify (when is-lia (echo "lia"))) :print false)
(apply (then simplify (when is-lira (echo "lira"))) :print false)
(apply (then simplify (when is-nira (echo "nira"))) :print false)
(declare-const x Real)
(assert (> x GEN6))
(echo "---------------")
(apply (then simplify (when is-nra (echo "nra"))) :print false)
(apply (then simplify (when is-lra (echo "lra"))) :print false)
(apply (then simplify (when is-nia (echo "nia"))) :print false)
(apply (then simplify (when is-lia (echo "lia"))) :print false)
(apply (then simplify (when is-lira (echo "lira"))) :print false)
(apply (then simplify (when is-nira (echo "nira"))) :print false)
(reset)
(echo "---------------")
(assert (forall ((x Int)) (exists ((y Int)) (> y x))))
(apply (then simplify (when is-nra (echo "nra"))) :print false)
(apply (then simplify (when is-lra (echo "lra"))) :print false)
(apply (then simplify (when is-nia (echo "nia"))) :print false)
(apply (then simplify (when is-lia (echo "lia"))) :print false)
(apply (then simplify (when is-lira (echo "lira"))) :print false)
(apply (then simplify (when is-nira (echo "nira"))) :print false)
(reset)
(echo "---------------")
(assert (forall ((x Real)) (exists ((y Real)) (> y x))))
(apply (then simplify (when is-nra (echo "nra"))) :print false)
(apply (then simplify (when is-lra (echo "lra"))) :print false)
(apply (then simplify (when is-nia (echo "nia"))) :print false)
(apply (then simplify (when is-lia (echo "lia"))) :print false)
(apply (then simplify (when is-lira (echo "lira"))) :print false)
(apply (then simplify (when is-nira (echo "nira"))) :print false)
(assert (= BAV1 (> x GEN1)))
(assert (= BAV2 (= (^ x GEN2) GEN3)))
(assert (= BAV3 (= x y)))
(assert (= BAV4 (> y GEN4)))
(assert (= BAV5 (= (* y y) GEN5)))
(assert (= BAV6 (forall ((x Int)) (> y x))))
(assert (= BAV7 (> x GEN6)))
(assert (= BAV8 (forall ((x Int)) (> y x))))
(assert (= BAV9 (forall ((x Real)) (> y x))))