(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(set-option :auto-config true)
(set-option :produce-models true)
(declare-sort Type)
(declare-fun subtype (Type Type) Bool)
(declare-fun array-of (Type) Type)
(assert (forall ((x Type)) (subtype x x)))
(assert (forall ((x Type)(y Type)(z Type)) (=> (and (subtype x y) (subtype y z)) (subtype x z))))
(assert (forall ((x Type)(y Type)) (=> (and (subtype x y) (subtype y x)) (= x y))))
(assert (forall ((x Type)(y Type)(z Type)) (=> (and (subtype x y) (subtype x z)) (or (subtype y z) (subtype z y)))))
(assert (forall ((x Type)(y Type)) (=> (subtype x y) (subtype (array-of x) (array-of y)))))
(declare-const root-type Type)
(assert (forall ((x Type)) (subtype root-type x)))
(assert (= BAV1 (forall ((x Type)(y Type)(z Type)) (=> (and (subtype x y) (subtype y z)) (subtype x z)))))
(assert (= BAV2 (forall ((x Type)(y Type)(z Type)) (and (subtype x y) (subtype y z)))))
(assert (= BAV3 (forall ((x Type)(y Type)) (=> (and (subtype x y) (subtype y x)) (= x y)))))
(assert (= BAV4 (forall ((x Type)(y Type)) (and (subtype x y) (subtype y x)))))
(assert (= BAV5 (forall ((x Type)(y Type)) (= x y))))
(assert (= BAV6 (forall ((x Type)(y Type)(z Type)) (=> (and (subtype x y) (subtype x z)) (or (subtype y z) (subtype z y))))))
(assert (= BAV7 (forall ((x Type)(y Type)(z Type)) (and (subtype x y) (subtype x z)))))
(assert (= BAV8 (forall ((x Type)(y Type)(z Type)) (or (subtype y z) (subtype z y)))))
(assert (= BAV9 (forall ((x Type)(y Type)) (=> (subtype x y) (subtype (array-of x) (array-of y))))))
(check-sat)
(get-model)