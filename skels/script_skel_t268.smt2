(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const GEN15 Int)
(declare-const GEN14 Int)
(declare-const GEN13 Int)
(declare-const GEN12 Int)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(set-option :produce-models true)
(set-option :pp.max-depth 100)
(declare-fun f (Int Int Int) Int)
(declare-const a Int)
(declare-const b Int)
(assert (= (f a GEN1 GEN2) GEN3))
(assert (= (f a GEN4 GEN5) GEN6))
(assert (= (f a GEN7 GEN8) GEN9))
(assert (= (f a GEN10 GEN11) GEN12))
(apply reduce-args :print-model-converter true)
(assert (= (f a GEN13 b) GEN14))
(apply reduce-args :print-model-converter true)
(assert (= (f a b b) GEN15))
(apply reduce-args :print-model-converter true)
(assert (= BAV1 (= (f a GEN1 GEN2) GEN3)))
(assert (= BAV2 (= (f a GEN4 GEN5) GEN6)))
(assert (= BAV3 (= (f a GEN7 GEN8) GEN9)))
(assert (= BAV4 (= (f a GEN10 GEN11) GEN12)))
(assert (= BAV5 (= (f a GEN13 b) GEN14)))
(assert (= BAV6 (= (f a b b) GEN15)))