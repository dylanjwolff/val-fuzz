(set-option :incremental false)
(set-info :source "Hand-crafted bit-vector benchmarks.  Some are from the SVC benchmark suite.
Contributed by Vijay Ganesh (vganesh@stanford.edu).  Translated into SMT-LIB
format by Clark Barrett using CVC3.")
(set-info :difficulty "0")
(set-info :category "crafted")
(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const GEN24 Int)
(declare-const GEN23 Int)
(declare-const GEN22 Int)
(declare-const GEN21 Int)
(declare-const GEN20 Int)
(declare-const GEN19 Int)
(declare-const GEN18 Int)
(declare-const GEN17 Int)
(declare-const GEN16 Int)
(declare-const GEN15 Int)
(declare-const GEN14 Int)
(declare-const GEN13 Int)
(declare-const GEN12 Int)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-fun a () (_ BitVec 32))
(declare-fun b () (_ BitVec 32))
(declare-fun c () (_ BitVec 32))
(declare-fun d () (_ BitVec 32))
(declare-fun e () (_ BitVec 32))
(assert (= BAV1 (and (=> (and (and (= ((_ extract 31 0) a) ((_ extract 31 0) b)) (= ((_ extract 31 16) a) ((_ extract 15 0) c))) (= ((_ extract 31 8) b) ((_ extract 23 0) d))) (= ((_ extract 11 8) c) ((_ extract 19 16) d))) (=> (= ((_ extract 30 0) e) ((_ extract 31 1) e)) (= ((_ extract 0 0) e) ((_ extract 31 31) e))))))
(assert (= BAV2 (=> (and (and (= ((_ extract 31 0) a) ((_ extract 31 0) b)) (= ((_ extract 31 16) a) ((_ extract 15 0) c))) (= ((_ extract 31 8) b) ((_ extract 23 0) d))) (= ((_ extract 11 8) c) ((_ extract 19 16) d)))))
(assert (= BAV3 (and (and (= ((_ extract 31 0) a) ((_ extract 31 0) b)) (= ((_ extract 31 16) a) ((_ extract 15 0) c))) (= ((_ extract 31 8) b) ((_ extract 23 0) d)))))
(assert (= BAV4 (and (= ((_ extract 31 0) a) ((_ extract 31 0) b)) (= ((_ extract 31 16) a) ((_ extract 15 0) c)))))
(assert (= BAV5 (= ((_ extract 31 0) a) ((_ extract 31 0) b))))
(assert (= BAV6 (= ((_ extract 31 16) a) ((_ extract 15 0) c))))
(assert (= BAV7 (= ((_ extract 31 8) b) ((_ extract 23 0) d))))
(assert (= BAV8 (= ((_ extract 11 8) c) ((_ extract 19 16) d))))
(assert (= BAV9 (=> (= ((_ extract 30 0) e) ((_ extract 31 1) e)) (= ((_ extract 0 0) e) ((_ extract 31 31) e)))))
(assert (= BAV10 (= ((_ extract 30 0) e) ((_ extract 31 1) e))))
(assert (= BAV11 (= ((_ extract 0 0) e) ((_ extract 31 31) e))))
(check-sat-assuming ((not (and (=> (and (and (= ((_ extract 31 0) a) ((_ extract 31 0) b)) (= ((_ extract 31 16) a) ((_ extract 15 0) c))) (= ((_ extract 31 8) b) ((_ extract 23 0) d))) (= ((_ extract 11 8) c) ((_ extract 19 16) d))) (=> (= ((_ extract 30 0) e) ((_ extract 31 1) e)) (= ((_ extract 0 0) e) ((_ extract 31 31) e)))))))
(get-model)