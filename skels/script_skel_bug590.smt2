(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const GEN17 Int)
(declare-const GEN16 String)
(declare-const GEN15 Int)
(declare-const GEN14 String)
(declare-const GEN13 Int)
(declare-const GEN12 String)
(declare-const GEN11 String)
(declare-const GEN10 Int)
(declare-const GEN9 String)
(declare-const GEN8 Int)
(declare-const GEN7 String)
(declare-const GEN6 String)
(declare-const GEN5 String)
(declare-const GEN4 String)
(declare-const GEN3 String)
(declare-const GEN2 String)
(declare-const GEN1 String)
(set-option :strings-exp true)
(set-option :produce-models true)
(set-info :smt-lib-version 2.0)
(set-info :status unknown)
(declare-fun text () String)
(declare-fun output () String)
(declare-fun html_escape_table () (Array String String))
(assert (= html_escape_table (store (store (store (store (store ((as const (Array String String)) GEN1) GEN2 GEN3 \"" GEN4 '" GEN5 >" GEN6 <" GEN7 B") GEN8 GEN9) GEN10 GEN11 GEN12 '") GEN13 GEN14) GEN15 GEN16)))
(declare-fun charlst () (Array Int String))
(declare-fun charlstlen () Int)
(assert (= charlstlen (str.len text)))
(assert (forall ((i Int)) (= (select charlst i) (str.at text i))))
(declare-fun charlst2 () (Array Int String))
(declare-fun charlstlen2 () Int)
(assert (= charlstlen2 charlstlen))
(assert (forall ((i Int)) (or (or (< i GEN17) (>= i charlstlen2)) (and (exists ((j Int)) (= (select html_escape_table_keys j) (select charlst i))) (= (select charlst2 i) (select html_escape_table (select charlst i)))) (and (not (exists ((j Int)) (= (select html_escape_table_keys j) (select charlst i)))) (= (select charlst2 i) (select charlst i))))))
(assert (= BAV1 (= html_escape_table (store (store (store (store (store ((as const (Array String String)) GEN1) GEN2 GEN3 \"" GEN4 '" GEN5 >" GEN6 <" GEN7 B") GEN8 GEN9) GEN10 GEN11 GEN12 '") GEN13 GEN14) GEN15 GEN16))))
(assert (= BAV2 (= charlstlen (str.len text))))
(assert (= BAV3 (forall ((i Int)) (= (select charlst i) (str.at text i)))))
(assert (= BAV4 (= charlstlen2 charlstlen)))
(assert (= BAV5 (forall ((i Int)) (or (or (< i GEN17) (>= i charlstlen2)) (and (exists ((j Int)) (= (select html_escape_table_keys j) (select charlst i))) (= (select charlst2 i) (select html_escape_table (select charlst i)))) (and (not (exists ((j Int)) (= (select html_escape_table_keys j) (select charlst i)))) (= (select charlst2 i) (select charlst i)))))))
(assert (= BAV6 (forall ((i Int)) (or (< i GEN17) (>= i charlstlen2)))))
(assert (= BAV7 (forall ((i Int)) (< i GEN17))))
(assert (= BAV8 (forall ((i Int)) (>= i charlstlen2))))
(assert (= BAV9 (forall ((i Int)) (and (exists ((j Int)) (= (select html_escape_table_keys j) (select charlst i))) (= (select charlst2 i) (select html_escape_table (select charlst i)))))))
(assert (= BAV10 (forall ((i Int)) (= (select html_escape_table_keys j) (select charlst i)))))
(assert (= BAV11 (forall ((i Int)) (= (select charlst2 i) (select html_escape_table (select charlst i))))))
(assert (= BAV12 (forall ((i Int)) (and (not (exists ((j Int)) (= (select html_escape_table_keys j) (select charlst i)))) (= (select charlst2 i) (select charlst i))))))
(assert (= BAV13 (forall ((i Int)) (= (select html_escape_table_keys j) (select charlst i)))))
(assert (= BAV14 (forall ((i Int)) (= (select charlst2 i) (select charlst i)))))
(check-sat)
(get-model)
(get-value (charlst2))