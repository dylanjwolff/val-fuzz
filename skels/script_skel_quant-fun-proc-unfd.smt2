(set-logic ALL)
(declare-const GEN1 Int)
(declare-const GEN2 Int)
(declare-const GEN3 Int)
(get-model)
(declare-const GEN4 Int)
(get-model)
(declare-const GEN5 Int)
(declare-const GEN6 Int)
(declare-const GEN7 Int)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(define-fun f ((x Int)) Int x)
(declare-fun h (Int) Int)
(assert (forall ((x Int)) (= (h x) GEN1)))
(push 1)
(define-fun-rec g ((x Int)) Int (ite (<= x 0) 0 (+ (g x) x)))
(assert (= BAV8 (forall ((x Int)) (= (h x) GEN1))))
(assert (= BAV9 (= (f GEN2) GEN3)))
(assert (= BAV10 (= (g GEN4) GEN5)))
(assert (= BAV11 (= (h GEN6) GEN7)))
(check-sat)
(get-model)
(pop 1)
(declare-fun g (Int) Int)
(push 1)
(assert (= (f GEN2) GEN3))
(check-sat)
(pop 1)
(push 1)
(assert (= (g GEN4) GEN5))
(check-sat)
(pop 1)
(push 1)
(assert (= (h GEN6) GEN7))
(check-sat)
(pop 1)