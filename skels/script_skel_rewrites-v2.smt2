(set-info :smt-lib-version 2.5)
(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const GEN14 String)
(declare-const GEN13 String)
(declare-const GEN12 String)
(declare-const GEN11 Int)
(declare-const GEN10 String)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 String)
(declare-const GEN6 String)
(declare-const GEN5 String)
(declare-const GEN4 Int)
(declare-const GEN3 String)
(declare-const GEN2 String)
(declare-const GEN1 String)
(declare-fun x () String)
(declare-fun y () String)
(declare-fun z () String)
(assert (or (str.contains GEN1 (str.++ GEN2 (int.to.str (str.len z)) x GEN3 y (int.to.str (+ (str.len z) GEN4)))) (str.contains GEN5 (str.++ (int.to.str (str.len z)) (int.to.str (str.len z)) (int.to.str (str.len z)))) (not (str.contains (str.++ x GEN6 y) (str.++ GEN7 (str.substr y GEN8 GEN9)))) (not (str.contains (str.++ x GEN10 y) (str.++ (str.substr x GEN11 (str.len x)) GEN12))) (str.contains (str.++ x y) (str.++ x GEN13 y)) (str.contains (str.++ x y) (str.++ y x x y GEN14))))
(assert (= BAV1 (or (str.contains GEN1 (str.++ GEN2 (int.to.str (str.len z)) x GEN3 y (int.to.str (+ (str.len z) GEN4)))) (str.contains GEN5 (str.++ (int.to.str (str.len z)) (int.to.str (str.len z)) (int.to.str (str.len z)))) (not (str.contains (str.++ x GEN6 y) (str.++ GEN7 (str.substr y GEN8 GEN9)))) (not (str.contains (str.++ x GEN10 y) (str.++ (str.substr x GEN11 (str.len x)) GEN12))) (str.contains (str.++ x y) (str.++ x GEN13 y)) (str.contains (str.++ x y) (str.++ y x x y GEN14)))))
(check-sat)
(get-model)