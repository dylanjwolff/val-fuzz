(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const GEN9 Real)
(declare-const GEN8 Real)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(set-option :auto-config true)
(set-option :produce-models true)
(declare-const a Int)
(declare-const r1 Int)
(declare-const r2 Int)
(declare-const r3 Int)
(declare-const r4 Int)
(declare-const r5 Int)
(declare-const r6 Int)
(assert (= a GEN1))
(assert (= r1 (div a GEN2)))
(assert (= r2 (mod a GEN3)))
(assert (= r3 (rem a GEN4)))
(assert (= r4 (div a (- GEN5))))
(assert (= r5 (mod a (- GEN6))))
(assert (= r6 (rem a (- GEN7))))
(declare-const b Real)
(declare-const c Real)
(assert (>= b (/ c GEN8)))
(assert (>= c GEN9))
(assert (= BAV1 (= a GEN1)))
(assert (= BAV2 (= r1 (div a GEN2))))
(assert (= BAV3 (= r2 (mod a GEN3))))
(assert (= BAV4 (= r3 (rem a GEN4))))
(assert (= BAV5 (= r4 (div a (- GEN5)))))
(assert (= BAV6 (= r5 (mod a (- GEN6)))))
(assert (= BAV7 (= r6 (rem a (- GEN7)))))
(assert (= BAV8 (>= b (/ c GEN8))))
(assert (= BAV9 (>= c GEN9)))
(check-sat)
(get-model)