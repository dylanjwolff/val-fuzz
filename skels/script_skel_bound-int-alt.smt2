(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const GEN15 Int)
(declare-const GEN14 Int)
(declare-const GEN13 Int)
(declare-const GEN12 Int)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-sort U 0)
(declare-sort V 0)
(declare-fun P (U Int V Int U Int) Bool)
(assert (forall ((x U)(y Int)(z V)(w Int)(v U)(d Int)) (=> (and (<= GEN1 d GEN2) (<= GEN3 y GEN4) (<= GEN5 w (+ GEN6 y))) (P x y z w v d))))
(declare-fun a () U)
(declare-fun b () V)
(assert (not (P a GEN7 b GEN8 a GEN9)))
(assert (not (P a GEN10 b GEN11 a GEN12)))
(assert (not (P a GEN13 b GEN14 a GEN15)))
(assert (= BAV1 (forall ((x U)(y Int)(z V)(w Int)(v U)(d Int)) (=> (and (<= GEN1 d GEN2) (<= GEN3 y GEN4) (<= GEN5 w (+ GEN6 y))) (P x y z w v d)))))
(assert (= BAV2 (forall ((x U)(y Int)(z V)(w Int)(v U)(d Int)) (and (<= GEN1 d GEN2) (<= GEN3 y GEN4) (<= GEN5 w (+ GEN6 y))))))
(assert (= BAV3 (forall ((x U)(y Int)(z V)(w Int)(v U)(d Int)) (<= GEN1 d GEN2))))
(assert (= BAV4 (forall ((x U)(y Int)(z V)(w Int)(v U)(d Int)) (<= GEN3 y GEN4))))
(assert (= BAV5 (forall ((x U)(y Int)(z V)(w Int)(v U)(d Int)) (<= GEN5 w (+ GEN6 y)))))
(check-sat)
(get-model)