(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const GEN12 Int)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-fun i () Int)
(declare-fun j () Int)
(declare-fun k () Int)
(declare-fun l () Int)
(declare-fun m () Int)
(declare-fun n () Int)
(declare-fun a () (Array Int (Array Int Int)))
(declare-fun b () (Array Int (Array Int Int)))
(declare-fun c () (Array Int (Array Int Int)))
(declare-fun d () (Array Int (Array Int Int)))
(declare-fun e () (Array Int (Array Int Int)))
(declare-fun f () (Array Int (Array Int Int)))
(declare-fun g () (Array Int (Array Int Int)))
(declare-fun h () (Array Int (Array Int Int)))
(assert (not (= k GEN1)))
(assert (<= j k))
(assert (>= j k))
(assert (= b (store a j (store (select a j) GEN2 GEN3))))
(assert (= d (store b GEN4 (store (select b GEN5) GEN6 (select (select d GEN7) GEN8)))))
(assert (<= i GEN9))
(assert (>= i (select (store (select d j) m GEN10) GEN11)))
(assert (not (= i GEN12)))
(assert (= BAV1 (= k GEN1)))
(assert (= BAV2 (<= j k)))
(assert (= BAV3 (>= j k)))
(assert (= BAV4 (= b (store a j (store (select a j) GEN2 GEN3)))))
(assert (= BAV5 (= d (store b GEN4 (store (select b GEN5) GEN6 (select (select d GEN7) GEN8))))))
(assert (= BAV6 (<= i GEN9)))
(assert (= BAV7 (>= i (select (store (select d j) m GEN10) GEN11))))
(assert (= BAV8 (= i GEN12)))
(check-sat)
(get-model)
(exit)