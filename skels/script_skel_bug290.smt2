(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(set-info :source | Simple list theorem |)
(set-info :smt-lib-version 2.0)
(set-info :category "crafted")
(declare-sort List 0)
(declare-sort Elem 0)
(declare-fun cons (Elem List) List)
(declare-fun nil () List)
(declare-fun len (List) Int)
(assert (= (len nil) GEN1))
(assert (forall ((?x Elem)(?y List)) (= (len (cons ?x ?y)) (+ (len ?y) GEN2))))
(declare-fun append (List List) List)
(assert (forall ((?y List)) (= (append nil ?y) ?y)))
(assert (forall ((?x Elem)(?y1 List)(?y2 List)) (= (append (cons ?x ?y1) ?y2) (cons ?x (append ?y1 ?y2)))))
(declare-fun x () Elem)
(declare-fun y () List)
(assert (not (= (append (cons x nil) y) (cons x y))))
(assert (= BAV1 (= (len nil) GEN1)))
(assert (= BAV2 (forall ((?x Elem)(?y List)) (= (len (cons ?x ?y)) (+ (len ?y) GEN2)))))
(assert (= BAV3 (forall ((?y List)) (= (append nil ?y) ?y))))
(assert (= BAV4 (forall ((?x Elem)(?y1 List)(?y2 List)) (= (append (cons ?x ?y1) ?y2) (cons ?x (append ?y1 ?y2))))))
(assert (= BAV5 (= (append (cons x nil) y) (cons x y))))
(check-sat)
(get-model)
(exit)