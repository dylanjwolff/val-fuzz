(set-option :incremental false)
(set-info :status unknown)
(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-fun REGFILE_INIT () (Array Int Int))
(declare-fun BDEST_S2E_INIT () Int)
(declare-fun IMEM_INIT () (Array Int Int))
(declare-fun OPCODE_OF (Int) Int)
(assert (= BAV1 (= (select REGFILE_INIT GEN6) (select (ite (= (OPCODE_OF (select IMEM_INIT GEN1)) GEN7) (ite (ite (= GEN4 (select IMEM_INIT GEN1)) false true) (store (ite (ite (= BDEST_S2E_INIT GEN2) false true) (store REGFILE_INIT BDEST_S2E_INIT GEN3) REGFILE_INIT) (select IMEM_INIT GEN1) GEN5) (ite (ite (= BDEST_S2E_INIT GEN2) false true) (store REGFILE_INIT BDEST_S2E_INIT GEN3) REGFILE_INIT)) (ite (= GEN8 (OPCODE_OF (select IMEM_INIT GEN1))) (ite (ite (= BDEST_S2E_INIT GEN2) false true) (store REGFILE_INIT BDEST_S2E_INIT GEN3) REGFILE_INIT) (ite (= GEN9 (OPCODE_OF (select IMEM_INIT GEN1))) (ite (ite (= GEN4 (select IMEM_INIT GEN1)) false true) (store (ite (ite (= BDEST_S2E_INIT GEN2) false true) (store REGFILE_INIT BDEST_S2E_INIT GEN3) REGFILE_INIT) (select IMEM_INIT GEN1) GEN5) (ite (ite (= BDEST_S2E_INIT GEN2) false true) (store REGFILE_INIT BDEST_S2E_INIT GEN3) REGFILE_INIT)) (ite (ite (= BDEST_S2E_INIT GEN2) false true) (store REGFILE_INIT BDEST_S2E_INIT GEN3) REGFILE_INIT)))) GEN10))))
(assert (= BAV2 (= (OPCODE_OF (select IMEM_INIT GEN1)) GEN7)))
(assert (= BAV3 (= GEN4 (select IMEM_INIT GEN1))))
(assert (= BAV4 (= BDEST_S2E_INIT GEN2)))
(assert (= BAV5 (= BDEST_S2E_INIT GEN2)))
(assert (= BAV6 (= GEN8 (OPCODE_OF (select IMEM_INIT GEN1)))))
(assert (= BAV7 (= BDEST_S2E_INIT GEN2)))
(assert (= BAV8 (= GEN9 (OPCODE_OF (select IMEM_INIT GEN1)))))
(assert (= BAV9 (= GEN4 (select IMEM_INIT GEN1))))
(assert (= BAV10 (= BDEST_S2E_INIT GEN2)))
(assert (= BAV11 (= BDEST_S2E_INIT GEN2)))
(assert (= BAV12 (= BDEST_S2E_INIT GEN2)))
(check-sat-assuming ((not (= (select REGFILE_INIT GEN6) (select (ite (= (OPCODE_OF (select IMEM_INIT GEN1)) GEN7) (ite (ite (= GEN4 (select IMEM_INIT GEN1)) false true) (store (ite (ite (= BDEST_S2E_INIT GEN2) false true) (store REGFILE_INIT BDEST_S2E_INIT GEN3) REGFILE_INIT) (select IMEM_INIT GEN1) GEN5) (ite (ite (= BDEST_S2E_INIT GEN2) false true) (store REGFILE_INIT BDEST_S2E_INIT GEN3) REGFILE_INIT)) (ite (= GEN8 (OPCODE_OF (select IMEM_INIT GEN1))) (ite (ite (= BDEST_S2E_INIT GEN2) false true) (store REGFILE_INIT BDEST_S2E_INIT GEN3) REGFILE_INIT) (ite (= GEN9 (OPCODE_OF (select IMEM_INIT GEN1))) (ite (ite (= GEN4 (select IMEM_INIT GEN1)) false true) (store (ite (ite (= BDEST_S2E_INIT GEN2) false true) (store REGFILE_INIT BDEST_S2E_INIT GEN3) REGFILE_INIT) (select IMEM_INIT GEN1) GEN5) (ite (ite (= BDEST_S2E_INIT GEN2) false true) (store REGFILE_INIT BDEST_S2E_INIT GEN3) REGFILE_INIT)) (ite (ite (= BDEST_S2E_INIT GEN2) false true) (store REGFILE_INIT BDEST_S2E_INIT GEN3) REGFILE_INIT)))) GEN10)))))
(get-model)