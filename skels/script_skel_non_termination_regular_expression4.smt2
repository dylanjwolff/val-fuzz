(set-info :smt-lib-version 2.5)
(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const GEN8 String)
(declare-const GEN7 String)
(declare-const GEN6 String)
(declare-const GEN5 String)
(declare-const GEN4 String)
(declare-const GEN3 String)
(declare-const GEN2 String)
(declare-const GEN1 String)
(set-option :strings-exp true)
(set-option :re-elim true)
(declare-const actionName String)
(declare-const actionNamespace String)
(declare-const p0.0.action Bool)
(assert (= p0.0.action (and (= actionNamespace GEN1) (str.in.re actionName (re.++ (str.to.re GEN2) (re.* re.allchar) (re.++ (str.to.re GEN3) re.allchar (str.to.re GEN4)))))))
(declare-const p0.denies Bool)
(assert (not p0.denies))
(declare-const p0.allows Bool)
(assert (= p0.allows (and (not p0.denies) p0.0.action)))
(declare-const p0.neutral Bool)
(assert (= p0.neutral (and (not p0.allows) (not p0.denies))))
(declare-const p1.0.action Bool)
(assert (= p1.0.action (and (= actionNamespace GEN5) (str.in.re actionName (re.++ (re.++ (str.to.re GEN6) re.allchar (str.to.re GEN7)) (re.* re.allchar) (str.to.re GEN8))))))
(declare-const p1.denies Bool)
(assert (not p1.denies))
(declare-const p1.allows Bool)
(assert (= p1.allows (and (not p1.denies) p1.0.action)))
(declare-const p1.neutral Bool)
(assert (= p1.neutral (and (not p1.allows) (not p1.denies))))
(assert p0.allows)
(assert (or p1.denies p1.neutral))
(assert (= BAV1 (= p0.0.action (and (= actionNamespace GEN1) (str.in.re actionName (re.++ (str.to.re GEN2) (re.* re.allchar) (re.++ (str.to.re GEN3) re.allchar (str.to.re GEN4))))))))
(assert (= BAV2 (and (= actionNamespace GEN1) (str.in.re actionName (re.++ (str.to.re GEN2) (re.* re.allchar) (re.++ (str.to.re GEN3) re.allchar (str.to.re GEN4)))))))
(assert (= BAV3 (= actionNamespace GEN1)))
(assert (= BAV4 (= p0.allows (and (not p0.denies) p0.0.action))))
(assert (= BAV5 (and (not p0.denies) p0.0.action)))
(assert (= BAV6 (= p0.neutral (and (not p0.allows) (not p0.denies)))))
(assert (= BAV7 (and (not p0.allows) (not p0.denies))))
(assert (= BAV8 (= p1.0.action (and (= actionNamespace GEN5) (str.in.re actionName (re.++ (re.++ (str.to.re GEN6) re.allchar (str.to.re GEN7)) (re.* re.allchar) (str.to.re GEN8)))))))
(assert (= BAV9 (and (= actionNamespace GEN5) (str.in.re actionName (re.++ (re.++ (str.to.re GEN6) re.allchar (str.to.re GEN7)) (re.* re.allchar) (str.to.re GEN8))))))
(assert (= BAV10 (= actionNamespace GEN5)))
(assert (= BAV11 (= p1.allows (and (not p1.denies) p1.0.action))))
(assert (= BAV12 (and (not p1.denies) p1.0.action)))
(assert (= BAV13 (= p1.neutral (and (not p1.allows) (not p1.denies)))))
(assert (= BAV14 (and (not p1.allows) (not p1.denies))))
(assert (= BAV15 (or p1.denies p1.neutral)))
(check-sat)
(get-model)