(set-option :incremental false)
(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const GEN19 Int)
(declare-const GEN18 Int)
(declare-const GEN17 Int)
(declare-const GEN16 Int)
(declare-const GEN15 Int)
(declare-const GEN14 Int)
(declare-const GEN13 Int)
(declare-const GEN12 Int)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-fun s_count (Int) Int)
(declare-fun fmt1 () Int)
(declare-fun fmt_length () Int)
(assert (= BAV1 (and (and (= GEN1 (s_count GEN2)) (and (= GEN3 (s_count GEN4)) (and (= GEN5 (s_count GEN6)) (and (= GEN7 (s_count GEN8)) (and (and (= GEN9 (s_count GEN10)) (= GEN11 (s_count GEN12))) (= GEN13 (s_count GEN14))))))) (and (= GEN15 fmt_length) (and (and (> fmt1 GEN16) (< fmt1 fmt_length)) (= GEN17 (+ GEN18 (s_count (- fmt1 GEN19)))))))))
(assert (= BAV2 (and (= GEN1 (s_count GEN2)) (and (= GEN3 (s_count GEN4)) (and (= GEN5 (s_count GEN6)) (and (= GEN7 (s_count GEN8)) (and (and (= GEN9 (s_count GEN10)) (= GEN11 (s_count GEN12))) (= GEN13 (s_count GEN14)))))))))
(assert (= BAV3 (= GEN1 (s_count GEN2))))
(assert (= BAV4 (and (= GEN3 (s_count GEN4)) (and (= GEN5 (s_count GEN6)) (and (= GEN7 (s_count GEN8)) (and (and (= GEN9 (s_count GEN10)) (= GEN11 (s_count GEN12))) (= GEN13 (s_count GEN14))))))))
(assert (= BAV5 (= GEN3 (s_count GEN4))))
(assert (= BAV6 (and (= GEN5 (s_count GEN6)) (and (= GEN7 (s_count GEN8)) (and (and (= GEN9 (s_count GEN10)) (= GEN11 (s_count GEN12))) (= GEN13 (s_count GEN14)))))))
(assert (= BAV7 (= GEN5 (s_count GEN6))))
(assert (= BAV8 (and (= GEN7 (s_count GEN8)) (and (and (= GEN9 (s_count GEN10)) (= GEN11 (s_count GEN12))) (= GEN13 (s_count GEN14))))))
(assert (= BAV9 (= GEN7 (s_count GEN8))))
(assert (= BAV10 (and (and (= GEN9 (s_count GEN10)) (= GEN11 (s_count GEN12))) (= GEN13 (s_count GEN14)))))
(assert (= BAV11 (and (= GEN9 (s_count GEN10)) (= GEN11 (s_count GEN12)))))
(assert (= BAV12 (= GEN9 (s_count GEN10))))
(assert (= BAV13 (= GEN11 (s_count GEN12))))
(assert (= BAV14 (= GEN13 (s_count GEN14))))
(assert (= BAV15 (and (= GEN15 fmt_length) (and (and (> fmt1 GEN16) (< fmt1 fmt_length)) (= GEN17 (+ GEN18 (s_count (- fmt1 GEN19))))))))
(assert (= BAV16 (= GEN15 fmt_length)))
(assert (= BAV17 (and (and (> fmt1 GEN16) (< fmt1 fmt_length)) (= GEN17 (+ GEN18 (s_count (- fmt1 GEN19)))))))
(assert (= BAV18 (and (> fmt1 GEN16) (< fmt1 fmt_length))))
(assert (= BAV19 (> fmt1 GEN16)))
(assert (= BAV20 (< fmt1 fmt_length)))
(assert (= BAV21 (= GEN17 (+ GEN18 (s_count (- fmt1 GEN19))))))
(check-sat-assuming ((and (and (= GEN1 (s_count GEN2)) (and (= GEN3 (s_count GEN4)) (and (= GEN5 (s_count GEN6)) (and (= GEN7 (s_count GEN8)) (and (and (= GEN9 (s_count GEN10)) (= GEN11 (s_count GEN12))) (= GEN13 (s_count GEN14))))))) (and (= GEN15 fmt_length) (and (and (> fmt1 GEN16) (< fmt1 fmt_length)) (= GEN17 (+ GEN18 (s_count (- fmt1 GEN19)))))))))
(get-model)