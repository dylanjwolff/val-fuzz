(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(set-option :auto-config true)
(set-option :produce-models true)
(set-option :smt.mbqi true)
(declare-fun f (Int) Int)
(declare-fun p (Int) Bool)
(declare-fun p2 (Int) Bool)
(declare-const a Int)
(declare-const b Int)
(declare-const c Int)
(assert (forall ((x Int)) (=> (not (p x)) (= (f x) (+ x GEN1)))))
(assert (forall ((x Int)) (=> (and (p x) (not (p2 x))) (= (f x) x))))
(assert (forall ((x Int)) (=> (p2 x) (= (f x) (- x GEN2)))))
(assert (p b))
(assert (p c))
(assert (p2 a))
(assert (> (f a) b))
(assert (= BAV1 (forall ((x Int)) (=> (not (p x)) (= (f x) (+ x GEN1))))))
(assert (= BAV2 (forall ((x Int)) (= (f x) (+ x GEN1)))))
(assert (= BAV3 (forall ((x Int)) (=> (and (p x) (not (p2 x))) (= (f x) x)))))
(assert (= BAV4 (forall ((x Int)) (and (p x) (not (p2 x))))))
(assert (= BAV5 (forall ((x Int)) (= (f x) x))))
(assert (= BAV6 (forall ((x Int)) (=> (p2 x) (= (f x) (- x GEN2))))))
(assert (= BAV7 (forall ((x Int)) (= (f x) (- x GEN2)))))
(assert (= BAV8 (> (f a) b)))
(check-sat)
(get-model)