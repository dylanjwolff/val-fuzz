(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const GEN17 String)
(declare-const GEN16 Int)
(declare-const GEN15 String)
(declare-const GEN14 String)
(declare-const GEN13 String)
(declare-const GEN12 String)
(declare-const GEN11 String)
(declare-const GEN10 String)
(declare-const GEN9 String)
(declare-const GEN8 String)
(declare-const GEN7 String)
(declare-const GEN6 String)
(declare-const GEN5 String)
(declare-const GEN4 String)
(declare-const GEN3 String)
(declare-const GEN2 String)
(declare-const GEN1 String)
(set-option :strings-exp true)
(declare-fun a () String)
(declare-fun b () String)
(declare-fun d () String)
(declare-fun e () String)
(declare-fun f () Int)
(declare-fun g () String)
(declare-fun h () String)
(assert (or (not (= (str.replace GEN1 (str.at GEN2 f) GEN3) GEN4)) (not (= (str.replace GEN5 (str.replace GEN6 g GEN7) GEN8) (str.at (str.replace (str.replace a d GEN9) GEN10 GEN11) (str.indexof GEN12 (str.replace (str.replace a d GEN13) GEN14 GEN15) GEN16))))))
(assert (= a (str.++ (str.++ d GEN17) g)))
(assert (= b (str.++ e g)))
(assert (= BAV1 (or (not (= (str.replace GEN1 (str.at GEN2 f) GEN3) GEN4)) (not (= (str.replace GEN5 (str.replace GEN6 g GEN7) GEN8) (str.at (str.replace (str.replace a d GEN9) GEN10 GEN11) (str.indexof GEN12 (str.replace (str.replace a d GEN13) GEN14 GEN15) GEN16)))))))
(assert (= BAV2 (= (str.replace GEN1 (str.at GEN2 f) GEN3) GEN4)))
(assert (= BAV3 (= (str.replace GEN5 (str.replace GEN6 g GEN7) GEN8) (str.at (str.replace (str.replace a d GEN9) GEN10 GEN11) (str.indexof GEN12 (str.replace (str.replace a d GEN13) GEN14 GEN15) GEN16)))))
(assert (= BAV4 (= a (str.++ (str.++ d GEN17) g))))
(assert (= BAV5 (= b (str.++ e g))))
(check-sat)
(get-model)