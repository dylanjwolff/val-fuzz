(set-option :incremental false)
(set-info :category "crafted")
(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-sort U 0)
(declare-fun x () U)
(declare-fun y () U)
(declare-fun z () U)
(declare-fun f (U) U)
(declare-fun g (U) U)
(declare-fun H (U U) U)
(declare-fun J (U U) U)
(assert (= BAV1 (and (not (= x y)) (= (f x) (f z)) (= (g y) (g z)) (= (g y) (g z)) (= (g y) y) (= (f x) x) (= (f z) z) (= (g z) z) (or (not (= x z)) (not (= y z))))))
(assert (= BAV2 (= x y)))
(assert (= BAV3 (= (f x) (f z))))
(assert (= BAV4 (= (g y) (g z))))
(assert (= BAV5 (= (g y) (g z))))
(assert (= BAV6 (= (g y) y)))
(assert (= BAV7 (= (f x) x)))
(assert (= BAV8 (= (f z) z)))
(assert (= BAV9 (= (g z) z)))
(assert (= BAV10 (or (not (= x z)) (not (= y z)))))
(assert (= BAV11 (= x z)))
(assert (= BAV12 (= y z)))
(check-sat-assuming ((and (not (= x y)) (= (f x) (f z)) (= (g y) (g z)) (= (g y) (g z)) (= (g y) y) (= (f x) x) (= (f z) z) (= (g z) z) (or (not (= x z)) (not (= y z))))))
(get-model)