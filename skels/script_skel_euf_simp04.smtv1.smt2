(set-option :incremental false)
(set-info :category "crafted")
(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-sort U 0)
(declare-fun x () U)
(declare-fun y () U)
(declare-fun z () U)
(declare-fun f (U) U)
(declare-fun g (U) U)
(declare-fun H (U U) U)
(declare-fun J (U U) U)
(assert (= BAV1 (and (= (H x y) (H y x)) (or (= x (J z y)) (= y (J z y))) (= (J z y) (f x)) (or (= x (f x)) (not (= y (f x)))) (or (not (= x (f x))) (not (= (H x (f x)) (H (f x) x)))))))
(assert (= BAV2 (= (H x y) (H y x))))
(assert (= BAV3 (or (= x (J z y)) (= y (J z y)))))
(assert (= BAV4 (= x (J z y))))
(assert (= BAV5 (= y (J z y))))
(assert (= BAV6 (= (J z y) (f x))))
(assert (= BAV7 (or (= x (f x)) (not (= y (f x))))))
(assert (= BAV8 (= x (f x))))
(assert (= BAV9 (= y (f x))))
(assert (= BAV10 (or (not (= x (f x))) (not (= (H x (f x)) (H (f x) x))))))
(assert (= BAV11 (= x (f x))))
(assert (= BAV12 (= (H x (f x)) (H (f x) x))))
(check-sat-assuming ((and (= (H x y) (H y x)) (or (= x (J z y)) (= y (J z y))) (= (J z y) (f x)) (or (= x (f x)) (not (= y (f x)))) (or (not (= x (f x))) (not (= (H x (f x)) (H (f x) x)))))))
(get-model)