(set-option :incremental false)
(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const GEN35 Int)
(declare-const GEN34 Int)
(declare-const GEN33 Int)
(declare-const GEN32 Int)
(declare-const GEN31 Int)
(declare-const GEN30 Int)
(declare-const GEN29 Int)
(declare-const GEN28 Int)
(declare-const GEN27 Int)
(declare-const GEN26 Int)
(declare-const GEN25 Int)
(declare-const GEN24 Int)
(declare-const GEN23 Int)
(declare-const GEN22 Int)
(declare-const GEN21 Int)
(declare-const GEN20 Int)
(declare-const GEN19 Int)
(declare-const GEN18 Int)
(declare-const GEN17 Int)
(declare-const GEN16 Int)
(declare-const GEN15 Int)
(declare-const GEN14 Int)
(declare-const GEN13 Int)
(declare-const GEN12 Int)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-fun format (Int) Int)
(declare-fun arg1 () Int)
(declare-fun fmt1 () Int)
(declare-fun s_count (Int) Int)
(declare-fun fmt0 () Int)
(declare-fun x_count (Int) Int)
(assert (= BAV1 (and true (>= (+ (* (- GEN1) fmt1) fmt0) (- GEN8)) (>= (+ (x_count GEN9) (* (- GEN2) (x_count GEN3))) GEN10) (>= fmt1 GEN11) (<= arg1 GEN12) (not (= GEN13 (+ (s_count (+ fmt1 (- GEN4) (* (- GEN5) fmt0))) (* (- GEN14) (s_count GEN15))))) (<= (+ (* (- GEN1) fmt1) fmt0) (- GEN16)) (or false false (<= (+ arg1 (* (- GEN17) fmt0)) GEN18) (<= (+ (* (- GEN1) fmt1) arg1) GEN19)) (>= (x_count GEN6) GEN7) (<= (format GEN20) GEN21) (or false false false false false (>= (x_count GEN6) GEN7) (= GEN22 (+ (* (- GEN2) (x_count GEN3)) (x_count (+ fmt1 (- GEN4) (* (- GEN5) fmt0))))) (= GEN23 (+ (s_count (+ fmt1 (- GEN4) (* (- GEN5) fmt0))) (* (- GEN24) (s_count GEN25))))) (>= (format (+ GEN26 fmt1)) GEN27) (>= (format GEN28) GEN29) (<= (format GEN30) GEN31) (>= (format fmt1) GEN32) (>= (format GEN33) GEN34) (= GEN35 (format arg1)))))
(assert (= BAV2 (>= (+ (* (- GEN1) fmt1) fmt0) (- GEN8))))
(assert (= BAV3 (>= (+ (x_count GEN9) (* (- GEN2) (x_count GEN3))) GEN10)))
(assert (= BAV4 (>= fmt1 GEN11)))
(assert (= BAV5 (<= arg1 GEN12)))
(assert (= BAV6 (= GEN13 (+ (s_count (+ fmt1 (- GEN4) (* (- GEN5) fmt0))) (* (- GEN14) (s_count GEN15))))))
(assert (= BAV7 (<= (+ (* (- GEN1) fmt1) fmt0) (- GEN16))))
(assert (= BAV8 (or false false (<= (+ arg1 (* (- GEN17) fmt0)) GEN18) (<= (+ (* (- GEN1) fmt1) arg1) GEN19))))
(assert (= BAV9 (<= (+ arg1 (* (- GEN17) fmt0)) GEN18)))
(assert (= BAV10 (<= (+ (* (- GEN1) fmt1) arg1) GEN19)))
(assert (= BAV11 (>= (x_count GEN6) GEN7)))
(assert (= BAV12 (<= (format GEN20) GEN21)))
(assert (= BAV13 (or false false false false false (>= (x_count GEN6) GEN7) (= GEN22 (+ (* (- GEN2) (x_count GEN3)) (x_count (+ fmt1 (- GEN4) (* (- GEN5) fmt0))))) (= GEN23 (+ (s_count (+ fmt1 (- GEN4) (* (- GEN5) fmt0))) (* (- GEN24) (s_count GEN25)))))))
(assert (= BAV14 (>= (x_count GEN6) GEN7)))
(assert (= BAV15 (= GEN22 (+ (* (- GEN2) (x_count GEN3)) (x_count (+ fmt1 (- GEN4) (* (- GEN5) fmt0)))))))
(assert (= BAV16 (= GEN23 (+ (s_count (+ fmt1 (- GEN4) (* (- GEN5) fmt0))) (* (- GEN24) (s_count GEN25))))))
(assert (= BAV17 (>= (format (+ GEN26 fmt1)) GEN27)))
(assert (= BAV18 (>= (format GEN28) GEN29)))
(assert (= BAV19 (<= (format GEN30) GEN31)))
(assert (= BAV20 (>= (format fmt1) GEN32)))
(assert (= BAV21 (>= (format GEN33) GEN34)))
(assert (= BAV22 (= GEN35 (format arg1))))
(check-sat-assuming ((and true (>= (+ (* (- GEN1) fmt1) fmt0) (- GEN8)) (>= (+ (x_count GEN9) (* (- GEN2) (x_count GEN3))) GEN10) (>= fmt1 GEN11) (<= arg1 GEN12) (not (= GEN13 (+ (s_count (+ fmt1 (- GEN4) (* (- GEN5) fmt0))) (* (- GEN14) (s_count GEN15))))) (<= (+ (* (- GEN1) fmt1) fmt0) (- GEN16)) (or false false (<= (+ arg1 (* (- GEN17) fmt0)) GEN18) (<= (+ (* (- GEN1) fmt1) arg1) GEN19)) (>= (x_count GEN6) GEN7) (<= (format GEN20) GEN21) (or false false false false false (>= (x_count GEN6) GEN7) (= GEN22 (+ (* (- GEN2) (x_count GEN3)) (x_count (+ fmt1 (- GEN4) (* (- GEN5) fmt0))))) (= GEN23 (+ (s_count (+ fmt1 (- GEN4) (* (- GEN5) fmt0))) (* (- GEN24) (s_count GEN25))))) (>= (format (+ GEN26 fmt1)) GEN27) (>= (format GEN28) GEN29) (<= (format GEN30) GEN31) (>= (format fmt1) GEN32) (>= (format GEN33) GEN34) (= GEN35 (format arg1)))))
(get-model)