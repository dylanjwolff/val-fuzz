(set-option :produce-models true)
(declare-const GEN1 Int)
(declare-const GEN2 Int)
(declare-const GEN3 Int)
(declare-const GEN4 Int)
(declare-const GEN5 Int)
(declare-const GEN6 Int)
(declare-const GEN7 Int)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const BAV23 Bool)
(declare-const BAV24 Bool)
(declare-const BAV25 Bool)
(declare-const BAV26 Bool)
(declare-const BAV27 Bool)
(declare-const a (Array Int Int))
(declare-const b (Array Int Int))
(declare-const c (Array Int Int))
(declare-const lena Int)
(declare-const lenb Int)
(declare-const lenc Int)
(assert (<= GEN1 lena))
(assert (<= GEN2 lenb))
(assert (< GEN3 lenc))
(assert (= lenc (+ lena lenb)))
(assert (= GEN4 (select c GEN5)))
(assert (forall ((x Int)) (! (=> (and (> x GEN6) (<= x lenb)) (= (select c x) (select b x))) :pattern ((select c x)) :pattern ((select b x)))))
(assert (forall ((x Int)) (! (=> (and (>= x GEN7) (< x lenb)) (= (select c x) (select b x))) :pattern ((select c x)) :pattern ((select b x)))))
(assert (forall ((x Int)) (! (=> (and (>= x lenb) (< x (+ lena lenb))) (= (select c x) (select a (- x lenb)))) :pattern ((select c x)))))
(assert (= BAV8 (<= GEN1 lena)))
(assert (= BAV9 (<= GEN2 lenb)))
(assert (= BAV10 (< GEN3 lenc)))
(assert (= BAV11 (= lenc (+ lena lenb))))
(assert (= BAV12 (= GEN4 (select c GEN5))))
(assert (= BAV13 (forall ((x Int)) (=> (and (> x GEN6) (<= x lenb)) (= (select c x) (select b x))))))
(assert (= BAV14 (forall ((x Int)) (and (> x GEN6) (<= x lenb)))))
(assert (= BAV15 (forall ((x Int)) (> x GEN6))))
(assert (= BAV16 (forall ((x Int)) (<= x lenb))))
(assert (= BAV17 (forall ((x Int)) (= (select c x) (select b x)))))
(assert (= BAV18 (forall ((x Int)) (=> (and (>= x GEN7) (< x lenb)) (= (select c x) (select b x))))))
(assert (= BAV19 (forall ((x Int)) (and (>= x GEN7) (< x lenb)))))
(assert (= BAV20 (forall ((x Int)) (>= x GEN7))))
(assert (= BAV21 (forall ((x Int)) (< x lenb))))
(assert (= BAV22 (forall ((x Int)) (= (select c x) (select b x)))))
(assert (= BAV23 (forall ((x Int)) (=> (and (>= x lenb) (< x (+ lena lenb))) (= (select c x) (select a (- x lenb)))))))
(assert (= BAV24 (forall ((x Int)) (and (>= x lenb) (< x (+ lena lenb))))))
(assert (= BAV25 (forall ((x Int)) (>= x lenb))))
(assert (= BAV26 (forall ((x Int)) (< x (+ lena lenb)))))
(assert (= BAV27 (forall ((x Int)) (= (select c x) (select a (- x lenb))))))
(check-sat)