(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(define-sort Elt () Int)
(define-sort mySet () (Set Elt ))
(define-fun smt_set_emp () mySet (as emptyset mySet))
(define-fun smt_set_mem ((x Elt) (s mySet)) Bool (member x s))
(define-fun smt_set_add ((s mySet) (x Elt)) mySet (union s (singleton x)))
(define-fun smt_set_cup ((s1 mySet) (s2 mySet)) mySet (union s1 s2))
(define-fun smt_set_cap ((s1 mySet) (s2 mySet)) mySet (intersection s1 s2))
(define-fun smt_set_dif ((s1 mySet) (s2 mySet)) mySet (setminus s1 s2))
(define-fun smt_set_sub ((s1 mySet) (s2 mySet)) Bool (subset s1 s2))
(declare-fun z3v56 () Int)
(declare-fun z3v57 () Int)
(assert (distinct z3v56 z3v57))
(declare-fun z3v58 () Int)
(declare-fun z3f59 (Int) Int)
(declare-fun z3v60 () Int)
(declare-fun z3f61 (Int) Bool)
(declare-fun z3v62 () Int)
(declare-fun z3v63 () Int)
(declare-fun z3v64 () Int)
(declare-fun z3v65 () Int)
(declare-fun z3f66 (Int) mySet)
(declare-fun z3f67 (Int) Bool)
(declare-fun z3f68 (Int Int) Int)
(declare-fun z3v69 () Int)
(declare-fun z3v70 () Int)
(declare-fun z3f71 (Int) Int)
(declare-fun z3v72 () Int)
(declare-fun z3v73 () Int)
(declare-fun z3v74 () Int)
(declare-fun z3v75 () Int)
(declare-fun z3v76 () Int)
(declare-fun z3v77 () Int)
(declare-fun z3v78 () Int)
(declare-fun z3v80 () Int)
(declare-fun z3v81 () Int)
(declare-fun z3f82 () Int)
(declare-fun z3v83 () Int)
(declare-fun z3v84 () Int)
(declare-fun z3v85 () Int)
(declare-fun z3v86 () Int)
(declare-fun z3v87 () Int)
(declare-fun z3v88 () Int)
(declare-fun z3v89 () Int)
(declare-fun z3v90 () Int)
(assert (= z3v90 z3v56))
(assert (z3f61 z3v90))
(assert (and (>= (z3f59 z3v58) GEN1) (z3f61 z3v60) (z3f61 z3v60) (= z3v60 z3v62) (= (z3f61 z3v60) (= z3v64 z3v63)) (= (z3f61 z3v62) (= z3v64 z3v63)) (>= (z3f59 z3v65) GEN2) (= (z3f66 z3v65) (smt_set_cup (smt_set_add smt_set_emp z3v64) (z3f66 z3v58))) (= (z3f59 z3v65) (+ GEN3 (z3f59 z3v58))) (= (z3f67 z3v65) false) (= z3v65 (z3f68 z3v64 z3v58)) (>= (z3f59 z3v65) GEN4) (= z3v65 z3v69) (>= (z3f59 z3v65) GEN5) (>= (z3f59 z3v69) GEN6) (z3f61 z3v56) (= (z3f71 z3v70) z3v70) (= (z3f71 z3v72) z3v72) (not (z3f61 z3v57)) (= (z3f71 z3v73) z3v73)))
(assert (not (= (z3f61 z3v90) (smt_set_mem z3v63 (z3f66 z3v69)))))
(assert (= BAV1 (distinct z3v56 z3v57)))
(assert (= BAV2 (= z3v90 z3v56)))
(assert (= BAV3 (and (>= (z3f59 z3v58) GEN1) (z3f61 z3v60) (z3f61 z3v60) (= z3v60 z3v62) (= (z3f61 z3v60) (= z3v64 z3v63)) (= (z3f61 z3v62) (= z3v64 z3v63)) (>= (z3f59 z3v65) GEN2) (= (z3f66 z3v65) (smt_set_cup (smt_set_add smt_set_emp z3v64) (z3f66 z3v58))) (= (z3f59 z3v65) (+ GEN3 (z3f59 z3v58))) (= (z3f67 z3v65) false) (= z3v65 (z3f68 z3v64 z3v58)) (>= (z3f59 z3v65) GEN4) (= z3v65 z3v69) (>= (z3f59 z3v65) GEN5) (>= (z3f59 z3v69) GEN6) (z3f61 z3v56) (= (z3f71 z3v70) z3v70) (= (z3f71 z3v72) z3v72) (not (z3f61 z3v57)) (= (z3f71 z3v73) z3v73))))
(assert (= BAV4 (>= (z3f59 z3v58) GEN1)))
(assert (= BAV5 (= z3v60 z3v62)))
(assert (= BAV6 (= (z3f61 z3v60) (= z3v64 z3v63))))
(assert (= BAV7 (= z3v64 z3v63)))
(assert (= BAV8 (= (z3f61 z3v62) (= z3v64 z3v63))))
(assert (= BAV9 (= z3v64 z3v63)))
(assert (= BAV10 (>= (z3f59 z3v65) GEN2)))
(assert (= BAV11 (= (z3f66 z3v65) (smt_set_cup (smt_set_add smt_set_emp z3v64) (z3f66 z3v58)))))
(assert (= BAV12 (= (z3f59 z3v65) (+ GEN3 (z3f59 z3v58)))))
(assert (= BAV13 (= (z3f67 z3v65) false)))
(assert (= BAV14 (= z3v65 (z3f68 z3v64 z3v58))))
(assert (= BAV15 (>= (z3f59 z3v65) GEN4)))
(assert (= BAV16 (= z3v65 z3v69)))
(assert (= BAV17 (>= (z3f59 z3v65) GEN5)))
(assert (= BAV18 (>= (z3f59 z3v69) GEN6)))
(assert (= BAV19 (= (z3f71 z3v70) z3v70)))
(assert (= BAV20 (= (z3f71 z3v72) z3v72)))
(assert (= BAV21 (= (z3f71 z3v73) z3v73)))
(assert (= BAV22 (= (z3f61 z3v90) (smt_set_mem z3v63 (z3f66 z3v69)))))
(check-sat)
(get-model)