(set-info :smt-lib-version 2.6)
(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-fun x () (_ BitVec 32))
(assert (forall ((u (_ BitVec 32))(w (_ BitVec 32))(z (_ BitVec 32))(m (_ BitVec 32))(n (_ BitVec 32))) (or (not (= (bvadd (bvmul (_ bv2 32) w) (bvmul (_ bv2 32) n)) (bvadd (bvneg (bvadd (bvmul (_ bv2 32) u) (bvmul (_ bv2 32) z) (bvmul (_ bv2 32) m) x)) (_ bv1 32)))))))
(assert (not (and (forall ((m (_ BitVec 32))(n (_ BitVec 32))) (not (= (bvadd (bvneg (bvadd m x)) (_ bv1 32)) (bvmul (_ bv2 32) n)))))))
(assert (= BAV1 (forall ((u (_ BitVec 32))(w (_ BitVec 32))(z (_ BitVec 32))(m (_ BitVec 32))(n (_ BitVec 32))) (or (not (= (bvadd (bvmul (_ bv2 32) w) (bvmul (_ bv2 32) n)) (bvadd (bvneg (bvadd (bvmul (_ bv2 32) u) (bvmul (_ bv2 32) z) (bvmul (_ bv2 32) m) x)) (_ bv1 32))))))))
(assert (= BAV2 (forall ((u (_ BitVec 32))(w (_ BitVec 32))(z (_ BitVec 32))(m (_ BitVec 32))(n (_ BitVec 32))) (= (bvadd (bvmul (_ bv2 32) w) (bvmul (_ bv2 32) n)) (bvadd (bvneg (bvadd (bvmul (_ bv2 32) u) (bvmul (_ bv2 32) z) (bvmul (_ bv2 32) m) x)) (_ bv1 32))))))
(assert (= BAV3 (and (forall ((m (_ BitVec 32))(n (_ BitVec 32))) (not (= (bvadd (bvneg (bvadd m x)) (_ bv1 32)) (bvmul (_ bv2 32) n)))))))
(assert (= BAV4 (forall ((m (_ BitVec 32))(n (_ BitVec 32))) (= (bvadd (bvneg (bvadd m x)) (_ bv1 32)) (bvmul (_ bv2 32) n)))))
(check-sat)
(get-model)
(exit)