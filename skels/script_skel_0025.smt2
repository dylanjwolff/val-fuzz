(set-option :produce-assignments true)
(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-fun I () Int)
(declare-fun B0 () Bool)
(declare-fun B1 () Bool)
(assert (and (=> (= I GEN1) (= B0 true)) (=> (not (distinct I GEN2 GEN3)) (= B1 false)) (=> (not (distinct I GEN4 GEN5)) (= B1 false)) (=> (not (distinct I GEN6 GEN7)) (= B1 false))))
(assert (= BAV1 (and (=> (= I GEN1) (= B0 true)) (=> (not (distinct I GEN2 GEN3)) (= B1 false)) (=> (not (distinct I GEN4 GEN5)) (= B1 false)) (=> (not (distinct I GEN6 GEN7)) (= B1 false)))))
(assert (= BAV2 (=> (= I GEN1) (= B0 true))))
(assert (= BAV3 (= I GEN1)))
(assert (= BAV4 (= B0 true)))
(assert (= BAV5 (=> (not (distinct I GEN2 GEN3)) (= B1 false))))
(assert (= BAV6 (distinct I GEN2 GEN3)))
(assert (= BAV7 (= B1 false)))
(assert (= BAV8 (=> (not (distinct I GEN4 GEN5)) (= B1 false))))
(assert (= BAV9 (distinct I GEN4 GEN5)))
(assert (= BAV10 (= B1 false)))
(assert (= BAV11 (=> (not (distinct I GEN6 GEN7)) (= B1 false))))
(assert (= BAV12 (distinct I GEN6 GEN7)))
(assert (= BAV13 (= B1 false)))
(check-sat)
(get-model)
(exit)