(set-option :incremental false)
(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const GEN10 Real)
(declare-const GEN9 Real)
(declare-const GEN8 Real)
(declare-const GEN7 Real)
(declare-const GEN6 Real)
(declare-const GEN5 Real)
(declare-const GEN4 Real)
(declare-const GEN3 Real)
(declare-const GEN2 Real)
(declare-const GEN1 Real)
(declare-fun x_62 () Real)
(declare-fun x_63 () Real)
(declare-fun x_65 () Real)
(declare-fun x_22 () Real)
(declare-fun x_21 () Real)
(declare-fun x_53 () Real)
(declare-fun x_54 () Real)
(assert (= BAV1 (and (= x_54 (ite (= GEN1 x_53) x_22 x_21)) (or (= GEN2 x_65) (= GEN3 x_65) (= GEN4 x_65) (= GEN5 x_65)) (or (= GEN6 x_63) (= GEN7 x_63)) (<= x_62 GEN8) (or (= GEN9 x_62) (= GEN10 x_62)))))
(assert (= BAV2 (= x_54 (ite (= GEN1 x_53) x_22 x_21))))
(assert (= BAV3 (= GEN1 x_53)))
(assert (= BAV4 (or (= GEN2 x_65) (= GEN3 x_65) (= GEN4 x_65) (= GEN5 x_65))))
(assert (= BAV5 (= GEN2 x_65)))
(assert (= BAV6 (= GEN3 x_65)))
(assert (= BAV7 (= GEN4 x_65)))
(assert (= BAV8 (= GEN5 x_65)))
(assert (= BAV9 (or (= GEN6 x_63) (= GEN7 x_63))))
(assert (= BAV10 (= GEN6 x_63)))
(assert (= BAV11 (= GEN7 x_63)))
(assert (= BAV12 (<= x_62 GEN8)))
(assert (= BAV13 (or (= GEN9 x_62) (= GEN10 x_62))))
(assert (= BAV14 (= GEN9 x_62)))
(assert (= BAV15 (= GEN10 x_62)))
(check-sat-assuming ((and (= x_54 (ite (= GEN1 x_53) x_22 x_21)) (or (= GEN2 x_65) (= GEN3 x_65) (= GEN4 x_65) (= GEN5 x_65)) (or (= GEN6 x_63) (= GEN7 x_63)) (<= x_62 GEN8) (or (= GEN9 x_62) (= GEN10 x_62)))))
(get-model)