(set-option :incremental false)
(set-info :source "We verify the correctness of an unsigned multiplication
overflow detection unit, which is described in
\"Combined Unsigned and Two's Complement Saturating Multipliers\"
by M. Schulte et al.

Bit-width: 4

Contributed by Robert Brummayer (robert.brummayer@gmail.com).")
(set-info :category "industrial")
(set-info :difficulty "0")
(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const GEN28 Int)
(declare-const GEN27 Int)
(declare-const GEN26 Int)
(declare-const GEN25 Int)
(declare-const GEN24 Int)
(declare-const GEN23 Int)
(declare-const GEN22 Int)
(declare-const GEN21 Int)
(declare-const GEN20 Int)
(declare-const GEN19 Int)
(declare-const GEN18 Int)
(declare-const GEN17 Int)
(declare-const GEN16 Int)
(declare-const GEN15 Int)
(declare-const GEN14 Int)
(declare-const GEN13 Int)
(declare-const GEN12 Int)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-fun v1 () (_ BitVec 4))
(declare-fun v2 () (_ BitVec 4))
(assert (= BAV1 (= (bvnot (ite (= (bvnot (ite (= ((_ extract GEN5 GEN6) (bvmul (concat (_ bv0 GEN7) v1) (concat (_ bv0 GEN8) v2))) (_ bv0 GEN9)) (_ bv1 GEN10) (_ bv0 GEN11))) (bvnot (bvand (bvand (bvand (bvnot (bvand ((_ extract GEN12 GEN13) v1) ((_ extract GEN14 GEN15) v2))) (bvnot (bvand ((_ extract GEN16 GEN17) v1) (bvnot (bvand (bvnot ((_ extract GEN1 GEN2) v2)) (bvnot ((_ extract GEN3 GEN4) v2))))))) (bvnot (bvand ((_ extract GEN18 GEN19) v1) (bvnot (bvand (bvand (bvnot ((_ extract GEN1 GEN2) v2)) (bvnot ((_ extract GEN3 GEN4) v2))) (bvnot ((_ extract GEN20 GEN21) v2))))))) (bvnot ((_ extract GEN22 GEN23) (bvmul (concat (_ bv0 GEN24) v1) (concat (_ bv0 GEN25) v2))))))) (_ bv1 GEN26) (_ bv0 GEN27))) (_ bv0 GEN28))))
(assert (= BAV2 (= (bvnot (ite (= ((_ extract GEN5 GEN6) (bvmul (concat (_ bv0 GEN7) v1) (concat (_ bv0 GEN8) v2))) (_ bv0 GEN9)) (_ bv1 GEN10) (_ bv0 GEN11))) (bvnot (bvand (bvand (bvand (bvnot (bvand ((_ extract GEN12 GEN13) v1) ((_ extract GEN14 GEN15) v2))) (bvnot (bvand ((_ extract GEN16 GEN17) v1) (bvnot (bvand (bvnot ((_ extract GEN1 GEN2) v2)) (bvnot ((_ extract GEN3 GEN4) v2))))))) (bvnot (bvand ((_ extract GEN18 GEN19) v1) (bvnot (bvand (bvand (bvnot ((_ extract GEN1 GEN2) v2)) (bvnot ((_ extract GEN3 GEN4) v2))) (bvnot ((_ extract GEN20 GEN21) v2))))))) (bvnot ((_ extract GEN22 GEN23) (bvmul (concat (_ bv0 GEN24) v1) (concat (_ bv0 GEN25) v2)))))))))
(assert (= BAV3 (= ((_ extract GEN5 GEN6) (bvmul (concat (_ bv0 GEN7) v1) (concat (_ bv0 GEN8) v2))) (_ bv0 GEN9))))
(check-sat-assuming ((not (= (bvnot (ite (= (bvnot (ite (= ((_ extract GEN5 GEN6) (bvmul (concat (_ bv0 GEN7) v1) (concat (_ bv0 GEN8) v2))) (_ bv0 GEN9)) (_ bv1 GEN10) (_ bv0 GEN11))) (bvnot (bvand (bvand (bvand (bvnot (bvand ((_ extract GEN12 GEN13) v1) ((_ extract GEN14 GEN15) v2))) (bvnot (bvand ((_ extract GEN16 GEN17) v1) (bvnot (bvand (bvnot ((_ extract GEN1 GEN2) v2)) (bvnot ((_ extract GEN3 GEN4) v2))))))) (bvnot (bvand ((_ extract GEN18 GEN19) v1) (bvnot (bvand (bvand (bvnot ((_ extract GEN1 GEN2) v2)) (bvnot ((_ extract GEN3 GEN4) v2))) (bvnot ((_ extract GEN20 GEN21) v2))))))) (bvnot ((_ extract GEN22 GEN23) (bvmul (concat (_ bv0 GEN24) v1) (concat (_ bv0 GEN25) v2))))))) (_ bv1 GEN26) (_ bv0 GEN27))) (_ bv0 GEN28)))))
(get-model)