(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(get-model)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const GEN12 String)
(declare-const GEN11 Int)
(declare-const GEN10 String)
(declare-const GEN9 Int)
(declare-const GEN8 String)
(declare-const GEN7 Int)
(declare-const GEN6 String)
(declare-const GEN5 Int)
(declare-const GEN4 String)
(declare-const GEN3 Int)
(declare-const GEN2 String)
(declare-const GEN1 Int)
(set-option :smt.string_solver z3str3)
(declare-const s String)
(declare-const s2 String)
(declare-const i Int)
(assert (= (str.len s) GEN1))
(assert (= (str.indexof GEN2 s) i))
(assert (or (and (= s s2) (< i GEN3)) (and (= (str.at GEN4 i) s2) (>= i GEN5))))
(assert (= s2 GEN6))
(assert (= BAV1 (= (str.len s) GEN1)))
(assert (= BAV2 (= (str.indexof GEN2 s) i)))
(assert (= BAV3 (or (and (= s s2) (< i GEN3)) (and (= (str.at GEN4 i) s2) (>= i GEN5)))))
(assert (= BAV4 (and (= s s2) (< i GEN3))))
(assert (= BAV5 (= s s2)))
(assert (= BAV6 (< i GEN3)))
(assert (= BAV7 (and (= (str.at GEN4 i) s2) (>= i GEN5))))
(assert (= BAV8 (= (str.at GEN4 i) s2)))
(assert (= BAV9 (>= i GEN5)))
(assert (= BAV10 (= s2 GEN6)))
(assert (= BAV11 (= (str.len s) 1)))
(assert (= BAV12 (= (str.indexof "a" s) i)))
(assert (= BAV13 (or (and (= s s2) (< i 0)) (and (= (str.at "A" i) s2) (>= i 0)))))
(assert (= BAV14 (and (= s s2) (< i 0))))
(assert (= BAV15 (= s s2)))
(assert (= BAV16 (< i 0)))
(assert (= BAV17 (and (= (str.at "A" i) s2) (>= i 0))))
(assert (= BAV18 (= (str.at "A" i) s2)))
(assert (= BAV19 (>= i 0)))
(assert (= BAV20 (= s2 "a")))
(check-sat)
(get-model)
(reset)
(set-option :smt.string_solver seq)
(declare-const s String)
(declare-const s2 String)
(declare-const i Int)
(assert (= (str.len s) 1))
(assert (= (str.indexof "a" s) i))
(assert (or (and (= s s2) (< i 0)) (and (= (str.at "A" i) s2) (>= i 0))))
(assert (= s2 "a"))
(check-sat)