(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-sort U 0)
(declare-const k U)
(declare-const ff U)
(declare-const ffk U)
(declare-fun fun1 (Int) Int)
(declare-fun fun2 (Int) Int)
(declare-fun c (U U) U)
(declare-fun app (U Int) Int)
(assert (forall ((f U)(g U)) (=> (forall ((x Int)) (= (app f x) (app g x))) (= f g))))
(assert (forall ((x Int)) (= (app ff x) (+ (fun1 x) (fun2 x)))))
(assert (forall ((x Int)) (= (app ffk x) (+ (fun1 (app k x)) (fun2 (app k x))))))
(assert (forall ((f U)(g U)(x Int)) (= (app (c f g) x) (app f (app g x)))))
(assert (not (= (c ff k) ffk)))
(assert (= BAV1 (forall ((f U)(g U)) (=> (forall ((x Int)) (= (app f x) (app g x))) (= f g)))))
(assert (= BAV2 (forall ((f U)(g U)(x Int)) (= (app f x) (app g x)))))
(assert (= BAV3 (forall ((f U)(g U)) (= f g))))
(assert (= BAV4 (forall ((x Int)) (= (app ff x) (+ (fun1 x) (fun2 x))))))
(assert (= BAV5 (forall ((x Int)) (= (app ffk x) (+ (fun1 (app k x)) (fun2 (app k x)))))))
(assert (= BAV6 (forall ((f U)(g U)(x Int)) (= (app (c f g) x) (app f (app g x))))))
(assert (= BAV7 (= (c ff k) ffk)))
(check-sat)