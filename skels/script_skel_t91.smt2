(declare-const GEN8 (_ BitVec 8))
(declare-const GEN7 (_ BitVec 8))
(declare-const GEN6 (_ BitVec 8))
(declare-const GEN5 (_ BitVec 8))
(declare-const GEN4 (_ BitVec 8))
(declare-const GEN3 (_ BitVec 8))
(declare-const GEN2 (_ BitVec 8))
(declare-const GEN1 (_ BitVec 8))
(set-option :produce-models true)
(declare-const x (_ BitVec 8))
(declare-const y (_ BitVec 8))
(assert (bvsle x GEN1))
(assert (bvsle y GEN2))
(assert (bvsle y x))
(apply elim-uncnstr :print-model-converter true)
(reset)
(set-option :produce-models true)
(declare-const x (_ BitVec 8))
(declare-const y (_ BitVec 8))
(assert (bvsle x #x0a))
(assert (bvsle y #x0a))
(assert (bvsle x y))
(apply elim-uncnstr :print-model-converter true)
(reset)
(set-option :produce-models true)
(declare-const x (_ BitVec 8))
(declare-const y (_ BitVec 8))
(assert (bvsle x #x0a))
(assert (bvsle y #x0a))
(assert (bvule y x))
(apply elim-uncnstr :print-model-converter true)
(reset)
(set-option :produce-models true)
(declare-const x (_ BitVec 8))
(declare-const y (_ BitVec 8))
(assert (bvsle x #x0a))
(assert (bvsle y #x0a))
(assert (bvule x y))
(apply elim-uncnstr :print-model-converter true)
(reset)