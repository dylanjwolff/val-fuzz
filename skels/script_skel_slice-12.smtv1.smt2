(set-option :incremental false)
(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const GEN18 Int)
(declare-const GEN17 Int)
(declare-const GEN16 Int)
(declare-const GEN15 Int)
(declare-const GEN14 Int)
(declare-const GEN13 Int)
(declare-const GEN12 Int)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-fun x () (_ BitVec 8))
(declare-fun y () (_ BitVec 8))
(declare-fun z1 () (_ BitVec 4))
(declare-fun z2 () (_ BitVec 4))
(assert (= x (_ bv85 8)))
(assert (= y (_ bv170 8)))
(assert (= z1 (concat (concat (concat ((_ extract 0 0) x) ((_ extract 2 2) x)) ((_ extract 4 4) x)) ((_ extract 6 6) x))))
(assert (= z2 (concat (concat (concat ((_ extract 7 7) y) ((_ extract 5 5) y)) ((_ extract 3 3) y)) ((_ extract 1 1) y))))
(assert (= BAV1 (= x (_ bv85 8))))
(assert (= BAV2 (= y (_ bv170 8))))
(assert (= BAV3 (= z1 (concat (concat (concat ((_ extract 0 0) x) ((_ extract 2 2) x)) ((_ extract 4 4) x)) ((_ extract 6 6) x)))))
(assert (= BAV4 (= z2 (concat (concat (concat ((_ extract 7 7) y) ((_ extract 5 5) y)) ((_ extract 3 3) y)) ((_ extract 1 1) y)))))
(assert (= BAV5 (= z1 z2)))
(check-sat-assuming ((not (= z1 z2))))
(get-model)