(set-option :incremental false)
(set-info :status unknown)
(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-sort Index 0)
(declare-sort Element 0)
(declare-fun v4 () Index)
(declare-fun v2 () Index)
(declare-fun v3 () Index)
(declare-fun v1 () (Array Index Element))
(declare-fun v6 () Element)
(declare-fun v0 () (Array Index Element))
(declare-fun v5 () Element)
(assert (= BAV1 (or (and (= v6 (ite (distinct (store v1 v3 v6) v0) (ite (= v4 v2) (ite true (select (store v1 v4 v6) v2) v6) (select v1 v3)) (ite (distinct (select v1 v3) (select v1 v3)) v6 (select (store v1 v4 v6) v2)))) (distinct (store v1 v4 v6) (ite (distinct (select v1 v3) v5) v1 (ite (distinct (store v1 v3 v6) v0) v1 v0)))) (distinct (ite (distinct v0 (store v1 v4 v6)) v2 v4) (ite (= v3 v2) v3 (ite (= v0 v0) (ite (= v6 (select v1 v3)) v3 (ite false v4 (ite (= (select (store v1 v4 v6) v2) (select v1 v3)) v3 v2))) v4))))))
(assert (= BAV2 (and (= v6 (ite (distinct (store v1 v3 v6) v0) (ite (= v4 v2) (ite true (select (store v1 v4 v6) v2) v6) (select v1 v3)) (ite (distinct (select v1 v3) (select v1 v3)) v6 (select (store v1 v4 v6) v2)))) (distinct (store v1 v4 v6) (ite (distinct (select v1 v3) v5) v1 (ite (distinct (store v1 v3 v6) v0) v1 v0))))))
(assert (= BAV3 (= v6 (ite (distinct (store v1 v3 v6) v0) (ite (= v4 v2) (ite true (select (store v1 v4 v6) v2) v6) (select v1 v3)) (ite (distinct (select v1 v3) (select v1 v3)) v6 (select (store v1 v4 v6) v2))))))
(assert (= BAV4 (distinct (store v1 v3 v6) v0)))
(assert (= BAV5 (= v4 v2)))
(assert (= BAV6 (distinct (select v1 v3) (select v1 v3))))
(assert (= BAV7 (distinct (store v1 v4 v6) (ite (distinct (select v1 v3) v5) v1 (ite (distinct (store v1 v3 v6) v0) v1 v0)))))
(assert (= BAV8 (distinct (select v1 v3) v5)))
(assert (= BAV9 (distinct (store v1 v3 v6) v0)))
(assert (= BAV10 (distinct (ite (distinct v0 (store v1 v4 v6)) v2 v4) (ite (= v3 v2) v3 (ite (= v0 v0) (ite (= v6 (select v1 v3)) v3 (ite false v4 (ite (= (select (store v1 v4 v6) v2) (select v1 v3)) v3 v2))) v4)))))
(assert (= BAV11 (distinct v0 (store v1 v4 v6))))
(assert (= BAV12 (= v3 v2)))
(assert (= BAV13 (= v0 v0)))
(assert (= BAV14 (= v6 (select v1 v3))))
(assert (= BAV15 (= (select (store v1 v4 v6) v2) (select v1 v3))))
(check-sat-assuming ((or (and (= v6 (ite (distinct (store v1 v3 v6) v0) (ite (= v4 v2) (ite true (select (store v1 v4 v6) v2) v6) (select v1 v3)) (ite (distinct (select v1 v3) (select v1 v3)) v6 (select (store v1 v4 v6) v2)))) (distinct (store v1 v4 v6) (ite (distinct (select v1 v3) v5) v1 (ite (distinct (store v1 v3 v6) v0) v1 v0)))) (distinct (ite (distinct v0 (store v1 v4 v6)) v2 v4) (ite (= v3 v2) v3 (ite (= v0 v0) (ite (= v6 (select v1 v3)) v3 (ite false v4 (ite (= (select (store v1 v4 v6) v2) (select v1 v3)) v3 v2))) v4))))))
(get-model)