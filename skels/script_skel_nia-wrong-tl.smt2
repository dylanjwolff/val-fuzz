(set-logic ALL)
(declare-const GEN1 Int)
(declare-const GEN2 Int)
(declare-const GEN3 Int)
(declare-const GEN4 Int)
(declare-const GEN5 Int)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-fun n0 () Int)
(declare-fun n1 () Int)
(declare-fun n2 () Int)
(declare-fun n3 () Int)
(declare-fun n4 () Int)
(declare-fun n5 () Int)
(declare-fun n6 () Int)
(declare-fun n7 () Int)
(declare-fun n8 () Int)
(declare-fun n9 () Int)
(declare-fun n10 () Int)
(declare-fun n11 () Int)
(declare-fun n12 () Int)
(declare-fun n13 () Int)
(declare-fun n14 () Int)
(declare-fun n15 () Int)
(declare-fun n16 () Int)
(declare-fun n17 () Int)
(declare-fun n18 () Int)
(declare-fun n19 () Int)
(declare-fun n20 () Int)
(declare-fun n21 () Int)
(declare-fun n22 () Int)
(declare-fun n23 () Int)
(declare-fun n24 () Int)
(declare-fun n25 () Int)
(declare-fun n26 () Int)
(declare-fun n27 () Int)
(declare-fun n28 () Int)
(declare-fun n29 () Int)
(declare-fun n30 () Int)
(declare-fun n31 () Int)
(declare-fun n32 () Int)
(declare-fun n33 () Int)
(declare-fun n34 () Int)
(declare-fun n35 () Int)
(declare-fun n36 () Int)
(declare-fun n37 () Int)
(declare-fun n38 () Int)
(declare-fun n39 () Int)
(declare-fun n40 () Int)
(assert (not (=> (and (>= n5 GEN1) (not (>= (+ n1 (* (- GEN2) n7)) GEN3))) (not (>= (+ (* n1 n5) (* (- GEN4) (* n5 n7))) GEN5)))))
(assert (= BAV6 (=> (and (>= n5 GEN1) (not (>= (+ n1 (* (- GEN2) n7)) GEN3))) (not (>= (+ (* n1 n5) (* (- GEN4) (* n5 n7))) GEN5)))))
(assert (= BAV7 (and (>= n5 GEN1) (not (>= (+ n1 (* (- GEN2) n7)) GEN3)))))
(assert (= BAV8 (>= n5 GEN1)))
(assert (= BAV9 (>= (+ n1 (* (- GEN2) n7)) GEN3)))
(assert (= BAV10 (>= (+ (* n1 n5) (* (- GEN4) (* n5 n7))) GEN5)))
(check-sat)