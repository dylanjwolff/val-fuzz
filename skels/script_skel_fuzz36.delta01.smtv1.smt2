(set-option :incremental false)
(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const GEN23 Int)
(declare-const GEN22 Int)
(declare-const GEN21 Int)
(declare-const GEN20 Int)
(declare-const GEN19 Int)
(declare-const GEN18 Int)
(declare-const GEN17 Int)
(declare-const GEN16 Int)
(declare-const GEN15 Int)
(declare-const GEN14 Int)
(declare-const GEN13 Int)
(declare-const GEN12 Int)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-fun v0 () (_ BitVec 4))
(declare-fun v2 () (_ BitVec 4))
(declare-fun v3 () (_ BitVec 4))
(assert (= BAV1 (and (or false (distinct (bvashr v2 v0) v3) (bvugt (_ bv1 4) ((_ sign_extend 3) (ite (= v2 (_ bv0 4)) (_ bv1 1) (_ bv0 1))))) (bvslt v2 (bvashr v2 v0)) (bvuge (bvnor v0 ((_ sign_extend 3) (ite (bvuge v3 (bvmul v0 (bvnor (_ bv1 4) (_ bv0 4)))) (_ bv1 1) (_ bv0 1)))) (bvashr v2 v0)) (bvslt (bvashr v2 v0) (bvadd v0 (_ bv13 4))) (bvsle v0 (_ bv1 4)) (or false (distinct (_ bv0 4) (bvmul v0 (bvnor (_ bv1 4) (_ bv0 4)))) (= (_ bv0 4) ((_ sign_extend 3) (ite (bvslt v0 (_ bv1 4)) (_ bv1 1) (_ bv0 1))))) (or false (bvsgt (_ bv0 1) (ite (= v2 v0) (_ bv1 1) (_ bv0 1))) (bvsle (_ bv0 4) (bvshl (_ bv1 4) ((_ sign_extend 3) (ite (bvslt v0 (_ bv1 4)) (_ bv1 1) (_ bv0 1)))))))))
(assert (= BAV2 (or false (distinct (bvashr v2 v0) v3) (bvugt (_ bv1 4) ((_ sign_extend 3) (ite (= v2 (_ bv0 4)) (_ bv1 1) (_ bv0 1)))))))
(assert (= BAV3 (distinct (bvashr v2 v0) v3)))
(assert (= BAV4 (= v2 (_ bv0 4))))
(assert (= BAV5 (or false (distinct (_ bv0 4) (bvmul v0 (bvnor (_ bv1 4) (_ bv0 4)))) (= (_ bv0 4) ((_ sign_extend 3) (ite (bvslt v0 (_ bv1 4)) (_ bv1 1) (_ bv0 1)))))))
(assert (= BAV6 (distinct (_ bv0 4) (bvmul v0 (bvnor (_ bv1 4) (_ bv0 4))))))
(assert (= BAV7 (= (_ bv0 4) ((_ sign_extend 3) (ite (bvslt v0 (_ bv1 4)) (_ bv1 1) (_ bv0 1))))))
(assert (= BAV8 (or false (bvsgt (_ bv0 1) (ite (= v2 v0) (_ bv1 1) (_ bv0 1))) (bvsle (_ bv0 4) (bvshl (_ bv1 4) ((_ sign_extend 3) (ite (bvslt v0 (_ bv1 4)) (_ bv1 1) (_ bv0 1))))))))
(assert (= BAV9 (= v2 v0)))
(check-sat-assuming ((and (or false (distinct (bvashr v2 v0) v3) (bvugt (_ bv1 4) ((_ sign_extend 3) (ite (= v2 (_ bv0 4)) (_ bv1 1) (_ bv0 1))))) (bvslt v2 (bvashr v2 v0)) (bvuge (bvnor v0 ((_ sign_extend 3) (ite (bvuge v3 (bvmul v0 (bvnor (_ bv1 4) (_ bv0 4)))) (_ bv1 1) (_ bv0 1)))) (bvashr v2 v0)) (bvslt (bvashr v2 v0) (bvadd v0 (_ bv13 4))) (bvsle v0 (_ bv1 4)) (or false (distinct (_ bv0 4) (bvmul v0 (bvnor (_ bv1 4) (_ bv0 4)))) (= (_ bv0 4) ((_ sign_extend 3) (ite (bvslt v0 (_ bv1 4)) (_ bv1 1) (_ bv0 1))))) (or false (bvsgt (_ bv0 1) (ite (= v2 v0) (_ bv1 1) (_ bv0 1))) (bvsle (_ bv0 4) (bvshl (_ bv1 4) ((_ sign_extend 3) (ite (bvslt v0 (_ bv1 4)) (_ bv1 1) (_ bv0 1)))))))))
(get-model)