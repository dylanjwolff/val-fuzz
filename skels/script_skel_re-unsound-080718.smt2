(set-info :smt-lib-version 2.5)
(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const GEN9 String)
(declare-const GEN8 String)
(declare-const GEN7 String)
(declare-const GEN6 String)
(declare-const GEN5 String)
(declare-const GEN4 String)
(declare-const GEN3 String)
(declare-const GEN2 String)
(declare-const GEN1 String)
(declare-fun x () String)
(assert (and (not (= (str.in.re x (re.++ (str.to.re GEN1) (re.* (str.to.re GEN2)))) (str.in.re x (re.++ (str.to.re GEN3) (str.to.re (str.++ GEN4 GEN5)))))) (not (= (str.in.re x (re.++ (re.union (re.++ (str.to.re GEN6) re.allchar) re.allchar) (str.to.re GEN7))) (str.in.re x (re.++ (str.to.re GEN8) (str.to.re GEN9)))))))
(assert (= BAV1 (and (not (= (str.in.re x (re.++ (str.to.re GEN1) (re.* (str.to.re GEN2)))) (str.in.re x (re.++ (str.to.re GEN3) (str.to.re (str.++ GEN4 GEN5)))))) (not (= (str.in.re x (re.++ (re.union (re.++ (str.to.re GEN6) re.allchar) re.allchar) (str.to.re GEN7))) (str.in.re x (re.++ (str.to.re GEN8) (str.to.re GEN9))))))))
(assert (= BAV2 (= (str.in.re x (re.++ (str.to.re GEN1) (re.* (str.to.re GEN2)))) (str.in.re x (re.++ (str.to.re GEN3) (str.to.re (str.++ GEN4 GEN5)))))))
(assert (= BAV3 (= (str.in.re x (re.++ (re.union (re.++ (str.to.re GEN6) re.allchar) re.allchar) (str.to.re GEN7))) (str.in.re x (re.++ (str.to.re GEN8) (str.to.re GEN9))))))
(check-sat)
(get-model)