(set-option :incremental false)
(set-info :category "crafted")
(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const GEN6 Real)
(declare-const GEN5 Real)
(declare-const GEN4 Real)
(declare-const GEN3 Real)
(declare-const GEN2 Real)
(declare-const GEN1 Real)
(declare-fun f (Real) Real)
(declare-fun x () Real)
(declare-fun y () Real)
(assert (= BAV1 (and (or (= x GEN3) (= x GEN4)) (or (= y GEN5) (= y GEN6)) (not (= (f x) (f y))) (=> (= (f GEN1) (f x)) (= (f GEN2) (f x))) (=> (= (f GEN1) (f y)) (= (f GEN2) (f y))))))
(assert (= BAV2 (or (= x GEN3) (= x GEN4))))
(assert (= BAV3 (= x GEN3)))
(assert (= BAV4 (= x GEN4)))
(assert (= BAV5 (or (= y GEN5) (= y GEN6))))
(assert (= BAV6 (= y GEN5)))
(assert (= BAV7 (= y GEN6)))
(assert (= BAV8 (= (f x) (f y))))
(assert (= BAV9 (=> (= (f GEN1) (f x)) (= (f GEN2) (f x)))))
(assert (= BAV10 (= (f GEN1) (f x))))
(assert (= BAV11 (= (f GEN2) (f x))))
(assert (= BAV12 (=> (= (f GEN1) (f y)) (= (f GEN2) (f y)))))
(assert (= BAV13 (= (f GEN1) (f y))))
(assert (= BAV14 (= (f GEN2) (f y))))
(check-sat-assuming ((and (or (= x GEN3) (= x GEN4)) (or (= y GEN5) (= y GEN6)) (not (= (f x) (f y))) (=> (= (f GEN1) (f x)) (= (f GEN2) (f x))) (=> (= (f GEN1) (f y)) (= (f GEN2) (f y))))))
(get-model)