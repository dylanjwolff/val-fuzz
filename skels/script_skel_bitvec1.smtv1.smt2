(set-option :incremental false)
(set-info :source "Hand-crafted bit-vector benchmarks.  Some are from the SVC benchmark suite.
Contributed by Vijay Ganesh (vganesh@stanford.edu).  Translated into SMT-LIB
format by Clark Barrett using CVC3.")
(set-info :difficulty "0")
(set-info :category "crafted")
(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const BAV23 Bool)
(declare-const BAV24 Bool)
(declare-const BAV25 Bool)
(declare-const BAV26 Bool)
(declare-const BAV27 Bool)
(declare-const BAV28 Bool)
(declare-const BAV29 Bool)
(declare-const BAV30 Bool)
(declare-const BAV31 Bool)
(declare-const BAV32 Bool)
(declare-const BAV33 Bool)
(declare-const BAV34 Bool)
(declare-const BAV35 Bool)
(declare-const BAV36 Bool)
(declare-const BAV37 Bool)
(declare-const BAV38 Bool)
(declare-const BAV39 Bool)
(declare-const BAV40 Bool)
(declare-const BAV41 Bool)
(declare-const GEN45 Int)
(declare-const GEN44 Int)
(declare-const GEN43 Int)
(declare-const GEN42 Int)
(declare-const GEN41 Int)
(declare-const GEN40 Int)
(declare-const GEN39 Int)
(declare-const GEN38 Int)
(declare-const GEN37 Int)
(declare-const GEN36 Int)
(declare-const GEN35 Int)
(declare-const GEN34 Int)
(declare-const GEN33 Int)
(declare-const GEN32 Int)
(declare-const GEN31 Int)
(declare-const GEN30 Int)
(declare-const GEN29 Int)
(declare-const GEN28 Int)
(declare-const GEN27 Int)
(declare-const GEN26 Int)
(declare-const GEN25 Int)
(declare-const GEN24 Int)
(declare-const GEN23 Int)
(declare-const GEN22 Int)
(declare-const GEN21 Int)
(declare-const GEN20 Int)
(declare-const GEN19 Int)
(declare-const GEN18 Int)
(declare-const GEN17 Int)
(declare-const GEN16 Int)
(declare-const GEN15 Int)
(declare-const GEN14 Int)
(declare-const GEN13 Int)
(declare-const GEN12 Int)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(declare-fun a () (_ BitVec 32))
(declare-fun b () (_ BitVec 32))
(declare-fun c () (_ BitVec 32))
(declare-fun res () (_ BitVec 32))
(assert (= BAV1 (=> (and (and (and (= ((_ extract 1 0) a) (_ bv1 2)) (= ((_ extract 1 0) b) (_ bv1 2))) (and (ite (and (= ((_ extract 0 0) a) (_ bv1 1)) (= ((_ extract 0 0) b) (_ bv1 1))) (= ((_ extract 0 0) c) (_ bv1 1)) (= ((_ extract 0 0) c) (_ bv0 1))) (ite (ite (= ((_ extract 0 0) a) (_ bv1 1)) (not (= ((_ extract 0 0) b) (_ bv1 1))) (= ((_ extract 0 0) b) (_ bv1 1))) (= ((_ extract 0 0) res) (_ bv1 1)) (= ((_ extract 0 0) res) (_ bv0 1))))) (and (ite (or (and (= ((_ extract 1 1) a) (_ bv1 1)) (= ((_ extract 1 1) b) (_ bv1 1))) (and (ite (= ((_ extract 1 1) a) (_ bv1 1)) (not (= ((_ extract 1 1) b) (_ bv1 1))) (= ((_ extract 1 1) b) (_ bv1 1))) (= ((_ extract 0 0) c) (_ bv1 1)))) (= ((_ extract 1 1) c) (_ bv1 1)) (= ((_ extract 1 1) c) (_ bv0 1))) (ite (ite (= ((_ extract 0 0) c) (_ bv1 1)) (not (ite (= ((_ extract 1 1) a) (_ bv1 1)) (not (= ((_ extract 1 1) b) (_ bv1 1))) (= ((_ extract 1 1) b) (_ bv1 1)))) (ite (= ((_ extract 1 1) a) (_ bv1 1)) (not (= ((_ extract 1 1) b) (_ bv1 1))) (= ((_ extract 1 1) b) (_ bv1 1)))) (= ((_ extract 1 1) res) (_ bv1 1)) (= ((_ extract 1 1) res) (_ bv0 1))))) (and (= ((_ extract 1 0) res) (_ bv2 2)) (= ((_ extract 1 0) c) (_ bv1 2))))))
(assert (= BAV2 (and (and (and (= ((_ extract 1 0) a) (_ bv1 2)) (= ((_ extract 1 0) b) (_ bv1 2))) (and (ite (and (= ((_ extract 0 0) a) (_ bv1 1)) (= ((_ extract 0 0) b) (_ bv1 1))) (= ((_ extract 0 0) c) (_ bv1 1)) (= ((_ extract 0 0) c) (_ bv0 1))) (ite (ite (= ((_ extract 0 0) a) (_ bv1 1)) (not (= ((_ extract 0 0) b) (_ bv1 1))) (= ((_ extract 0 0) b) (_ bv1 1))) (= ((_ extract 0 0) res) (_ bv1 1)) (= ((_ extract 0 0) res) (_ bv0 1))))) (and (ite (or (and (= ((_ extract 1 1) a) (_ bv1 1)) (= ((_ extract 1 1) b) (_ bv1 1))) (and (ite (= ((_ extract 1 1) a) (_ bv1 1)) (not (= ((_ extract 1 1) b) (_ bv1 1))) (= ((_ extract 1 1) b) (_ bv1 1))) (= ((_ extract 0 0) c) (_ bv1 1)))) (= ((_ extract 1 1) c) (_ bv1 1)) (= ((_ extract 1 1) c) (_ bv0 1))) (ite (ite (= ((_ extract 0 0) c) (_ bv1 1)) (not (ite (= ((_ extract 1 1) a) (_ bv1 1)) (not (= ((_ extract 1 1) b) (_ bv1 1))) (= ((_ extract 1 1) b) (_ bv1 1)))) (ite (= ((_ extract 1 1) a) (_ bv1 1)) (not (= ((_ extract 1 1) b) (_ bv1 1))) (= ((_ extract 1 1) b) (_ bv1 1)))) (= ((_ extract 1 1) res) (_ bv1 1)) (= ((_ extract 1 1) res) (_ bv0 1)))))))
(assert (= BAV3 (and (and (= ((_ extract 1 0) a) (_ bv1 2)) (= ((_ extract 1 0) b) (_ bv1 2))) (and (ite (and (= ((_ extract 0 0) a) (_ bv1 1)) (= ((_ extract 0 0) b) (_ bv1 1))) (= ((_ extract 0 0) c) (_ bv1 1)) (= ((_ extract 0 0) c) (_ bv0 1))) (ite (ite (= ((_ extract 0 0) a) (_ bv1 1)) (not (= ((_ extract 0 0) b) (_ bv1 1))) (= ((_ extract 0 0) b) (_ bv1 1))) (= ((_ extract 0 0) res) (_ bv1 1)) (= ((_ extract 0 0) res) (_ bv0 1)))))))
(assert (= BAV4 (and (= ((_ extract 1 0) a) (_ bv1 2)) (= ((_ extract 1 0) b) (_ bv1 2)))))
(assert (= BAV5 (= ((_ extract 1 0) a) (_ bv1 2))))
(assert (= BAV6 (= ((_ extract 1 0) b) (_ bv1 2))))
(assert (= BAV7 (and (ite (and (= ((_ extract 0 0) a) (_ bv1 1)) (= ((_ extract 0 0) b) (_ bv1 1))) (= ((_ extract 0 0) c) (_ bv1 1)) (= ((_ extract 0 0) c) (_ bv0 1))) (ite (ite (= ((_ extract 0 0) a) (_ bv1 1)) (not (= ((_ extract 0 0) b) (_ bv1 1))) (= ((_ extract 0 0) b) (_ bv1 1))) (= ((_ extract 0 0) res) (_ bv1 1)) (= ((_ extract 0 0) res) (_ bv0 1))))))
(assert (= BAV8 (and (= ((_ extract 0 0) a) (_ bv1 1)) (= ((_ extract 0 0) b) (_ bv1 1)))))
(assert (= BAV9 (= ((_ extract 0 0) a) (_ bv1 1))))
(assert (= BAV10 (= ((_ extract 0 0) b) (_ bv1 1))))
(assert (= BAV11 (= ((_ extract 0 0) c) (_ bv1 1))))
(assert (= BAV12 (= ((_ extract 0 0) c) (_ bv0 1))))
(assert (= BAV13 (= ((_ extract 0 0) a) (_ bv1 1))))
(assert (= BAV14 (= ((_ extract 0 0) b) (_ bv1 1))))
(assert (= BAV15 (= ((_ extract 0 0) b) (_ bv1 1))))
(assert (= BAV16 (= ((_ extract 0 0) res) (_ bv1 1))))
(assert (= BAV17 (= ((_ extract 0 0) res) (_ bv0 1))))
(assert (= BAV18 (and (ite (or (and (= ((_ extract 1 1) a) (_ bv1 1)) (= ((_ extract 1 1) b) (_ bv1 1))) (and (ite (= ((_ extract 1 1) a) (_ bv1 1)) (not (= ((_ extract 1 1) b) (_ bv1 1))) (= ((_ extract 1 1) b) (_ bv1 1))) (= ((_ extract 0 0) c) (_ bv1 1)))) (= ((_ extract 1 1) c) (_ bv1 1)) (= ((_ extract 1 1) c) (_ bv0 1))) (ite (ite (= ((_ extract 0 0) c) (_ bv1 1)) (not (ite (= ((_ extract 1 1) a) (_ bv1 1)) (not (= ((_ extract 1 1) b) (_ bv1 1))) (= ((_ extract 1 1) b) (_ bv1 1)))) (ite (= ((_ extract 1 1) a) (_ bv1 1)) (not (= ((_ extract 1 1) b) (_ bv1 1))) (= ((_ extract 1 1) b) (_ bv1 1)))) (= ((_ extract 1 1) res) (_ bv1 1)) (= ((_ extract 1 1) res) (_ bv0 1))))))
(assert (= BAV19 (or (and (= ((_ extract 1 1) a) (_ bv1 1)) (= ((_ extract 1 1) b) (_ bv1 1))) (and (ite (= ((_ extract 1 1) a) (_ bv1 1)) (not (= ((_ extract 1 1) b) (_ bv1 1))) (= ((_ extract 1 1) b) (_ bv1 1))) (= ((_ extract 0 0) c) (_ bv1 1))))))
(assert (= BAV20 (and (= ((_ extract 1 1) a) (_ bv1 1)) (= ((_ extract 1 1) b) (_ bv1 1)))))
(assert (= BAV21 (= ((_ extract 1 1) a) (_ bv1 1))))
(assert (= BAV22 (= ((_ extract 1 1) b) (_ bv1 1))))
(assert (= BAV23 (and (ite (= ((_ extract 1 1) a) (_ bv1 1)) (not (= ((_ extract 1 1) b) (_ bv1 1))) (= ((_ extract 1 1) b) (_ bv1 1))) (= ((_ extract 0 0) c) (_ bv1 1)))))
(assert (= BAV24 (= ((_ extract 1 1) a) (_ bv1 1))))
(assert (= BAV25 (= ((_ extract 1 1) b) (_ bv1 1))))
(assert (= BAV26 (= ((_ extract 1 1) b) (_ bv1 1))))
(assert (= BAV27 (= ((_ extract 0 0) c) (_ bv1 1))))
(assert (= BAV28 (= ((_ extract 1 1) c) (_ bv1 1))))
(assert (= BAV29 (= ((_ extract 1 1) c) (_ bv0 1))))
(assert (= BAV30 (= ((_ extract 0 0) c) (_ bv1 1))))
(assert (= BAV31 (= ((_ extract 1 1) a) (_ bv1 1))))
(assert (= BAV32 (= ((_ extract 1 1) b) (_ bv1 1))))
(assert (= BAV33 (= ((_ extract 1 1) b) (_ bv1 1))))
(assert (= BAV34 (= ((_ extract 1 1) a) (_ bv1 1))))
(assert (= BAV35 (= ((_ extract 1 1) b) (_ bv1 1))))
(assert (= BAV36 (= ((_ extract 1 1) b) (_ bv1 1))))
(assert (= BAV37 (= ((_ extract 1 1) res) (_ bv1 1))))
(assert (= BAV38 (= ((_ extract 1 1) res) (_ bv0 1))))
(assert (= BAV39 (and (= ((_ extract 1 0) res) (_ bv2 2)) (= ((_ extract 1 0) c) (_ bv1 2)))))
(assert (= BAV40 (= ((_ extract 1 0) res) (_ bv2 2))))
(assert (= BAV41 (= ((_ extract 1 0) c) (_ bv1 2))))
(check-sat-assuming ((not (=> (and (and (and (= ((_ extract 1 0) a) (_ bv1 2)) (= ((_ extract 1 0) b) (_ bv1 2))) (and (ite (and (= ((_ extract 0 0) a) (_ bv1 1)) (= ((_ extract 0 0) b) (_ bv1 1))) (= ((_ extract 0 0) c) (_ bv1 1)) (= ((_ extract 0 0) c) (_ bv0 1))) (ite (ite (= ((_ extract 0 0) a) (_ bv1 1)) (not (= ((_ extract 0 0) b) (_ bv1 1))) (= ((_ extract 0 0) b) (_ bv1 1))) (= ((_ extract 0 0) res) (_ bv1 1)) (= ((_ extract 0 0) res) (_ bv0 1))))) (and (ite (or (and (= ((_ extract 1 1) a) (_ bv1 1)) (= ((_ extract 1 1) b) (_ bv1 1))) (and (ite (= ((_ extract 1 1) a) (_ bv1 1)) (not (= ((_ extract 1 1) b) (_ bv1 1))) (= ((_ extract 1 1) b) (_ bv1 1))) (= ((_ extract 0 0) c) (_ bv1 1)))) (= ((_ extract 1 1) c) (_ bv1 1)) (= ((_ extract 1 1) c) (_ bv0 1))) (ite (ite (= ((_ extract 0 0) c) (_ bv1 1)) (not (ite (= ((_ extract 1 1) a) (_ bv1 1)) (not (= ((_ extract 1 1) b) (_ bv1 1))) (= ((_ extract 1 1) b) (_ bv1 1)))) (ite (= ((_ extract 1 1) a) (_ bv1 1)) (not (= ((_ extract 1 1) b) (_ bv1 1))) (= ((_ extract 1 1) b) (_ bv1 1)))) (= ((_ extract 1 1) res) (_ bv1 1)) (= ((_ extract 1 1) res) (_ bv0 1))))) (and (= ((_ extract 1 0) res) (_ bv2 2)) (= ((_ extract 1 0) c) (_ bv1 2)))))))
(get-model)