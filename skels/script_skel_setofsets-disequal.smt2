(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const GEN40 Int)
(declare-const GEN39 Int)
(declare-const GEN38 Int)
(declare-const GEN37 Int)
(declare-const GEN36 Int)
(declare-const GEN35 Int)
(declare-const GEN34 Int)
(declare-const GEN33 Int)
(declare-const GEN32 Int)
(declare-const GEN31 Int)
(declare-const GEN30 Int)
(declare-const GEN29 Int)
(declare-const GEN28 Int)
(declare-const GEN27 Int)
(declare-const GEN26 Int)
(declare-const GEN25 Int)
(declare-const GEN24 Int)
(declare-const GEN23 Int)
(declare-const GEN22 Int)
(declare-const GEN21 Int)
(declare-const GEN20 Int)
(declare-const GEN19 Int)
(declare-const GEN18 Int)
(declare-const GEN17 Int)
(declare-const GEN16 Int)
(declare-const GEN15 Int)
(declare-const GEN14 Int)
(declare-const GEN13 Int)
(declare-const GEN12 Int)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(define-sort myset () (Set (Set (_ BitVec 1))))
(declare-fun S () myset)
(assert (not (= S (as emptyset myset))))
(assert (not (= S (singleton (as emptyset (Set (_ BitVec 1)))))))
(assert (not (= S (singleton (singleton (_ bv0 1))))))
(assert (not (= S (singleton (singleton (_ bv1 1))))))
(assert (not (= S (singleton (union (singleton (_ bv0 1)) (singleton (_ bv1 1)))))))
(assert (not (= S (union (singleton (as emptyset (Set (_ BitVec 1)))) (singleton (singleton (_ bv0 1)))))))
(assert (not (= S (union (singleton (as emptyset (Set (_ BitVec 1)))) (singleton (singleton (_ bv1 1)))))))
(assert (not (= S (union (singleton (as emptyset (Set (_ BitVec 1)))) (singleton (union (singleton (_ bv0 1)) (singleton (_ bv1 1))))))))
(assert (not (= S (union (singleton (union (singleton (_ bv0 1)) (singleton (_ bv1 1)))) (singleton (singleton (_ bv0 1)))))))
(assert (not (= S (union (singleton (singleton (_ bv0 1))) (singleton (singleton (_ bv1 1)))))))
(assert (not (= S (union (singleton (union (singleton (_ bv0 1)) (singleton (_ bv1 1)))) (singleton (singleton (_ bv1 1)))))))
(assert (not (= S (union (singleton (singleton (_ bv1 1))) (union (singleton (as emptyset (Set (_ BitVec 1)))) (singleton (singleton (_ bv0 1))))))))
(assert (not (= S (union (singleton (union (singleton (_ bv0 1)) (singleton (_ bv1 1)))) (union (singleton (as emptyset (Set (_ BitVec 1)))) (singleton (singleton (_ bv1 1))))))))
(assert (not (= S (union (singleton (union (singleton (_ bv0 1)) (singleton (_ bv1 1)))) (union (singleton (singleton (_ bv0 1))) (singleton (singleton (_ bv1 1))))))))
(assert (not (= S (union (singleton (union (singleton (_ bv0 1)) (singleton (_ bv1 1)))) (union (singleton (as emptyset (Set (_ BitVec 1)))) (singleton (singleton (_ bv0 1))))))))
(assert (not (= S (union (singleton (union (singleton (_ bv0 1)) (singleton (_ bv1 1)))) (union (singleton (singleton (_ bv1 1))) (union (singleton (as emptyset (Set (_ BitVec 1)))) (singleton (singleton (_ bv0 1)))))))))
(assert (= BAV1 (= S (as emptyset myset))))
(assert (= BAV2 (= S (singleton (as emptyset (Set (_ BitVec 1)))))))
(assert (= BAV3 (= S (singleton (singleton (_ bv0 1))))))
(assert (= BAV4 (= S (singleton (singleton (_ bv1 1))))))
(assert (= BAV5 (= S (singleton (union (singleton (_ bv0 1)) (singleton (_ bv1 1)))))))
(assert (= BAV6 (= S (union (singleton (as emptyset (Set (_ BitVec 1)))) (singleton (singleton (_ bv0 1)))))))
(assert (= BAV7 (= S (union (singleton (as emptyset (Set (_ BitVec 1)))) (singleton (singleton (_ bv1 1)))))))
(assert (= BAV8 (= S (union (singleton (as emptyset (Set (_ BitVec 1)))) (singleton (union (singleton (_ bv0 1)) (singleton (_ bv1 1))))))))
(assert (= BAV9 (= S (union (singleton (union (singleton (_ bv0 1)) (singleton (_ bv1 1)))) (singleton (singleton (_ bv0 1)))))))
(assert (= BAV10 (= S (union (singleton (singleton (_ bv0 1))) (singleton (singleton (_ bv1 1)))))))
(assert (= BAV11 (= S (union (singleton (union (singleton (_ bv0 1)) (singleton (_ bv1 1)))) (singleton (singleton (_ bv1 1)))))))
(assert (= BAV12 (= S (union (singleton (singleton (_ bv1 1))) (union (singleton (as emptyset (Set (_ BitVec 1)))) (singleton (singleton (_ bv0 1))))))))
(assert (= BAV13 (= S (union (singleton (union (singleton (_ bv0 1)) (singleton (_ bv1 1)))) (union (singleton (as emptyset (Set (_ BitVec 1)))) (singleton (singleton (_ bv1 1))))))))
(assert (= BAV14 (= S (union (singleton (union (singleton (_ bv0 1)) (singleton (_ bv1 1)))) (union (singleton (singleton (_ bv0 1))) (singleton (singleton (_ bv1 1))))))))
(assert (= BAV15 (= S (union (singleton (union (singleton (_ bv0 1)) (singleton (_ bv1 1)))) (union (singleton (as emptyset (Set (_ BitVec 1)))) (singleton (singleton (_ bv0 1))))))))
(assert (= BAV16 (= S (union (singleton (union (singleton (_ bv0 1)) (singleton (_ bv1 1)))) (union (singleton (singleton (_ bv1 1))) (union (singleton (as emptyset (Set (_ BitVec 1)))) (singleton (singleton (_ bv0 1)))))))))
(check-sat)
(get-model)