(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const GEN63 Int)
(declare-const GEN62 Int)
(declare-const GEN61 Int)
(declare-const GEN60 String)
(declare-const GEN59 Int)
(declare-const GEN58 Int)
(declare-const GEN57 Int)
(declare-const GEN56 String)
(declare-const GEN55 Int)
(declare-const GEN54 Int)
(declare-const GEN53 Int)
(declare-const GEN52 String)
(declare-const GEN51 Int)
(declare-const GEN50 Int)
(declare-const GEN49 Int)
(declare-const GEN48 String)
(declare-const GEN47 String)
(declare-const GEN46 Int)
(declare-const GEN45 Int)
(declare-const GEN44 Int)
(declare-const GEN43 String)
(declare-const GEN42 Int)
(declare-const GEN41 Int)
(declare-const GEN40 Int)
(declare-const GEN39 String)
(declare-const GEN38 Int)
(declare-const GEN37 Int)
(declare-const GEN36 Int)
(declare-const GEN35 String)
(declare-const GEN34 Int)
(declare-const GEN33 Int)
(declare-const GEN32 Int)
(declare-const GEN31 String)
(declare-const GEN30 String)
(declare-const GEN29 Int)
(declare-const GEN28 Int)
(declare-const GEN27 Int)
(declare-const GEN26 String)
(declare-const GEN25 Int)
(declare-const GEN24 Int)
(declare-const GEN23 Int)
(declare-const GEN22 Int)
(declare-const GEN21 Int)
(declare-const GEN20 Int)
(declare-const GEN19 Int)
(declare-const GEN18 Int)
(declare-const GEN17 Int)
(declare-const GEN16 String)
(declare-const GEN15 Int)
(declare-const GEN14 Int)
(declare-const GEN13 Int)
(declare-const GEN12 String)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 String)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 String)
(set-option :strings-exp true)
(declare-fun value () String)
(declare-fun name () String)
(assert (not (not (not (= (ite (str.contains value GEN1) GEN2 GEN3) GEN4)))))
(assert (not (not (= (ite (str.contains value GEN5) GEN6 GEN7) GEN8))))
(assert (not (not (= (ite (= (str.substr value GEN9 (- GEN10 GEN11)) GEN12) GEN13 GEN14) GEN15))))
(assert (not (not (= (ite (> (str.indexof value GEN16 GEN17) GEN18) GEN19 GEN20) GEN21))))
(assert (not (= (ite (not (= (str.len value) GEN22)) GEN23 GEN24) GEN25)))
(assert (not (not (= (ite (str.contains value GEN26) GEN27 GEN28) GEN29))))
(assert (not (not (= (ite (str.contains value GEN30 ") 1 0) 0)))) 
(assert (not (not (= (ite (str.contains value " >") GEN32 GEN33) GEN34))))
(assert (not (not (= (ite (str.contains value GEN35) GEN36 GEN37) GEN38))))
(assert (not (not (= (ite (str.contains value GEN39) GEN40 GEN41) GEN42))))
(assert (not (not (= (ite (str.contains name GEN43) GEN44 GEN45) GEN46))))
(assert (not (not (= (ite (str.contains name GEN47 GEN48 >") GEN49 GEN50) GEN51))))
(assert (not (not (= (ite (str.contains name GEN52) GEN53 GEN54) GEN55))))
(assert (not (not (= (ite (str.contains name GEN56) GEN57 GEN58) GEN59))))
(assert (not (= (ite (not (= value GEN60)) GEN61 GEN62) GEN63)))
(assert (= BAV1 (= (ite (str.contains value GEN1) GEN2 GEN3) GEN4)))
(assert (= BAV2 (= (ite (str.contains value GEN5) GEN6 GEN7) GEN8)))
(assert (= BAV3 (= (ite (= (str.substr value GEN9 (- GEN10 GEN11)) GEN12) GEN13 GEN14) GEN15)))
(assert (= BAV4 (= (str.substr value GEN9 (- GEN10 GEN11)) GEN12)))
(assert (= BAV5 (= (ite (> (str.indexof value GEN16 GEN17) GEN18) GEN19 GEN20) GEN21)))
(assert (= BAV6 (> (str.indexof value GEN16 GEN17) GEN18)))
(assert (= BAV7 (= (ite (not (= (str.len value) GEN22)) GEN23 GEN24) GEN25)))
(assert (= BAV8 (= (str.len value) GEN22)))
(assert (= BAV9 (= (ite (str.contains value GEN26) GEN27 GEN28) GEN29)))
(assert (= BAV10 (= (ite (str.contains value GEN30 ") 1 0) 0)))) 
(assert (not (not (= (ite (str.contains value " >") GEN32 GEN33) GEN34)))
(assert (= BAV11 (= (ite (str.contains value GEN35) GEN36 GEN37) GEN38)))
(assert (= BAV12 (= (ite (str.contains value GEN39) GEN40 GEN41) GEN42)))
(assert (= BAV13 (= (ite (str.contains name GEN43) GEN44 GEN45) GEN46)))
(assert (= BAV14 (= (ite (str.contains name GEN47 GEN48 >") GEN49 GEN50) GEN51)))
(assert (= BAV15 (= (ite (str.contains name GEN52) GEN53 GEN54) GEN55)))
(assert (= BAV16 (= (ite (str.contains name GEN56) GEN57 GEN58) GEN59)))
(assert (= BAV17 (= (ite (not (= value GEN60)) GEN61 GEN62) GEN63)))
(assert (= BAV18 (= value GEN60)))