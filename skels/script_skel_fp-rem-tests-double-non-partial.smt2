(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const BAV23 Bool)
(declare-const BAV24 Bool)
(declare-const BAV25 Bool)
(declare-const BAV26 Bool)
(declare-const BAV27 Bool)
(declare-const BAV28 Bool)
(declare-const BAV29 Bool)
(declare-const BAV30 Bool)
(declare-const BAV31 Bool)
(declare-const BAV32 Bool)
(declare-const BAV33 Bool)
(declare-const BAV34 Bool)
(declare-const BAV35 Bool)
(declare-const BAV36 Bool)
(declare-const BAV37 Bool)
(declare-const BAV38 Bool)
(declare-const BAV39 Bool)
(declare-const BAV40 Bool)
(declare-const BAV41 Bool)
(declare-const BAV42 Bool)
(declare-const BAV43 Bool)
(declare-const BAV44 Bool)
(declare-const BAV45 Bool)
(declare-const BAV46 Bool)
(declare-const BAV47 Bool)
(declare-const BAV48 Bool)
(declare-const BAV49 Bool)
(declare-const BAV50 Bool)
(declare-const BAV51 Bool)
(declare-const BAV52 Bool)
(declare-const BAV53 Bool)
(declare-const BAV54 Bool)
(declare-const BAV55 Bool)
(declare-const BAV56 Bool)
(declare-const BAV57 Bool)
(declare-const BAV58 Bool)
(declare-const BAV59 Bool)
(declare-const BAV60 Bool)
(declare-const BAV61 Bool)
(declare-const BAV62 Bool)
(declare-const BAV63 Bool)
(declare-const BAV64 Bool)
(declare-const BAV65 Bool)
(declare-const BAV66 Bool)
(declare-const BAV67 Bool)
(declare-const BAV68 Bool)
(declare-const BAV69 Bool)
(declare-const BAV70 Bool)
(declare-const BAV71 Bool)
(declare-const BAV72 Bool)
(declare-const BAV73 Bool)
(declare-const BAV74 Bool)
(declare-const BAV75 Bool)
(declare-const BAV76 Bool)
(declare-const GEN69 (_ BitVec 52))
(declare-const GEN68 (_ BitVec 11))
(declare-const GEN67 (_ BitVec 1))
(declare-const GEN66 (_ BitVec 52))
(declare-const GEN65 (_ BitVec 11))
(declare-const GEN64 (_ BitVec 1))
(declare-const GEN63 (_ BitVec 52))
(declare-const GEN62 (_ BitVec 11))
(declare-const GEN61 (_ BitVec 1))
(declare-const GEN60 (_ BitVec 52))
(declare-const GEN59 (_ BitVec 11))
(declare-const GEN58 (_ BitVec 1))
(declare-const GEN57 (_ BitVec 52))
(declare-const GEN56 (_ BitVec 11))
(declare-const GEN55 (_ BitVec 1))
(declare-const GEN54 Int)
(declare-const GEN53 Int)
(declare-const GEN52 (_ BitVec 52))
(declare-const GEN51 (_ BitVec 11))
(declare-const GEN50 (_ BitVec 1))
(declare-const GEN49 (_ BitVec 52))
(declare-const GEN48 (_ BitVec 11))
(declare-const GEN47 (_ BitVec 1))
(declare-const GEN46 Int)
(declare-const GEN45 Int)
(declare-const GEN44 (_ BitVec 52))
(declare-const GEN43 (_ BitVec 11))
(declare-const GEN42 (_ BitVec 1))
(declare-const GEN41 (_ BitVec 52))
(declare-const GEN40 (_ BitVec 11))
(declare-const GEN39 (_ BitVec 1))
(declare-const GEN38 (_ BitVec 52))
(declare-const GEN37 (_ BitVec 11))
(declare-const GEN36 (_ BitVec 1))
(declare-const GEN35 (_ BitVec 52))
(declare-const GEN34 (_ BitVec 11))
(declare-const GEN33 (_ BitVec 1))
(declare-const GEN32 (_ BitVec 52))
(declare-const GEN31 (_ BitVec 11))
(declare-const GEN30 (_ BitVec 1))
(declare-const GEN29 (_ BitVec 52))
(declare-const GEN28 (_ BitVec 11))
(declare-const GEN27 (_ BitVec 1))
(declare-const GEN26 (_ BitVec 52))
(declare-const GEN25 (_ BitVec 11))
(declare-const GEN24 (_ BitVec 1))
(declare-const GEN23 (_ BitVec 52))
(declare-const GEN22 (_ BitVec 11))
(declare-const GEN21 (_ BitVec 1))
(declare-const GEN20 Int)
(declare-const GEN19 Int)
(declare-const GEN18 (_ BitVec 52))
(declare-const GEN17 (_ BitVec 11))
(declare-const GEN16 (_ BitVec 1))
(declare-const GEN15 Int)
(declare-const GEN14 Int)
(declare-const GEN13 Int)
(declare-const GEN12 Int)
(declare-const GEN11 (_ BitVec 52))
(declare-const GEN10 (_ BitVec 11))
(declare-const GEN9 (_ BitVec 1))
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(set-info :source "Handcrafted by CM Wintersteiger")
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-const x FPN)
(declare-const y FPN)
(declare-const r FPN)
(push)
(assert (= x (_ +zero 11 53)))
(assert (= y (_ +zero 11 53)))
(assert (= r (fp.rem x y)))
(assert (not (= r (_ NaN 11 53))))
(check-sat-using qffp)
(pop)
(push)
(assert (= x (_ +zero 11 53)))
(assert (= y (fp GEN9 GEN10 GEN11)))
(assert (= r (fp.rem x y)))
(assert (not (= r (_ +zero 11 53))))
(check-sat-using qffp)
(pop)
(push)
(assert (= x (_ -zero 11 53)))
(assert (= y (fp GEN16 GEN17 GEN18)))
(assert (= r (fp.rem x y)))
(assert (not (= r (_ -zero 11 53))))
(check-sat-using qffp)
(pop)
(push)
(assert (= x (fp #b0 GEN22 GEN23)))
(assert (= y (fp GEN24 GEN25 GEN26)))
(assert (= r (fp.rem x y)))
(assert (not (= r (fp GEN27 GEN28 GEN29))))
(check-sat-using qffp)
(pop)
(push)
(assert (= x (fp GEN30 GEN31 GEN32)))
(assert (= y (fp GEN33 GEN34 GEN35)))
(assert (= r (fp.rem x y)))
(assert (not (= r (fp GEN36 GEN37 GEN38))))
(check-sat-using qffp)
(pop)
(push)
(assert (= x (fp GEN39 GEN40 GEN41)))
(assert (= y (fp GEN42 GEN43 GEN44)))
(assert (= r (fp.rem x y)))
(assert (not (= r (_ +zero GEN45 GEN46))))
(check-sat-using qffp)
(pop)
(push)
(assert (= x (fp GEN47 GEN48 GEN49)))
(assert (= y (fp GEN50 GEN51 GEN52)))
(assert (= r (fp.rem x y)))
(assert (not (= r (_ +zero GEN53 GEN54))))
(check-sat-using qffp)
(pop)
(push)
(assert (= x (fp GEN55 GEN56 GEN57)))
(assert (= y (fp GEN58 GEN59 GEN60)))
(assert (= r (fp.rem x y)))
(assert (not (= r (fp GEN61 GEN62 GEN63))))
(check-sat-using qffp)
(pop)
(push)
(assert (= x (fp GEN64 GEN65 GEN66)))
(assert (= y (fp GEN67 GEN68 GEN69)))
(assert (= r (fp.rem x y)))
(assert (not (= r (fp #b1 #b01111111101 #xE00000000003C))))
(check-sat-using qffp)
(pop)
(push)
(assert (= x (fp #b0 #b10000000000 #x0000000000000)))
(assert (= y (fp #b0 #b01111111111 #x8000000000000)))
(assert (= r (fp.rem x y)))
(assert (not (= r (fp #b0 #b01111111110 #x0000000000000))))
(check-sat-using qffp)
(pop)
(push)
(assert (= x (fp #b1 #b10011111101 #xA87E25EDC4BB5)))
(assert (= y (fp #b1 #b10011110011 #xE8364DDB1FEA2)))
(assert (= r (fp.rem x y)))
(assert (not (= r (fp #b1 #b10011110010 #x579A168BF2998))))
(check-sat-using qffp)
(pop)
(push)
(assert (= x (fp #b1 #b11010101100 #xBA496DA6FD793)))
(assert (= y (fp #b0 #b11010101000 #x5E71D0D8BC926)))
(assert (= r (fp.rem x y)))
(assert (not (= r (fp #b1 #b11010100110 #x0ECA2604708E0))))
(check-sat-using qffp)
(pop)
(push)
(assert (= x (fp #b1 #b11001110011 #x4C72393703C65)))
(assert (= y (fp #b1 #b11001100111 #xD6CABF4562BD9)))
(assert (= r (fp.rem x y)))
(assert (not (= r (fp #b1 #b11001100110 #x525558C9DF128))))
(check-sat-using qffp)
(pop)
(push)
(assert (= x (fp #b0 #b01001010001 #x7A1E15D14E5BF)))
(assert (= y (fp #b1 #b01001001000 #x7527CE0F3ED04)))
(assert (= r (fp.rem x y)))
(assert (not (= r (fp #b1 #b01001000110 #x1E1C792E81470))))
(check-sat-using qffp)
(pop)
(push)
(assert (= x (fp #b0 #b10000110100 #x0000000000000)))
(assert (= y (fp #b1 #b01111111111 #x0000000000000)))
(assert (= r (fp.rem x y)))
(assert (not (= r (fp #b0 #b00000000000 #x0000000000000))))
(check-sat-using qffp)
(pop)
(push)
(assert (= x (fp #b0 #b00101110100 #xC7A45FFD68A0B)))
(assert (= y (fp #b1 #b00101110101 #x97CF87669C19A)))
(assert (= r (fp.rem x y)))
(assert (not (= r (fp #b1 #b00101110100 #x67FAAECFCF929))))
(check-sat-using qffp)
(pop)
(push)
(assert (= x (fp #b0 #b00000000000 #x0000000000001)))
(assert (= y (fp #b1 #b00000000000 #x0000000000002)))
(assert (= r (fp.rem x y)))
(assert (not (= r (fp #b0 #b00000000000 #x0000000000001))))
(check-sat-using qffp)
(pop)
(push)
(assert (= x (fp #b0 #b00000000000 #x6D94D95948562)))
(assert (= y (fp #b0 #b00000000000 #xCDED95B5422BF)))
(assert (= r (fp.rem x y)))
(assert (not (= r (fp #b1 #b00000000000 #x6058BC5BF9D5D))))
(check-sat-using qffp)
(pop)
(push)
(assert (= x (fp #b0 #b01101000100 #xE821F8D041F88)))
(assert (= y (fp #b0 #b01101100010 #xA4731A475E745)))
(assert (= r (fp.rem x y)))
(assert (not (= r (fp #b0 #b01101000100 #xE821F8D041F88))))
(check-sat-using qffp)
(pop)
(exit)
(assert (= BAV1 (= x (_ +zero 11 53))))
(assert (= BAV2 (= y (_ +zero 11 53))))
(assert (= BAV3 (= r (fp.rem x y))))
(assert (= BAV4 (= r (_ NaN 11 53))))
(assert (= BAV5 (= x (_ +zero 11 53))))
(assert (= BAV6 (= y (fp GEN9 GEN10 GEN11))))
(assert (= BAV7 (= r (fp.rem x y))))
(assert (= BAV8 (= r (_ +zero 11 53))))
(assert (= BAV9 (= x (_ -zero 11 53))))
(assert (= BAV10 (= y (fp GEN16 GEN17 GEN18))))
(assert (= BAV11 (= r (fp.rem x y))))
(assert (= BAV12 (= r (_ -zero 11 53))))
(assert (= BAV13 (= x (fp #b0 GEN22 GEN23))))
(assert (= BAV14 (= y (fp GEN24 GEN25 GEN26))))
(assert (= BAV15 (= r (fp.rem x y))))
(assert (= BAV16 (= r (fp GEN27 GEN28 GEN29))))
(assert (= BAV17 (= x (fp GEN30 GEN31 GEN32))))
(assert (= BAV18 (= y (fp GEN33 GEN34 GEN35))))
(assert (= BAV19 (= r (fp.rem x y))))
(assert (= BAV20 (= r (fp GEN36 GEN37 GEN38))))
(assert (= BAV21 (= x (fp GEN39 GEN40 GEN41))))
(assert (= BAV22 (= y (fp GEN42 GEN43 GEN44))))
(assert (= BAV23 (= r (fp.rem x y))))
(assert (= BAV24 (= r (_ +zero GEN45 GEN46))))
(assert (= BAV25 (= x (fp GEN47 GEN48 GEN49))))
(assert (= BAV26 (= y (fp GEN50 GEN51 GEN52))))
(assert (= BAV27 (= r (fp.rem x y))))
(assert (= BAV28 (= r (_ +zero GEN53 GEN54))))
(assert (= BAV29 (= x (fp GEN55 GEN56 GEN57))))
(assert (= BAV30 (= y (fp GEN58 GEN59 GEN60))))
(assert (= BAV31 (= r (fp.rem x y))))
(assert (= BAV32 (= r (fp GEN61 GEN62 GEN63))))
(assert (= BAV33 (= x (fp GEN64 GEN65 GEN66))))
(assert (= BAV34 (= y (fp GEN67 GEN68 GEN69))))
(assert (= BAV35 (= r (fp.rem x y))))
(assert (= BAV36 (= r (fp #b1 #b01111111101 #xE00000000003C))))
(assert (= BAV37 (= x (fp #b0 #b10000000000 #x0000000000000))))
(assert (= BAV38 (= y (fp #b0 #b01111111111 #x8000000000000))))
(assert (= BAV39 (= r (fp.rem x y))))
(assert (= BAV40 (= r (fp #b0 #b01111111110 #x0000000000000))))
(assert (= BAV41 (= x (fp #b1 #b10011111101 #xA87E25EDC4BB5))))
(assert (= BAV42 (= y (fp #b1 #b10011110011 #xE8364DDB1FEA2))))
(assert (= BAV43 (= r (fp.rem x y))))
(assert (= BAV44 (= r (fp #b1 #b10011110010 #x579A168BF2998))))
(assert (= BAV45 (= x (fp #b1 #b11010101100 #xBA496DA6FD793))))
(assert (= BAV46 (= y (fp #b0 #b11010101000 #x5E71D0D8BC926))))
(assert (= BAV47 (= r (fp.rem x y))))
(assert (= BAV48 (= r (fp #b1 #b11010100110 #x0ECA2604708E0))))
(assert (= BAV49 (= x (fp #b1 #b11001110011 #x4C72393703C65))))
(assert (= BAV50 (= y (fp #b1 #b11001100111 #xD6CABF4562BD9))))
(assert (= BAV51 (= r (fp.rem x y))))
(assert (= BAV52 (= r (fp #b1 #b11001100110 #x525558C9DF128))))
(assert (= BAV53 (= x (fp #b0 #b01001010001 #x7A1E15D14E5BF))))
(assert (= BAV54 (= y (fp #b1 #b01001001000 #x7527CE0F3ED04))))
(assert (= BAV55 (= r (fp.rem x y))))
(assert (= BAV56 (= r (fp #b1 #b01001000110 #x1E1C792E81470))))
(assert (= BAV57 (= x (fp #b0 #b10000110100 #x0000000000000))))
(assert (= BAV58 (= y (fp #b1 #b01111111111 #x0000000000000))))
(assert (= BAV59 (= r (fp.rem x y))))
(assert (= BAV60 (= r (fp #b0 #b00000000000 #x0000000000000))))
(assert (= BAV61 (= x (fp #b0 #b00101110100 #xC7A45FFD68A0B))))
(assert (= BAV62 (= y (fp #b1 #b00101110101 #x97CF87669C19A))))
(assert (= BAV63 (= r (fp.rem x y))))
(assert (= BAV64 (= r (fp #b1 #b00101110100 #x67FAAECFCF929))))
(assert (= BAV65 (= x (fp #b0 #b00000000000 #x0000000000001))))
(assert (= BAV66 (= y (fp #b1 #b00000000000 #x0000000000002))))
(assert (= BAV67 (= r (fp.rem x y))))
(assert (= BAV68 (= r (fp #b0 #b00000000000 #x0000000000001))))
(assert (= BAV69 (= x (fp #b0 #b00000000000 #x6D94D95948562))))
(assert (= BAV70 (= y (fp #b0 #b00000000000 #xCDED95B5422BF))))
(assert (= BAV71 (= r (fp.rem x y))))
(assert (= BAV72 (= r (fp #b1 #b00000000000 #x6058BC5BF9D5D))))
(assert (= BAV73 (= x (fp #b0 #b01101000100 #xE821F8D041F88))))
(assert (= BAV74 (= y (fp #b0 #b01101100010 #xA4731A475E745))))
(assert (= BAV75 (= r (fp.rem x y))))
(assert (= BAV76 (= r (fp #b0 #b01101000100 #xE821F8D041F88))))