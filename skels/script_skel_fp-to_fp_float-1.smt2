(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const GEN14 Int)
(declare-const GEN13 Real)
(declare-const GEN12 Int)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Real)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Real)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(set-option :produce-models true)
(declare-fun large () ( _ FloatingPoint 11 53 ))
(declare-fun cast () ( _ FloatingPoint 11 53 ))
(declare-fun small () ( _ FloatingPoint 8 24 ))
(assert (= small ((_ to_fp 8 24) roundNearestTiesToEven GEN3 (- GEN4))))
(assert (= large ((_ to_fp 11 53) roundNearestTiesToEven GEN7 (- GEN8))))
(assert (= cast ((_ to_fp 11 53) roundNearestTiesToEven small)))
(assert (not (= cast ((_ to_fp 11 53) roundNearestTiesToEven GEN13 (- GEN14)))))
(assert (= BAV1 (= small ((_ to_fp 8 24) roundNearestTiesToEven GEN3 (- GEN4)))))
(assert (= BAV2 (= large ((_ to_fp 11 53) roundNearestTiesToEven GEN7 (- GEN8)))))
(assert (= BAV3 (= cast ((_ to_fp 11 53) roundNearestTiesToEven small))))
(assert (= BAV4 (= cast ((_ to_fp 11 53) roundNearestTiesToEven GEN13 (- GEN14)))))
(check-sat)
(get-model)
(check-sat-using smt)