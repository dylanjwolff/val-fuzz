(set-logic ALL)
(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const BAV23 Bool)
(declare-const BAV24 Bool)
(declare-const BAV25 Bool)
(declare-const BAV26 Bool)
(declare-const BAV27 Bool)
(declare-const BAV28 Bool)
(declare-const BAV29 Bool)
(declare-const BAV30 Bool)
(declare-const BAV31 Bool)
(declare-const BAV32 Bool)
(declare-const BAV33 Bool)
(declare-const BAV34 Bool)
(declare-const BAV35 Bool)
(declare-const BAV36 Bool)
(declare-const BAV37 Bool)
(declare-const BAV38 Bool)
(declare-const BAV39 Bool)
(declare-const BAV40 Bool)
(declare-const BAV41 Bool)
(declare-const BAV42 Bool)
(declare-const BAV43 Bool)
(declare-const BAV44 Bool)
(set-info :source |
CADE ATP System competition. See http://www.cs.miami.edu/~tptp/CASC
 for more information. 

This benchmark was obtained by trying to find a finite model of a first-order 
formula (Albert Oliveras).
|)
(set-info :smt-lib-version 2.0)
(set-info :category "crafted")
(declare-sort U 0)
(declare-fun c3 () U)
(declare-fun f1 (U U) U)
(declare-fun f4 (U) U)
(declare-fun c2 () U)
(declare-fun c_0 () U)
(declare-fun c_1 () U)
(assert (and (distinct c_0 c_1) (= (f1 (f1 (f1 c3 c_0) c_0) c_0) (f1 c_0 (f1 c_0 c_0))) (= (f1 (f1 (f1 c3 c_0) c_0) c_1) (f1 c_0 (f1 c_0 c_1))) (= (f1 (f1 (f1 c3 c_0) c_1) c_0) (f1 c_1 (f1 c_0 c_0))) (= (f1 (f1 (f1 c3 c_0) c_1) c_1) (f1 c_1 (f1 c_0 c_1))) (= (f1 (f1 (f1 c3 c_1) c_0) c_0) (f1 c_0 (f1 c_1 c_0))) (= (f1 (f1 (f1 c3 c_1) c_0) c_1) (f1 c_0 (f1 c_1 c_1))) (= (f1 (f1 (f1 c3 c_1) c_1) c_0) (f1 c_1 (f1 c_1 c_0))) (= (f1 (f1 (f1 c3 c_1) c_1) c_1) (f1 c_1 (f1 c_1 c_1))) (not (= (f1 c_0 (f4 c_0)) (f1 (f4 c_0) (f1 c_0 (f4 c_0))))) (not (= (f1 c_1 (f4 c_1)) (f1 (f4 c_1) (f1 c_1 (f4 c_1))))) (= (f1 (f1 (f1 c2 c_0) c_0) c_0) (f1 (f1 (f1 c_0 c_0) c_0) c_0)) (= (f1 (f1 (f1 c2 c_0) c_0) c_1) (f1 (f1 (f1 c_0 c_1) c_0) c_1)) (= (f1 (f1 (f1 c2 c_0) c_1) c_0) (f1 (f1 (f1 c_0 c_0) c_1) c_0)) (= (f1 (f1 (f1 c2 c_0) c_1) c_1) (f1 (f1 (f1 c_0 c_1) c_1) c_1)) (= (f1 (f1 (f1 c2 c_1) c_0) c_0) (f1 (f1 (f1 c_1 c_0) c_0) c_0)) (= (f1 (f1 (f1 c2 c_1) c_0) c_1) (f1 (f1 (f1 c_1 c_1) c_0) c_1)) (= (f1 (f1 (f1 c2 c_1) c_1) c_0) (f1 (f1 (f1 c_1 c_0) c_1) c_0)) (= (f1 (f1 (f1 c2 c_1) c_1) c_1) (f1 (f1 (f1 c_1 c_1) c_1) c_1)) (or (= (f1 c_0 c_0) c_0) (= (f1 c_0 c_0) c_1)) (or (= (f1 c_0 c_1) c_0) (= (f1 c_0 c_1) c_1)) (or (= (f1 c_1 c_0) c_0) (= (f1 c_1 c_0) c_1)) (or (= (f1 c_1 c_1) c_0) (= (f1 c_1 c_1) c_1)) (or (= (f4 c_0) c_0) (= (f4 c_0) c_1)) (or (= (f4 c_1) c_0) (= (f4 c_1) c_1)) (or (= c3 c_0) (= c3 c_1)) (or (= c2 c_0) (= c2 c_1))))
(assert (= BAV1 (and (distinct c_0 c_1) (= (f1 (f1 (f1 c3 c_0) c_0) c_0) (f1 c_0 (f1 c_0 c_0))) (= (f1 (f1 (f1 c3 c_0) c_0) c_1) (f1 c_0 (f1 c_0 c_1))) (= (f1 (f1 (f1 c3 c_0) c_1) c_0) (f1 c_1 (f1 c_0 c_0))) (= (f1 (f1 (f1 c3 c_0) c_1) c_1) (f1 c_1 (f1 c_0 c_1))) (= (f1 (f1 (f1 c3 c_1) c_0) c_0) (f1 c_0 (f1 c_1 c_0))) (= (f1 (f1 (f1 c3 c_1) c_0) c_1) (f1 c_0 (f1 c_1 c_1))) (= (f1 (f1 (f1 c3 c_1) c_1) c_0) (f1 c_1 (f1 c_1 c_0))) (= (f1 (f1 (f1 c3 c_1) c_1) c_1) (f1 c_1 (f1 c_1 c_1))) (not (= (f1 c_0 (f4 c_0)) (f1 (f4 c_0) (f1 c_0 (f4 c_0))))) (not (= (f1 c_1 (f4 c_1)) (f1 (f4 c_1) (f1 c_1 (f4 c_1))))) (= (f1 (f1 (f1 c2 c_0) c_0) c_0) (f1 (f1 (f1 c_0 c_0) c_0) c_0)) (= (f1 (f1 (f1 c2 c_0) c_0) c_1) (f1 (f1 (f1 c_0 c_1) c_0) c_1)) (= (f1 (f1 (f1 c2 c_0) c_1) c_0) (f1 (f1 (f1 c_0 c_0) c_1) c_0)) (= (f1 (f1 (f1 c2 c_0) c_1) c_1) (f1 (f1 (f1 c_0 c_1) c_1) c_1)) (= (f1 (f1 (f1 c2 c_1) c_0) c_0) (f1 (f1 (f1 c_1 c_0) c_0) c_0)) (= (f1 (f1 (f1 c2 c_1) c_0) c_1) (f1 (f1 (f1 c_1 c_1) c_0) c_1)) (= (f1 (f1 (f1 c2 c_1) c_1) c_0) (f1 (f1 (f1 c_1 c_0) c_1) c_0)) (= (f1 (f1 (f1 c2 c_1) c_1) c_1) (f1 (f1 (f1 c_1 c_1) c_1) c_1)) (or (= (f1 c_0 c_0) c_0) (= (f1 c_0 c_0) c_1)) (or (= (f1 c_0 c_1) c_0) (= (f1 c_0 c_1) c_1)) (or (= (f1 c_1 c_0) c_0) (= (f1 c_1 c_0) c_1)) (or (= (f1 c_1 c_1) c_0) (= (f1 c_1 c_1) c_1)) (or (= (f4 c_0) c_0) (= (f4 c_0) c_1)) (or (= (f4 c_1) c_0) (= (f4 c_1) c_1)) (or (= c3 c_0) (= c3 c_1)) (or (= c2 c_0) (= c2 c_1)))))
(assert (= BAV2 (distinct c_0 c_1)))
(assert (= BAV3 (= (f1 (f1 (f1 c3 c_0) c_0) c_0) (f1 c_0 (f1 c_0 c_0)))))
(assert (= BAV4 (= (f1 (f1 (f1 c3 c_0) c_0) c_1) (f1 c_0 (f1 c_0 c_1)))))
(assert (= BAV5 (= (f1 (f1 (f1 c3 c_0) c_1) c_0) (f1 c_1 (f1 c_0 c_0)))))
(assert (= BAV6 (= (f1 (f1 (f1 c3 c_0) c_1) c_1) (f1 c_1 (f1 c_0 c_1)))))
(assert (= BAV7 (= (f1 (f1 (f1 c3 c_1) c_0) c_0) (f1 c_0 (f1 c_1 c_0)))))
(assert (= BAV8 (= (f1 (f1 (f1 c3 c_1) c_0) c_1) (f1 c_0 (f1 c_1 c_1)))))
(assert (= BAV9 (= (f1 (f1 (f1 c3 c_1) c_1) c_0) (f1 c_1 (f1 c_1 c_0)))))
(assert (= BAV10 (= (f1 (f1 (f1 c3 c_1) c_1) c_1) (f1 c_1 (f1 c_1 c_1)))))
(assert (= BAV11 (= (f1 c_0 (f4 c_0)) (f1 (f4 c_0) (f1 c_0 (f4 c_0))))))
(assert (= BAV12 (= (f1 c_1 (f4 c_1)) (f1 (f4 c_1) (f1 c_1 (f4 c_1))))))
(assert (= BAV13 (= (f1 (f1 (f1 c2 c_0) c_0) c_0) (f1 (f1 (f1 c_0 c_0) c_0) c_0))))
(assert (= BAV14 (= (f1 (f1 (f1 c2 c_0) c_0) c_1) (f1 (f1 (f1 c_0 c_1) c_0) c_1))))
(assert (= BAV15 (= (f1 (f1 (f1 c2 c_0) c_1) c_0) (f1 (f1 (f1 c_0 c_0) c_1) c_0))))
(assert (= BAV16 (= (f1 (f1 (f1 c2 c_0) c_1) c_1) (f1 (f1 (f1 c_0 c_1) c_1) c_1))))
(assert (= BAV17 (= (f1 (f1 (f1 c2 c_1) c_0) c_0) (f1 (f1 (f1 c_1 c_0) c_0) c_0))))
(assert (= BAV18 (= (f1 (f1 (f1 c2 c_1) c_0) c_1) (f1 (f1 (f1 c_1 c_1) c_0) c_1))))
(assert (= BAV19 (= (f1 (f1 (f1 c2 c_1) c_1) c_0) (f1 (f1 (f1 c_1 c_0) c_1) c_0))))
(assert (= BAV20 (= (f1 (f1 (f1 c2 c_1) c_1) c_1) (f1 (f1 (f1 c_1 c_1) c_1) c_1))))
(assert (= BAV21 (or (= (f1 c_0 c_0) c_0) (= (f1 c_0 c_0) c_1))))
(assert (= BAV22 (= (f1 c_0 c_0) c_0)))
(assert (= BAV23 (= (f1 c_0 c_0) c_1)))
(assert (= BAV24 (or (= (f1 c_0 c_1) c_0) (= (f1 c_0 c_1) c_1))))
(assert (= BAV25 (= (f1 c_0 c_1) c_0)))
(assert (= BAV26 (= (f1 c_0 c_1) c_1)))
(assert (= BAV27 (or (= (f1 c_1 c_0) c_0) (= (f1 c_1 c_0) c_1))))
(assert (= BAV28 (= (f1 c_1 c_0) c_0)))
(assert (= BAV29 (= (f1 c_1 c_0) c_1)))
(assert (= BAV30 (or (= (f1 c_1 c_1) c_0) (= (f1 c_1 c_1) c_1))))
(assert (= BAV31 (= (f1 c_1 c_1) c_0)))
(assert (= BAV32 (= (f1 c_1 c_1) c_1)))
(assert (= BAV33 (or (= (f4 c_0) c_0) (= (f4 c_0) c_1))))
(assert (= BAV34 (= (f4 c_0) c_0)))
(assert (= BAV35 (= (f4 c_0) c_1)))
(assert (= BAV36 (or (= (f4 c_1) c_0) (= (f4 c_1) c_1))))
(assert (= BAV37 (= (f4 c_1) c_0)))
(assert (= BAV38 (= (f4 c_1) c_1)))
(assert (= BAV39 (or (= c3 c_0) (= c3 c_1))))
(assert (= BAV40 (= c3 c_0)))
(assert (= BAV41 (= c3 c_1)))
(assert (= BAV42 (or (= c2 c_0) (= c2 c_1))))
(assert (= BAV43 (= c2 c_0)))
(assert (= BAV44 (= c2 c_1)))
(check-sat)