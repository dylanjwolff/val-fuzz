(set-logic ALL)
(declare-const GEN9 String)
(declare-const GEN8 String)
(declare-const GEN7 String)
(declare-const GEN6 String)
(declare-const GEN5 String)
(declare-const GEN4 String)
(declare-const GEN3 String)
(declare-const GEN2 String)
(declare-const GEN1 String)
(set-option :strings-exp true)
(declare-fun var_0 () String)
(declare-fun var_1 () String)
(declare-fun var_2 () String)
(declare-fun var_3 () String)
(declare-fun var_4 () String)
(declare-fun var_5 () String)
(declare-fun var_6 () String)
(declare-fun var_7 () String)
(declare-fun var_8 () String)
(declare-fun var_9 () String)
(declare-fun var_10 () String)
(declare-fun var_11 () String)
(declare-fun var_12 () String)
(assert (str.in.re GEN1 (re.* (re.range "a" GEN3))))
(assert (str.in.re var_4 (re.* (re.range GEN4 GEN5))))
(assert (str.in.re var_4 (re.* (re.union (str.to.re GEN6) (str.to.re GEN7)))))
(assert (not (str.in.re (str.++ var_4 GEN8) (re.* (str.to.re GEN9)))))
(check-sat)
(get-model)