(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(set-option :auto-config true)
(set-option :produce-models true)
(set-option :smt.mbqi true)
(declare-fun f (Int) Int)
(declare-fun g (Int) Int)
(declare-const n Int)
(declare-const a Int)
(assert (forall ((x Int)) (=> (and (<= GEN1 x) (<= x n)) (= (f (+ x a)) (g x)))))
(assert (> a GEN2))
(assert (>= (f a) GEN3))
(assert (<= (g GEN4) (- GEN5)))
(assert (= BAV1 (forall ((x Int)) (=> (and (<= GEN1 x) (<= x n)) (= (f (+ x a)) (g x))))))
(assert (= BAV2 (forall ((x Int)) (and (<= GEN1 x) (<= x n)))))
(assert (= BAV3 (forall ((x Int)) (<= GEN1 x))))
(assert (= BAV4 (forall ((x Int)) (<= x n))))
(assert (= BAV5 (forall ((x Int)) (= (f (+ x a)) (g x)))))
(assert (= BAV6 (> a GEN2)))
(assert (= BAV7 (>= (f a) GEN3)))
(assert (= BAV8 (<= (g GEN4) (- GEN5))))
(check-sat)
(get-model)