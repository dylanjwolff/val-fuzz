(set-logic ALL)
(declare-const GEN1 Int)
(declare-const GEN2 Real)
(declare-const GEN3 Int)
(declare-const GEN4 Int)
(declare-const GEN5 Int)
(declare-const GEN6 Int)
(declare-const GEN7 Int)
(declare-const GEN8 Int)
(declare-const GEN9 Int)
(declare-const GEN10 Int)
(declare-const GEN11 Int)
(declare-const GEN12 Int)
(declare-const GEN13 Int)
(declare-const GEN14 Real)
(declare-const GEN15 Real)
(declare-const GEN16 Real)
(declare-const GEN17 Real)
(declare-const GEN18 Real)
(declare-const GEN19 Real)
(declare-const GEN20 Int)
(declare-const GEN21 Int)
(declare-const GEN22 Real)
(declare-const GEN23 Real)
(declare-const GEN24 Real)
(declare-const GEN25 Real)
(declare-const GEN26 Int)
(declare-const GEN27 Int)
(declare-const GEN28 Real)
(declare-const GEN29 Real)
(declare-const GEN30 Real)
(declare-const GEN31 Real)
(declare-const GEN32 Real)
(declare-const GEN33 Real)
(declare-const GEN34 Real)
(declare-const GEN35 Real)
(declare-const GEN36 Real)
(declare-const GEN37 Real)
(declare-const GEN38 Real)
(declare-const GEN39 Real)
(declare-const GEN40 Real)
(declare-const GEN41 Real)
(declare-const GEN42 Real)
(declare-const GEN43 Real)
(declare-const GEN44 Real)
(declare-const GEN45 Real)
(declare-const GEN46 Real)
(declare-const GEN47 Real)
(declare-const GEN48 Real)
(declare-const GEN49 Real)
(declare-const GEN50 Int)
(declare-const GEN51 Real)
(declare-const GEN52 Real)
(declare-const GEN53 Real)
(declare-const GEN54 Int)
(declare-const GEN55 Real)
(declare-const GEN56 Real)
(declare-const GEN57 Real)
(declare-const GEN58 Real)
(declare-const GEN59 Int)
(declare-const GEN60 Real)
(declare-const GEN61 Real)
(declare-const GEN62 Real)
(declare-const GEN63 Real)
(declare-const GEN64 Int)
(declare-const GEN65 Real)
(declare-const GEN66 Real)
(declare-const GEN67 Real)
(declare-const GEN68 Real)
(declare-const GEN69 Real)
(declare-const GEN70 Real)
(declare-const GEN71 Real)
(declare-const GEN72 Real)
(declare-const GEN73 Real)
(declare-const GEN74 Real)
(declare-const GEN75 Real)
(declare-const GEN76 Real)
(declare-const GEN77 Real)
(declare-const GEN78 Int)
(declare-const GEN79 Int)
(declare-const GEN80 Int)
(declare-const GEN81 Int)
(declare-const GEN82 Int)
(declare-const GEN83 Int)
(declare-const GEN84 Int)
(declare-const GEN85 Int)
(declare-const GEN86 Int)
(declare-const GEN87 Int)
(declare-const GEN88 Int)
(declare-const GEN89 Int)
(declare-const GEN90 Int)
(declare-const GEN91 Int)
(declare-const GEN92 Int)
(declare-const GEN93 Int)
(declare-const GEN94 Int)
(declare-const GEN95 Int)
(declare-const GEN96 Int)
(declare-const GEN97 Int)
(declare-const GEN98 Int)
(declare-const GEN99 Int)
(declare-const GEN100 Int)
(declare-const BAV101 Bool)
(declare-const BAV102 Bool)
(declare-const BAV103 Bool)
(declare-const BAV104 Bool)
(declare-const BAV105 Bool)
(declare-const BAV106 Bool)
(declare-const BAV107 Bool)
(declare-const BAV108 Bool)
(declare-const BAV109 Bool)
(declare-const BAV110 Bool)
(declare-const BAV111 Bool)
(declare-const BAV112 Bool)
(declare-const BAV113 Bool)
(declare-const BAV114 Bool)
(declare-const BAV115 Bool)
(declare-const BAV116 Bool)
(declare-const BAV117 Bool)
(declare-const BAV118 Bool)
(declare-const BAV119 Bool)
(declare-const BAV120 Bool)
(declare-const BAV121 Bool)
(declare-const BAV122 Bool)
(declare-const BAV123 Bool)
(declare-const BAV124 Bool)
(declare-const BAV125 Bool)
(declare-const BAV126 Bool)
(declare-const BAV127 Bool)
(declare-const BAV128 Bool)
(declare-const BAV129 Bool)
(declare-const BAV130 Bool)
(declare-const BAV131 Bool)
(declare-const BAV132 Bool)
(declare-const BAV133 Bool)
(declare-const BAV134 Bool)
(declare-const BAV135 Bool)
(declare-const BAV136 Bool)
(declare-const BAV137 Bool)
(declare-const BAV138 Bool)
(declare-const BAV139 Bool)
(declare-const BAV140 Bool)
(declare-const BAV141 Bool)
(declare-const BAV142 Bool)
(declare-const BAV143 Bool)
(declare-const BAV144 Bool)
(declare-const BAV145 Bool)
(declare-const BAV146 Bool)
(declare-const BAV147 Bool)
(declare-const BAV148 Bool)
(declare-const BAV149 Bool)
(declare-const BAV150 Bool)
(declare-const BAV151 Bool)
(declare-const BAV152 Bool)
(declare-const BAV153 Bool)
(declare-const BAV154 Bool)
(declare-const BAV155 Bool)
(declare-const BAV156 Bool)
(declare-const BAV157 Bool)
(declare-const BAV158 Bool)
(declare-const BAV159 Bool)
(declare-const BAV160 Bool)
(declare-const BAV161 Bool)
(declare-const BAV162 Bool)
(declare-const BAV163 Bool)
(declare-const BAV164 Bool)
(declare-const BAV165 Bool)
(declare-const BAV166 Bool)
(declare-const BAV167 Bool)
(declare-const BAV168 Bool)
(declare-const BAV169 Bool)
(declare-const BAV170 Bool)
(declare-const BAV171 Bool)
(declare-const BAV172 Bool)
(declare-const BAV173 Bool)
(declare-const BAV174 Bool)
(declare-const BAV175 Bool)
(declare-const BAV176 Bool)
(declare-const BAV177 Bool)
(declare-const BAV178 Bool)
(declare-const BAV179 Bool)
(declare-const BAV180 Bool)
(declare-const BAV181 Bool)
(declare-const BAV182 Bool)
(declare-const BAV183 Bool)
(declare-const BAV184 Bool)
(declare-const BAV185 Bool)
(declare-const BAV186 Bool)
(declare-const BAV187 Bool)
(declare-const BAV188 Bool)
(declare-const BAV189 Bool)
(declare-const BAV190 Bool)
(declare-const BAV191 Bool)
(declare-const BAV192 Bool)
(declare-const BAV193 Bool)
(declare-const BAV194 Bool)
(declare-const BAV195 Bool)
(declare-const BAV196 Bool)
(declare-const BAV197 Bool)
(declare-const BAV198 Bool)
(declare-const BAV199 Bool)
(declare-const BAV200 Bool)
(declare-const BAV201 Bool)
(declare-const BAV202 Bool)
(declare-const BAV203 Bool)
(declare-const BAV204 Bool)
(declare-const BAV205 Bool)
(declare-const BAV206 Bool)
(declare-const BAV207 Bool)
(declare-const BAV208 Bool)
(declare-const BAV209 Bool)
(declare-const BAV210 Bool)
(declare-const BAV211 Bool)
(declare-const BAV212 Bool)
(declare-const BAV213 Bool)
(declare-const BAV214 Bool)
(declare-const BAV215 Bool)
(declare-const BAV216 Bool)
(declare-const BAV217 Bool)
(declare-const BAV218 Bool)
(declare-const BAV219 Bool)
(declare-const BAV220 Bool)
(declare-const BAV221 Bool)
(declare-const BAV222 Bool)
(declare-const BAV223 Bool)
(declare-const BAV224 Bool)
(declare-const BAV225 Bool)
(declare-const BAV226 Bool)
(declare-const BAV227 Bool)
(declare-const BAV228 Bool)
(declare-const BAV229 Bool)
(declare-const BAV230 Bool)
(declare-const BAV231 Bool)
(declare-const BAV232 Bool)
(declare-const BAV233 Bool)
(declare-const BAV234 Bool)
(declare-const BAV235 Bool)
(declare-const BAV236 Bool)
(declare-const BAV237 Bool)
(declare-const BAV238 Bool)
(declare-const BAV239 Bool)
(declare-const BAV240 Bool)
(declare-const BAV241 Bool)
(declare-const BAV242 Bool)
(declare-const BAV243 Bool)
(declare-const BAV244 Bool)
(declare-const BAV245 Bool)
(declare-const BAV246 Bool)
(declare-const BAV247 Bool)
(declare-const BAV248 Bool)
(declare-const BAV249 Bool)
(declare-const BAV250 Bool)
(declare-const BAV251 Bool)
(declare-const BAV252 Bool)
(declare-const BAV253 Bool)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
(set-option :produce-models true)
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun us_null_ext__ () us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))
(declare-fun us_compatible_tags (Int Int) Bool)
(assert (forall ((tag Int)) (us_compatible_tags tag tag)))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-fun power (Real Int) Real)
(assert (forall ((x Real)) (= (power x GEN1) GEN2)))
(assert (forall ((x Real)(n Int)) (=> (<= GEN3 n) (= (power x (+ n GEN4)) (* x (power x n))))))
(assert (forall ((x Real)(n Int)) (=> (< GEN5 n) (= (power x n) (* x (power x (- n GEN6)))))))
(assert (forall ((x Real)) (= (power x GEN7) x)))
(assert (forall ((x Real)(n Int)(m Int)) (=> (<= GEN8 n) (=> (<= GEN9 m) (= (power x (+ n m)) (* (power x n) (power x m)))))))
(assert (forall ((x Real)(n Int)(m Int)) (=> (<= GEN10 n) (=> (<= GEN11 m) (= (power x (* n m)) (power (power x n) m))))))
(assert (forall ((x Real)(y Real)(n Int)) (=> (<= GEN12 n) (= (power (* x y) n) (* (power x n) (power y n))))))
(assert (forall ((x Real)(n Int)) (=> (and (<= GEN13 n) (<= GEN14 x)) (<= GEN15 (power x n)))))
(declare-datatypes ()
((mode (NearestTiesToEven) (ToZero) (Up) (Down) (NearestTiesToAway))))
(declare-sort single 0)
(declare-fun round (mode Real) Real)
(declare-fun value (single) Real)
(declare-fun exact (single) Real)
(declare-fun model (single) Real)
(define-fun round_error ((x single)) Real (ite (>= (- (value x) (exact x)) 0.0) (-
  (value x) (exact x)) (- (- (value x) (exact x)))))
(define-fun total_error ((x single)) Real (ite (>= (- (value x) (model x)) 0.0) (-
  (value x) (model x)) (- (- (value x) (model x)))))
(define-fun no_overflow ((m mode)
  (x Real)) Bool (<= (ite (>= (round m x) 0.0) (round m x) (- (round m x))) 340282346638528859811704183484516925440.0))
(assert (forall ((m mode)(x Real)) (=> (<= (ite (>= x GEN16) x (- x)) GEN17) (no_overflow m x))))
(assert (forall ((m mode)(x Real)(y Real)) (=> (<= x y) (<= (round m x) (round m y)))))
(assert (forall ((m1 mode)(m2 mode)(x Real)) (= (round m1 (round m2 x)) (round m2 x))))
(assert (forall ((m mode)(x single)) (= (round m (value x)) (value x))))
(assert (forall ((x single)) (<= (ite (>= (value x) GEN18) (value x) (- (value x))) GEN19)))
(assert (forall ((m mode)(i Int)) (=> (and (<= (- GEN20) i) (<= i GEN21)) (= (round m (to_real i)) (to_real i)))))
(assert (forall ((x Real)) (<= (round Down x) x)))
(assert (forall ((x Real)) (<= x (round Up x))))
(assert (forall ((x Real)) (= (round Down (- x)) (- (round Up x)))))
(assert (forall ((x Real)) (= (round Up (- x)) (- (round Down x)))))
(declare-fun round_logic (mode Real) single)
(assert (forall ((m mode)(x Real)) (=> (no_overflow m x) (= (value (round_logic m x)) (round m x)))))
(define-fun of_real_post ((m mode) (x Real)
  (res single)) Bool (and (= (value res) (round m x))
                     (and (= (exact res) x) (= (model res) x))))
(define-fun add_post ((m mode) (x single) (y single)
  (res single)) Bool (and (= (value res) (round m (+ (value x) (value y))))
                     (and (= (exact res) (+ (exact x) (exact y)))
                     (= (model res) (+ (model x) (model y))))))
(define-fun sub_post ((m mode) (x single) (y single)
  (res single)) Bool (and (= (value res) (round m (- (value x) (value y))))
                     (and (= (exact res) (- (exact x) (exact y)))
                     (= (model res) (- (model x) (model y))))))
(define-fun mul_post ((m mode) (x single) (y single)
  (res single)) Bool (and (= (value res) (round m (* (value x) (value y))))
                     (and (= (exact res) (* (exact x) (exact y)))
                     (= (model res) (* (model x) (model y))))))
(define-fun div_post ((m mode) (x single) (y single)
  (res single)) Bool (and (= (value res) (round m (/ (value x) (value y))))
                     (and (= (exact res) (/ (exact x) (exact y)))
                     (= (model res) (/ (model x) (model y))))))
(define-fun neg_post ((x single)
  (res single)) Bool (and (= (value res) (- (value x)))
                     (and (= (exact res) (- (exact x)))
                     (= (model res) (- (model x))))))
(define-fun lt ((x single) (y single)) Bool (< (value x) (value y)))
(define-fun gt ((x single) (y single)) Bool (< (value y) (value x)))
(declare-sort double 0)
(declare-fun round1 (mode Real) Real)
(declare-fun value1 (double) Real)
(declare-fun exact1 (double) Real)
(declare-fun model1 (double) Real)
(define-fun round_error1 ((x double)) Real (ite (>= (- (value1 x) (exact1 x)) 0.0) (-
  (value1 x) (exact1 x)) (- (- (value1 x) (exact1 x)))))
(define-fun total_error1 ((x double)) Real (ite (>= (- (value1 x) (model1 x)) 0.0) (-
  (value1 x) (model1 x)) (- (- (value1 x) (model1 x)))))
(define-fun no_overflow1 ((m mode)
  (x Real)) Bool (<= (ite (>= (round1 m x) 0.0) (round1 m x) (- (round1 m x))) 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0))
(assert (forall ((m mode)(x Real)) (=> (<= (ite (>= x GEN22) x (- x)) GEN23) (no_overflow1 m x))))
(assert (forall ((m mode)(x Real)(y Real)) (=> (<= x y) (<= (round1 m x) (round1 m y)))))
(assert (forall ((m1 mode)(m2 mode)(x Real)) (= (round1 m1 (round1 m2 x)) (round1 m2 x))))
(assert (forall ((m mode)(x double)) (= (round1 m (value1 x)) (value1 x))))
(assert (forall ((x double)) (<= (ite (>= (value1 x) GEN24) (value1 x) (- (value1 x))) GEN25)))
(assert (forall ((m mode)(i Int)) (=> (and (<= (- GEN26) i) (<= i GEN27)) (= (round1 m (to_real i)) (to_real i)))))
(assert (forall ((x Real)) (<= (round1 Down x) x)))
(assert (forall ((x Real)) (<= x (round1 Up x))))
(assert (forall ((x Real)) (= (round1 Down (- x)) (- (round1 Up x)))))
(assert (forall ((x Real)) (= (round1 Up (- x)) (- (round1 Down x)))))
(declare-fun round_logic1 (mode Real) double)
(assert (forall ((m mode)(x Real)) (=> (no_overflow1 m x) (= (value1 (round_logic1 m x)) (round1 m x)))))
(define-fun of_real_post1 ((m mode) (x Real)
  (res double)) Bool (and (= (value1 res) (round1 m x))
                     (and (= (exact1 res) x) (= (model1 res) x))))
(define-fun add_post1 ((m mode) (x double) (y double)
  (res double)) Bool (and
                     (= (value1 res) (round1 m (+ (value1 x) (value1 y))))
                     (and (= (exact1 res) (+ (exact1 x) (exact1 y)))
                     (= (model1 res) (+ (model1 x) (model1 y))))))
(define-fun sub_post1 ((m mode) (x double) (y double)
  (res double)) Bool (and
                     (= (value1 res) (round1 m (- (value1 x) (value1 y))))
                     (and (= (exact1 res) (- (exact1 x) (exact1 y)))
                     (= (model1 res) (- (model1 x) (model1 y))))))
(define-fun mul_post1 ((m mode) (x double) (y double)
  (res double)) Bool (and
                     (= (value1 res) (round1 m (* (value1 x) (value1 y))))
                     (and (= (exact1 res) (* (exact1 x) (exact1 y)))
                     (= (model1 res) (* (model1 x) (model1 y))))))
(define-fun div_post1 ((m mode) (x double) (y double)
  (res double)) Bool (and
                     (= (value1 res) (round1 m (/ (value1 x) (value1 y))))
                     (and (= (exact1 res) (/ (exact1 x) (exact1 y)))
                     (= (model1 res) (/ (model1 x) (model1 y))))))
(define-fun neg_post1 ((x double)
  (res double)) Bool (and (= (value1 res) (- (value1 x)))
                     (and (= (exact1 res) (- (exact1 x)))
                     (= (model1 res) (- (model1 x))))))
(define-fun lt1 ((x double) (y double)) Bool (< (value1 x) (value1 y)))
(define-fun gt1 ((x double) (y double)) Bool (< (value1 y) (value1 x)))
(assert (forall ((x Real)) (! (and (<= (- (- x (* (/ GEN28 GEN29) (ite (>= x GEN30) x (- x)))) (/ GEN31 GEN32)) (round NearestTiesToEven x)) (<= (round NearestTiesToEven x) (+ (+ x (* (/ GEN33 GEN34) (ite (>= x GEN35) x (- x)))) (/ GEN36 GEN37)))) :pattern ((round NearestTiesToEven x)))))
(assert (forall ((x Real)) (! (and (<= (- (- x (* (/ GEN38 GEN39) (ite (>= x GEN40) x (- x)))) (/ GEN41 GEN42)) (round1 NearestTiesToEven x)) (<= (round1 NearestTiesToEven x) (+ (+ x (* (/ GEN43 GEN44) (ite (>= x GEN45) x (- x)))) (/ GEN46 GEN47)))) :pattern ((round1 NearestTiesToEven x)))))
(assert (forall ((x Real)) (! (= (round1 NearestTiesToEven (round NearestTiesToEven x)) (round NearestTiesToEven x)) :pattern ((round NearestTiesToEven x)))))
(declare-fun round2 (Real) Int)
(assert (forall ((x Real)) (=> (< (- x (to_real (to_int x))) (/ GEN48 GEN49)) (= (round2 x) (to_int x)))))
(assert (forall ((x Real)) (=> (< (- (to_real (- GEN50 (to_int (- GEN51 x)))) x) (/ GEN52 GEN53)) (= (round2 x) (- GEN54 (to_int (- GEN55 x)))))))
(assert (forall ((x Real)) (=> (and (= (- x (to_real (to_int x))) (/ GEN56 GEN57)) (< x GEN58)) (= (round2 x) (to_int x)))))
(assert (forall ((x Real)) (=> (and (= (- (to_real (- GEN59 (to_int (- GEN60 x)))) x) (/ GEN61 GEN62)) (< GEN63 x)) (= (round2 x) (- GEN64 (to_int (- GEN65 x)))))))
(assert (forall ((i Int)) (! (= (round2 (to_real i)) i) :pattern ((round2 (to_real i))))))
(assert (forall ((i Int)) (forall ((x Real)) (=> (and (< (- (/ GEN66 GEN67)) x) (< x (/ GEN68 GEN69))) (= (round2 (+ (to_real i) x)) i)))))
(assert (forall ((x Real)(y Real)) (=> (<= x y) (<= (round2 x) (round2 y)))))
(assert (forall ((x Real)(i Int)) (=> (<= x (to_real i)) (<= (round2 x) i))))
(assert (forall ((x Real)(i Int)) (=> (<= (to_real i) x) (<= i (round2 x)))))
(assert (forall ((x Real)) (and (<= (- x (/ GEN70 GEN71)) (to_real (round2 x))) (<= (to_real (round2 x)) (+ x (/ GEN72 GEN73))))))
(declare-fun remainder (Real Real) Real)
(declare-sort float 0)
(define-fun in_range1 ((x Real)) Bool (and
                                      (<= (- 340282346638528859811704183484516925440.0) x)
                                      (<= x 340282346638528859811704183484516925440.0)))
(declare-fun to_real1 (float) Real)
(declare-fun of_real (Real) float)
(declare-fun user_eq (float float) Bool)
(declare-fun next_representable (Real) Real)
(declare-fun prev_representable (Real) Real)
(assert (forall ((x Real)) (! (< x (next_representable x)) :pattern ((next_representable x)))))
(assert (forall ((x Real)) (! (< (prev_representable x) x) :pattern ((prev_representable x)))))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Real) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Real)
(declare-fun dummy () float)
(assert (forall ((x float)) (! (= (of_real (to_real1 x)) x) :pattern ((to_real1 x)))))
(assert (= (round NearestTiesToEven (- GEN74)) (- GEN75)))
(assert (= (round NearestTiesToEven GEN76) GEN77))
(assert (forall ((x float)) (in_range1 (to_real1 x))))
(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))
(declare-sort weapon_kind 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun to_rep (weapon_kind) Int)
(declare-fun of_rep (Int) weapon_kind)
(declare-fun user_eq1 (weapon_kind weapon_kind) Bool)
(declare-fun dummy1 () weapon_kind)
(assert (forall ((x weapon_kind)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x weapon_kind)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes ()
((weapon_kind__ref (mk_weapon_kind__ref (weapon_kind__content weapon_kind)))))
(define-fun weapon_kind__ref___projection ((a weapon_kind__ref)) weapon_kind
  (weapon_kind__content a))
(declare-fun dps (Int) float)
(declare-fun damage (Int) Int)
(declare-fun bullet (Int) Int)
(declare-fun cooldown (Int) Int)
(assert true)
(assert (forall ((self Int)) (! (=> (in_range2 self) (= (to_real1 (dps self)) (round NearestTiesToEven (/ (round NearestTiesToEven (to_real (damage (bullet self)))) (round NearestTiesToEven (to_real (cooldown self))))))) :pattern ((dps self)))))
(declare-sort integer 0)
(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))
(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(declare-fun user_eq2 (integer integer) Bool)
(declare-fun dummy2 () integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___do_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range3 temp___expr_15)))
(declare-sort bullet_kind 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 4)))
(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun to_rep2 (bullet_kind) Int)
(declare-fun of_rep2 (Int) bullet_kind)
(declare-fun user_eq3 (bullet_kind bullet_kind) Bool)
(declare-fun dummy3 () bullet_kind)
(assert (forall ((x bullet_kind)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x bullet_kind)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes ()
((bullet_kind__ref (mk_bullet_kind__ref (bullet_kind__content bullet_kind)))))
(define-fun bullet_kind__ref___projection ((a bullet_kind__ref)) bullet_kind
  (bullet_kind__content a))
(define-fun dynamic_invariant1 ((temp___expr_180 Int)
  (temp___is_init_177 Bool) (temp___do_constant_178 Bool)
  (temp___do_toplevel_179 Bool)) Bool (=>
                                      (or (= temp___is_init_177 true)
                                      (<= 0 4)) (in_range4 temp___expr_180)))
(assert (forall ((self Int)) (! (=> (in_range4 self) (dynamic_invariant (damage self) true false true)) :pattern ((damage self)))))
(assert (forall ((self Int)) (! (=> (in_range4 self) (= (damage self) (ite (= self GEN78) GEN79 (ite (= self GEN80) GEN81 (ite (= self GEN82) GEN83 (ite (= self GEN84) GEN85 GEN86)))))) :pattern ((damage self)))))
(define-fun dynamic_invariant2 ((temp___expr_186 Int)
  (temp___is_init_183 Bool) (temp___do_constant_184 Bool)
  (temp___do_toplevel_185 Bool)) Bool (=>
                                      (or (= temp___is_init_183 true)
                                      (<= 0 2)) (in_range2 temp___expr_186)))
(assert (forall ((self Int)) (! (=> (in_range2 self) (dynamic_invariant1 (bullet self) true false true)) :pattern ((bullet self)))))
(assert (forall ((self Int)) (! (=> (in_range2 self) (= (bullet self) (ite (= self GEN87) GEN88 (ite (= self GEN89) GEN90 GEN91)))) :pattern ((bullet self)))))
(assert (forall ((self Int)) (! (=> (in_range2 self) (dynamic_invariant (cooldown self) true false true)) :pattern ((cooldown self)))))
(assert (forall ((self Int)) (! (=> (in_range2 self) (= (cooldown self) (ite (= self GEN92) GEN93 (ite (= self GEN94) GEN95 GEN96)))) :pattern ((cooldown self)))))
(assert (not (forall ((w Int)) (=> (and (<= GEN97 w) (<= w GEN98)) (or (= w GEN99) (<= (to_real1 (dps w)) (to_real1 (dps (+ w GEN100)))))))))
(assert (= BAV101 (forall ((x Real)) (= (power x GEN1) GEN2))))
(assert (= BAV102 (forall ((x Real)(n Int)) (=> (<= GEN3 n) (= (power x (+ n GEN4)) (* x (power x n)))))))
(assert (= BAV103 (forall ((x Real)(n Int)) (<= GEN3 n))))
(assert (= BAV104 (forall ((x Real)(n Int)) (= (power x (+ n GEN4)) (* x (power x n))))))
(assert (= BAV105 (forall ((x Real)(n Int)) (=> (< GEN5 n) (= (power x n) (* x (power x (- n GEN6))))))))
(assert (= BAV106 (forall ((x Real)(n Int)) (< GEN5 n))))
(assert (= BAV107 (forall ((x Real)(n Int)) (= (power x n) (* x (power x (- n GEN6)))))))
(assert (= BAV108 (forall ((x Real)) (= (power x GEN7) x))))
(assert (= BAV109 (forall ((x Real)(n Int)(m Int)) (=> (<= GEN8 n) (=> (<= GEN9 m) (= (power x (+ n m)) (* (power x n) (power x m))))))))
(assert (= BAV110 (forall ((x Real)(n Int)(m Int)) (<= GEN8 n))))
(assert (= BAV111 (forall ((x Real)(n Int)(m Int)) (=> (<= GEN9 m) (= (power x (+ n m)) (* (power x n) (power x m)))))))
(assert (= BAV112 (forall ((x Real)(n Int)(m Int)) (<= GEN9 m))))
(assert (= BAV113 (forall ((x Real)(n Int)(m Int)) (= (power x (+ n m)) (* (power x n) (power x m))))))
(assert (= BAV114 (forall ((x Real)(n Int)(m Int)) (=> (<= GEN10 n) (=> (<= GEN11 m) (= (power x (* n m)) (power (power x n) m)))))))
(assert (= BAV115 (forall ((x Real)(n Int)(m Int)) (<= GEN10 n))))
(assert (= BAV116 (forall ((x Real)(n Int)(m Int)) (=> (<= GEN11 m) (= (power x (* n m)) (power (power x n) m))))))
(assert (= BAV117 (forall ((x Real)(n Int)(m Int)) (<= GEN11 m))))
(assert (= BAV118 (forall ((x Real)(n Int)(m Int)) (= (power x (* n m)) (power (power x n) m)))))
(assert (= BAV119 (forall ((x Real)(y Real)(n Int)) (=> (<= GEN12 n) (= (power (* x y) n) (* (power x n) (power y n)))))))
(assert (= BAV120 (forall ((x Real)(y Real)(n Int)) (<= GEN12 n))))
(assert (= BAV121 (forall ((x Real)(y Real)(n Int)) (= (power (* x y) n) (* (power x n) (power y n))))))
(assert (= BAV122 (forall ((x Real)(n Int)) (=> (and (<= GEN13 n) (<= GEN14 x)) (<= GEN15 (power x n))))))
(assert (= BAV123 (forall ((x Real)(n Int)) (and (<= GEN13 n) (<= GEN14 x)))))
(assert (= BAV124 (forall ((x Real)(n Int)) (<= GEN13 n))))
(assert (= BAV125 (forall ((x Real)(n Int)) (<= GEN14 x))))
(assert (= BAV126 (forall ((x Real)(n Int)) (<= GEN15 (power x n)))))
(assert (= BAV127 (forall ((m mode)(x Real)) (=> (<= (ite (>= x GEN16) x (- x)) GEN17) (no_overflow m x)))))
(assert (= BAV128 (forall ((m mode)(x Real)) (<= (ite (>= x GEN16) x (- x)) GEN17))))
(assert (= BAV129 (forall ((m mode)(x Real)) (>= x GEN16))))
(assert (= BAV130 (forall ((m mode)(x Real)(y Real)) (=> (<= x y) (<= (round m x) (round m y))))))
(assert (= BAV131 (forall ((m mode)(x Real)(y Real)) (<= x y))))
(assert (= BAV132 (forall ((m mode)(x Real)(y Real)) (<= (round m x) (round m y)))))
(assert (= BAV133 (forall ((m1 mode)(m2 mode)(x Real)) (= (round m1 (round m2 x)) (round m2 x)))))
(assert (= BAV134 (forall ((m mode)(x single)) (= (round m (value x)) (value x)))))
(assert (= BAV135 (forall ((x single)) (<= (ite (>= (value x) GEN18) (value x) (- (value x))) GEN19))))
(assert (= BAV136 (forall ((x single)) (>= (value x) GEN18))))
(assert (= BAV137 (forall ((m mode)(i Int)) (=> (and (<= (- GEN20) i) (<= i GEN21)) (= (round m (to_real i)) (to_real i))))))
(assert (= BAV138 (forall ((m mode)(i Int)) (and (<= (- GEN20) i) (<= i GEN21)))))
(assert (= BAV139 (forall ((m mode)(i Int)) (<= (- GEN20) i))))
(assert (= BAV140 (forall ((m mode)(i Int)) (<= i GEN21))))
(assert (= BAV141 (forall ((m mode)(i Int)) (= (round m (to_real i)) (to_real i)))))
(assert (= BAV142 (forall ((x Real)) (<= (round Down x) x))))
(assert (= BAV143 (forall ((x Real)) (<= x (round Up x)))))
(assert (= BAV144 (forall ((x Real)) (= (round Down (- x)) (- (round Up x))))))
(assert (= BAV145 (forall ((x Real)) (= (round Up (- x)) (- (round Down x))))))
(assert (= BAV146 (forall ((m mode)(x Real)) (=> (no_overflow m x) (= (value (round_logic m x)) (round m x))))))
(assert (= BAV147 (forall ((m mode)(x Real)) (= (value (round_logic m x)) (round m x)))))
(assert (= BAV148 (forall ((m mode)(x Real)) (=> (<= (ite (>= x GEN22) x (- x)) GEN23) (no_overflow1 m x)))))
(assert (= BAV149 (forall ((m mode)(x Real)) (<= (ite (>= x GEN22) x (- x)) GEN23))))
(assert (= BAV150 (forall ((m mode)(x Real)) (>= x GEN22))))
(assert (= BAV151 (forall ((m mode)(x Real)(y Real)) (=> (<= x y) (<= (round1 m x) (round1 m y))))))
(assert (= BAV152 (forall ((m mode)(x Real)(y Real)) (<= x y))))
(assert (= BAV153 (forall ((m mode)(x Real)(y Real)) (<= (round1 m x) (round1 m y)))))
(assert (= BAV154 (forall ((m1 mode)(m2 mode)(x Real)) (= (round1 m1 (round1 m2 x)) (round1 m2 x)))))
(assert (= BAV155 (forall ((m mode)(x double)) (= (round1 m (value1 x)) (value1 x)))))
(assert (= BAV156 (forall ((x double)) (<= (ite (>= (value1 x) GEN24) (value1 x) (- (value1 x))) GEN25))))
(assert (= BAV157 (forall ((x double)) (>= (value1 x) GEN24))))
(assert (= BAV158 (forall ((m mode)(i Int)) (=> (and (<= (- GEN26) i) (<= i GEN27)) (= (round1 m (to_real i)) (to_real i))))))
(assert (= BAV159 (forall ((m mode)(i Int)) (and (<= (- GEN26) i) (<= i GEN27)))))
(assert (= BAV160 (forall ((m mode)(i Int)) (<= (- GEN26) i))))
(assert (= BAV161 (forall ((m mode)(i Int)) (<= i GEN27))))
(assert (= BAV162 (forall ((m mode)(i Int)) (= (round1 m (to_real i)) (to_real i)))))
(assert (= BAV163 (forall ((x Real)) (<= (round1 Down x) x))))
(assert (= BAV164 (forall ((x Real)) (<= x (round1 Up x)))))
(assert (= BAV165 (forall ((x Real)) (= (round1 Down (- x)) (- (round1 Up x))))))
(assert (= BAV166 (forall ((x Real)) (= (round1 Up (- x)) (- (round1 Down x))))))
(assert (= BAV167 (forall ((m mode)(x Real)) (=> (no_overflow1 m x) (= (value1 (round_logic1 m x)) (round1 m x))))))
(assert (= BAV168 (forall ((m mode)(x Real)) (= (value1 (round_logic1 m x)) (round1 m x)))))
(assert (= BAV169 (forall ((x Real)) (and (<= (- (- x (* (/ GEN28 GEN29) (ite (>= x GEN30) x (- x)))) (/ GEN31 GEN32)) (round NearestTiesToEven x)) (<= (round NearestTiesToEven x) (+ (+ x (* (/ GEN33 GEN34) (ite (>= x GEN35) x (- x)))) (/ GEN36 GEN37)))))))
(assert (= BAV170 (forall ((x Real)) (<= (- (- x (* (/ GEN28 GEN29) (ite (>= x GEN30) x (- x)))) (/ GEN31 GEN32)) (round NearestTiesToEven x)))))
(assert (= BAV171 (forall ((x Real)) (>= x GEN30))))
(assert (= BAV172 (forall ((x Real)) (<= (round NearestTiesToEven x) (+ (+ x (* (/ GEN33 GEN34) (ite (>= x GEN35) x (- x)))) (/ GEN36 GEN37))))))
(assert (= BAV173 (forall ((x Real)) (>= x GEN35))))
(assert (= BAV174 (forall ((x Real)) (and (<= (- (- x (* (/ GEN38 GEN39) (ite (>= x GEN40) x (- x)))) (/ GEN41 GEN42)) (round1 NearestTiesToEven x)) (<= (round1 NearestTiesToEven x) (+ (+ x (* (/ GEN43 GEN44) (ite (>= x GEN45) x (- x)))) (/ GEN46 GEN47)))))))
(assert (= BAV175 (forall ((x Real)) (<= (- (- x (* (/ GEN38 GEN39) (ite (>= x GEN40) x (- x)))) (/ GEN41 GEN42)) (round1 NearestTiesToEven x)))))
(assert (= BAV176 (forall ((x Real)) (>= x GEN40))))
(assert (= BAV177 (forall ((x Real)) (<= (round1 NearestTiesToEven x) (+ (+ x (* (/ GEN43 GEN44) (ite (>= x GEN45) x (- x)))) (/ GEN46 GEN47))))))
(assert (= BAV178 (forall ((x Real)) (>= x GEN45))))
(assert (= BAV179 (forall ((x Real)) (= (round1 NearestTiesToEven (round NearestTiesToEven x)) (round NearestTiesToEven x)))))
(assert (= BAV180 (forall ((x Real)) (=> (< (- x (to_real (to_int x))) (/ GEN48 GEN49)) (= (round2 x) (to_int x))))))
(assert (= BAV181 (forall ((x Real)) (< (- x (to_real (to_int x))) (/ GEN48 GEN49)))))
(assert (= BAV182 (forall ((x Real)) (= (round2 x) (to_int x)))))
(assert (= BAV183 (forall ((x Real)) (=> (< (- (to_real (- GEN50 (to_int (- GEN51 x)))) x) (/ GEN52 GEN53)) (= (round2 x) (- GEN54 (to_int (- GEN55 x))))))))
(assert (= BAV184 (forall ((x Real)) (< (- (to_real (- GEN50 (to_int (- GEN51 x)))) x) (/ GEN52 GEN53)))))
(assert (= BAV185 (forall ((x Real)) (= (round2 x) (- GEN54 (to_int (- GEN55 x)))))))
(assert (= BAV186 (forall ((x Real)) (=> (and (= (- x (to_real (to_int x))) (/ GEN56 GEN57)) (< x GEN58)) (= (round2 x) (to_int x))))))
(assert (= BAV187 (forall ((x Real)) (and (= (- x (to_real (to_int x))) (/ GEN56 GEN57)) (< x GEN58)))))
(assert (= BAV188 (forall ((x Real)) (= (- x (to_real (to_int x))) (/ GEN56 GEN57)))))
(assert (= BAV189 (forall ((x Real)) (< x GEN58))))
(assert (= BAV190 (forall ((x Real)) (= (round2 x) (to_int x)))))
(assert (= BAV191 (forall ((x Real)) (=> (and (= (- (to_real (- GEN59 (to_int (- GEN60 x)))) x) (/ GEN61 GEN62)) (< GEN63 x)) (= (round2 x) (- GEN64 (to_int (- GEN65 x))))))))
(assert (= BAV192 (forall ((x Real)) (and (= (- (to_real (- GEN59 (to_int (- GEN60 x)))) x) (/ GEN61 GEN62)) (< GEN63 x)))))
(assert (= BAV193 (forall ((x Real)) (= (- (to_real (- GEN59 (to_int (- GEN60 x)))) x) (/ GEN61 GEN62)))))
(assert (= BAV194 (forall ((x Real)) (< GEN63 x))))
(assert (= BAV195 (forall ((x Real)) (= (round2 x) (- GEN64 (to_int (- GEN65 x)))))))
(assert (= BAV196 (forall ((i Int)) (= (round2 (to_real i)) i))))
(assert (= BAV197 (forall ((i Int)(x Real)) (=> (and (< (- (/ GEN66 GEN67)) x) (< x (/ GEN68 GEN69))) (= (round2 (+ (to_real i) x)) i)))))
(assert (= BAV198 (forall ((i Int)(x Real)) (and (< (- (/ GEN66 GEN67)) x) (< x (/ GEN68 GEN69))))))
(assert (= BAV199 (forall ((i Int)(x Real)) (< (- (/ GEN66 GEN67)) x))))
(assert (= BAV200 (forall ((i Int)(x Real)) (< x (/ GEN68 GEN69)))))
(assert (= BAV201 (forall ((i Int)(x Real)) (= (round2 (+ (to_real i) x)) i))))
(assert (= BAV202 (forall ((x Real)(y Real)) (=> (<= x y) (<= (round2 x) (round2 y))))))
(assert (= BAV203 (forall ((x Real)(y Real)) (<= x y))))
(assert (= BAV204 (forall ((x Real)(y Real)) (<= (round2 x) (round2 y)))))
(assert (= BAV205 (forall ((x Real)(i Int)) (=> (<= x (to_real i)) (<= (round2 x) i)))))
(assert (= BAV206 (forall ((x Real)(i Int)) (<= x (to_real i)))))
(assert (= BAV207 (forall ((x Real)(i Int)) (<= (round2 x) i))))
(assert (= BAV208 (forall ((x Real)(i Int)) (=> (<= (to_real i) x) (<= i (round2 x))))))
(assert (= BAV209 (forall ((x Real)(i Int)) (<= (to_real i) x))))
(assert (= BAV210 (forall ((x Real)(i Int)) (<= i (round2 x)))))
(assert (= BAV211 (forall ((x Real)) (and (<= (- x (/ GEN70 GEN71)) (to_real (round2 x))) (<= (to_real (round2 x)) (+ x (/ GEN72 GEN73)))))))
(assert (= BAV212 (forall ((x Real)) (<= (- x (/ GEN70 GEN71)) (to_real (round2 x))))))
(assert (= BAV213 (forall ((x Real)) (<= (to_real (round2 x)) (+ x (/ GEN72 GEN73))))))
(assert (= BAV214 (forall ((x Real)) (< x (next_representable x)))))
(assert (= BAV215 (forall ((x Real)) (< (prev_representable x) x))))
(assert (= BAV216 (forall ((x float)) (= (of_real (to_real1 x)) x))))
(assert (= BAV217 (= (round NearestTiesToEven (- GEN74)) (- GEN75))))
(assert (= BAV218 (= (round NearestTiesToEven GEN76) GEN77)))
(assert (= BAV219 (forall ((x weapon_kind)) (= (of_rep (to_rep x)) x))))
(assert (= BAV220 (forall ((x Int)) (=> (in_range2 x) (= (to_rep (of_rep x)) x)))))
(assert (= BAV221 (forall ((x Int)) (= (to_rep (of_rep x)) x))))
(assert (= BAV222 (forall ((self Int)) (=> (in_range2 self) (= (to_real1 (dps self)) (round NearestTiesToEven (/ (round NearestTiesToEven (to_real (damage (bullet self)))) (round NearestTiesToEven (to_real (cooldown self))))))))))
(assert (= BAV223 (forall ((self Int)) (= (to_real1 (dps self)) (round NearestTiesToEven (/ (round NearestTiesToEven (to_real (damage (bullet self)))) (round NearestTiesToEven (to_real (cooldown self)))))))))
(assert (= BAV224 (forall ((x integer)) (= (of_rep1 (to_rep1 x)) x))))
(assert (= BAV225 (forall ((x Int)) (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)))))
(assert (= BAV226 (forall ((x Int)) (= (to_rep1 (of_rep1 x)) x))))
(assert (= BAV227 (forall ((x bullet_kind)) (= (of_rep2 (to_rep2 x)) x))))
(assert (= BAV228 (forall ((x Int)) (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)))))
(assert (= BAV229 (forall ((x Int)) (= (to_rep2 (of_rep2 x)) x))))
(assert (= BAV230 (forall ((self Int)) (=> (in_range4 self) (dynamic_invariant (damage self) true false true)))))
(assert (= BAV231 (forall ((self Int)) (=> (in_range4 self) (= (damage self) (ite (= self GEN78) GEN79 (ite (= self GEN80) GEN81 (ite (= self GEN82) GEN83 (ite (= self GEN84) GEN85 GEN86)))))))))
(assert (= BAV232 (forall ((self Int)) (= (damage self) (ite (= self GEN78) GEN79 (ite (= self GEN80) GEN81 (ite (= self GEN82) GEN83 (ite (= self GEN84) GEN85 GEN86))))))))
(assert (= BAV233 (forall ((self Int)) (= self GEN78))))
(assert (= BAV234 (forall ((self Int)) (= self GEN80))))
(assert (= BAV235 (forall ((self Int)) (= self GEN82))))
(assert (= BAV236 (forall ((self Int)) (= self GEN84))))
(assert (= BAV237 (forall ((self Int)) (=> (in_range2 self) (dynamic_invariant1 (bullet self) true false true)))))
(assert (= BAV238 (forall ((self Int)) (=> (in_range2 self) (= (bullet self) (ite (= self GEN87) GEN88 (ite (= self GEN89) GEN90 GEN91)))))))
(assert (= BAV239 (forall ((self Int)) (= (bullet self) (ite (= self GEN87) GEN88 (ite (= self GEN89) GEN90 GEN91))))))
(assert (= BAV240 (forall ((self Int)) (= self GEN87))))
(assert (= BAV241 (forall ((self Int)) (= self GEN89))))
(assert (= BAV242 (forall ((self Int)) (=> (in_range2 self) (dynamic_invariant (cooldown self) true false true)))))
(assert (= BAV243 (forall ((self Int)) (=> (in_range2 self) (= (cooldown self) (ite (= self GEN92) GEN93 (ite (= self GEN94) GEN95 GEN96)))))))
(assert (= BAV244 (forall ((self Int)) (= (cooldown self) (ite (= self GEN92) GEN93 (ite (= self GEN94) GEN95 GEN96))))))
(assert (= BAV245 (forall ((self Int)) (= self GEN92))))
(assert (= BAV246 (forall ((self Int)) (= self GEN94))))
(assert (= BAV247 (forall ((w Int)) (=> (and (<= GEN97 w) (<= w GEN98)) (or (= w GEN99) (<= (to_real1 (dps w)) (to_real1 (dps (+ w GEN100)))))))))
(assert (= BAV248 (forall ((w Int)) (and (<= GEN97 w) (<= w GEN98)))))
(assert (= BAV249 (forall ((w Int)) (<= GEN97 w))))
(assert (= BAV250 (forall ((w Int)) (<= w GEN98))))
(assert (= BAV251 (forall ((w Int)) (or (= w GEN99) (<= (to_real1 (dps w)) (to_real1 (dps (+ w GEN100))))))))
(assert (= BAV252 (forall ((w Int)) (= w GEN99))))
(assert (= BAV253 (forall ((w Int)) (<= (to_real1 (dps w)) (to_real1 (dps (+ w GEN100)))))))
(check-sat)
(get-info :reason-unknown)