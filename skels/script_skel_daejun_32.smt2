(define-fun pow32 () Int 4294967296)
(declare-const GEN1 Int)
(declare-const GEN2 Int)
(declare-const GEN3 Int)
(declare-const GEN4 Int)
(declare-const GEN5 Int)
(declare-const GEN6 Int)
(declare-const GEN7 Int)
(declare-const GEN8 Int)
(declare-const GEN9 Int)
(declare-const GEN10 Int)
(declare-const GEN11 Int)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const BAV14 Bool)
(declare-const BAV15 Bool)
(declare-const BAV16 Bool)
(declare-const BAV17 Bool)
(declare-const BAV18 Bool)
(declare-const BAV19 Bool)
(declare-const BAV20 Bool)
(declare-const BAV21 Bool)
(declare-const BAV22 Bool)
(declare-const BAV23 Bool)
(declare-const BAV24 Bool)
(define-fun chop ((x Int)) Int (mod x pow32))
(define-fun add ((x Int) (y Int)) Int (chop (+ x y)))
(define-fun mul ((x Int) (y Int)) Int (chop (* x y)))
(declare-fun a () Int)
(assert (and (<= GEN1 a) (< a pow32)))
(declare-fun a03 () Int)
(declare-fun a02 () Int)
(declare-fun a01 () Int)
(declare-fun a00 () Int)
(declare-fun b03 () Int)
(declare-fun b02 () Int)
(declare-fun b01 () Int)
(declare-fun b00 () Int)
(assert (= b00 a))
(assert (= b01 (div b00 GEN2)))
(assert (= b02 (div b01 GEN3)))
(assert (= b03 (div b02 GEN4)))
(assert (= a00 (mod b00 GEN5)))
(assert (= a01 (mod b01 GEN6)))
(assert (= a02 (mod b02 GEN7)))
(assert (= a03 (mod b03 GEN8)))
(declare-fun aprime () Int)
(assert (= aprime (add (mul (add (mul (add (mul a03 GEN9) a02) GEN10) a01) GEN11) a00)))
(assert (not (= a aprime)))
(assert (= BAV12 (and (<= GEN1 a) (< a pow32))))
(assert (= BAV13 (<= GEN1 a)))
(assert (= BAV14 (< a pow32)))
(assert (= BAV15 (= b00 a)))
(assert (= BAV16 (= b01 (div b00 GEN2))))
(assert (= BAV17 (= b02 (div b01 GEN3))))
(assert (= BAV18 (= b03 (div b02 GEN4))))
(assert (= BAV19 (= a00 (mod b00 GEN5))))
(assert (= BAV20 (= a01 (mod b01 GEN6))))
(assert (= BAV21 (= a02 (mod b02 GEN7))))
(assert (= BAV22 (= a03 (mod b03 GEN8))))
(assert (= BAV23 (= aprime (add (mul (add (mul (add (mul a03 GEN9) a02) GEN10) a01) GEN11) a00))))
(assert (= BAV24 (= a aprime)))
(check-sat)