(declare-const BAV1 Bool)
(declare-const BAV2 Bool)
(declare-const BAV3 Bool)
(declare-const BAV4 Bool)
(declare-const BAV5 Bool)
(declare-const BAV6 Bool)
(declare-const BAV7 Bool)
(declare-const BAV8 Bool)
(declare-const BAV9 Bool)
(declare-const BAV10 Bool)
(declare-const BAV11 Bool)
(declare-const BAV12 Bool)
(declare-const BAV13 Bool)
(declare-const GEN11 Int)
(declare-const GEN10 Int)
(declare-const GEN9 Int)
(declare-const GEN8 Int)
(declare-const GEN7 Int)
(declare-const GEN6 Int)
(declare-const GEN5 Int)
(declare-const GEN4 Int)
(declare-const GEN3 Int)
(declare-const GEN2 Int)
(declare-const GEN1 Int)
(define-fun pow32 () Int 4294967296)
(define-fun chop ((x Int)) Int (mod x pow32))
(define-fun add ((x Int) (y Int)) Int (chop (+ x y)))
(define-fun mul ((x Int) (y Int)) Int (chop (* x y)))
(declare-fun a () Int)
(assert (and (<= GEN1 a) (< a pow32)))
(declare-fun a03 () Int)
(declare-fun a02 () Int)
(declare-fun a01 () Int)
(declare-fun a00 () Int)
(declare-fun b03 () Int)
(declare-fun b02 () Int)
(declare-fun b01 () Int)
(declare-fun b00 () Int)
(assert (= b00 a))
(assert (= b01 (div b00 GEN2)))
(assert (= b02 (div b01 GEN3)))
(assert (= b03 (div b02 GEN4)))
(assert (= a00 (mod b00 GEN5)))
(assert (= a01 (mod b01 GEN6)))
(assert (= a02 (mod b02 GEN7)))
(assert (= a03 (mod b03 GEN8)))
(declare-fun aprime () Int)
(assert (= aprime (add (mul (add (mul (add (mul a03 GEN9) a02) GEN10) a01) GEN11) a00)))
(assert (not (= a aprime)))
(assert (= BAV1 (and (<= GEN1 a) (< a pow32))))
(assert (= BAV2 (<= GEN1 a)))
(assert (= BAV3 (< a pow32)))
(assert (= BAV4 (= b00 a)))
(assert (= BAV5 (= b01 (div b00 GEN2))))
(assert (= BAV6 (= b02 (div b01 GEN3))))
(assert (= BAV7 (= b03 (div b02 GEN4))))
(assert (= BAV8 (= a00 (mod b00 GEN5))))
(assert (= BAV9 (= a01 (mod b01 GEN6))))
(assert (= BAV10 (= a02 (mod b02 GEN7))))
(assert (= BAV11 (= a03 (mod b03 GEN8))))
(assert (= BAV12 (= aprime (add (mul (add (mul (add (mul a03 GEN9) a02) GEN10) a01) GEN11) a00))))
(assert (= BAV13 (= a aprime)))
(check-sat)
(get-model)